
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009194  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009364  08009364  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800936c  0800936c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000009c4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a54  20000a54  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021470  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c8  00000000  00000000  00041530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a80  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d0  00000000  00000000  00047678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002873b  00000000  00000000  00048f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d2b  00000000  00000000  00071683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8bec  00000000  00000000  000933ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bf9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072e4  00000000  00000000  0017bfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009328 	.word	0x08009328

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08009328 	.word	0x08009328

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f001 fab1 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f843 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 fa93 	bl	8000a28 <MX_GPIO_Init>
  MX_CRC_Init();
 8000502:	f000 f8a9 	bl	8000658 <MX_CRC_Init>
  MX_FMC_Init();
 8000506:	f000 fa3f 	bl	8000988 <MX_FMC_Init>
  MX_I2C3_Init();
 800050a:	f000 f8b9 	bl	8000680 <MX_I2C3_Init>
  MX_SPI5_Init();
 800050e:	f000 f8f7 	bl	8000700 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000512:	f000 f92b 	bl	800076c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000516:	f000 f9ed 	bl	80008f4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800051a:	f000 fa15 	bl	8000948 <MX_DMA_Init>
  MX_USB_HOST_Init();
 800051e:	f008 fb0d 	bl	8008b3c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000522:	f000 f973 	bl	800080c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 800052a:	230b      	movs	r3, #11
 800052c:	717b      	strb	r3, [r7, #5]
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
	  for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	71bb      	strb	r3, [r7, #6]
 8000532:	e01b      	b.n	800056c <main+0x7c>
	  			// Calculate color
	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8000534:	79ba      	ldrb	r2, [r7, #6]
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	fb12 f303 	smulbb	r3, r2, r3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4413      	add	r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	227f      	movs	r2, #127	; 0x7f
 8000546:	21ff      	movs	r1, #255	; 0xff
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fc09 	bl	8000d60 <hsl_to_rgb>
 800054e:	6038      	str	r0, [r7, #0]
	  			// Set color
	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	b2d9      	uxtb	r1, r3
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	b2da      	uxtb	r2, r3
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	79b8      	ldrb	r0, [r7, #6]
 8000562:	f000 fcef 	bl	8000f44 <led_set_RGB>
	  for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	3301      	adds	r3, #1
 800056a:	71bb      	strb	r3, [r7, #6]
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	2b07      	cmp	r3, #7
 8000570:	d9e0      	bls.n	8000534 <main+0x44>
	  		}
	  		// Write to LED
	    	++angle;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	3301      	adds	r3, #1
 8000576:	71fb      	strb	r3, [r7, #7]
	  		led_render();
 8000578:	f000 fd1c 	bl	8000fb4 <led_render>
	  		// Some delay
	  		HAL_Delay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f001 faaf 	bl	8001ae0 <HAL_Delay>
	  for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8000582:	e7d4      	b.n	800052e <main+0x3e>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f008 fdc2 	bl	800911c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	; 0x48
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fe8f 	bl	8004330 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000618:	f000 fc7a 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f004 f8f1 	bl	8004820 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 fc64 	bl	8000f10 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CRC_Init+0x20>)
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <MX_CRC_Init+0x24>)
 8000660:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_CRC_Init+0x20>)
 8000664:	f001 fb42 	bl	8001cec <HAL_CRC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800066e:	f000 fc4f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000ac 	.word	0x200000ac
 800067c:	40023000 	.word	0x40023000

08000680 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C3_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C3_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_I2C3_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C3_Init+0x74>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006be:	f003 fc77 	bl	8003fb0 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fc22 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006d0:	f003 fdb2 	bl	8004238 <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fc19 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006e2:	f003 fde5 	bl	80042b0 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fc10 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000b4 	.word	0x200000b4
 80006f8:	40005c00 	.word	0x40005c00
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI5_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI5_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI5_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI5_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI5_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI5_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI5_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI5_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI5_Init+0x64>)
 8000734:	2218      	movs	r2, #24
 8000736:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI5_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI5_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI5_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI5_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI5_Init+0x64>)
 8000752:	f004 faeb 	bl	8004d2c <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 fbd8 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000108 	.word	0x20000108
 8000768:	40015000 	.word	0x40015000

0800076c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0x98>)
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_TIM1_Init+0x9c>)
 800078c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0x98>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_TIM1_Init+0x98>)
 80007b6:	f004 fb42 	bl	8004e3e <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007c0:	f000 fba6 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM1_Init+0x98>)
 80007d2:	f005 f8b1 	bl	8005938 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007dc:	f000 fb98 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM1_Init+0x98>)
 80007ee:	f005 fd73 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 fb8a 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000160 	.word	0x20000160
 8000808:	40010000 	.word	0x40010000

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_TIM2_Init+0xe4>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_TIM2_Init+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000852:	223b      	movs	r2, #59	; 0x3b
 8000854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_TIM2_Init+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000864:	f004 faeb 	bl	8004e3e <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800086e:	f000 fb4f 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000880:	f005 f85a 	bl	8005938 <HAL_TIM_ConfigClockSource>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800088a:	f000 fb41 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM2_Init+0xe4>)
 8000890:	f004 fb94 	bl	8004fbc <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800089a:	f000 fb39 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4619      	mov	r1, r3
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM2_Init+0xe4>)
 80008ae:	f005 fd13 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80008b8:	f000 fb2a 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM2_Init+0xe4>)
 80008d4:	f004 ff6e 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80008de:	f000 fb17 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM2_Init+0xe4>)
 80008e4:	f000 fe7e 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3738      	adds	r7, #56	; 0x38
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001a8 	.word	0x200001a8

080008f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART1_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800092c:	f005 fd64 	bl	80063f8 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 faeb 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000250 	.word	0x20000250
 8000944:	40011000 	.word	0x40011000

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_DMA_Init+0x3c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <MX_DMA_Init+0x3c>)
 8000958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DMA_Init+0x3c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2010      	movs	r0, #16
 8000970:	f001 f992 	bl	8001c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000974:	2010      	movs	r0, #16
 8000976:	f001 f9ab 	bl	8001cd0 <HAL_NVIC_EnableIRQ>

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_FMC_Init+0x98>)
 80009a2:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <MX_FMC_Init+0x9c>)
 80009a4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_FMC_Init+0x98>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_FMC_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_FMC_Init+0x98>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_FMC_Init+0x98>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_FMC_Init+0x98>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_FMC_Init+0x98>)
 80009c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009ca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_FMC_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_FMC_Init+0x98>)
 80009d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_FMC_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_FMC_Init+0x98>)
 80009e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009ec:	2307      	movs	r3, #7
 80009ee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009f8:	2303      	movs	r3, #3
 80009fa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_FMC_Init+0x98>)
 8000a0a:	f004 f95b 	bl	8004cc4 <HAL_SDRAM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a14:	f000 fa7c 	bl	8000f10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000294 	.word	0x20000294
 8000a24:	a0000140 	.word	0xa0000140

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
 8000a42:	4bb2      	ldr	r3, [pc, #712]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4ab1      	ldr	r2, [pc, #708]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4baf      	ldr	r3, [pc, #700]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	4bab      	ldr	r3, [pc, #684]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4aaa      	ldr	r2, [pc, #680]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4ba8      	ldr	r3, [pc, #672]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4ba4      	ldr	r3, [pc, #656]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4aa3      	ldr	r2, [pc, #652]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4ba1      	ldr	r3, [pc, #644]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b9d      	ldr	r3, [pc, #628]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a9c      	ldr	r2, [pc, #624]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b9a      	ldr	r3, [pc, #616]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b96      	ldr	r3, [pc, #600]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a95      	ldr	r2, [pc, #596]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b93      	ldr	r3, [pc, #588]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b8f      	ldr	r3, [pc, #572]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a8e      	ldr	r2, [pc, #568]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b88      	ldr	r3, [pc, #544]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b85      	ldr	r3, [pc, #532]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b81      	ldr	r3, [pc, #516]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a80      	ldr	r2, [pc, #512]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b7e      	ldr	r3, [pc, #504]	; (8000d0c <MX_GPIO_Init+0x2e4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2116      	movs	r1, #22
 8000b22:	487b      	ldr	r0, [pc, #492]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000b24:	f001 fe3c 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	4879      	ldr	r0, [pc, #484]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000b2e:	f001 fe37 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b38:	4877      	ldr	r0, [pc, #476]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000b3a:	f001 fe31 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b44:	4875      	ldr	r0, [pc, #468]	; (8000d1c <MX_GPIO_Init+0x2f4>)
 8000b46:	f001 fe2b 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5c:	230e      	movs	r3, #14
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	486e      	ldr	r0, [pc, #440]	; (8000d20 <MX_GPIO_Init+0x2f8>)
 8000b68:	f001 fc6e 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b6c:	2316      	movs	r3, #22
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4863      	ldr	r0, [pc, #396]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000b84:	f001 fc60 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b88:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	485d      	ldr	r0, [pc, #372]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000ba0:	f001 fc52 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ba4:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4854      	ldr	r0, [pc, #336]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000bc2:	f001 fc41 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	484d      	ldr	r0, [pc, #308]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000bde:	f001 fc33 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4846      	ldr	r0, [pc, #280]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f001 fc26 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c0c:	2309      	movs	r3, #9
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4843      	ldr	r0, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000c18:	f001 fc16 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	483d      	ldr	r0, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000c30:	f001 fc0a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000c34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c46:	230e      	movs	r3, #14
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4834      	ldr	r0, [pc, #208]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000c52:	f001 fbf9 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482b      	ldr	r0, [pc, #172]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000c6c:	f001 fbec 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4823      	ldr	r0, [pc, #140]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000c8a:	f001 fbdd 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c8e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ca0:	230e      	movs	r3, #14
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x2f4>)
 8000cac:	f001 fbcc 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000cb0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cc2:	230e      	movs	r3, #14
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000cce:	f001 fbbb 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000cd2:	2348      	movs	r3, #72	; 0x48
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000cee:	f001 fbab 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000cf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d04:	2309      	movs	r3, #9
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
 8000d08:	e00e      	b.n	8000d28 <MX_GPIO_Init+0x300>
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	40021400 	.word	0x40021400
 8000d24:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <MX_GPIO_Init+0x334>)
 8000d30:	f001 fb8a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_GPIO_Init+0x334>)
 8000d4e:	f001 fb7b 	bl	8002448 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021800 	.word	0x40021800

08000d60 <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <hsl_to_rgb+0x1c>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e0b1      	b.n	8000ee0 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3301      	adds	r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000d86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db09      	blt.n	8000da2 <hsl_to_rgb+0x42>
 8000d8e:	89bb      	ldrh	r3, [r7, #12]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	121b      	asrs	r3, r3, #8
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	74fb      	strb	r3, [r7, #19]
 8000da0:	e00a      	b.n	8000db8 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	121b      	asrs	r3, r3, #8
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	0052      	lsls	r2, r2, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000dc8:	897b      	ldrh	r3, [r7, #10]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8000dd0:	7d3b      	ldrb	r3, [r7, #20]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000ddc:	897b      	ldrh	r3, [r7, #10]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <hsl_to_rgb+0x9c>
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	7cfa      	ldrb	r2, [r7, #19]
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	fb02 f303 	mul.w	r3, r2, r3
 8000df4:	121b      	asrs	r3, r3, #8
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	74bb      	strb	r3, [r7, #18]
 8000dfa:	e00a      	b.n	8000e12 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	121b      	asrs	r3, r3, #8
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8000e12:	7cfb      	ldrb	r3, [r7, #19]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	797a      	ldrb	r2, [r7, #5]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000e22:	897b      	ldrh	r3, [r7, #10]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d839      	bhi.n	8000ea2 <hsl_to_rgb+0x142>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <hsl_to_rgb+0xd4>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e49 	.word	0x08000e49
 8000e38:	08000e5b 	.word	0x08000e5b
 8000e3c:	08000e6d 	.word	0x08000e6d
 8000e40:	08000e7f 	.word	0x08000e7f
 8000e44:	08000e91 	.word	0x08000e91
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8000e48:	7cfb      	ldrb	r3, [r7, #19]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	75fb      	strb	r3, [r7, #23]
 8000e4e:	7cbb      	ldrb	r3, [r7, #18]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	75bb      	strb	r3, [r7, #22]
 8000e54:	2300      	movs	r3, #0
 8000e56:	757b      	strb	r3, [r7, #21]
 8000e58:	e02c      	b.n	8000eb4 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000e5a:	7cbb      	ldrb	r3, [r7, #18]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	75fb      	strb	r3, [r7, #23]
 8000e60:	7cfb      	ldrb	r3, [r7, #19]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	75bb      	strb	r3, [r7, #22]
 8000e66:	2300      	movs	r3, #0
 8000e68:	757b      	strb	r3, [r7, #21]
 8000e6a:	e023      	b.n	8000eb4 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	75bb      	strb	r3, [r7, #22]
 8000e76:	7cbb      	ldrb	r3, [r7, #18]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	757b      	strb	r3, [r7, #21]
 8000e7c:	e01a      	b.n	8000eb4 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
 8000e82:	7cbb      	ldrb	r3, [r7, #18]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	75bb      	strb	r3, [r7, #22]
 8000e88:	7cfb      	ldrb	r3, [r7, #19]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	757b      	strb	r3, [r7, #21]
 8000e8e:	e011      	b.n	8000eb4 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8000e90:	7cbb      	ldrb	r3, [r7, #18]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	2300      	movs	r3, #0
 8000e98:	75bb      	strb	r3, [r7, #22]
 8000e9a:	7cfb      	ldrb	r3, [r7, #19]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	757b      	strb	r3, [r7, #21]
 8000ea0:	e008      	b.n	8000eb4 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	75fb      	strb	r3, [r7, #23]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	75bb      	strb	r3, [r7, #22]
 8000eac:	7cbb      	ldrb	r3, [r7, #18]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	757b      	strb	r3, [r7, #21]
 8000eb2:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	7c7b      	ldrb	r3, [r7, #17]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	7dbb      	ldrb	r3, [r7, #22]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	7c7b      	ldrb	r3, [r7, #17]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	440b      	add	r3, r1
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	7c7b      	ldrb	r3, [r7, #17]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	440b      	add	r3, r1
 8000ede:	4313      	orrs	r3, r2
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fdcf 	bl	8001aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>

08000f1a <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	460a      	mov	r2, r1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	4613      	mov	r3, r2
 8000f28:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	121b      	asrs	r3, r3, #8
 8000f34:	b2db      	uxtb	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	4603      	mov	r3, r0
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	717b      	strb	r3, [r7, #5]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	189c      	adds	r4, r3, r2
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	21b0      	movs	r1, #176	; 0xb0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffd3 	bl	8000f1a <scale8>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <led_set_RGB+0x6c>)
 8000f7a:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	3301      	adds	r3, #1
 8000f86:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <led_set_RGB+0x6c>)
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	1c9c      	adds	r4, r3, #2
 8000f96:	793b      	ldrb	r3, [r7, #4]
 8000f98:	21f0      	movs	r1, #240	; 0xf0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffbd 	bl	8000f1a <scale8>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <led_set_RGB+0x6c>)
 8000fa6:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	200002c8 	.word	0x200002c8

08000fb4 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <led_render+0x13c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d105      	bne.n	8000fce <led_render+0x1a>
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <led_render+0x140>)
 8000fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d014      	beq.n	8000ff8 <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e006      	b.n	8000fe2 <led_render+0x2e>
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <led_render+0x144>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	54d1      	strb	r1, [r2, r3]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8000fe6:	d9f5      	bls.n	8000fd4 <led_render+0x20>
    wr_buf_p = 0;
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <led_render+0x13c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4842      	ldr	r0, [pc, #264]	; (80010fc <led_render+0x148>)
 8000ff2:	f004 fa05 	bl	8005400 <HAL_TIM_PWM_Stop_DMA>
    return;
 8000ff6:	e078      	b.n	80010ea <led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	e069      	b.n	80010d2 <led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <led_render+0x14c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	2b00      	cmp	r3, #0
 8001010:	dd01      	ble.n	8001016 <led_render+0x62>
 8001012:	2126      	movs	r1, #38	; 0x26
 8001014:	e000      	b.n	8001018 <led_render+0x64>
 8001016:	2113      	movs	r1, #19
 8001018:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <led_render+0x144>)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	460a      	mov	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <led_render+0x14c>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	461a      	mov	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd01      	ble.n	800103a <led_render+0x86>
 8001036:	2126      	movs	r1, #38	; 0x26
 8001038:	e000      	b.n	800103c <led_render+0x88>
 800103a:	2113      	movs	r1, #19
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3308      	adds	r3, #8
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <led_render+0x144>)
 8001042:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <led_render+0x14c>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	461a      	mov	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001054:	2b00      	cmp	r3, #0
 8001056:	dd01      	ble.n	800105c <led_render+0xa8>
 8001058:	2126      	movs	r1, #38	; 0x26
 800105a:	e000      	b.n	800105e <led_render+0xaa>
 800105c:	2113      	movs	r1, #19
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3310      	adds	r3, #16
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <led_render+0x144>)
 8001064:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <led_render+0x14c>)
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	2b00      	cmp	r3, #0
 8001078:	dd01      	ble.n	800107e <led_render+0xca>
 800107a:	2126      	movs	r1, #38	; 0x26
 800107c:	e000      	b.n	8001080 <led_render+0xcc>
 800107e:	2113      	movs	r1, #19
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3318      	adds	r3, #24
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <led_render+0x144>)
 8001086:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <led_render+0x14c>)
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	461a      	mov	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd01      	ble.n	80010a0 <led_render+0xec>
 800109c:	2126      	movs	r1, #38	; 0x26
 800109e:	e000      	b.n	80010a2 <led_render+0xee>
 80010a0:	2113      	movs	r1, #19
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3320      	adds	r3, #32
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <led_render+0x144>)
 80010a8:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <led_render+0x14c>)
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	461a      	mov	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dd01      	ble.n	80010c2 <led_render+0x10e>
 80010be:	2126      	movs	r1, #38	; 0x26
 80010c0:	e000      	b.n	80010c4 <led_render+0x110>
 80010c2:	2113      	movs	r1, #19
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3328      	adds	r3, #40	; 0x28
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <led_render+0x144>)
 80010ca:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	d992      	bls.n	8000ffe <led_render+0x4a>
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80010d8:	2330      	movs	r3, #48	; 0x30
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <led_render+0x144>)
 80010dc:	2100      	movs	r1, #0
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <led_render+0x148>)
 80010e0:	f003 ffc6 	bl	8005070 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <led_render+0x13c>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000030c 	.word	0x2000030c
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	200002dc 	.word	0x200002dc
 80010fc:	200001a8 	.word	0x200001a8
 8001100:	200002c8 	.word	0x200002c8

08001104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800110c:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d853      	bhi.n	80011bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e047      	b.n	80011aa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	4a34      	ldr	r2, [pc, #208]	; (80011f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	dd01      	ble.n	800113c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001138:	2126      	movs	r1, #38	; 0x26
 800113a:	e000      	b.n	800113e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 800113c:	2113      	movs	r1, #19
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	3301      	adds	r3, #1
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd01      	ble.n	800116c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001168:	2126      	movs	r1, #38	; 0x26
 800116a:	e000      	b.n	800116e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 800116c:	2113      	movs	r1, #19
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3308      	adds	r3, #8
 8001172:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001174:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3302      	adds	r3, #2
 8001182:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd01      	ble.n	800119a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001196:	2126      	movs	r1, #38	; 0x26
 8001198:	e000      	b.n	800119c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800119a:	2113      	movs	r1, #19
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3310      	adds	r3, #16
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011a2:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d9b4      	bls.n	800111a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011b8:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80011ba:	e015      	b.n	80011e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d811      	bhi.n	80011e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	72fb      	strb	r3, [r7, #11]
 80011c8:	e006      	b.n	80011d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	54d1      	strb	r1, [r2, r3]
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	3301      	adds	r3, #1
 80011d6:	72fb      	strb	r3, [r7, #11]
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	2b17      	cmp	r3, #23
 80011dc:	d9f5      	bls.n	80011ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	2000030c 	.word	0x2000030c
 80011f8:	200002c8 	.word	0x200002c8
 80011fc:	200002dc 	.word	0x200002dc

08001200 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d852      	bhi.n	80012b6 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	e046      	b.n	80012a4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	4a37      	ldr	r2, [pc, #220]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	461a      	mov	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001230:	2b00      	cmp	r3, #0
 8001232:	dd01      	ble.n	8001238 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001234:	2126      	movs	r1, #38	; 0x26
 8001236:	e000      	b.n	800123a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001238:	2113      	movs	r1, #19
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3318      	adds	r3, #24
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001240:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3301      	adds	r3, #1
 800124e:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd01      	ble.n	8001266 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001262:	2126      	movs	r1, #38	; 0x26
 8001264:	e000      	b.n	8001268 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001266:	2113      	movs	r1, #19
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3320      	adds	r3, #32
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800126e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	3302      	adds	r3, #2
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	461a      	mov	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd01      	ble.n	8001294 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001290:	2126      	movs	r1, #38	; 0x26
 8001292:	e000      	b.n	8001296 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001294:	2113      	movs	r1, #19
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3328      	adds	r3, #40	; 0x28
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800129c:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d9b5      	bls.n	8001216 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012b2:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80012b4:	e01d      	b.n	80012f2 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d812      	bhi.n	80012e4 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80012be:	2318      	movs	r3, #24
 80012c0:	72fb      	strb	r3, [r7, #11]
 80012c2:	e006      	b.n	80012d2 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	54d1      	strb	r1, [r2, r3]
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	3301      	adds	r3, #1
 80012d0:	72fb      	strb	r3, [r7, #11]
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	2b2f      	cmp	r3, #47	; 0x2f
 80012d6:	d9f5      	bls.n	80012c4 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	e006      	b.n	80012f2 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80012ea:	2100      	movs	r1, #0
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80012ee:	f004 f887 	bl	8005400 <HAL_TIM_PWM_Stop_DMA>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000030c 	.word	0x2000030c
 8001300:	200002c8 	.word	0x200002c8
 8001304:	200002dc 	.word	0x200002dc
 8001308:	200001a8 	.word	0x200001a8

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_CRC_MspInit+0x3c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10d      	bne.n	800138a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_CRC_MspInit+0x40>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_CRC_MspInit+0x40>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_CRC_MspInit+0x40>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023000 	.word	0x40023000
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_I2C_MspInit+0xc4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d14b      	bne.n	800145a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800140c:	2304      	movs	r3, #4
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4815      	ldr	r0, [pc, #84]	; (800146c <HAL_I2C_MspInit+0xcc>)
 8001418:	f001 f816 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142e:	2304      	movs	r3, #4
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_I2C_MspInit+0xd0>)
 800143a:	f001 f805 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005c00 	.word	0x40005c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_SPI_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12c      	bne.n	80014f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x88>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014e0:	2305      	movs	r3, #5
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_SPI_MspInit+0x8c>)
 80014ec:	f000 ffac 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40015000 	.word	0x40015000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021400 	.word	0x40021400

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10e      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001532:	e04b      	b.n	80015cc <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153c:	d146      	bne.n	80015cc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_TIM_Base_MspInit+0xdc>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001562:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001566:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 800157e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001582:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 800158e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001592:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 80015a2:	f000 fbbf 	bl	8001d24 <HAL_DMA_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 80015ac:	f7ff fcb0 	bl	8000f10 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0xd8>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	201c      	movs	r0, #28
 80015c2:	f000 fb69 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c6:	201c      	movs	r0, #28
 80015c8:	f000 fb82 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	200001f0 	.word	0x200001f0
 80015e0:	40026088 	.word	0x40026088

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d11d      	bne.n	8001642 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001622:	2320      	movs	r3, #32
 8001624:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 800163e:	f000 ff03 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12c      	bne.n	80016d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x88>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_UART_MspInit+0x8c>)
 80016cc:	f000 febc 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016f8:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_FMC_MspInit+0x104>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d16f      	bne.n	80017e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_FMC_MspInit+0x104>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_FMC_MspInit+0x108>)
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	4a37      	ldr	r2, [pc, #220]	; (80017ec <HAL_FMC_MspInit+0x108>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6393      	str	r3, [r2, #56]	; 0x38
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_FMC_MspInit+0x108>)
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001722:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001726:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	482c      	ldr	r0, [pc, #176]	; (80017f0 <HAL_FMC_MspInit+0x10c>)
 800173e:	f000 fe83 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001742:	2301      	movs	r3, #1
 8001744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001752:	230c      	movs	r3, #12
 8001754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <HAL_FMC_MspInit+0x110>)
 800175c:	f000 fe74 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001760:	f248 1333 	movw	r3, #33075	; 0x8133
 8001764:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001772:	230c      	movs	r3, #12
 8001774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	481f      	ldr	r0, [pc, #124]	; (80017f8 <HAL_FMC_MspInit+0x114>)
 800177c:	f000 fe64 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001780:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001784:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001792:	230c      	movs	r3, #12
 8001794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <HAL_FMC_MspInit+0x118>)
 800179c:	f000 fe54 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80017a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b2:	230c      	movs	r3, #12
 80017b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <HAL_FMC_MspInit+0x11c>)
 80017bc:	f000 fe44 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80017c0:	2360      	movs	r3, #96	; 0x60
 80017c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d0:	230c      	movs	r3, #12
 80017d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <HAL_FMC_MspInit+0x120>)
 80017da:	f000 fe35 	bl	8002448 <HAL_GPIO_Init>
 80017de:	e000      	b.n	80017e2 <HAL_FMC_MspInit+0xfe>
    return;
 80017e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000310 	.word	0x20000310
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40021800 	.word	0x40021800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001810:	f7ff ff68 	bl	80016e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f000 fa31 	bl	8001c98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001836:	2036      	movs	r0, #54	; 0x36
 8001838:	f000 fa4a 	bl	8001cd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_InitTick+0xa4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_InitTick+0xa4>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_InitTick+0xa4>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001858:	f107 0210 	add.w	r2, r7, #16
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f003 f9fc 	bl	8004c60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001868:	f003 f9d2 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 800186c:	4603      	mov	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	4a13      	ldr	r2, [pc, #76]	; (80018c4 <HAL_InitTick+0xa8>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	3b01      	subs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_InitTick+0xac>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_InitTick+0xb0>)
 8001884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_InitTick+0xac>)
 8001888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800188c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_InitTick+0xac>)
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_InitTick+0xac>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_InitTick+0xac>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <HAL_InitTick+0xac>)
 80018a2:	f003 facc 	bl	8004e3e <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <HAL_InitTick+0xac>)
 80018ae:	f003 fb15 	bl	8004edc <HAL_TIM_Base_Start_IT>
 80018b2:	4603      	mov	r3, r0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	20000314 	.word	0x20000314
 80018cc:	40001000 	.word	0x40001000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA1_Stream5_IRQHandler+0x10>)
 800192e:	f000 fb21 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001f0 	.word	0x200001f0

0800193c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM2_IRQHandler+0x10>)
 8001942:	f003 fe2f 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001a8 	.word	0x200001a8

08001950 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <TIM6_DAC_IRQHandler+0x10>)
 8001956:	f003 fe25 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000314 	.word	0x20000314

08001964 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <OTG_HS_IRQHandler+0x10>)
 800196a:	f001 f99d 	bl	8002ca8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000740 	.word	0x20000740

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f007 fb7e 	bl	80090a8 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20030000 	.word	0x20030000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	2000035c 	.word	0x2000035c
 80019e0:	20000a58 	.word	0x20000a58

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f007 fb3d 	bl	80090b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7fe fd59 	bl	80004f0 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a4c:	08009374 	.word	0x08009374
  ldr r2, =_sbss
 8001a50:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a54:	20000a54 	.word	0x20000a54

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f8fc 	bl	8001c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f7ff fec6 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fc3c 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000360 	.word	0x20000360

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000360 	.word	0x20000360

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff4c 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001caa:	f7ff ff61 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	6978      	ldr	r0, [r7, #20]
 8001cb6:	f7ff ffb1 	bl	8001c1c <NVIC_EncodePriority>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff80 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff54 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	795b      	ldrb	r3, [r3, #5]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fb24 	bl	800135c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff feca 	bl	8001ac8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e099      	b.n	8001e74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	e00f      	b.n	8001d82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff feb1 	bl	8001ac8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d908      	bls.n	8001d82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e078      	b.n	8001e74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e8      	bne.n	8001d62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_DMA_Init+0x158>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4313      	orrs	r3, r2
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d117      	bne.n	8001e46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fa91 	bl	8002350 <DMA_CheckFifoParam>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e42:	2301      	movs	r3, #1
 8001e44:	e016      	b.n	8001e74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa48 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001e54:	4603      	mov	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	223f      	movs	r2, #63	; 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f010803f 	.word	0xf010803f

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x26>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e040      	b.n	8001f28 <HAL_DMA_Start_IT+0xa8>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d12f      	bne.n	8001f1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f9da 	bl	8002288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0216 	orr.w	r2, r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0208 	orr.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e005      	b.n	8001f26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f80:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_DMA_IRQHandler+0x248>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a8e      	ldr	r2, [pc, #568]	; (80021c0 <HAL_DMA_IRQHandler+0x24c>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2204      	movs	r2, #4
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2204      	movs	r2, #4
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2210      	movs	r2, #16
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d043      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2210      	movs	r2, #16
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e01f      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2220      	movs	r2, #32
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 808f 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8087 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2220      	movs	r2, #32
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d136      	bne.n	800218c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0216 	bic.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_DMA_IRQHandler+0x1da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07e      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
        }
        return;
 800218a:	e079      	b.n	8002280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e02c      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
 80021ba:	bf00      	nop
 80021bc:	20000000 	.word	0x20000000
 80021c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e01e      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10f      	bne.n	8002204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d307      	bcc.n	800225c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f2      	bne.n	8002240 <HAL_DMA_IRQHandler+0x2cc>
 800225a:	e000      	b.n	800225e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800225c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
 800227e:	e000      	b.n	8002282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002280:	bf00      	nop
    }
  }
}
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	0800935c 	.word	0x0800935c

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e177      	b.n	8002754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8166 	bne.w	800274e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80c0 	beq.w	800274e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_GPIO_Init+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a61      	ldr	r2, [pc, #388]	; (8002770 <HAL_GPIO_Init+0x328>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x32c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d037      	beq.n	8002686 <HAL_GPIO_Init+0x23e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_GPIO_Init+0x330>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d031      	beq.n	8002682 <HAL_GPIO_Init+0x23a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_GPIO_Init+0x334>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02b      	beq.n	800267e <HAL_GPIO_Init+0x236>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x338>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x232>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x33c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x22e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a53      	ldr	r2, [pc, #332]	; (8002788 <HAL_GPIO_Init+0x340>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x22a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x344>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x226>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_GPIO_Init+0x348>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x222>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_GPIO_Init+0x34c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x21e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4f      	ldr	r2, [pc, #316]	; (8002798 <HAL_GPIO_Init+0x350>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x21a>
 800265e:	2309      	movs	r3, #9
 8002660:	e012      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002662:	230a      	movs	r3, #10
 8002664:	e010      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002666:	2308      	movs	r3, #8
 8002668:	e00e      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266a:	2307      	movs	r3, #7
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266e:	2306      	movs	r3, #6
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x328>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_GPIO_Init+0x354>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ca:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_GPIO_Init+0x354>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_GPIO_Init+0x354>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_GPIO_Init+0x354>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_GPIO_Init+0x354>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_GPIO_Init+0x354>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_GPIO_Init+0x354>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_GPIO_Init+0x354>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f ae84 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021400 	.word	0x40021400
 800278c:	40021800 	.word	0x40021800
 8002790:	40021c00 	.word	0x40021c00
 8002794:	40022000 	.word	0x40022000
 8002798:	40022400 	.word	0x40022400
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d4:	b08f      	sub	sp, #60	; 0x3c
 80027d6:	af0a      	add	r7, sp, #40	; 0x28
 80027d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e054      	b.n	800288e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f006 f9f0 	bl	8008be4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 f9e2 	bl	8006bec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	687e      	ldr	r6, [r7, #4]
 8002830:	466d      	mov	r5, sp
 8002832:	f106 0410 	add.w	r4, r6, #16
 8002836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002842:	e885 0003 	stmia.w	r5, {r0, r1}
 8002846:	1d33      	adds	r3, r6, #4
 8002848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284a:	6838      	ldr	r0, [r7, #0]
 800284c:	f004 f95c 	bl	8006b08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f004 f9d9 	bl	8006c0e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f004 fb62 	bl	8006f48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002896 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b089      	sub	sp, #36	; 0x24
 800289a:	af04      	add	r7, sp, #16
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	4608      	mov	r0, r1
 80028a0:	4611      	mov	r1, r2
 80028a2:	461a      	mov	r2, r3
 80028a4:	4603      	mov	r3, r0
 80028a6:	70fb      	strb	r3, [r7, #3]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70bb      	strb	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_HCD_HC_Init+0x28>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e076      	b.n	80029ac <HAL_HCD_HC_Init+0x116>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333d      	adds	r3, #61	; 0x3d
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3338      	adds	r3, #56	; 0x38
 80028e6:	787a      	ldrb	r2, [r7, #1]
 80028e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3340      	adds	r3, #64	; 0x40
 80028f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3339      	adds	r3, #57	; 0x39
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	333f      	adds	r3, #63	; 0x3f
 800291c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	78ba      	ldrb	r2, [r7, #2]
 8002926:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800292a:	b2d0      	uxtb	r0, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	333a      	adds	r3, #58	; 0x3a
 8002938:	4602      	mov	r2, r0
 800293a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800293c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002940:	2b00      	cmp	r3, #0
 8002942:	da09      	bge.n	8002958 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	333b      	adds	r3, #59	; 0x3b
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e008      	b.n	800296a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	333b      	adds	r3, #59	; 0x3b
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	333c      	adds	r3, #60	; 0x3c
 8002978:	f897 2020 	ldrb.w	r2, [r7, #32]
 800297c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	787c      	ldrb	r4, [r7, #1]
 8002984:	78ba      	ldrb	r2, [r7, #2]
 8002986:	78f9      	ldrb	r1, [r7, #3]
 8002988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4623      	mov	r3, r4
 800299a:	f004 fc31 	bl	8007200 <USB_HC_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}

080029b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_HCD_HC_Halt+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00f      	b.n	80029f2 <HAL_HCD_HC_Halt+0x3e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fe81 	bl	80076ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	70fb      	strb	r3, [r7, #3]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70bb      	strb	r3, [r7, #2]
 8002a12:	4613      	mov	r3, r2
 8002a14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333b      	adds	r3, #59	; 0x3b
 8002a24:	78ba      	ldrb	r2, [r7, #2]
 8002a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	333f      	adds	r3, #63	; 0x3f
 8002a36:	787a      	ldrb	r2, [r7, #1]
 8002a38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a3a:	7c3b      	ldrb	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d112      	bne.n	8002a66 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3342      	adds	r3, #66	; 0x42
 8002a4e:	2203      	movs	r2, #3
 8002a50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	333d      	adds	r3, #61	; 0x3d
 8002a60:	7f3a      	ldrb	r2, [r7, #28]
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e008      	b.n	8002a78 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3342      	adds	r3, #66	; 0x42
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	f200 80c6 	bhi.w	8002c0c <HAL_HCD_HC_SubmitRequest+0x210>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002bf9 	.word	0x08002bf9
 8002a90:	08002afd 	.word	0x08002afd
 8002a94:	08002b7b 	.word	0x08002b7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a98:	7c3b      	ldrb	r3, [r7, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 80b8 	bne.w	8002c10 <HAL_HCD_HC_SubmitRequest+0x214>
 8002aa0:	78bb      	ldrb	r3, [r7, #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 80b4 	bne.w	8002c10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002aa8:	8b3b      	ldrh	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3355      	adds	r3, #85	; 0x55
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3355      	adds	r3, #85	; 0x55
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3342      	adds	r3, #66	; 0x42
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ae6:	e093      	b.n	8002c10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3342      	adds	r3, #66	; 0x42
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
      break;
 8002afa:	e089      	b.n	8002c10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002afc:	78bb      	ldrb	r3, [r7, #2]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3355      	adds	r3, #85	; 0x55
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3342      	adds	r3, #66	; 0x42
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b28:	e073      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3342      	adds	r3, #66	; 0x42
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
      break;
 8002b3c:	e069      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3354      	adds	r3, #84	; 0x54
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3342      	adds	r3, #66	; 0x42
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
      break;
 8002b64:	e055      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3342      	adds	r3, #66	; 0x42
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
      break;
 8002b78:	e04b      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b7a:	78bb      	ldrb	r3, [r7, #2]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11d      	bne.n	8002bbc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3355      	adds	r3, #85	; 0x55
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3342      	adds	r3, #66	; 0x42
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ba6:	e034      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3342      	adds	r3, #66	; 0x42
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e02a      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3354      	adds	r3, #84	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3342      	adds	r3, #66	; 0x42
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
      break;
 8002be2:	e016      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3342      	adds	r3, #66	; 0x42
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
      break;
 8002bf6:	e00c      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3342      	adds	r3, #66	; 0x42
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3344      	adds	r3, #68	; 0x44
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	8b3a      	ldrh	r2, [r7, #24]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	fb00 f303 	mul.w	r3, r0, r3
 8002c30:	440b      	add	r3, r1
 8002c32:	334c      	adds	r3, #76	; 0x4c
 8002c34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3350      	adds	r3, #80	; 0x50
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3339      	adds	r3, #57	; 0x39
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3361      	adds	r3, #97	; 0x61
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	222c      	movs	r2, #44	; 0x2c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	3338      	adds	r3, #56	; 0x38
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	18d1      	adds	r1, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	f004 fbd4 	bl	8007444 <USB_HC_StartXfer>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 f8ff 	bl	8006ec2 <USB_GetMode>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 80f6 	bne.w	8002eb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 f8e3 	bl	8006e9c <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80ec 	beq.w	8002eb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 f8da 	bl	8006e9c <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf2:	d104      	bne.n	8002cfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 f8ca 	bl	8006e9c <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d104      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 f8ba 	bl	8006e9c <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d32:	d104      	bne.n	8002d3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 f8aa 	bl	8006e9c <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f89c 	bl	8006e9c <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6e:	d11c      	bne.n	8002daa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	6938      	ldr	r0, [r7, #16]
 8002d8e:	f003 ff8b 	bl	8006ca8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d92:	6938      	ldr	r0, [r7, #16]
 8002d94:	f003 ffbc 	bl	8006d10 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f992 	bl	80070c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f005 ff97 	bl	8008cd8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 f874 	bl	8006e9c <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbe:	d102      	bne.n	8002dc6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 f882 	bl	8003eca <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 f866 	bl	8006e9c <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d106      	bne.n	8002de8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 ff60 	bl	8008ca0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2208      	movs	r2, #8
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 f855 	bl	8006e9c <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d101      	bne.n	8002e00 <HAL_HCD_IRQHandler+0x158>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_HCD_IRQHandler+0x15a>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d012      	beq.n	8002e2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0210 	bic.w	r2, r2, #16
 8002e14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ff85 	bl	8003d26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0210 	orr.w	r2, r2, #16
 8002e2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 f833 	bl	8006e9c <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e40:	d13a      	bne.n	8002eb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fc3e 	bl	80076c8 <USB_HC_ReadInterrupt>
 8002e4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e025      	b.n	8002ea0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d018      	beq.n	8002e9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7e:	d106      	bne.n	8002e8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f88f 	bl	8002faa <HCD_HC_IN_IRQHandler>
 8002e8c:	e005      	b.n	8002e9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fbdd 	bl	8003654 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3d4      	bcc.n	8002e54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	e000      	b.n	8002eb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8002eb6:	bf00      	nop
    }
  }
}
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_HCD_Start+0x16>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e013      	b.n	8002efc <HAL_HCD_Start+0x3e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 f92a 	bl	800713c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fe6c 	bl	8006bca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_HCD_Stop+0x16>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e00d      	b.n	8002f36 <HAL_HCD_Stop+0x32>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fd18 	bl	800795c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3350      	adds	r3, #80	; 0x50
 8002f80:	681b      	ldr	r3, [r3, #0]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 f91e 	bl	80071dc <USB_GetCurrentFrame>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d11a      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2304      	movs	r3, #4
 8002fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3361      	adds	r3, #97	; 0x61
 8002ffa:	2206      	movs	r2, #6
 8002ffc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fb6e 	bl	80076ea <USB_HC_Halt>
 800300e:	e0af      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003026:	d11b      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	461a      	mov	r2, r3
 8003036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3361      	adds	r3, #97	; 0x61
 800304a:	2207      	movs	r2, #7
 800304c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fb46 	bl	80076ea <USB_HC_Halt>
 800305e:	e087      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b20      	cmp	r3, #32
 8003074:	d109      	bne.n	800308a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2320      	movs	r3, #32
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e072      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11a      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2308      	movs	r3, #8
 80030b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3361      	adds	r3, #97	; 0x61
 80030c0:	2205      	movs	r2, #5
 80030c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fb0b 	bl	80076ea <USB_HC_Halt>
 80030d4:	e04c      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d11b      	bne.n	8003126 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	461a      	mov	r2, r3
 80030fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	2208      	movs	r2, #8
 8003112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f004 fae3 	bl	80076ea <USB_HC_Halt>
 8003124:	e024      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d119      	bne.n	8003170 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3361      	adds	r3, #97	; 0x61
 800315c:	2206      	movs	r2, #6
 800315e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fabd 	bl	80076ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003186:	d112      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f004 faa9 	bl	80076ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031ac:	e24e      	b.n	800364c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 80df 	bne.w	8003384 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3348      	adds	r3, #72	; 0x48
 80031dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	0159      	lsls	r1, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	440b      	add	r3, r1
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	202c      	movs	r0, #44	; 0x2c
 80031f8:	fb00 f303 	mul.w	r3, r0, r3
 80031fc:	440b      	add	r3, r1
 80031fe:	3350      	adds	r3, #80	; 0x50
 8003200:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3361      	adds	r3, #97	; 0x61
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	335c      	adds	r3, #92	; 0x5c
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	2301      	movs	r3, #1
 8003236:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	333f      	adds	r3, #63	; 0x3f
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	333f      	adds	r3, #63	; 0x3f
 800325a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800325c:	2b02      	cmp	r3, #2
 800325e:	d111      	bne.n	8003284 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f004 fa3d 	bl	80076ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2310      	movs	r3, #16
 8003280:	6093      	str	r3, [r2, #8]
 8003282:	e03a      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	333f      	adds	r3, #63	; 0x3f
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d009      	beq.n	80032ac <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	333f      	adds	r3, #63	; 0x3f
 80032a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d126      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3360      	adds	r3, #96	; 0x60
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	b2d9      	uxtb	r1, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	202c      	movs	r0, #44	; 0x2c
 80032e8:	fb00 f303 	mul.w	r3, r0, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f005 fcfd 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12b      	bne.n	800335a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3348      	adds	r3, #72	; 0x48
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	202c      	movs	r0, #44	; 0x2c
 8003318:	fb00 f202 	mul.w	r2, r0, r2
 800331c:	440a      	add	r2, r1
 800331e:	3240      	adds	r2, #64	; 0x40
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	fbb3 f3f2 	udiv	r3, r3, r2
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 818e 	beq.w	800364c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3354      	adds	r3, #84	; 0x54
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	4602      	mov	r2, r0
 8003356:	701a      	strb	r2, [r3, #0]
}
 8003358:	e178      	b.n	800364c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3354      	adds	r3, #84	; 0x54
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3354      	adds	r3, #84	; 0x54
 800337e:	4602      	mov	r2, r0
 8003380:	701a      	strb	r2, [r3, #0]
}
 8003382:	e163      	b.n	800364c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 80f6 	bne.w	8003588 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3361      	adds	r3, #97	; 0x61
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d109      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e0c9      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3361      	adds	r3, #97	; 0x61
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d109      	bne.n	80033ec <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	2205      	movs	r2, #5
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e0b5      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	3361      	adds	r3, #97	; 0x61
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d009      	beq.n	8003414 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003410:	2b08      	cmp	r3, #8
 8003412:	d150      	bne.n	80034b6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	335c      	adds	r3, #92	; 0x5c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	202c      	movs	r0, #44	; 0x2c
 800342c:	fb00 f303 	mul.w	r3, r0, r3
 8003430:	440b      	add	r3, r1
 8003432:	335c      	adds	r3, #92	; 0x5c
 8003434:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d912      	bls.n	8003470 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	335c      	adds	r3, #92	; 0x5c
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3360      	adds	r3, #96	; 0x60
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800346e:	e073      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003498:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034a0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034b4:	e050      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3361      	adds	r3, #97	; 0x61
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d122      	bne.n	8003510 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	2202      	movs	r2, #2
 80034da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e023      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3361      	adds	r3, #97	; 0x61
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b07      	cmp	r3, #7
 8003522:	d119      	bne.n	8003558 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	335c      	adds	r3, #92	; 0x5c
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	202c      	movs	r0, #44	; 0x2c
 800353c:	fb00 f303 	mul.w	r3, r0, r3
 8003540:	440b      	add	r3, r1
 8003542:	335c      	adds	r3, #92	; 0x5c
 8003544:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3360      	adds	r3, #96	; 0x60
 8003554:	2204      	movs	r2, #4
 8003556:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	461a      	mov	r2, r3
 8003566:	2302      	movs	r3, #2
 8003568:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	b2d9      	uxtb	r1, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	202c      	movs	r0, #44	; 0x2c
 8003574:	fb00 f303 	mul.w	r3, r0, r3
 8003578:	4413      	add	r3, r2
 800357a:	3360      	adds	r3, #96	; 0x60
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 fbb7 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003586:	e061      	b.n	800364c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d156      	bne.n	800364c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	333f      	adds	r3, #63	; 0x3f
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d111      	bne.n	80035d6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 f88b 	bl	80076ea <USB_HC_Halt>
 80035d4:	e031      	b.n	800363a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	333f      	adds	r3, #63	; 0x3f
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	333f      	adds	r3, #63	; 0x3f
 80035f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d11d      	bne.n	800363a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3361      	adds	r3, #97	; 0x61
 8003626:	2203      	movs	r2, #3
 8003628:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f004 f858 	bl	80076ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	2310      	movs	r3, #16
 800364a:	6093      	str	r3, [r2, #8]
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11a      	bne.n	80036ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	461a      	mov	r2, r3
 8003692:	2304      	movs	r3, #4
 8003694:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3361      	adds	r3, #97	; 0x61
 80036a4:	2206      	movs	r2, #6
 80036a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 f819 	bl	80076ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80036b8:	e331      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d12e      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	2320      	movs	r3, #32
 80036e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	333d      	adds	r3, #61	; 0x3d
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	f040 8313 	bne.w	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	333d      	adds	r3, #61	; 0x3d
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3360      	adds	r3, #96	; 0x60
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f003 ffdf 	bl	80076ea <USB_HC_Halt>
}
 800372c:	e2f7      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d112      	bne.n	800376c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003758:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f003 ffc0 	bl	80076ea <USB_HC_Halt>
}
 800376a:	e2d8      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d140      	bne.n	8003804 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	335c      	adds	r3, #92	; 0x5c
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d111      	bne.n	80037ce <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	333d      	adds	r3, #61	; 0x3d
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2301      	movs	r3, #1
 80037de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3361      	adds	r3, #97	; 0x61
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 ff74 	bl	80076ea <USB_HC_Halt>
}
 8003802:	e28c      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d12c      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3361      	adds	r3, #97	; 0x61
 8003828:	2204      	movs	r2, #4
 800382a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	333d      	adds	r3, #61	; 0x3d
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	335c      	adds	r3, #92	; 0x5c
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f003 ff45 	bl	80076ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	6093      	str	r3, [r2, #8]
}
 8003872:	e254      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	d11a      	bne.n	80038c0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003896:	461a      	mov	r2, r3
 8003898:	2308      	movs	r3, #8
 800389a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3361      	adds	r3, #97	; 0x61
 80038aa:	2205      	movs	r2, #5
 80038ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 ff16 	bl	80076ea <USB_HC_Halt>
}
 80038be:	e22e      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d140      	bne.n	8003958 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	335c      	adds	r3, #92	; 0x5c
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	2203      	movs	r2, #3
 80038f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	333d      	adds	r3, #61	; 0x3d
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	333c      	adds	r3, #60	; 0x3c
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	333d      	adds	r3, #61	; 0x3d
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fed3 	bl	80076ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	461a      	mov	r2, r3
 8003952:	2310      	movs	r3, #16
 8003954:	6093      	str	r3, [r2, #8]
}
 8003956:	e1e2      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d164      	bne.n	8003a38 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d111      	bne.n	800399a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3361      	adds	r3, #97	; 0x61
 8003984:	2206      	movs	r2, #6
 8003986:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fea9 	bl	80076ea <USB_HC_Halt>
 8003998:	e044      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	335c      	adds	r3, #92	; 0x5c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	202c      	movs	r0, #44	; 0x2c
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	440b      	add	r3, r1
 80039b8:	335c      	adds	r3, #92	; 0x5c
 80039ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	335c      	adds	r3, #92	; 0x5c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d920      	bls.n	8003a12 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	335c      	adds	r3, #92	; 0x5c
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3360      	adds	r3, #96	; 0x60
 80039f0:	2204      	movs	r2, #4
 80039f2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	b2d9      	uxtb	r1, r3
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	202c      	movs	r0, #44	; 0x2c
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3360      	adds	r3, #96	; 0x60
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 f972 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a10:	e008      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3360      	adds	r3, #96	; 0x60
 8003a20:	2202      	movs	r2, #2
 8003a22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	6093      	str	r3, [r2, #8]
}
 8003a36:	e172      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d11b      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3361      	adds	r3, #97	; 0x61
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fe3c 	bl	80076ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a84:	6093      	str	r3, [r2, #8]
}
 8003a86:	e14a      	b.n	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	f040 813f 	bne.w	8003d1e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3361      	adds	r3, #97	; 0x61
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d17d      	bne.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	333f      	adds	r3, #63	; 0x3f
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d00a      	beq.n	8003af0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	333f      	adds	r3, #63	; 0x3f
 8003ae8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	f040 8100 	bne.w	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d113      	bne.n	8003b20 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3355      	adds	r3, #85	; 0x55
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	f083 0301 	eor.w	r3, r3, #1
 8003b0c:	b2d8      	uxtb	r0, r3
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	3355      	adds	r3, #85	; 0x55
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 80e3 	bne.w	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	334c      	adds	r3, #76	; 0x4c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80d8 	beq.w	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	334c      	adds	r3, #76	; 0x4c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	202c      	movs	r0, #44	; 0x2c
 8003b56:	fb00 f202 	mul.w	r2, r0, r2
 8003b5a:	440a      	add	r2, r1
 8003b5c:	3240      	adds	r2, #64	; 0x40
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	3b01      	subs	r3, #1
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	202c      	movs	r0, #44	; 0x2c
 8003b6a:	fb00 f202 	mul.w	r2, r0, r2
 8003b6e:	440a      	add	r2, r1
 8003b70:	3240      	adds	r2, #64	; 0x40
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b5 	beq.w	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3355      	adds	r3, #85	; 0x55
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2d8      	uxtb	r0, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3355      	adds	r3, #85	; 0x55
 8003baa:	4602      	mov	r2, r0
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e09f      	b.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3361      	adds	r3, #97	; 0x61
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d109      	bne.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3360      	adds	r3, #96	; 0x60
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e08b      	b.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3361      	adds	r3, #97	; 0x61
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d109      	bne.n	8003c00 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3360      	adds	r3, #96	; 0x60
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e077      	b.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3361      	adds	r3, #97	; 0x61
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d109      	bne.n	8003c28 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3360      	adds	r3, #96	; 0x60
 8003c22:	2205      	movs	r2, #5
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e063      	b.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3361      	adds	r3, #97	; 0x61
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b06      	cmp	r3, #6
 8003c3a:	d009      	beq.n	8003c50 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3361      	adds	r3, #97	; 0x61
 8003c4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d14f      	bne.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	335c      	adds	r3, #92	; 0x5c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	202c      	movs	r0, #44	; 0x2c
 8003c68:	fb00 f303 	mul.w	r3, r0, r3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	335c      	adds	r3, #92	; 0x5c
 8003c70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	335c      	adds	r3, #92	; 0x5c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d912      	bls.n	8003cac <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	335c      	adds	r3, #92	; 0x5c
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3360      	adds	r3, #96	; 0x60
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e021      	b.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3360      	adds	r3, #96	; 0x60
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	461a      	mov	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2302      	movs	r3, #2
 8003d00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	b2d9      	uxtb	r1, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	202c      	movs	r0, #44	; 0x2c
 8003d0c:	fb00 f303 	mul.w	r3, r0, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3360      	adds	r3, #96	; 0x60
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f004 ffeb 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d1e:	bf00      	nop
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	; 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	0c5b      	lsrs	r3, r3, #17
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d004      	beq.n	8003d6c <HCD_RXQLVL_IRQHandler+0x46>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	f000 80a9 	beq.w	8003ebc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d6a:	e0aa      	b.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a6 	beq.w	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3344      	adds	r3, #68	; 0x44
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 809b 	beq.w	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3350      	adds	r3, #80	; 0x50
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	441a      	add	r2, r3
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	202c      	movs	r0, #44	; 0x2c
 8003da4:	fb00 f303 	mul.w	r3, r0, r3
 8003da8:	440b      	add	r3, r1
 8003daa:	334c      	adds	r3, #76	; 0x4c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d87a      	bhi.n	8003ea8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3344      	adds	r3, #68	; 0x44
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f003 f80e 	bl	8006dec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3344      	adds	r3, #68	; 0x44
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	441a      	add	r2, r3
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	202c      	movs	r0, #44	; 0x2c
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	440b      	add	r3, r1
 8003df0:	3344      	adds	r3, #68	; 0x44
 8003df2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3350      	adds	r3, #80	; 0x50
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	441a      	add	r2, r3
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	202c      	movs	r0, #44	; 0x2c
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	440b      	add	r3, r1
 8003e14:	3350      	adds	r3, #80	; 0x50
 8003e16:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	0cdb      	lsrs	r3, r3, #19
 8003e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3340      	adds	r3, #64	; 0x40
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d13c      	bne.n	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d039      	beq.n	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e62:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e6a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3354      	adds	r3, #84	; 0x54
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2d8      	uxtb	r0, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3354      	adds	r3, #84	; 0x54
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	701a      	strb	r2, [r3, #0]
      break;
 8003ea6:	e00b      	b.n	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3360      	adds	r3, #96	; 0x60
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	701a      	strb	r2, [r3, #0]
      break;
 8003eba:	e001      	b.n	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ec0:	bf00      	nop
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ef6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d10b      	bne.n	8003f1a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d102      	bne.n	8003f12 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f004 fed5 	bl	8008cbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d132      	bne.n	8003f8a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d126      	bne.n	8003f84 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d113      	bne.n	8003f66 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f48:	d106      	bne.n	8003f58 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 f8b9 	bl	80070c8 <USB_InitFSLSPClkSel>
 8003f56:	e011      	b.n	8003f7c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f003 f8b2 	bl	80070c8 <USB_InitFSLSPClkSel>
 8003f64:	e00a      	b.n	8003f7c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d106      	bne.n	8003f7c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f74:	461a      	mov	r2, r3
 8003f76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f7a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f004 fec7 	bl	8008d10 <HAL_HCD_PortEnabled_Callback>
 8003f82:	e002      	b.n	8003f8a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f004 fed1 	bl	8008d2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d103      	bne.n	8003f9c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f043 0320 	orr.w	r3, r3, #32
 8003f9a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e12b      	b.n	800421a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd f9e2 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004014:	f000 fdfc 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8004018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4a81      	ldr	r2, [pc, #516]	; (8004224 <HAL_I2C_Init+0x274>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d807      	bhi.n	8004034 <HAL_I2C_Init+0x84>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a80      	ldr	r2, [pc, #512]	; (8004228 <HAL_I2C_Init+0x278>)
 8004028:	4293      	cmp	r3, r2
 800402a:	bf94      	ite	ls
 800402c:	2301      	movls	r3, #1
 800402e:	2300      	movhi	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e006      	b.n	8004042 <HAL_I2C_Init+0x92>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a7d      	ldr	r2, [pc, #500]	; (800422c <HAL_I2C_Init+0x27c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	bf94      	ite	ls
 800403c:	2301      	movls	r3, #1
 800403e:	2300      	movhi	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e0e7      	b.n	800421a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a78      	ldr	r2, [pc, #480]	; (8004230 <HAL_I2C_Init+0x280>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0c9b      	lsrs	r3, r3, #18
 8004054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <HAL_I2C_Init+0x274>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d802      	bhi.n	8004084 <HAL_I2C_Init+0xd4>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3301      	adds	r3, #1
 8004082:	e009      	b.n	8004098 <HAL_I2C_Init+0xe8>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	4a69      	ldr	r2, [pc, #420]	; (8004234 <HAL_I2C_Init+0x284>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	3301      	adds	r3, #1
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	430b      	orrs	r3, r1
 800409e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	495c      	ldr	r1, [pc, #368]	; (8004224 <HAL_I2C_Init+0x274>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d819      	bhi.n	80040ec <HAL_I2C_Init+0x13c>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e59      	subs	r1, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040cc:	400b      	ands	r3, r1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_I2C_Init+0x138>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e59      	subs	r1, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e6:	e051      	b.n	800418c <HAL_I2C_Init+0x1dc>
 80040e8:	2304      	movs	r3, #4
 80040ea:	e04f      	b.n	800418c <HAL_I2C_Init+0x1dc>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d111      	bne.n	8004118 <HAL_I2C_Init+0x168>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	440b      	add	r3, r1
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e012      	b.n	800413e <HAL_I2C_Init+0x18e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1e58      	subs	r0, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	0099      	lsls	r1, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	fbb0 f3f3 	udiv	r3, r0, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Init+0x196>
 8004142:	2301      	movs	r3, #1
 8004144:	e022      	b.n	800418c <HAL_I2C_Init+0x1dc>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10e      	bne.n	800416c <HAL_I2C_Init+0x1bc>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e58      	subs	r0, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	440b      	add	r3, r1
 800415c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004160:	3301      	adds	r3, #1
 8004162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416a:	e00f      	b.n	800418c <HAL_I2C_Init+0x1dc>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	0099      	lsls	r1, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	6809      	ldr	r1, [r1, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6911      	ldr	r1, [r2, #16]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	000186a0 	.word	0x000186a0
 8004228:	001e847f 	.word	0x001e847f
 800422c:	003d08ff 	.word	0x003d08ff
 8004230:	431bde83 	.word	0x431bde83
 8004234:	10624dd3 	.word	0x10624dd3

08004238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	d129      	bne.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2224      	movs	r2, #36	; 0x24
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0210 	bic.w	r2, r2, #16
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d12a      	bne.n	8004320 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	f023 030f 	bic.w	r3, r3, #15
 80042f0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	89fa      	ldrh	r2, [r7, #14]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e267      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d075      	beq.n	800443a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b04      	cmp	r3, #4
 8004358:	d00c      	beq.n	8004374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4b85      	ldr	r3, [pc, #532]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004362:	2b08      	cmp	r3, #8
 8004364:	d112      	bne.n	800438c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b82      	ldr	r3, [pc, #520]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d10b      	bne.n	800438c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	4b7e      	ldr	r3, [pc, #504]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05b      	beq.n	8004438 <HAL_RCC_OscConfig+0x108>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d157      	bne.n	8004438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e242      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x74>
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a75      	ldr	r2, [pc, #468]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xb0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x98>
 80043ae:	4b70      	ldr	r3, [pc, #448]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6f      	ldr	r2, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b6d      	ldr	r3, [pc, #436]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6c      	ldr	r2, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xb0>
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a68      	ldr	r2, [pc, #416]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b66      	ldr	r3, [pc, #408]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a65      	ldr	r2, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fd fb6e 	bl	8001ac8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fd fb6a 	bl	8001ac8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e207      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xc0>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd fb5a 	bl	8001ac8 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd fb56 	bl	8001ac8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e1f3      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b51      	ldr	r3, [pc, #324]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0xe8>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d063      	beq.n	800450e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004446:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x152>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1c7      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4937      	ldr	r1, [pc, #220]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e03a      	b.n	800450e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b34      	ldr	r3, [pc, #208]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fd fb0f 	bl	8001ac8 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fd fb0b 	bl	8001ac8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1a8      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4925      	ldr	r1, [pc, #148]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	e015      	b.n	800450e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd faee 	bl	8001ac8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fd faea 	bl	8001ac8 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e187      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d036      	beq.n	8004588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x248>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fd face 	bl	8001ac8 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004530:	f7fd faca 	bl	8001ac8 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e167      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x240>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x200>
 800454e:	e01b      	b.n	8004588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x248>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fd fab7 	bl	8001ac8 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	e00e      	b.n	800457c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455e:	f7fd fab3 	bl	8001ac8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d907      	bls.n	800457c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e150      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
 8004570:	40023800 	.word	0x40023800
 8004574:	42470000 	.word	0x42470000
 8004578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ea      	bne.n	800455e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8097 	beq.w	80046c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459a:	4b81      	ldr	r3, [pc, #516]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	4b7d      	ldr	r3, [pc, #500]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	4a7c      	ldr	r2, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6413      	str	r3, [r2, #64]	; 0x40
 80045b6:	4b7a      	ldr	r3, [pc, #488]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b77      	ldr	r3, [pc, #476]	; (80047a4 <HAL_RCC_OscConfig+0x474>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b74      	ldr	r3, [pc, #464]	; (80047a4 <HAL_RCC_OscConfig+0x474>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a73      	ldr	r2, [pc, #460]	; (80047a4 <HAL_RCC_OscConfig+0x474>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fd fa73 	bl	8001ac8 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fd fa6f 	bl	8001ac8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e10c      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCC_OscConfig+0x474>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x2ea>
 800460c:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a63      	ldr	r2, [pc, #396]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	e01c      	b.n	8004654 <HAL_RCC_OscConfig+0x324>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b05      	cmp	r3, #5
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x30c>
 8004622:	4b5f      	ldr	r3, [pc, #380]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 0304 	orr.w	r3, r3, #4
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a5b      	ldr	r2, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0x324>
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a57      	ldr	r2, [pc, #348]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	4b55      	ldr	r3, [pc, #340]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a54      	ldr	r2, [pc, #336]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 0304 	bic.w	r3, r3, #4
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d015      	beq.n	8004688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd fa34 	bl	8001ac8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fd fa30 	bl	8001ac8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0cb      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ee      	beq.n	8004664 <HAL_RCC_OscConfig+0x334>
 8004686:	e014      	b.n	80046b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fd fa1e 	bl	8001ac8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd fa1a 	bl	8001ac8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0b5      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ee      	bne.n	8004690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a1 	beq.w	8004810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ce:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d05c      	beq.n	8004794 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d141      	bne.n	8004766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCC_OscConfig+0x478>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fd f9ee 	bl	8001ac8 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fd f9ea 	bl	8001ac8 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e087      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	491b      	ldr	r1, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x478>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fd f9c3 	bl	8001ac8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004746:	f7fd f9bf 	bl	8001ac8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e05c      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x416>
 8004764:	e054      	b.n	8004810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCC_OscConfig+0x478>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fd f9ac 	bl	8001ac8 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004774:	f7fd f9a8 	bl	8001ac8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e045      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_OscConfig+0x470>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x444>
 8004792:	e03d      	b.n	8004810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e038      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40007000 	.word	0x40007000
 80047a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCC_OscConfig+0x4ec>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d028      	beq.n	800480c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d121      	bne.n	800480c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11a      	bne.n	800480c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d111      	bne.n	800480c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	3b01      	subs	r3, #1
 80047f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d107      	bne.n	800480c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0cc      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d90c      	bls.n	800485c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b8      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800487e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800488c:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a52      	ldr	r2, [pc, #328]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	494d      	ldr	r1, [pc, #308]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d044      	beq.n	8004940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d119      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e07f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d003      	beq.n	80048de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e067      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fe:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4934      	ldr	r1, [pc, #208]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004910:	f7fd f8da 	bl	8001ac8 <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	e00a      	b.n	800492e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fd f8d6 	bl	8001ac8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e04f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 020c 	and.w	r2, r3, #12
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	429a      	cmp	r2, r3
 800493e:	d1eb      	bne.n	8004918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d20c      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e032      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4916      	ldr	r1, [pc, #88]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	490e      	ldr	r1, [pc, #56]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a6:	f000 f821 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	490a      	ldr	r1, [pc, #40]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	5ccb      	ldrb	r3, [r1, r3]
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc ff28 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023c00 	.word	0x40023c00
 80049dc:	40023800 	.word	0x40023800
 80049e0:	08009344 	.word	0x08009344
 80049e4:	20000000 	.word	0x20000000
 80049e8:	20000004 	.word	0x20000004

080049ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f0:	b094      	sub	sp, #80	; 0x50
 80049f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	2300      	movs	r3, #0
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fc:	2300      	movs	r3, #0
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a04:	4b79      	ldr	r3, [pc, #484]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d00d      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x40>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	f200 80e1 	bhi.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x34>
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1e:	e0db      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a20:	4b73      	ldr	r3, [pc, #460]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a24:	e0db      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a26:	4b73      	ldr	r3, [pc, #460]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a2a:	e0d8      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a36:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d063      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b6a      	ldr	r3, [pc, #424]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	2200      	movs	r2, #0
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	0159      	lsls	r1, r3, #5
 8004a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a70:	0150      	lsls	r0, r2, #5
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4621      	mov	r1, r4
 8004a78:	1a51      	subs	r1, r2, r1
 8004a7a:	6139      	str	r1, [r7, #16]
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a90:	4659      	mov	r1, fp
 8004a92:	018b      	lsls	r3, r1, #6
 8004a94:	4651      	mov	r1, sl
 8004a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	018a      	lsls	r2, r1, #6
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004abe:	4690      	mov	r8, r2
 8004ac0:	4699      	mov	r9, r3
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	eb18 0303 	adds.w	r3, r8, r3
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	462b      	mov	r3, r5
 8004acc:	eb49 0303 	adc.w	r3, r9, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	024b      	lsls	r3, r1, #9
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae8:	4621      	mov	r1, r4
 8004aea:	024a      	lsls	r2, r1, #9
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af2:	2200      	movs	r2, #0
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004afc:	f7fb fb76 	bl	80001ec <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b08:	e058      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0a:	4b38      	ldr	r3, [pc, #224]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	2200      	movs	r2, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	4611      	mov	r1, r2
 8004b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	f04f 0000 	mov.w	r0, #0
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	0159      	lsls	r1, r3, #5
 8004b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b36:	0150      	lsls	r0, r2, #5
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b60:	eb63 050b 	sbc.w	r5, r3, fp
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	00eb      	lsls	r3, r5, #3
 8004b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b72:	00e2      	lsls	r2, r4, #3
 8004b74:	4614      	mov	r4, r2
 8004b76:	461d      	mov	r5, r3
 8004b78:	4643      	mov	r3, r8
 8004b7a:	18e3      	adds	r3, r4, r3
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	464b      	mov	r3, r9
 8004b80:	eb45 0303 	adc.w	r3, r5, r3
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b92:	4629      	mov	r1, r5
 8004b94:	028b      	lsls	r3, r1, #10
 8004b96:	4621      	mov	r1, r4
 8004b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	028a      	lsls	r2, r1, #10
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	61fa      	str	r2, [r7, #28]
 8004bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb0:	f7fb fb1c 	bl	80001ec <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4613      	mov	r3, r2
 8004bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3750      	adds	r7, #80	; 0x50
 8004be4:	46bd      	mov	sp, r7
 8004be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	007a1200 	.word	0x007a1200

08004bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff0 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0a9b      	lsrs	r3, r3, #10
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	08009354 	.word	0x08009354

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c3c:	f7ff ffdc 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0b5b      	lsrs	r3, r3, #13
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	08009354 	.word	0x08009354

08004c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	220f      	movs	r2, #15
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_RCC_GetClockConfig+0x5c>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0203 	and.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <HAL_RCC_GetClockConfig+0x5c>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_RCC_GetClockConfig+0x5c>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_GetClockConfig+0x5c>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RCC_GetClockConfig+0x60>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 020f 	and.w	r2, r3, #15
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40023c00 	.word	0x40023c00

08004cc4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e025      	b.n	8004d24 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fc fd8b 	bl	8001808 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f001 fe39 	bl	800697c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	f001 fe8e 	bl	8006a36 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07b      	b.n	8004e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4e:	d009      	beq.n	8004d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
 8004d56:	e005      	b.n	8004d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc fb78 	bl	8001474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0104 	and.w	r1, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	f003 0210 	and.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e041      	b.n	8004ed4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fc fb4d 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 ff1b 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04e      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d01d      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_Base_Start_IT+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d111      	bne.n	8004f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d010      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	e007      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40001800 	.word	0x40001800

08004fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e041      	b.n	8005052 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f839 	bl	800505a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fe5c 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e022      	b.n	80050e2 <HAL_TIM_PWM_Start_DMA+0x72>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d109      	bne.n	80050b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e015      	b.n	80050e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d109      	bne.n	80050d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e008      	b.n	80050e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
 80050e8:	e171      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_TIM_PWM_Start_DMA+0x94>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e022      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0xda>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d109      	bne.n	800511e <HAL_TIM_PWM_Start_DMA+0xae>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e015      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0xda>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e008      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0xda>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d024      	beq.n	8005198 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start_DMA+0xee>
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e137      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	e016      	b.n	800519c <HAL_TIM_PWM_Start_DMA+0x12c>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	e00e      	b.n	800519c <HAL_TIM_PWM_Start_DMA+0x12c>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	e006      	b.n	800519c <HAL_TIM_PWM_Start_DMA+0x12c>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005196:	e001      	b.n	800519c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e118      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	f200 80ae 	bhi.w	8005300 <HAL_TIM_PWM_Start_DMA+0x290>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <HAL_TIM_PWM_Start_DMA+0x13c>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	08005301 	.word	0x08005301
 80051b4:	08005301 	.word	0x08005301
 80051b8:	08005301 	.word	0x08005301
 80051bc:	08005229 	.word	0x08005229
 80051c0:	08005301 	.word	0x08005301
 80051c4:	08005301 	.word	0x08005301
 80051c8:	08005301 	.word	0x08005301
 80051cc:	08005271 	.word	0x08005271
 80051d0:	08005301 	.word	0x08005301
 80051d4:	08005301 	.word	0x08005301
 80051d8:	08005301 	.word	0x08005301
 80051dc:	080052b9 	.word	0x080052b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	4a7c      	ldr	r2, [pc, #496]	; (80053d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	4a7b      	ldr	r2, [pc, #492]	; (80053dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	4a7a      	ldr	r2, [pc, #488]	; (80053e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3334      	adds	r3, #52	; 0x34
 8005204:	461a      	mov	r2, r3
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	f7fc fe3a 	bl	8001e80 <HAL_DMA_Start_IT>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0db      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	60da      	str	r2, [r3, #12]
      break;
 8005226:	e06e      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	4a6a      	ldr	r2, [pc, #424]	; (80053d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800522e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	4a69      	ldr	r2, [pc, #420]	; (80053dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	4a68      	ldr	r2, [pc, #416]	; (80053e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800523e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3338      	adds	r3, #56	; 0x38
 800524c:	461a      	mov	r2, r3
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	f7fc fe16 	bl	8001e80 <HAL_DMA_Start_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0b7      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800526c:	60da      	str	r2, [r3, #12]
      break;
 800526e:	e04a      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005276:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a57      	ldr	r2, [pc, #348]	; (80053dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	333c      	adds	r3, #60	; 0x3c
 8005294:	461a      	mov	r2, r3
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	f7fc fdf2 	bl	8001e80 <HAL_DMA_Start_IT>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e093      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052b4:	60da      	str	r2, [r3, #12]
      break;
 80052b6:	e026      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4a46      	ldr	r2, [pc, #280]	; (80053d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	4a45      	ldr	r2, [pc, #276]	; (80053dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	4a44      	ldr	r2, [pc, #272]	; (80053e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80052ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3340      	adds	r3, #64	; 0x40
 80052dc:	461a      	mov	r2, r3
 80052de:	887b      	ldrh	r3, [r7, #2]
 80052e0:	f7fc fdce 	bl	8001e80 <HAL_DMA_Start_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06f      	b.n	80053ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052fc:	60da      	str	r2, [r3, #12]
      break;
 80052fe:	e002      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	bf00      	nop
  }

  if (status == HAL_OK)
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d15f      	bne.n	80053cc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ffb9 	bl	800628c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a31      	ldr	r2, [pc, #196]	; (80053e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIM_PWM_Start_DMA+0x2be>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2f      	ldr	r2, [pc, #188]	; (80053e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535a:	d01d      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_TIM_PWM_Start_DMA+0x380>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_TIM_PWM_Start_DMA+0x388>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIM_PWM_Start_DMA+0x328>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d111      	bne.n	80053bc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d010      	beq.n	80053cc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e007      	b.n	80053cc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	08005ba9 	.word	0x08005ba9
 80053dc:	08005c51 	.word	0x08005c51
 80053e0:	08005b17 	.word	0x08005b17
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40001800 	.word	0x40001800

08005400 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d855      	bhi.n	80054c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	08005451 	.word	0x08005451
 8005420:	080054c1 	.word	0x080054c1
 8005424:	080054c1 	.word	0x080054c1
 8005428:	080054c1 	.word	0x080054c1
 800542c:	0800546d 	.word	0x0800546d
 8005430:	080054c1 	.word	0x080054c1
 8005434:	080054c1 	.word	0x080054c1
 8005438:	080054c1 	.word	0x080054c1
 800543c:	08005489 	.word	0x08005489
 8005440:	080054c1 	.word	0x080054c1
 8005444:	080054c1 	.word	0x080054c1
 8005448:	080054c1 	.word	0x080054c1
 800544c:	080054a5 	.word	0x080054a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800545e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	4618      	mov	r0, r3
 8005466:	f7fc fd63 	bl	8001f30 <HAL_DMA_Abort_IT>
      break;
 800546a:	e02c      	b.n	80054c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	4618      	mov	r0, r3
 8005482:	f7fc fd55 	bl	8001f30 <HAL_DMA_Abort_IT>
      break;
 8005486:	e01e      	b.n	80054c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005496:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4618      	mov	r0, r3
 800549e:	f7fc fd47 	bl	8001f30 <HAL_DMA_Abort_IT>
      break;
 80054a2:	e010      	b.n	80054c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fc fd39 	bl	8001f30 <HAL_DMA_Abort_IT>
      break;
 80054be:	e002      	b.n	80054c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d161      	bne.n	8005590 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fed9 	bl	800628c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2f      	ldr	r2, [pc, #188]	; (800559c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIM_PWM_Stop_DMA+0xee>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f240 4344 	movw	r3, #1092	; 0x444
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005526:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10f      	bne.n	8005558 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	f240 4344 	movw	r3, #1092	; 0x444
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_TIM_PWM_Stop_DMA+0x168>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005566:	e013      	b.n	8005590 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d104      	bne.n	8005578 <HAL_TIM_PWM_Stop_DMA+0x178>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005576:	e00b      	b.n	8005590 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d104      	bne.n	8005588 <HAL_TIM_PWM_Stop_DMA+0x188>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005586:	e003      	b.n	8005590 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40010400 	.word	0x40010400

080055a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0202 	mvn.w	r2, #2
 80055d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa77 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa69 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fb fe03 	bl	8001200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b04      	cmp	r3, #4
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0204 	mvn.w	r2, #4
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa4d 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa3f 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fb fdd9 	bl	8001200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0208 	mvn.w	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2204      	movs	r2, #4
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa23 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa15 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fb fdaf 	bl	8001200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0210 	mvn.w	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2208      	movs	r2, #8
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9f9 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9eb 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb fd85 	bl	8001200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0201 	mvn.w	r2, #1
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fbe2 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fe48 	bl	80063e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d107      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9b7 	bl	8005aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b20      	cmp	r3, #32
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0220 	mvn.w	r2, #32
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fe12 	bl	80063d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0ae      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f200 809f 	bhi.w	8005920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	08005921 	.word	0x08005921
 80057f0:	08005921 	.word	0x08005921
 80057f4:	08005921 	.word	0x08005921
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	08005921 	.word	0x08005921
 8005800:	08005921 	.word	0x08005921
 8005804:	08005921 	.word	0x08005921
 8005808:	0800589f 	.word	0x0800589f
 800580c:	08005921 	.word	0x08005921
 8005810:	08005921 	.word	0x08005921
 8005814:	08005921 	.word	0x08005921
 8005818:	080058df 	.word	0x080058df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fae8 	bl	8005df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
      break;
 800585a:	e064      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fb38 	bl	8005ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]
      break;
 800589c:	e043      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fb8d 	bl	8005fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0208 	orr.w	r2, r2, #8
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
      break;
 80058dc:	e023      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fbe1 	bl	80060ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
      break;
 800591e:	e002      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
      break;
 8005924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIM_ConfigClockSource+0x1c>
 8005950:	2302      	movs	r3, #2
 8005952:	e0b4      	b.n	8005abe <HAL_TIM_ConfigClockSource+0x186>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d03e      	beq.n	8005a0c <HAL_TIM_ConfigClockSource+0xd4>
 800598e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005992:	f200 8087 	bhi.w	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	f000 8086 	beq.w	8005aaa <HAL_TIM_ConfigClockSource+0x172>
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d87f      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b70      	cmp	r3, #112	; 0x70
 80059a6:	d01a      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xa6>
 80059a8:	2b70      	cmp	r3, #112	; 0x70
 80059aa:	d87b      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b60      	cmp	r3, #96	; 0x60
 80059ae:	d050      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x11a>
 80059b0:	2b60      	cmp	r3, #96	; 0x60
 80059b2:	d877      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b50      	cmp	r3, #80	; 0x50
 80059b6:	d03c      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xfa>
 80059b8:	2b50      	cmp	r3, #80	; 0x50
 80059ba:	d873      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d058      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x13a>
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d86f      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d064      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x15a>
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d86b      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d060      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x15a>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d867      	bhi.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d05c      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x15a>
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d05a      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x15a>
 80059dc:	e062      	b.n	8005aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6899      	ldr	r1, [r3, #8]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f000 fc2d 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	609a      	str	r2, [r3, #8]
      break;
 8005a0a:	e04f      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6899      	ldr	r1, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f000 fc16 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2e:	609a      	str	r2, [r3, #8]
      break;
 8005a30:	e03c      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f000 fb8a 	bl	8006158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2150      	movs	r1, #80	; 0x50
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fbe3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005a50:	e02c      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f000 fba9 	bl	80061b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2160      	movs	r1, #96	; 0x60
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fbd3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005a70:	e01c      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f000 fb6a 	bl	8006158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2140      	movs	r1, #64	; 0x40
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fbc3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005a90:	e00c      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f000 fbba 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005aa2:	e003      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa8:	e000      	b.n	8005aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d107      	bne.n	8005b3e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b3c:	e02a      	b.n	8005b94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d107      	bne.n	8005b58 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b56:	e01d      	b.n	8005b94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d107      	bne.n	8005b72 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2204      	movs	r2, #4
 8005b66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b70:	e010      	b.n	8005b94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d107      	bne.n	8005b8c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2208      	movs	r2, #8
 8005b80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b8a:	e003      	b.n	8005b94 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff ffb4 	bl	8005b02 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d10b      	bne.n	8005bd8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d136      	bne.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd6:	e031      	b.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d10b      	bne.n	8005bfa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d125      	bne.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	e020      	b.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d10b      	bne.n	8005c1c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2204      	movs	r2, #4
 8005c08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d114      	bne.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c1a:	e00f      	b.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10a      	bne.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7fb fadf 	bl	8001200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d103      	bne.n	8005c70 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	771a      	strb	r2, [r3, #28]
 8005c6e:	e019      	b.n	8005ca4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d103      	bne.n	8005c82 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	771a      	strb	r2, [r3, #28]
 8005c80:	e010      	b.n	8005ca4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d103      	bne.n	8005c94 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	771a      	strb	r2, [r3, #28]
 8005c92:	e007      	b.n	8005ca4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d102      	bne.n	8005ca4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7fb fa2d 	bl	8001104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a40      	ldr	r2, [pc, #256]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3d      	ldr	r2, [pc, #244]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a3a      	ldr	r2, [pc, #232]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2f      	ldr	r2, [pc, #188]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d027      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d023      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d017      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_Base_SetConfig+0x128>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <TIM_Base_SetConfig+0x130>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a25      	ldr	r2, [pc, #148]	; (8005dec <TIM_Base_SetConfig+0x134>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <TIM_Base_SetConfig+0x138>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a23      	ldr	r2, [pc, #140]	; (8005df4 <TIM_Base_SetConfig+0x13c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0xf8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d103      	bne.n	8005db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	615a      	str	r2, [r3, #20]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800
 8005dec:	40001800 	.word	0x40001800
 8005df0:	40001c00 	.word	0x40001c00
 8005df4:	40002000 	.word	0x40002000

08005df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f023 0201 	bic.w	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 0302 	bic.w	r3, r3, #2
 8005e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <TIM_OC1_SetConfig+0xd8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC1_SetConfig+0x64>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <TIM_OC1_SetConfig+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10c      	bne.n	8005e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0308 	bic.w	r3, r3, #8
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <TIM_OC1_SetConfig+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC1_SetConfig+0x8e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC1_SetConfig+0xdc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d111      	bne.n	8005eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40010400 	.word	0x40010400

08005ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0210 	bic.w	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0320 	bic.w	r3, r3, #32
 8005f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <TIM_OC2_SetConfig+0xe4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC2_SetConfig+0x68>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <TIM_OC2_SetConfig+0xe8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10d      	bne.n	8005f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC2_SetConfig+0xe4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC2_SetConfig+0x94>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC2_SetConfig+0xe8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d113      	bne.n	8005f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <TIM_OC3_SetConfig+0xe0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x66>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10d      	bne.n	8006046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <TIM_OC3_SetConfig+0xe0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC3_SetConfig+0x92>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d113      	bne.n	800607e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <TIM_OC4_SetConfig+0xa4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC4_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <TIM_OC4_SetConfig+0xa8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d109      	bne.n	8006128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e05a      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d01d      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a15      	ldr	r2, [pc, #84]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10c      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40001800 	.word	0x40001800

080063d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e03f      	b.n	800648a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb f918 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2224      	movs	r2, #36	; 0x24
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800643a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f829 	bl	8006494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006498:	b0c0      	sub	sp, #256	; 0x100
 800649a:	af00      	add	r7, sp, #0
 800649c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	68d9      	ldr	r1, [r3, #12]
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	ea40 0301 	orr.w	r3, r0, r1
 80064bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064ec:	f021 010c 	bic.w	r1, r1, #12
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064fa:	430b      	orrs	r3, r1
 80064fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	6999      	ldr	r1, [r3, #24]
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	ea40 0301 	orr.w	r3, r0, r1
 800651a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b8f      	ldr	r3, [pc, #572]	; (8006760 <UART_SetConfig+0x2cc>)
 8006524:	429a      	cmp	r2, r3
 8006526:	d005      	beq.n	8006534 <UART_SetConfig+0xa0>
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b8d      	ldr	r3, [pc, #564]	; (8006764 <UART_SetConfig+0x2d0>)
 8006530:	429a      	cmp	r2, r3
 8006532:	d104      	bne.n	800653e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006534:	f7fe fb80 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8006538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800653c:	e003      	b.n	8006546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800653e:	f7fe fb67 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8006542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	f040 810c 	bne.w	800676c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006558:	2200      	movs	r2, #0
 800655a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800655e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	1891      	adds	r1, r2, r2
 800656c:	65b9      	str	r1, [r7, #88]	; 0x58
 800656e:	415b      	adcs	r3, r3
 8006570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006576:	4621      	mov	r1, r4
 8006578:	eb12 0801 	adds.w	r8, r2, r1
 800657c:	4629      	mov	r1, r5
 800657e:	eb43 0901 	adc.w	r9, r3, r1
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800658e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006596:	4690      	mov	r8, r2
 8006598:	4699      	mov	r9, r3
 800659a:	4623      	mov	r3, r4
 800659c:	eb18 0303 	adds.w	r3, r8, r3
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a4:	462b      	mov	r3, r5
 80065a6:	eb49 0303 	adc.w	r3, r9, r3
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065c2:	460b      	mov	r3, r1
 80065c4:	18db      	adds	r3, r3, r3
 80065c6:	653b      	str	r3, [r7, #80]	; 0x50
 80065c8:	4613      	mov	r3, r2
 80065ca:	eb42 0303 	adc.w	r3, r2, r3
 80065ce:	657b      	str	r3, [r7, #84]	; 0x54
 80065d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065d8:	f7f9 fe08 	bl	80001ec <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4b61      	ldr	r3, [pc, #388]	; (8006768 <UART_SetConfig+0x2d4>)
 80065e2:	fba3 2302 	umull	r2, r3, r3, r2
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	011c      	lsls	r4, r3, #4
 80065ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065fc:	4642      	mov	r2, r8
 80065fe:	464b      	mov	r3, r9
 8006600:	1891      	adds	r1, r2, r2
 8006602:	64b9      	str	r1, [r7, #72]	; 0x48
 8006604:	415b      	adcs	r3, r3
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800660c:	4641      	mov	r1, r8
 800660e:	eb12 0a01 	adds.w	sl, r2, r1
 8006612:	4649      	mov	r1, r9
 8006614:	eb43 0b01 	adc.w	fp, r3, r1
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800662c:	4692      	mov	sl, r2
 800662e:	469b      	mov	fp, r3
 8006630:	4643      	mov	r3, r8
 8006632:	eb1a 0303 	adds.w	r3, sl, r3
 8006636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800663a:	464b      	mov	r3, r9
 800663c:	eb4b 0303 	adc.w	r3, fp, r3
 8006640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006658:	460b      	mov	r3, r1
 800665a:	18db      	adds	r3, r3, r3
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
 800665e:	4613      	mov	r3, r2
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	647b      	str	r3, [r7, #68]	; 0x44
 8006666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800666a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800666e:	f7f9 fdbd 	bl	80001ec <__aeabi_uldivmod>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4611      	mov	r1, r2
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <UART_SetConfig+0x2d4>)
 800667a:	fba3 2301 	umull	r2, r3, r3, r1
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2264      	movs	r2, #100	; 0x64
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	1acb      	subs	r3, r1, r3
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <UART_SetConfig+0x2d4>)
 8006690:	fba3 2302 	umull	r2, r3, r3, r2
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800669c:	441c      	add	r4, r3
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066b8:	415b      	adcs	r3, r3
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066c0:	4641      	mov	r1, r8
 80066c2:	1851      	adds	r1, r2, r1
 80066c4:	6339      	str	r1, [r7, #48]	; 0x30
 80066c6:	4649      	mov	r1, r9
 80066c8:	414b      	adcs	r3, r1
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066d8:	4659      	mov	r1, fp
 80066da:	00cb      	lsls	r3, r1, #3
 80066dc:	4651      	mov	r1, sl
 80066de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e2:	4651      	mov	r1, sl
 80066e4:	00ca      	lsls	r2, r1, #3
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	4642      	mov	r2, r8
 80066ee:	189b      	adds	r3, r3, r2
 80066f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066f4:	464b      	mov	r3, r9
 80066f6:	460a      	mov	r2, r1
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800670c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006714:	460b      	mov	r3, r1
 8006716:	18db      	adds	r3, r3, r3
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
 800671a:	4613      	mov	r3, r2
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800672a:	f7f9 fd5f 	bl	80001ec <__aeabi_uldivmod>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <UART_SetConfig+0x2d4>)
 8006734:	fba3 1302 	umull	r1, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	2164      	movs	r1, #100	; 0x64
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	3332      	adds	r3, #50	; 0x32
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <UART_SetConfig+0x2d4>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 0207 	and.w	r2, r3, #7
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4422      	add	r2, r4
 800675a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800675c:	e105      	b.n	800696a <UART_SetConfig+0x4d6>
 800675e:	bf00      	nop
 8006760:	40011000 	.word	0x40011000
 8006764:	40011400 	.word	0x40011400
 8006768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800676c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006770:	2200      	movs	r2, #0
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800677a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800677e:	4642      	mov	r2, r8
 8006780:	464b      	mov	r3, r9
 8006782:	1891      	adds	r1, r2, r2
 8006784:	6239      	str	r1, [r7, #32]
 8006786:	415b      	adcs	r3, r3
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
 800678a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800678e:	4641      	mov	r1, r8
 8006790:	1854      	adds	r4, r2, r1
 8006792:	4649      	mov	r1, r9
 8006794:	eb43 0501 	adc.w	r5, r3, r1
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	00eb      	lsls	r3, r5, #3
 80067a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067a6:	00e2      	lsls	r2, r4, #3
 80067a8:	4614      	mov	r4, r2
 80067aa:	461d      	mov	r5, r3
 80067ac:	4643      	mov	r3, r8
 80067ae:	18e3      	adds	r3, r4, r3
 80067b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067b4:	464b      	mov	r3, r9
 80067b6:	eb45 0303 	adc.w	r3, r5, r3
 80067ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067da:	4629      	mov	r1, r5
 80067dc:	008b      	lsls	r3, r1, #2
 80067de:	4621      	mov	r1, r4
 80067e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e4:	4621      	mov	r1, r4
 80067e6:	008a      	lsls	r2, r1, #2
 80067e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067ec:	f7f9 fcfe 	bl	80001ec <__aeabi_uldivmod>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4b60      	ldr	r3, [pc, #384]	; (8006978 <UART_SetConfig+0x4e4>)
 80067f6:	fba3 2302 	umull	r2, r3, r3, r2
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	011c      	lsls	r4, r3, #4
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006802:	2200      	movs	r2, #0
 8006804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800680c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	1891      	adds	r1, r2, r2
 8006816:	61b9      	str	r1, [r7, #24]
 8006818:	415b      	adcs	r3, r3
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006820:	4641      	mov	r1, r8
 8006822:	1851      	adds	r1, r2, r1
 8006824:	6139      	str	r1, [r7, #16]
 8006826:	4649      	mov	r1, r9
 8006828:	414b      	adcs	r3, r1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006838:	4659      	mov	r1, fp
 800683a:	00cb      	lsls	r3, r1, #3
 800683c:	4651      	mov	r1, sl
 800683e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006842:	4651      	mov	r1, sl
 8006844:	00ca      	lsls	r2, r1, #3
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	4603      	mov	r3, r0
 800684c:	4642      	mov	r2, r8
 800684e:	189b      	adds	r3, r3, r2
 8006850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006854:	464b      	mov	r3, r9
 8006856:	460a      	mov	r2, r1
 8006858:	eb42 0303 	adc.w	r3, r2, r3
 800685c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	67bb      	str	r3, [r7, #120]	; 0x78
 800686a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006878:	4649      	mov	r1, r9
 800687a:	008b      	lsls	r3, r1, #2
 800687c:	4641      	mov	r1, r8
 800687e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006882:	4641      	mov	r1, r8
 8006884:	008a      	lsls	r2, r1, #2
 8006886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800688a:	f7f9 fcaf 	bl	80001ec <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4b39      	ldr	r3, [pc, #228]	; (8006978 <UART_SetConfig+0x4e4>)
 8006894:	fba3 1302 	umull	r1, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2164      	movs	r1, #100	; 0x64
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	3332      	adds	r3, #50	; 0x32
 80068a6:	4a34      	ldr	r2, [pc, #208]	; (8006978 <UART_SetConfig+0x4e4>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b2:	441c      	add	r4, r3
 80068b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b8:	2200      	movs	r2, #0
 80068ba:	673b      	str	r3, [r7, #112]	; 0x70
 80068bc:	677a      	str	r2, [r7, #116]	; 0x74
 80068be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	1891      	adds	r1, r2, r2
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	415b      	adcs	r3, r3
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068d2:	4641      	mov	r1, r8
 80068d4:	1851      	adds	r1, r2, r1
 80068d6:	6039      	str	r1, [r7, #0]
 80068d8:	4649      	mov	r1, r9
 80068da:	414b      	adcs	r3, r1
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ea:	4659      	mov	r1, fp
 80068ec:	00cb      	lsls	r3, r1, #3
 80068ee:	4651      	mov	r1, sl
 80068f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f4:	4651      	mov	r1, sl
 80068f6:	00ca      	lsls	r2, r1, #3
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	4642      	mov	r2, r8
 8006900:	189b      	adds	r3, r3, r2
 8006902:	66bb      	str	r3, [r7, #104]	; 0x68
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	663b      	str	r3, [r7, #96]	; 0x60
 8006918:	667a      	str	r2, [r7, #100]	; 0x64
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006926:	4649      	mov	r1, r9
 8006928:	008b      	lsls	r3, r1, #2
 800692a:	4641      	mov	r1, r8
 800692c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006930:	4641      	mov	r1, r8
 8006932:	008a      	lsls	r2, r1, #2
 8006934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006938:	f7f9 fc58 	bl	80001ec <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <UART_SetConfig+0x4e4>)
 8006942:	fba3 1302 	umull	r1, r3, r3, r2
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2164      	movs	r1, #100	; 0x64
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	3332      	adds	r3, #50	; 0x32
 8006954:	4a08      	ldr	r2, [pc, #32]	; (8006978 <UART_SetConfig+0x4e4>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4422      	add	r2, r4
 8006968:	609a      	str	r2, [r3, #8]
}
 800696a:	bf00      	nop
 800696c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006976:	bf00      	nop
 8006978:	51eb851f 	.word	0x51eb851f

0800697c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d123      	bne.n	80069d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006996:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	6851      	ldr	r1, [r2, #4]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	6892      	ldr	r2, [r2, #8]
 80069a2:	4311      	orrs	r1, r2
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	68d2      	ldr	r2, [r2, #12]
 80069a8:	4311      	orrs	r1, r2
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	6912      	ldr	r2, [r2, #16]
 80069ae:	4311      	orrs	r1, r2
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	6952      	ldr	r2, [r2, #20]
 80069b4:	4311      	orrs	r1, r2
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	6992      	ldr	r2, [r2, #24]
 80069ba:	4311      	orrs	r1, r2
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	69d2      	ldr	r2, [r2, #28]
 80069c0:	4311      	orrs	r1, r2
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	6a12      	ldr	r2, [r2, #32]
 80069c6:	4311      	orrs	r1, r2
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069cc:	430a      	orrs	r2, r1
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e028      	b.n	8006a28 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	69d9      	ldr	r1, [r3, #28]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	4319      	orrs	r1, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	430b      	orrs	r3, r1
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80069fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	6851      	ldr	r1, [r2, #4]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	6892      	ldr	r2, [r2, #8]
 8006a08:	4311      	orrs	r1, r2
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	68d2      	ldr	r2, [r2, #12]
 8006a0e:	4311      	orrs	r1, r2
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	6912      	ldr	r2, [r2, #16]
 8006a14:	4311      	orrs	r1, r2
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	6952      	ldr	r2, [r2, #20]
 8006a1a:	4311      	orrs	r1, r2
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	6992      	ldr	r2, [r2, #24]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d128      	bne.n	8006a9a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	1e59      	subs	r1, r3, #1
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	4319      	orrs	r1, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	4319      	orrs	r1, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	031b      	lsls	r3, r3, #12
 8006a72:	4319      	orrs	r1, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	4319      	orrs	r1, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	051b      	lsls	r3, r3, #20
 8006a86:	4319      	orrs	r1, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	061b      	lsls	r3, r3, #24
 8006a90:	430b      	orrs	r3, r1
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	e02f      	b.n	8006afa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	68d2      	ldr	r2, [r2, #12]
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	0311      	lsls	r1, r2, #12
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	6952      	ldr	r2, [r2, #20]
 8006ab2:	3a01      	subs	r2, #1
 8006ab4:	0512      	lsls	r2, r2, #20
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	1e59      	subs	r1, r3, #1
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	4319      	orrs	r1, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	4319      	orrs	r1, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	4319      	orrs	r1, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	061b      	lsls	r3, r3, #24
 8006af2:	430b      	orrs	r3, r1
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b08:	b084      	sub	sp, #16
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	f107 001c 	add.w	r0, r7, #28
 8006b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d122      	bne.n	8006b66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d105      	bne.n	8006b5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9c0 	bl	8006ee0 <USB_CoreReset>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
 8006b64:	e01a      	b.n	8006b9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9b4 	bl	8006ee0 <USB_CoreReset>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b8e:	e005      	b.n	8006b9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10b      	bne.n	8006bba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f043 0206 	orr.w	r2, r3, #6
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc6:	b004      	add	sp, #16
 8006bc8:	4770      	bx	lr

08006bca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f043 0201 	orr.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 0201 	bic.w	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d115      	bne.n	8006c5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f7fa ff4f 	bl	8001ae0 <HAL_Delay>
      ms++;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f93a 	bl	8006ec2 <USB_GetMode>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d01e      	beq.n	8006c92 <USB_SetCurrentMode+0x84>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b31      	cmp	r3, #49	; 0x31
 8006c58:	d9f0      	bls.n	8006c3c <USB_SetCurrentMode+0x2e>
 8006c5a:	e01a      	b.n	8006c92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d115      	bne.n	8006c8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f7fa ff36 	bl	8001ae0 <HAL_Delay>
      ms++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f921 	bl	8006ec2 <USB_GetMode>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <USB_SetCurrentMode+0x84>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b31      	cmp	r3, #49	; 0x31
 8006c8a:	d9f0      	bls.n	8006c6e <USB_SetCurrentMode+0x60>
 8006c8c:	e001      	b.n	8006c92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e005      	b.n	8006c9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b32      	cmp	r3, #50	; 0x32
 8006c96:	d101      	bne.n	8006c9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <USB_FlushTxFifo+0x64>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e01b      	b.n	8006d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	daf2      	bge.n	8006cb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	019b      	lsls	r3, r3, #6
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <USB_FlushTxFifo+0x64>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d901      	bls.n	8006cf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e006      	b.n	8006d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d0f0      	beq.n	8006ce0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	00030d40 	.word	0x00030d40

08006d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <USB_FlushRxFifo+0x5c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d901      	bls.n	8006d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e018      	b.n	8006d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	daf2      	bge.n	8006d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2210      	movs	r2, #16
 8006d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <USB_FlushRxFifo+0x5c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e006      	b.n	8006d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d0f0      	beq.n	8006d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	00030d40 	.word	0x00030d40

08006d70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	; 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	460b      	mov	r3, r1
 8006d80:	71fb      	strb	r3, [r7, #7]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d123      	bne.n	8006dde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d96:	88bb      	ldrh	r3, [r7, #4]
 8006d98:	3303      	adds	r3, #3
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e018      	b.n	8006dd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	031a      	lsls	r2, r3, #12
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db0:	461a      	mov	r2, r3
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3e2      	bcc.n	8006da4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3724      	adds	r7, #36	; 0x24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b08b      	sub	sp, #44	; 0x2c
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	e014      	b.n	8006e42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	3301      	adds	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	3301      	adds	r3, #1
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	3301      	adds	r3, #1
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3e6      	bcc.n	8006e18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01e      	beq.n	8006e8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	701a      	strb	r2, [r3, #0]
      i++;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	3301      	adds	r3, #1
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e82:	8bfb      	ldrh	r3, [r7, #30]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e88:	8bfb      	ldrh	r3, [r7, #30]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ea      	bne.n	8006e64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	372c      	adds	r7, #44	; 0x2c
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <USB_CoreReset+0x64>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e01b      	b.n	8006f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	daf2      	bge.n	8006eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f043 0201 	orr.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <USB_CoreReset+0x64>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d901      	bls.n	8006f28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e006      	b.n	8006f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d0f0      	beq.n	8006f16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	00030d40 	.word	0x00030d40

08006f48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f48:	b084      	sub	sp, #16
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d018      	beq.n	8006fd0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d10a      	bne.n	8006fba <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb2:	f043 0304 	orr.w	r3, r3, #4
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e014      	b.n	8006fe4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fc8:	f023 0304 	bic.w	r3, r3, #4
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e009      	b.n	8006fe4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fde:	f023 0304 	bic.w	r3, r3, #4
 8006fe2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fe4:	2110      	movs	r1, #16
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fe5e 	bl	8006ca8 <USB_FlushTxFifo>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fe8a 	bl	8006d10 <USB_FlushRxFifo>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007006:	2300      	movs	r3, #0
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	e015      	b.n	8007038 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007018:	461a      	mov	r2, r3
 800701a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800701e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	461a      	mov	r2, r3
 800702e:	2300      	movs	r3, #0
 8007030:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3301      	adds	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3e5      	bcc.n	800700c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007060:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <USB_HostInit+0x16c>)
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <USB_HostInit+0x170>)
 800706c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007070:	e009      	b.n	8007086 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a10      	ldr	r2, [pc, #64]	; (80070bc <USB_HostInit+0x174>)
 800707c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <USB_HostInit+0x178>)
 8007082:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2b00      	cmp	r3, #0
 800708a:	d105      	bne.n	8007098 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f043 0210 	orr.w	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <USB_HostInit+0x17c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b0:	b004      	add	sp, #16
 80070b2:	4770      	bx	lr
 80070b4:	01000200 	.word	0x01000200
 80070b8:	00e00300 	.word	0x00e00300
 80070bc:	00600080 	.word	0x00600080
 80070c0:	004000e0 	.word	0x004000e0
 80070c4:	a3200008 	.word	0xa3200008

080070c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007100:	4313      	orrs	r3, r2
 8007102:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d107      	bne.n	800711a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007110:	461a      	mov	r2, r3
 8007112:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007116:	6053      	str	r3, [r2, #4]
 8007118:	e009      	b.n	800712e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d106      	bne.n	800712e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	461a      	mov	r2, r3
 8007128:	f241 7370 	movw	r3, #6000	; 0x1770
 800712c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007160:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <USB_DriveVbus+0x44>
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d106      	bne.n	8007180 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800717a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800717e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	d109      	bne.n	80071a0 <USB_DriveVbus+0x64>
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800719a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800719e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	0c5b      	lsrs	r3, r3, #17
 80071cc:	f003 0303 	and.w	r3, r3, #3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	b29b      	uxth	r3, r3
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	4608      	mov	r0, r1
 800720a:	4611      	mov	r1, r2
 800720c:	461a      	mov	r2, r3
 800720e:	4603      	mov	r3, r0
 8007210:	70fb      	strb	r3, [r7, #3]
 8007212:	460b      	mov	r3, r1
 8007214:	70bb      	strb	r3, [r7, #2]
 8007216:	4613      	mov	r3, r2
 8007218:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722e:	461a      	mov	r2, r3
 8007230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007234:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800723a:	2b03      	cmp	r3, #3
 800723c:	d87e      	bhi.n	800733c <USB_HC_Init+0x13c>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USB_HC_Init+0x44>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007255 	.word	0x08007255
 8007248:	080072ff 	.word	0x080072ff
 800724c:	08007255 	.word	0x08007255
 8007250:	080072c1 	.word	0x080072c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4413      	add	r3, r2
 800725c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007260:	461a      	mov	r2, r3
 8007262:	f240 439d 	movw	r3, #1181	; 0x49d
 8007266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	da10      	bge.n	8007292 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4413      	add	r3, r2
 8007278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	440a      	add	r2, r1
 8007286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007290:	e057      	b.n	8007342 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d051      	beq.n	8007342 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80072bc:	60d3      	str	r3, [r2, #12]
      break;
 80072be:	e040      	b.n	8007342 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072cc:	461a      	mov	r2, r3
 80072ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80072d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	da34      	bge.n	8007346 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072fc:	e023      	b.n	8007346 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	f240 2325 	movw	r3, #549	; 0x225
 8007310:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da17      	bge.n	800734a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007334:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007338:	60d3      	str	r3, [r2, #12]
      }
      break;
 800733a:	e006      	b.n	800734a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	77fb      	strb	r3, [r7, #31]
      break;
 8007340:	e004      	b.n	800734c <USB_HC_Init+0x14c>
      break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <USB_HC_Init+0x14c>
      break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <USB_HC_Init+0x14c>
      break;
 800734a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f043 0302 	orr.w	r3, r3, #2
 800736a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007372:	699a      	ldr	r2, [r3, #24]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	2101      	movs	r1, #1
 800737c:	fa01 f303 	lsl.w	r3, r1, r3
 8007380:	6939      	ldr	r1, [r7, #16]
 8007382:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007386:	4313      	orrs	r3, r2
 8007388:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007396:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800739a:	2b00      	cmp	r3, #0
 800739c:	da03      	bge.n	80073a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e001      	b.n	80073aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff feff 	bl	80071ae <USB_GetHostSpeed>
 80073b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80073b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d106      	bne.n	80073c8 <USB_HC_Init+0x1c8>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d003      	beq.n	80073c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80073c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e001      	b.n	80073cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073cc:	787b      	ldrb	r3, [r7, #1]
 80073ce:	059b      	lsls	r3, r3, #22
 80073d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073d4:	78bb      	ldrb	r3, [r7, #2]
 80073d6:	02db      	lsls	r3, r3, #11
 80073d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073e2:	049b      	lsls	r3, r3, #18
 80073e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80073ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	0159      	lsls	r1, r3, #5
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007408:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800740a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800740e:	2b03      	cmp	r3, #3
 8007410:	d003      	beq.n	800741a <USB_HC_Init+0x21a>
 8007412:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10f      	bne.n	800743a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	440a      	add	r2, r1
 8007430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007434:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007438:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800743a:	7ffb      	ldrb	r3, [r7, #31]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800745c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007460:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02d      	beq.n	80074ca <USB_HC_StartXfer+0x86>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d129      	bne.n	80074ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d117      	bne.n	80074ac <USB_HC_StartXfer+0x68>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	79db      	ldrb	r3, [r3, #7]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <USB_HC_StartXfer+0x48>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	79db      	ldrb	r3, [r3, #7]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d10f      	bne.n	80074ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	4413      	add	r3, r2
 8007494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	6a3a      	ldr	r2, [r7, #32]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <USB_HC_StartXfer+0x86>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fa0f 	bl	80078e4 <USB_DoPing>
      return HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e0f8      	b.n	80076bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	8912      	ldrh	r2, [r2, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	3b01      	subs	r3, #1
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	8912      	ldrh	r2, [r2, #8]
 80074e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80074e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80074ea:	8b7b      	ldrh	r3, [r7, #26]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d90b      	bls.n	8007508 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
 80074f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	8912      	ldrh	r2, [r2, #8]
 80074fa:	fb03 f202 	mul.w	r2, r3, r2
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	611a      	str	r2, [r3, #16]
 8007502:	e001      	b.n	8007508 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007504:	2301      	movs	r3, #1
 8007506:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	78db      	ldrb	r3, [r3, #3]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	8912      	ldrh	r2, [r2, #8]
 8007516:	fb03 f202 	mul.w	r2, r3, r2
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	611a      	str	r2, [r3, #16]
 800751e:	e003      	b.n	8007528 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	695a      	ldr	r2, [r3, #20]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007532:	04d9      	lsls	r1, r3, #19
 8007534:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <USB_HC_StartXfer+0x280>)
 8007536:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007538:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	7a9b      	ldrb	r3, [r3, #10]
 800753e:	075b      	lsls	r3, r3, #29
 8007540:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	0148      	lsls	r0, r1, #5
 8007548:	6a39      	ldr	r1, [r7, #32]
 800754a:	4401      	add	r1, r0
 800754c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007550:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007552:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	68d9      	ldr	r1, [r3, #12]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	4413      	add	r3, r2
 8007566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756a:	460a      	mov	r2, r1
 800756c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	4413      	add	r3, r2
 800758e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	6a3a      	ldr	r2, [r7, #32]
 800759a:	440a      	add	r2, r1
 800759c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	7e7b      	ldrb	r3, [r7, #25]
 80075b6:	075b      	lsls	r3, r3, #29
 80075b8:	69f9      	ldr	r1, [r7, #28]
 80075ba:	0148      	lsls	r0, r1, #5
 80075bc:	6a39      	ldr	r1, [r7, #32]
 80075be:	4401      	add	r1, r0
 80075c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80075c4:	4313      	orrs	r3, r2
 80075c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	78db      	ldrb	r3, [r3, #3]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	e003      	b.n	80075fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007600:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	4413      	add	r3, r2
 800760a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760e:	461a      	mov	r2, r3
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e04e      	b.n	80076bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d149      	bne.n	80076ba <USB_HC_StartXfer+0x276>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d045      	beq.n	80076ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	79db      	ldrb	r3, [r3, #7]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d830      	bhi.n	8007698 <USB_HC_StartXfer+0x254>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <USB_HC_StartXfer+0x1f8>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007671 	.word	0x08007671
 8007644:	0800764d 	.word	0x0800764d
 8007648:	08007671 	.word	0x08007671
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	3303      	adds	r3, #3
 8007652:	089b      	lsrs	r3, r3, #2
 8007654:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007656:	8afa      	ldrh	r2, [r7, #22]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	b29b      	uxth	r3, r3
 800765e:	429a      	cmp	r2, r3
 8007660:	d91c      	bls.n	800769c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	619a      	str	r2, [r3, #24]
        }
        break;
 800766e:	e015      	b.n	800769c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	3303      	adds	r3, #3
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800767a:	8afa      	ldrh	r2, [r7, #22]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	b29b      	uxth	r3, r3
 8007686:	429a      	cmp	r2, r3
 8007688:	d90a      	bls.n	80076a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	619a      	str	r2, [r3, #24]
        }
        break;
 8007696:	e003      	b.n	80076a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007698:	bf00      	nop
 800769a:	e002      	b.n	80076a2 <USB_HC_StartXfer+0x25e>
        break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <USB_HC_StartXfer+0x25e>
        break;
 80076a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	68d9      	ldr	r1, [r3, #12]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	785a      	ldrb	r2, [r3, #1]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2000      	movs	r0, #0
 80076b2:	9000      	str	r0, [sp, #0]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fb5b 	bl	8006d70 <USB_WritePacket>
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	1ff80000 	.word	0x1ff80000

080076c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	b29b      	uxth	r3, r3
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b089      	sub	sp, #36	; 0x24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	0c9b      	lsrs	r3, r3, #18
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	0fdb      	lsrs	r3, r3, #31
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d104      	bne.n	8007744 <USB_HC_Halt+0x5a>
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e0c8      	b.n	80078d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <USB_HC_Halt+0x66>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d163      	bne.n	8007818 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800776e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 80ab 	bne.w	80078d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d133      	bne.n	80077f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d6:	d81d      	bhi.n	8007814 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ee:	d0ec      	beq.n	80077ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077f0:	e070      	b.n	80078d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	440a      	add	r2, r1
 8007808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800780c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007810:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007812:	e05f      	b.n	80078d4 <USB_HC_Halt+0x1ea>
            break;
 8007814:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007816:	e05d      	b.n	80078d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	4413      	add	r3, r2
 8007820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	440a      	add	r2, r1
 800782e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007836:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d133      	bne.n	80078b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	440a      	add	r2, r1
 800785e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007866:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	4413      	add	r3, r2
 8007870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	440a      	add	r2, r1
 800787e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007886:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007894:	d81d      	bhi.n	80078d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ac:	d0ec      	beq.n	8007888 <USB_HC_Halt+0x19e>
 80078ae:	e011      	b.n	80078d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e000      	b.n	80078d4 <USB_HC_Halt+0x1ea>
          break;
 80078d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3724      	adds	r7, #36	; 0x24
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80078f8:	2301      	movs	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	04da      	lsls	r2, r3, #19
 8007900:	4b15      	ldr	r3, [pc, #84]	; (8007958 <USB_DoPing+0x74>)
 8007902:	4013      	ands	r3, r2
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	440a      	add	r2, r1
 800790c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007914:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800792c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007934:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	461a      	mov	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	1ff80000 	.word	0x1ff80000

0800795c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff f93b 	bl	8006bec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007976:	2110      	movs	r1, #16
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff f995 	bl	8006ca8 <USB_FlushTxFifo>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff f9c1 	bl	8006d10 <USB_FlushRxFifo>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007998:	2300      	movs	r3, #0
 800799a:	61bb      	str	r3, [r7, #24]
 800799c:	e01f      	b.n	80079de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d2:	461a      	mov	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	3301      	adds	r3, #1
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d9dc      	bls.n	800799e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80079e4:	2300      	movs	r3, #0
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	e034      	b.n	8007a54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1e:	461a      	mov	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a30:	d80c      	bhi.n	8007a4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a48:	d0ec      	beq.n	8007a24 <USB_StopHost+0xc8>
 8007a4a:	e000      	b.n	8007a4e <USB_StopHost+0xf2>
        break;
 8007a4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3301      	adds	r3, #1
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d9c7      	bls.n	80079ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a60:	461a      	mov	r2, r3
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff f8aa 	bl	8006bca <USB_EnableGlobalInt>

  return ret;
 8007a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af04      	add	r7, sp, #16
 8007a86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a88:	2301      	movs	r3, #1
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fc66 	bl	8008360 <USBH_FindInterface>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2bff      	cmp	r3, #255	; 0xff
 8007a9c:	d002      	beq.n	8007aa4 <USBH_CDC_InterfaceInit+0x24>
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d901      	bls.n	8007aa8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e13d      	b.n	8007d24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc3b 	bl	8008328 <USBH_SelectInterface>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	e131      	b.n	8007d24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ac6:	2050      	movs	r0, #80	; 0x50
 8007ac8:	f001 fb18 	bl	80090fc <malloc>
 8007acc:	4603      	mov	r3, r0
 8007ace:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e11f      	b.n	8007d24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007ae4:	2250      	movs	r2, #80	; 0x50
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	68b8      	ldr	r0, [r7, #8]
 8007aea:	f001 fb17 	bl	800911c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	211a      	movs	r1, #26
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	4413      	add	r3, r2
 8007afa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da15      	bge.n	8007b32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	211a      	movs	r1, #26
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	211a      	movs	r1, #26
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b2c:	881a      	ldrh	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 ff9c 	bl	8008a76 <USBH_AllocPipe>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	461a      	mov	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	7819      	ldrb	r1, [r3, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	7858      	ldrb	r0, [r3, #1]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	8952      	ldrh	r2, [r2, #10]
 8007b5e:	9202      	str	r2, [sp, #8]
 8007b60:	2203      	movs	r2, #3
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4623      	mov	r3, r4
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 ff54 	bl	8008a18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fa1d 	bl	8008fb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2200      	movs	r2, #0
 8007b82:	210a      	movs	r1, #10
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fbeb 	bl	8008360 <USBH_FindInterface>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2bff      	cmp	r3, #255	; 0xff
 8007b92:	d002      	beq.n	8007b9a <USBH_CDC_InterfaceInit+0x11a>
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d901      	bls.n	8007b9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e0c2      	b.n	8007d24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	211a      	movs	r1, #26
 8007ba4:	fb01 f303 	mul.w	r3, r1, r3
 8007ba8:	4413      	add	r3, r2
 8007baa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b25b      	sxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	da16      	bge.n	8007be4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	211a      	movs	r1, #26
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	211a      	movs	r1, #26
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bdc:	881a      	ldrh	r2, [r3, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	835a      	strh	r2, [r3, #26]
 8007be2:	e015      	b.n	8007c10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	211a      	movs	r1, #26
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	211a      	movs	r1, #26
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c0a:	881a      	ldrh	r2, [r3, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	211a      	movs	r1, #26
 8007c16:	fb01 f303 	mul.w	r3, r1, r3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b25b      	sxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	da16      	bge.n	8007c56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	211a      	movs	r1, #26
 8007c2e:	fb01 f303 	mul.w	r3, r1, r3
 8007c32:	4413      	add	r3, r2
 8007c34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	211a      	movs	r1, #26
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c4e:	881a      	ldrh	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	835a      	strh	r2, [r3, #26]
 8007c54:	e015      	b.n	8007c82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	211a      	movs	r1, #26
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	211a      	movs	r1, #26
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c7c:	881a      	ldrh	r2, [r3, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	7b9b      	ldrb	r3, [r3, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fef4 	bl	8008a76 <USBH_AllocPipe>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	461a      	mov	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	7bdb      	ldrb	r3, [r3, #15]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 feea 	bl	8008a76 <USBH_AllocPipe>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	7b59      	ldrb	r1, [r3, #13]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	7b98      	ldrb	r0, [r3, #14]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	8b12      	ldrh	r2, [r2, #24]
 8007cc2:	9202      	str	r2, [sp, #8]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	9201      	str	r2, [sp, #4]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4623      	mov	r3, r4
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fea2 	bl	8008a18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	7b19      	ldrb	r1, [r3, #12]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	7bd8      	ldrb	r0, [r3, #15]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	8b52      	ldrh	r2, [r2, #26]
 8007cec:	9202      	str	r2, [sp, #8]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	9201      	str	r2, [sp, #4]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fe8d 	bl	8008a18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	7b5b      	ldrb	r3, [r3, #13]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 f952 	bl	8008fb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	7b1b      	ldrb	r3, [r3, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f94b 	bl	8008fb8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fe82 	bl	8008a56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fead 	bl	8008ab8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7b1b      	ldrb	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	7b1b      	ldrb	r3, [r3, #12]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fe6f 	bl	8008a56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	7b1b      	ldrb	r3, [r3, #12]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fe9a 	bl	8008ab8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	7b5b      	ldrb	r3, [r3, #13]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00e      	beq.n	8007db0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	7b5b      	ldrb	r3, [r3, #13]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fe5c 	bl	8008a56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	7b5b      	ldrb	r3, [r3, #13]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fe87 	bl	8008ab8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f9a1 	bl	800910c <free>
    phost->pActiveClass->pData = 0U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3340      	adds	r3, #64	; 0x40
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8b1 	bl	8007f5e <GetLineCoding>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d877      	bhi.n	8007f30 <USBH_CDC_Process+0x114>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <USBH_CDC_Process+0x2c>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e5d 	.word	0x08007e5d
 8007e4c:	08007e63 	.word	0x08007e63
 8007e50:	08007e93 	.word	0x08007e93
 8007e54:	08007f07 	.word	0x08007f07
 8007e58:	08007f15 	.word	0x08007f15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e60:	e06d      	b.n	8007f3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f897 	bl	8007f9c <SetLineCoding>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e80:	e058      	b.n	8007f34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d055      	beq.n	8007f34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007e90:	e050      	b.n	8007f34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3340      	adds	r3, #64	; 0x40
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f860 	bl	8007f5e <GetLineCoding>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d126      	bne.n	8007ef6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d13b      	bne.n	8007f38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d133      	bne.n	8007f38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d12b      	bne.n	8007f38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d124      	bne.n	8007f38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f958 	bl	80081a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ef4:	e020      	b.n	8007f38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d01d      	beq.n	8007f38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2204      	movs	r2, #4
 8007f00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f04:	e018      	b.n	8007f38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f867 	bl	8007fda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f8da 	bl	80080c6 <CDC_ProcessReception>
      break;
 8007f12:	e014      	b.n	8007f3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007f14:	2100      	movs	r1, #0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fb08 	bl	800852c <USBH_ClrFeature>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007f2e:	e005      	b.n	8007f3c <USBH_CDC_Process+0x120>

    default:
      break;
 8007f30:	bf00      	nop
 8007f32:	e004      	b.n	8007f3e <USBH_CDC_Process+0x122>
      break;
 8007f34:	bf00      	nop
 8007f36:	e002      	b.n	8007f3e <USBH_CDC_Process+0x122>
      break;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <USBH_CDC_Process+0x122>
      break;
 8007f3c:	bf00      	nop

  }

  return status;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	22a1      	movs	r2, #161	; 0xa1
 8007f6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2221      	movs	r2, #33	; 0x21
 8007f72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2207      	movs	r2, #7
 8007f84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2207      	movs	r2, #7
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 faf1 	bl	8008574 <USBH_CtlReq>
 8007f92:	4603      	mov	r3, r0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2221      	movs	r2, #33	; 0x21
 8007faa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fad2 	bl	8008574 <USBH_CtlReq>
 8007fd0:	4603      	mov	r3, r0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af02      	add	r7, sp, #8
 8007fe0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d002      	beq.n	8008000 <CDC_ProcessTransmission+0x26>
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d023      	beq.n	8008046 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007ffe:	e05e      	b.n	80080be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	8b12      	ldrh	r2, [r2, #24]
 8008008:	4293      	cmp	r3, r2
 800800a:	d90b      	bls.n	8008024 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	69d9      	ldr	r1, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8b1a      	ldrh	r2, [r3, #24]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	7b5b      	ldrb	r3, [r3, #13]
 8008018:	2001      	movs	r0, #1
 800801a:	9000      	str	r0, [sp, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fcb8 	bl	8008992 <USBH_BulkSendData>
 8008022:	e00b      	b.n	800803c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	7b5b      	ldrb	r3, [r3, #13]
 8008032:	2001      	movs	r0, #1
 8008034:	9000      	str	r0, [sp, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fcab 	bl	8008992 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008044:	e03b      	b.n	80080be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	7b5b      	ldrb	r3, [r3, #13]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 ff89 	bl	8008f64 <USBH_LL_GetURBState>
 8008052:	4603      	mov	r3, r0
 8008054:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d128      	bne.n	80080ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	8b12      	ldrh	r2, [r2, #24]
 8008064:	4293      	cmp	r3, r2
 8008066:	d90e      	bls.n	8008086 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	8b12      	ldrh	r2, [r2, #24]
 8008070:	1a9a      	subs	r2, r3, r2
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	8b12      	ldrh	r2, [r2, #24]
 800807e:	441a      	add	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	61da      	str	r2, [r3, #28]
 8008084:	e002      	b.n	800808c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800809c:	e00e      	b.n	80080bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f868 	bl	800817c <USBH_CDC_TransmitCallback>
      break;
 80080ac:	e006      	b.n	80080bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80080ae:	7afb      	ldrb	r3, [r7, #11]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d103      	bne.n	80080bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80080bc:	bf00      	nop
  }
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080d8:	2300      	movs	r3, #0
 80080da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d002      	beq.n	80080ec <CDC_ProcessReception+0x26>
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d00e      	beq.n	8008108 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80080ea:	e043      	b.n	8008174 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	6a19      	ldr	r1, [r3, #32]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	8b5a      	ldrh	r2, [r3, #26]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	7b1b      	ldrb	r3, [r3, #12]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc6f 	bl	80089dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2204      	movs	r2, #4
 8008102:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008106:	e035      	b.n	8008174 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	7b1b      	ldrb	r3, [r3, #12]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 ff28 	bl	8008f64 <USBH_LL_GetURBState>
 8008114:	4603      	mov	r3, r0
 8008116:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008118:	7cfb      	ldrb	r3, [r7, #19]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d129      	bne.n	8008172 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	7b1b      	ldrb	r3, [r3, #12]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fe8b 	bl	8008e40 <USBH_LL_GetLastXferSize>
 800812a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	d016      	beq.n	8008164 <CDC_ProcessReception+0x9e>
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	8b5b      	ldrh	r3, [r3, #26]
 800813a:	461a      	mov	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4293      	cmp	r3, r2
 8008140:	d910      	bls.n	8008164 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad2      	subs	r2, r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	6a1a      	ldr	r2, [r3, #32]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	441a      	add	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2203      	movs	r2, #3
 800815e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008162:	e006      	b.n	8008172 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f80f 	bl	8008190 <USBH_CDC_ReceiveCallback>
      break;
 8008172:	bf00      	nop
  }
}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	e029      	b.n	8008224 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	79fa      	ldrb	r2, [r7, #7]
 80081d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f81f 	bl	800822c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fd93 	bl	8008d48 <USBH_LL_Init>

  return USBH_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e009      	b.n	8008252 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	33e0      	adds	r3, #224	; 0xe0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	2200      	movs	r2, #0
 800824a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b0f      	cmp	r3, #15
 8008256:	d9f2      	bls.n	800823e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	e009      	b.n	8008272 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3301      	adds	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008278:	d3f1      	bcc.n	800825e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2240      	movs	r2, #64	; 0x40
 800829e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10e      	bne.n	8008310 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082f8:	1c59      	adds	r1, r3, #1
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	33de      	adds	r3, #222	; 0xde
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
 800830e:	e004      	b.n	800831a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	e001      	b.n	800831a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008316:	2302      	movs	r3, #2
 8008318:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	429a      	cmp	r2, r3
 8008342:	d204      	bcs.n	800834e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800834c:	e001      	b.n	8008352 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800834e:	2302      	movs	r3, #2
 8008350:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4603      	mov	r3, r0
 8008370:	70fb      	strb	r3, [r7, #3]
 8008372:	460b      	mov	r3, r1
 8008374:	70bb      	strb	r3, [r7, #2]
 8008376:	4613      	mov	r3, r2
 8008378:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008388:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800838a:	e025      	b.n	80083d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	221a      	movs	r2, #26
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	3308      	adds	r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	3302      	adds	r3, #2
 800839c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	795b      	ldrb	r3, [r3, #5]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d002      	beq.n	80083ae <USBH_FindInterface+0x4e>
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	2bff      	cmp	r3, #255	; 0xff
 80083ac:	d111      	bne.n	80083d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083b2:	78ba      	ldrb	r2, [r7, #2]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d002      	beq.n	80083be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083b8:	78bb      	ldrb	r3, [r7, #2]
 80083ba:	2bff      	cmp	r3, #255	; 0xff
 80083bc:	d109      	bne.n	80083d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083c2:	787a      	ldrb	r2, [r7, #1]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d002      	beq.n	80083ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083c8:	787b      	ldrb	r3, [r7, #1]
 80083ca:	2bff      	cmp	r3, #255	; 0xff
 80083cc:	d101      	bne.n	80083d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	e006      	b.n	80083e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d9d6      	bls.n	800838c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80083de:	23ff      	movs	r3, #255	; 0xff
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fced 	bl	8008dd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80083fa:	2101      	movs	r1, #1
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fdc4 	bl	8008f8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f804 	bl	800844e <USBH_HandleSof>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b0b      	cmp	r3, #11
 800845e:	d10a      	bne.n	8008476 <USBH_HandleSof+0x28>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
  }
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800848e:	bf00      	nop
}
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80084aa:	bf00      	nop
}
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc80 	bl	8008e0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	791b      	ldrb	r3, [r3, #4]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fad1 	bl	8008ab8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 facb 	bl	8008ab8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	789b      	ldrb	r3, [r3, #2]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10f      	bne.n	8008560 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008560:	2200      	movs	r2, #0
 8008562:	2100      	movs	r1, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f805 	bl	8008574 <USBH_CtlReq>
 800856a:	4603      	mov	r3, r0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	789b      	ldrb	r3, [r3, #2]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d002      	beq.n	8008594 <USBH_CtlReq+0x20>
 800858e:	2b02      	cmp	r3, #2
 8008590:	d00f      	beq.n	80085b2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008592:	e027      	b.n	80085e4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	88fa      	ldrh	r2, [r7, #6]
 800859e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2202      	movs	r2, #2
 80085aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	e018      	b.n	80085e4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f81c 	bl	80085f0 <USBH_HandleControl>
 80085b8:	4603      	mov	r3, r0
 80085ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <USBH_CtlReq+0x54>
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d106      	bne.n	80085d6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	761a      	strb	r2, [r3, #24]
      break;
 80085d4:	e005      	b.n	80085e2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d102      	bne.n	80085e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	709a      	strb	r2, [r3, #2]
      break;
 80085e2:	bf00      	nop
  }
  return status;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	7e1b      	ldrb	r3, [r3, #24]
 8008604:	3b01      	subs	r3, #1
 8008606:	2b0a      	cmp	r3, #10
 8008608:	f200 8156 	bhi.w	80088b8 <USBH_HandleControl+0x2c8>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <USBH_HandleControl+0x24>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008641 	.word	0x08008641
 8008618:	0800865b 	.word	0x0800865b
 800861c:	080086c5 	.word	0x080086c5
 8008620:	080086eb 	.word	0x080086eb
 8008624:	08008723 	.word	0x08008723
 8008628:	0800874d 	.word	0x0800874d
 800862c:	0800879f 	.word	0x0800879f
 8008630:	080087c1 	.word	0x080087c1
 8008634:	080087fd 	.word	0x080087fd
 8008638:	08008823 	.word	0x08008823
 800863c:	08008861 	.word	0x08008861
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0110 	add.w	r1, r3, #16
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	795b      	ldrb	r3, [r3, #5]
 800864a:	461a      	mov	r2, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f943 	bl	80088d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2202      	movs	r2, #2
 8008656:	761a      	strb	r2, [r3, #24]
      break;
 8008658:	e139      	b.n	80088ce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	795b      	ldrb	r3, [r3, #5]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc7f 	bl	8008f64 <USBH_LL_GetURBState>
 8008666:	4603      	mov	r3, r0
 8008668:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d11e      	bne.n	80086ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008678:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	8adb      	ldrh	r3, [r3, #22]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008682:	7b7b      	ldrb	r3, [r7, #13]
 8008684:	2b80      	cmp	r3, #128	; 0x80
 8008686:	d103      	bne.n	8008690 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2203      	movs	r2, #3
 800868c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800868e:	e115      	b.n	80088bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2205      	movs	r2, #5
 8008694:	761a      	strb	r2, [r3, #24]
      break;
 8008696:	e111      	b.n	80088bc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008698:	7b7b      	ldrb	r3, [r7, #13]
 800869a:	2b80      	cmp	r3, #128	; 0x80
 800869c:	d103      	bne.n	80086a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2209      	movs	r2, #9
 80086a2:	761a      	strb	r2, [r3, #24]
      break;
 80086a4:	e10a      	b.n	80088bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2207      	movs	r2, #7
 80086aa:	761a      	strb	r2, [r3, #24]
      break;
 80086ac:	e106      	b.n	80088bc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d003      	beq.n	80086bc <USBH_HandleControl+0xcc>
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	f040 8100 	bne.w	80088bc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	220b      	movs	r2, #11
 80086c0:	761a      	strb	r2, [r3, #24]
      break;
 80086c2:	e0fb      	b.n	80088bc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6899      	ldr	r1, [r3, #8]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	899a      	ldrh	r2, [r3, #12]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	791b      	ldrb	r3, [r3, #4]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f93a 	bl	8008956 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2204      	movs	r2, #4
 80086e6:	761a      	strb	r2, [r3, #24]
      break;
 80086e8:	e0f1      	b.n	80088ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	791b      	ldrb	r3, [r3, #4]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc37 	bl	8008f64 <USBH_LL_GetURBState>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d102      	bne.n	8008706 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2209      	movs	r2, #9
 8008704:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b05      	cmp	r3, #5
 800870a:	d102      	bne.n	8008712 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800870c:	2303      	movs	r3, #3
 800870e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008710:	e0d6      	b.n	80088c0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b04      	cmp	r3, #4
 8008716:	f040 80d3 	bne.w	80088c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	220b      	movs	r2, #11
 800871e:	761a      	strb	r2, [r3, #24]
      break;
 8008720:	e0ce      	b.n	80088c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6899      	ldr	r1, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	899a      	ldrh	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	795b      	ldrb	r3, [r3, #5]
 800872e:	2001      	movs	r0, #1
 8008730:	9000      	str	r0, [sp, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f8ea 	bl	800890c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2206      	movs	r2, #6
 8008748:	761a      	strb	r2, [r3, #24]
      break;
 800874a:	e0c0      	b.n	80088ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	795b      	ldrb	r3, [r3, #5]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fc06 	bl	8008f64 <USBH_LL_GetURBState>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d103      	bne.n	800876a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2207      	movs	r2, #7
 8008766:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008768:	e0ac      	b.n	80088c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b05      	cmp	r3, #5
 800876e:	d105      	bne.n	800877c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	220c      	movs	r2, #12
 8008774:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
      break;
 800877a:	e0a3      	b.n	80088c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d103      	bne.n	800878a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2205      	movs	r2, #5
 8008786:	761a      	strb	r2, [r3, #24]
      break;
 8008788:	e09c      	b.n	80088c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2b04      	cmp	r3, #4
 800878e:	f040 8099 	bne.w	80088c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	220b      	movs	r2, #11
 8008796:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008798:	2302      	movs	r3, #2
 800879a:	73fb      	strb	r3, [r7, #15]
      break;
 800879c:	e092      	b.n	80088c4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	791b      	ldrb	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8d5 	bl	8008956 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2208      	movs	r2, #8
 80087bc:	761a      	strb	r2, [r3, #24]

      break;
 80087be:	e086      	b.n	80088ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	791b      	ldrb	r3, [r3, #4]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fbcc 	bl	8008f64 <USBH_LL_GetURBState>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d105      	bne.n	80087e2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	220d      	movs	r2, #13
 80087da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087e0:	e072      	b.n	80088c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d103      	bne.n	80087f0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	220b      	movs	r2, #11
 80087ec:	761a      	strb	r2, [r3, #24]
      break;
 80087ee:	e06b      	b.n	80088c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d168      	bne.n	80088c8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087f6:	2303      	movs	r3, #3
 80087f8:	73fb      	strb	r3, [r7, #15]
      break;
 80087fa:	e065      	b.n	80088c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	795b      	ldrb	r3, [r3, #5]
 8008800:	2201      	movs	r2, #1
 8008802:	9200      	str	r2, [sp, #0]
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f87f 	bl	800890c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	220a      	movs	r2, #10
 800881e:	761a      	strb	r2, [r3, #24]
      break;
 8008820:	e055      	b.n	80088ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	795b      	ldrb	r3, [r3, #5]
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb9b 	bl	8008f64 <USBH_LL_GetURBState>
 800882e:	4603      	mov	r3, r0
 8008830:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d105      	bne.n	8008844 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	220d      	movs	r2, #13
 8008840:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008842:	e043      	b.n	80088cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d103      	bne.n	8008852 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2209      	movs	r2, #9
 800884e:	761a      	strb	r2, [r3, #24]
      break;
 8008850:	e03c      	b.n	80088cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b04      	cmp	r3, #4
 8008856:	d139      	bne.n	80088cc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	220b      	movs	r2, #11
 800885c:	761a      	strb	r2, [r3, #24]
      break;
 800885e:	e035      	b.n	80088cc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7e5b      	ldrb	r3, [r3, #25]
 8008864:	3301      	adds	r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	765a      	strb	r2, [r3, #25]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	7e5b      	ldrb	r3, [r3, #25]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d806      	bhi.n	8008882 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008880:	e025      	b.n	80088ce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008888:	2106      	movs	r1, #6
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	795b      	ldrb	r3, [r3, #5]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f90c 	bl	8008ab8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	791b      	ldrb	r3, [r3, #4]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f906 	bl	8008ab8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088b2:	2302      	movs	r3, #2
 80088b4:	73fb      	strb	r3, [r7, #15]
      break;
 80088b6:	e00a      	b.n	80088ce <USBH_HandleControl+0x2de>

    default:
      break;
 80088b8:	bf00      	nop
 80088ba:	e008      	b.n	80088ce <USBH_HandleControl+0x2de>
      break;
 80088bc:	bf00      	nop
 80088be:	e006      	b.n	80088ce <USBH_HandleControl+0x2de>
      break;
 80088c0:	bf00      	nop
 80088c2:	e004      	b.n	80088ce <USBH_HandleControl+0x2de>
      break;
 80088c4:	bf00      	nop
 80088c6:	e002      	b.n	80088ce <USBH_HandleControl+0x2de>
      break;
 80088c8:	bf00      	nop
 80088ca:	e000      	b.n	80088ce <USBH_HandleControl+0x2de>
      break;
 80088cc:	bf00      	nop
  }

  return status;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af04      	add	r7, sp, #16
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088e6:	79f9      	ldrb	r1, [r7, #7]
 80088e8:	2300      	movs	r3, #0
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	2308      	movs	r3, #8
 80088ee:	9302      	str	r3, [sp, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	2300      	movs	r3, #0
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fb00 	bl	8008f02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	af04      	add	r7, sp, #16
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	460b      	mov	r3, r1
 800891c:	80fb      	strh	r3, [r7, #6]
 800891e:	4613      	mov	r3, r2
 8008920:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008930:	7979      	ldrb	r1, [r7, #5]
 8008932:	7e3b      	ldrb	r3, [r7, #24]
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	2301      	movs	r3, #1
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	2200      	movs	r2, #0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fadb 	bl	8008f02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b088      	sub	sp, #32
 800895a:	af04      	add	r7, sp, #16
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	4611      	mov	r1, r2
 8008962:	461a      	mov	r2, r3
 8008964:	460b      	mov	r3, r1
 8008966:	80fb      	strh	r3, [r7, #6]
 8008968:	4613      	mov	r3, r2
 800896a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800896c:	7979      	ldrb	r1, [r7, #5]
 800896e:	2300      	movs	r3, #0
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	2301      	movs	r3, #1
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	2201      	movs	r2, #1
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fabd 	bl	8008f02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008988:	2300      	movs	r3, #0

}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	af04      	add	r7, sp, #16
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	4611      	mov	r1, r2
 800899e:	461a      	mov	r2, r3
 80089a0:	460b      	mov	r3, r1
 80089a2:	80fb      	strh	r3, [r7, #6]
 80089a4:	4613      	mov	r3, r2
 80089a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089b6:	7979      	ldrb	r1, [r7, #5]
 80089b8:	7e3b      	ldrb	r3, [r7, #24]
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	9302      	str	r3, [sp, #8]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	2301      	movs	r3, #1
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2302      	movs	r3, #2
 80089ca:	2200      	movs	r2, #0
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fa98 	bl	8008f02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af04      	add	r7, sp, #16
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	460b      	mov	r3, r1
 80089ec:	80fb      	strh	r3, [r7, #6]
 80089ee:	4613      	mov	r3, r2
 80089f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089f2:	7979      	ldrb	r1, [r7, #5]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	2301      	movs	r3, #1
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2302      	movs	r3, #2
 8008a06:	2201      	movs	r2, #1
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fa7a 	bl	8008f02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af04      	add	r7, sp, #16
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4603      	mov	r3, r0
 8008a28:	70fb      	strb	r3, [r7, #3]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70bb      	strb	r3, [r7, #2]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a32:	7878      	ldrb	r0, [r7, #1]
 8008a34:	78ba      	ldrb	r2, [r7, #2]
 8008a36:	78f9      	ldrb	r1, [r7, #3]
 8008a38:	8b3b      	ldrh	r3, [r7, #24]
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	7d3b      	ldrb	r3, [r7, #20]
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	7c3b      	ldrb	r3, [r7, #16]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa0d 	bl	8008e66 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa2c 	bl	8008ec4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f836 	bl	8008af4 <USBH_GetFreePipe>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a8c:	89fb      	ldrh	r3, [r7, #14]
 8008a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00a      	beq.n	8008aac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	89fb      	ldrh	r3, [r7, #14]
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	33e0      	adds	r3, #224	; 0xe0
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008aac:	89fb      	ldrh	r3, [r7, #14]
 8008aae:	b2db      	uxtb	r3, r3
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d80d      	bhi.n	8008ae6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	33e0      	adds	r3, #224	; 0xe0
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	33e0      	adds	r3, #224	; 0xe0
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
 8008b04:	e00f      	b.n	8008b26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	33e0      	adds	r3, #224	; 0xe0
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d102      	bne.n	8008b20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	e007      	b.n	8008b30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	3301      	adds	r3, #1
 8008b24:	73fb      	strb	r3, [r7, #15]
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d9ec      	bls.n	8008b06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8008b40:	2200      	movs	r2, #0
 8008b42:	490e      	ldr	r1, [pc, #56]	; (8008b7c <MX_USB_HOST_Init+0x40>)
 8008b44:	480e      	ldr	r0, [pc, #56]	; (8008b80 <MX_USB_HOST_Init+0x44>)
 8008b46:	f7ff fb37 	bl	80081b8 <USBH_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b50:	f7f8 f9de 	bl	8000f10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8008b54:	490b      	ldr	r1, [pc, #44]	; (8008b84 <MX_USB_HOST_Init+0x48>)
 8008b56:	480a      	ldr	r0, [pc, #40]	; (8008b80 <MX_USB_HOST_Init+0x44>)
 8008b58:	f7ff fbbc 	bl	80082d4 <USBH_RegisterClass>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b62:	f7f8 f9d5 	bl	8000f10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8008b66:	4806      	ldr	r0, [pc, #24]	; (8008b80 <MX_USB_HOST_Init+0x44>)
 8008b68:	f7ff fc40 	bl	80083ec <USBH_Start>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b72:	f7f8 f9cd 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08008b89 	.word	0x08008b89
 8008b80:	20000364 	.word	0x20000364
 8008b84:	2000000c 	.word	0x2000000c

08008b88 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d819      	bhi.n	8008bd0 <USBH_UserProcess+0x48>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBH_UserProcess+0x1c>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bb9 	.word	0x08008bb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bba:	2203      	movs	r2, #3
 8008bbc:	701a      	strb	r2, [r3, #0]
  break;
 8008bbe:	e008      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	701a      	strb	r2, [r3, #0]
  break;
 8008bc6:	e004      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
  break;
 8008bce:	e000      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008bd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	2000073c 	.word	0x2000073c

08008be4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	60da      	str	r2, [r3, #12]
 8008bfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a24      	ldr	r2, [pc, #144]	; (8008c94 <HAL_HCD_MspInit+0xb0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d141      	bne.n	8008c8a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c06:	2300      	movs	r3, #0
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	4b23      	ldr	r3, [pc, #140]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	4a22      	ldr	r2, [pc, #136]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c10:	f043 0302 	orr.w	r3, r3, #2
 8008c14:	6313      	str	r3, [r2, #48]	; 0x30
 8008c16:	4b20      	ldr	r3, [pc, #128]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8008c22:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8008c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c28:	2302      	movs	r3, #2
 8008c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008c34:	230c      	movs	r3, #12
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4817      	ldr	r0, [pc, #92]	; (8008c9c <HAL_HCD_MspInit+0xb8>)
 8008c40:	f7f9 fc02 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8008c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8008c52:	f107 0314 	add.w	r3, r7, #20
 8008c56:	4619      	mov	r1, r3
 8008c58:	4810      	ldr	r0, [pc, #64]	; (8008c9c <HAL_HCD_MspInit+0xb8>)
 8008c5a:	f7f9 fbf5 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	4a0c      	ldr	r2, [pc, #48]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <HAL_HCD_MspInit+0xb4>)
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	204d      	movs	r0, #77	; 0x4d
 8008c80:	f7f9 f80a 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008c84:	204d      	movs	r0, #77	; 0x4d
 8008c86:	f7f9 f823 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3728      	adds	r7, #40	; 0x28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40040000 	.word	0x40040000
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	40020400 	.word	0x40020400

08008ca0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fbbb 	bl	800842a <USBH_LL_IncTimer>
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fbf3 	bl	80084b6 <USBH_LL_Connect>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff fbfc 	bl	80084e4 <USBH_LL_Disconnect>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
 8008d00:	4613      	mov	r3, r2
 8008d02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fbad 	bl	800847e <USBH_LL_PortEnabled>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fbad 	bl	800849a <USBH_LL_PortDisabled>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d132      	bne.n	8008dc0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8008d5a:	4a1c      	ldr	r2, [pc, #112]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a19      	ldr	r2, [pc, #100]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008d6a:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d6c:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <USBH_LL_Init+0x88>)
 8008d6e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8008d70:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d72:	220c      	movs	r2, #12
 8008d74:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8008d76:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008d7c:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d84:	2202      	movs	r2, #2
 8008d86:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008d88:	4b10      	ldr	r3, [pc, #64]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <USBH_LL_Init+0x84>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8008da0:	480a      	ldr	r0, [pc, #40]	; (8008dcc <USBH_LL_Init+0x84>)
 8008da2:	f7f9 fd16 	bl	80027d2 <HAL_HCD_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8008dac:	f7f8 f8b0 	bl	8000f10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8008db0:	4806      	ldr	r0, [pc, #24]	; (8008dcc <USBH_LL_Init+0x84>)
 8008db2:	f7fa f8ec 	bl	8002f8e <HAL_HCD_GetCurrentFrame>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fb26 	bl	800840c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000740 	.word	0x20000740
 8008dd0:	40040000 	.word	0x40040000

08008dd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fa f867 	bl	8002ebe <HAL_HCD_Start>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f90e 	bl	8009018 <USBH_Get_USB_Status>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fa f86f 	bl	8002f04 <HAL_HCD_Stop>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f8f3 	bl	8009018 <USBH_Get_USB_Status>
 8008e32:	4603      	mov	r3, r0
 8008e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fa f885 	bl	8002f66 <HAL_HCD_HC_GetXferCount>
 8008e5c:	4603      	mov	r3, r0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e66:	b590      	push	{r4, r7, lr}
 8008e68:	b089      	sub	sp, #36	; 0x24
 8008e6a:	af04      	add	r7, sp, #16
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	461a      	mov	r2, r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70bb      	strb	r3, [r7, #2]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e8e:	787c      	ldrb	r4, [r7, #1]
 8008e90:	78ba      	ldrb	r2, [r7, #2]
 8008e92:	78f9      	ldrb	r1, [r7, #3]
 8008e94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	f7f9 fcf6 	bl	8002896 <HAL_HCD_HC_Init>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f8b1 	bl	8009018 <USBH_Get_USB_Status>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd90      	pop	{r4, r7, pc}

08008ec4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7f9 fd66 	bl	80029b4 <HAL_HCD_HC_Halt>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f892 	bl	8009018 <USBH_Get_USB_Status>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f02:	b590      	push	{r4, r7, lr}
 8008f04:	b089      	sub	sp, #36	; 0x24
 8008f06:	af04      	add	r7, sp, #16
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	70fb      	strb	r3, [r7, #3]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70bb      	strb	r3, [r7, #2]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f2a:	787c      	ldrb	r4, [r7, #1]
 8008f2c:	78ba      	ldrb	r2, [r7, #2]
 8008f2e:	78f9      	ldrb	r1, [r7, #3]
 8008f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f34:	9303      	str	r3, [sp, #12]
 8008f36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f38:	9302      	str	r3, [sp, #8]
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	4623      	mov	r3, r4
 8008f46:	f7f9 fd59 	bl	80029fc <HAL_HCD_HC_SubmitRequest>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f861 	bl	8009018 <USBH_Get_USB_Status>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}

08008f64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7f9 ffdf 	bl	8002f3e <HAL_HCD_HC_GetURBState>
 8008f80:	4603      	mov	r3, r0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f864 	bl	8009070 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fa8:	20c8      	movs	r0, #200	; 0xc8
 8008faa:	f7f8 fd99 	bl	8001ae0 <HAL_Delay>
  return USBH_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	212c      	movs	r1, #44	; 0x2c
 8008fd6:	fb01 f303 	mul.w	r3, r1, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	333b      	adds	r3, #59	; 0x3b
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	212c      	movs	r1, #44	; 0x2c
 8008fea:	fb01 f303 	mul.w	r3, r1, r3
 8008fee:	4413      	add	r3, r2
 8008ff0:	3354      	adds	r3, #84	; 0x54
 8008ff2:	78ba      	ldrb	r2, [r7, #2]
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e008      	b.n	800900a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	212c      	movs	r1, #44	; 0x2c
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	3355      	adds	r3, #85	; 0x55
 8009006:	78ba      	ldrb	r2, [r7, #2]
 8009008:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	2b03      	cmp	r3, #3
 800902a:	d817      	bhi.n	800905c <USBH_Get_USB_Status+0x44>
 800902c:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <USBH_Get_USB_Status+0x1c>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	08009045 	.word	0x08009045
 8009038:	0800904b 	.word	0x0800904b
 800903c:	08009051 	.word	0x08009051
 8009040:	08009057 	.word	0x08009057
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
    break;
 8009048:	e00b      	b.n	8009062 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800904a:	2302      	movs	r3, #2
 800904c:	73fb      	strb	r3, [r7, #15]
    break;
 800904e:	e008      	b.n	8009062 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009050:	2301      	movs	r3, #1
 8009052:	73fb      	strb	r3, [r7, #15]
    break;
 8009054:	e005      	b.n	8009062 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009056:	2302      	movs	r3, #2
 8009058:	73fb      	strb	r3, [r7, #15]
    break;
 800905a:	e002      	b.n	8009062 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800905c:	2302      	movs	r3, #2
 800905e:	73fb      	strb	r3, [r7, #15]
    break;
 8009060:	bf00      	nop
  }
  return usb_status;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009084:	2301      	movs	r3, #1
 8009086:	73fb      	strb	r3, [r7, #15]
 8009088:	e001      	b.n	800908e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	461a      	mov	r2, r3
 8009092:	2110      	movs	r1, #16
 8009094:	4803      	ldr	r0, [pc, #12]	; (80090a4 <MX_DriverVbusHS+0x34>)
 8009096:	f7f9 fb83 	bl	80027a0 <HAL_GPIO_WritePin>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40020800 	.word	0x40020800

080090a8 <__errno>:
 80090a8:	4b01      	ldr	r3, [pc, #4]	; (80090b0 <__errno+0x8>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	2000002c 	.word	0x2000002c

080090b4 <__libc_init_array>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4d0d      	ldr	r5, [pc, #52]	; (80090ec <__libc_init_array+0x38>)
 80090b8:	4c0d      	ldr	r4, [pc, #52]	; (80090f0 <__libc_init_array+0x3c>)
 80090ba:	1b64      	subs	r4, r4, r5
 80090bc:	10a4      	asrs	r4, r4, #2
 80090be:	2600      	movs	r6, #0
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	d109      	bne.n	80090d8 <__libc_init_array+0x24>
 80090c4:	4d0b      	ldr	r5, [pc, #44]	; (80090f4 <__libc_init_array+0x40>)
 80090c6:	4c0c      	ldr	r4, [pc, #48]	; (80090f8 <__libc_init_array+0x44>)
 80090c8:	f000 f92e 	bl	8009328 <_init>
 80090cc:	1b64      	subs	r4, r4, r5
 80090ce:	10a4      	asrs	r4, r4, #2
 80090d0:	2600      	movs	r6, #0
 80090d2:	42a6      	cmp	r6, r4
 80090d4:	d105      	bne.n	80090e2 <__libc_init_array+0x2e>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090dc:	4798      	blx	r3
 80090de:	3601      	adds	r6, #1
 80090e0:	e7ee      	b.n	80090c0 <__libc_init_array+0xc>
 80090e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e6:	4798      	blx	r3
 80090e8:	3601      	adds	r6, #1
 80090ea:	e7f2      	b.n	80090d2 <__libc_init_array+0x1e>
 80090ec:	0800936c 	.word	0x0800936c
 80090f0:	0800936c 	.word	0x0800936c
 80090f4:	0800936c 	.word	0x0800936c
 80090f8:	08009370 	.word	0x08009370

080090fc <malloc>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <malloc+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f000 b87f 	b.w	8009204 <_malloc_r>
 8009106:	bf00      	nop
 8009108:	2000002c 	.word	0x2000002c

0800910c <free>:
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <free+0xc>)
 800910e:	4601      	mov	r1, r0
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f000 b80b 	b.w	800912c <_free_r>
 8009116:	bf00      	nop
 8009118:	2000002c 	.word	0x2000002c

0800911c <memset>:
 800911c:	4402      	add	r2, r0
 800911e:	4603      	mov	r3, r0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <memset+0xa>
 8009124:	4770      	bx	lr
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <memset+0x4>

0800912c <_free_r>:
 800912c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912e:	2900      	cmp	r1, #0
 8009130:	d044      	beq.n	80091bc <_free_r+0x90>
 8009132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f1a1 0404 	sub.w	r4, r1, #4
 800913e:	bfb8      	it	lt
 8009140:	18e4      	addlt	r4, r4, r3
 8009142:	f000 f8e3 	bl	800930c <__malloc_lock>
 8009146:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <_free_r+0x94>)
 8009148:	9801      	ldr	r0, [sp, #4]
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	b933      	cbnz	r3, 800915c <_free_r+0x30>
 800914e:	6063      	str	r3, [r4, #4]
 8009150:	6014      	str	r4, [r2, #0]
 8009152:	b003      	add	sp, #12
 8009154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009158:	f000 b8de 	b.w	8009318 <__malloc_unlock>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d908      	bls.n	8009172 <_free_r+0x46>
 8009160:	6825      	ldr	r5, [r4, #0]
 8009162:	1961      	adds	r1, r4, r5
 8009164:	428b      	cmp	r3, r1
 8009166:	bf01      	itttt	eq
 8009168:	6819      	ldreq	r1, [r3, #0]
 800916a:	685b      	ldreq	r3, [r3, #4]
 800916c:	1949      	addeq	r1, r1, r5
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	e7ed      	b.n	800914e <_free_r+0x22>
 8009172:	461a      	mov	r2, r3
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b10b      	cbz	r3, 800917c <_free_r+0x50>
 8009178:	42a3      	cmp	r3, r4
 800917a:	d9fa      	bls.n	8009172 <_free_r+0x46>
 800917c:	6811      	ldr	r1, [r2, #0]
 800917e:	1855      	adds	r5, r2, r1
 8009180:	42a5      	cmp	r5, r4
 8009182:	d10b      	bne.n	800919c <_free_r+0x70>
 8009184:	6824      	ldr	r4, [r4, #0]
 8009186:	4421      	add	r1, r4
 8009188:	1854      	adds	r4, r2, r1
 800918a:	42a3      	cmp	r3, r4
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	d1e0      	bne.n	8009152 <_free_r+0x26>
 8009190:	681c      	ldr	r4, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	6053      	str	r3, [r2, #4]
 8009196:	4421      	add	r1, r4
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	e7da      	b.n	8009152 <_free_r+0x26>
 800919c:	d902      	bls.n	80091a4 <_free_r+0x78>
 800919e:	230c      	movs	r3, #12
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	e7d6      	b.n	8009152 <_free_r+0x26>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf04      	itt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	bf04      	itt	eq
 80091b4:	1949      	addeq	r1, r1, r5
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	6054      	str	r4, [r2, #4]
 80091ba:	e7ca      	b.n	8009152 <_free_r+0x26>
 80091bc:	b003      	add	sp, #12
 80091be:	bd30      	pop	{r4, r5, pc}
 80091c0:	20000a44 	.word	0x20000a44

080091c4 <sbrk_aligned>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4e0e      	ldr	r6, [pc, #56]	; (8009200 <sbrk_aligned+0x3c>)
 80091c8:	460c      	mov	r4, r1
 80091ca:	6831      	ldr	r1, [r6, #0]
 80091cc:	4605      	mov	r5, r0
 80091ce:	b911      	cbnz	r1, 80091d6 <sbrk_aligned+0x12>
 80091d0:	f000 f88c 	bl	80092ec <_sbrk_r>
 80091d4:	6030      	str	r0, [r6, #0]
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 f887 	bl	80092ec <_sbrk_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <sbrk_aligned+0x34>
 80091e2:	1cc4      	adds	r4, r0, #3
 80091e4:	f024 0403 	bic.w	r4, r4, #3
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d007      	beq.n	80091fc <sbrk_aligned+0x38>
 80091ec:	1a21      	subs	r1, r4, r0
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 f87c 	bl	80092ec <_sbrk_r>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d101      	bne.n	80091fc <sbrk_aligned+0x38>
 80091f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	20000a48 	.word	0x20000a48

08009204 <_malloc_r>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	1ccd      	adds	r5, r1, #3
 800920a:	f025 0503 	bic.w	r5, r5, #3
 800920e:	3508      	adds	r5, #8
 8009210:	2d0c      	cmp	r5, #12
 8009212:	bf38      	it	cc
 8009214:	250c      	movcc	r5, #12
 8009216:	2d00      	cmp	r5, #0
 8009218:	4607      	mov	r7, r0
 800921a:	db01      	blt.n	8009220 <_malloc_r+0x1c>
 800921c:	42a9      	cmp	r1, r5
 800921e:	d905      	bls.n	800922c <_malloc_r+0x28>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	2600      	movs	r6, #0
 8009226:	4630      	mov	r0, r6
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	4e2e      	ldr	r6, [pc, #184]	; (80092e8 <_malloc_r+0xe4>)
 800922e:	f000 f86d 	bl	800930c <__malloc_lock>
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	461c      	mov	r4, r3
 8009236:	bb34      	cbnz	r4, 8009286 <_malloc_r+0x82>
 8009238:	4629      	mov	r1, r5
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ffc2 	bl	80091c4 <sbrk_aligned>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	4604      	mov	r4, r0
 8009244:	d14d      	bne.n	80092e2 <_malloc_r+0xde>
 8009246:	6834      	ldr	r4, [r6, #0]
 8009248:	4626      	mov	r6, r4
 800924a:	2e00      	cmp	r6, #0
 800924c:	d140      	bne.n	80092d0 <_malloc_r+0xcc>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	4631      	mov	r1, r6
 8009252:	4638      	mov	r0, r7
 8009254:	eb04 0803 	add.w	r8, r4, r3
 8009258:	f000 f848 	bl	80092ec <_sbrk_r>
 800925c:	4580      	cmp	r8, r0
 800925e:	d13a      	bne.n	80092d6 <_malloc_r+0xd2>
 8009260:	6821      	ldr	r1, [r4, #0]
 8009262:	3503      	adds	r5, #3
 8009264:	1a6d      	subs	r5, r5, r1
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	4629      	mov	r1, r5
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ffa5 	bl	80091c4 <sbrk_aligned>
 800927a:	3001      	adds	r0, #1
 800927c:	d02b      	beq.n	80092d6 <_malloc_r+0xd2>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	442b      	add	r3, r5
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	e00e      	b.n	80092a4 <_malloc_r+0xa0>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	1b52      	subs	r2, r2, r5
 800928a:	d41e      	bmi.n	80092ca <_malloc_r+0xc6>
 800928c:	2a0b      	cmp	r2, #11
 800928e:	d916      	bls.n	80092be <_malloc_r+0xba>
 8009290:	1961      	adds	r1, r4, r5
 8009292:	42a3      	cmp	r3, r4
 8009294:	6025      	str	r5, [r4, #0]
 8009296:	bf18      	it	ne
 8009298:	6059      	strne	r1, [r3, #4]
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	bf08      	it	eq
 800929e:	6031      	streq	r1, [r6, #0]
 80092a0:	5162      	str	r2, [r4, r5]
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	4638      	mov	r0, r7
 80092a6:	f104 060b 	add.w	r6, r4, #11
 80092aa:	f000 f835 	bl	8009318 <__malloc_unlock>
 80092ae:	f026 0607 	bic.w	r6, r6, #7
 80092b2:	1d23      	adds	r3, r4, #4
 80092b4:	1af2      	subs	r2, r6, r3
 80092b6:	d0b6      	beq.n	8009226 <_malloc_r+0x22>
 80092b8:	1b9b      	subs	r3, r3, r6
 80092ba:	50a3      	str	r3, [r4, r2]
 80092bc:	e7b3      	b.n	8009226 <_malloc_r+0x22>
 80092be:	6862      	ldr	r2, [r4, #4]
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	bf0c      	ite	eq
 80092c4:	6032      	streq	r2, [r6, #0]
 80092c6:	605a      	strne	r2, [r3, #4]
 80092c8:	e7ec      	b.n	80092a4 <_malloc_r+0xa0>
 80092ca:	4623      	mov	r3, r4
 80092cc:	6864      	ldr	r4, [r4, #4]
 80092ce:	e7b2      	b.n	8009236 <_malloc_r+0x32>
 80092d0:	4634      	mov	r4, r6
 80092d2:	6876      	ldr	r6, [r6, #4]
 80092d4:	e7b9      	b.n	800924a <_malloc_r+0x46>
 80092d6:	230c      	movs	r3, #12
 80092d8:	603b      	str	r3, [r7, #0]
 80092da:	4638      	mov	r0, r7
 80092dc:	f000 f81c 	bl	8009318 <__malloc_unlock>
 80092e0:	e7a1      	b.n	8009226 <_malloc_r+0x22>
 80092e2:	6025      	str	r5, [r4, #0]
 80092e4:	e7de      	b.n	80092a4 <_malloc_r+0xa0>
 80092e6:	bf00      	nop
 80092e8:	20000a44 	.word	0x20000a44

080092ec <_sbrk_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_sbrk_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 fb3e 	bl	8001978 <_sbrk>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_sbrk_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_sbrk_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	20000a4c 	.word	0x20000a4c

0800930c <__malloc_lock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_lock+0x8>)
 800930e:	f000 b809 	b.w	8009324 <__retarget_lock_acquire_recursive>
 8009312:	bf00      	nop
 8009314:	20000a50 	.word	0x20000a50

08009318 <__malloc_unlock>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__malloc_unlock+0x8>)
 800931a:	f000 b804 	b.w	8009326 <__retarget_lock_release_recursive>
 800931e:	bf00      	nop
 8009320:	20000a50 	.word	0x20000a50

08009324 <__retarget_lock_acquire_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_release_recursive>:
 8009326:	4770      	bx	lr

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
