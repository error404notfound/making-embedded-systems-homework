
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ac  080073ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b4  080073b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000884  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169f6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d7f  00000000  00000000  00036a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002651e  00000000  00000000  0003bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018272  00000000  00000000  00062266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e243e  00000000  00000000  0007a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c916  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  0015c968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007260 	.word	0x08007260

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007260 	.word	0x08007260

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f829 	bl	80005f4 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <ConsoleInit+0x4c>)
 80005a4:	f000 f83e 	bl	8000624 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <ConsoleInit+0x50>)
 80005aa:	f000 f83b 	bl	8000624 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <ConsoleInit+0x54>)
 80005b0:	f000 f838 	bl	8000624 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <ConsoleInit+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e007      	b.n	80005d0 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <ConsoleInit+0x5c>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2bff      	cmp	r3, #255	; 0xff
 80005d4:	d9f4      	bls.n	80005c0 <ConsoleInit+0x2c>
	}

}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08007278 	.word	0x08007278
 80005e4:	080072c4 	.word	0x080072c4
 80005e8:	080072c8 	.word	0x080072c8
 80005ec:	2000018c 	.word	0x2000018c
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <ConsoleIoInit>:

}

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <ConsoleIoInit+0x28>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <ConsoleIoInit+0x28>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2201      	movs	r2, #1
 8000608:	4905      	ldr	r1, [pc, #20]	; (8000620 <ConsoleIoInit+0x2c>)
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fe01 	bl	8005212 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000190 	.word	0x20000190
 8000620:	200001a6 	.word	0x200001a6

08000624 <ConsoleIoSendString>:
	*readLength = i;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <ConsoleIoSendString+0x1c>)
 8000630:	f005 fdba 	bl	80061a8 <iprintf>
	return CONSOLE_SUCCESS;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	080072f0 	.word	0x080072f0

08000644 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_UART_RxCpltCallback+0x44>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_UART_RxCpltCallback+0x48>)
 8000652:	7811      	ldrb	r1, [r2, #0]
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_UART_RxCpltCallback+0x4c>)
 8000656:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <HAL_UART_RxCpltCallback+0x44>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <HAL_UART_RxCpltCallback+0x44>)
 8000660:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_UART_RxCpltCallback+0x48>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b0a      	cmp	r3, #10
 8000668:	d102      	bne.n	8000670 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_UART_RxCpltCallback+0x50>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_UART_RxCpltCallback+0x54>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2201      	movs	r2, #1
 8000676:	4905      	ldr	r1, [pc, #20]	; (800068c <HAL_UART_RxCpltCallback+0x48>)
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fdca 	bl	8005212 <HAL_UART_Receive_IT>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000198 	.word	0x20000198
 800068c:	200001a6 	.word	0x200001a6
 8000690:	2000019c 	.word	0x2000019c
 8000694:	20000194 	.word	0x20000194
 8000698:	20000190 	.word	0x20000190

0800069c <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2102      	movs	r1, #2
 80006a4:	4849      	ldr	r0, [pc, #292]	; (80007cc <I3G450D_Init+0x130>)
 80006a6:	f002 f8b1 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f001 f9ae 	bl	8001a0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	4845      	ldr	r0, [pc, #276]	; (80007cc <I3G450D_Init+0x130>)
 80006b6:	f002 f8a9 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006ba:	2014      	movs	r0, #20
 80006bc:	f001 f9a6 	bl	8001a0c <HAL_Delay>
	spiTxBuf[0]=0x20;
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <I3G450D_Init+0x134>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <I3G450D_Init+0x134>)
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	2202      	movs	r2, #2
 80006d0:	493f      	ldr	r1, [pc, #252]	; (80007d0 <I3G450D_Init+0x134>)
 80006d2:	4840      	ldr	r0, [pc, #256]	; (80007d4 <I3G450D_Init+0x138>)
 80006d4:	f002 ff95 	bl	8003602 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2102      	movs	r1, #2
 80006dc:	483b      	ldr	r0, [pc, #236]	; (80007cc <I3G450D_Init+0x130>)
 80006de:	f002 f895 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006e2:	2014      	movs	r0, #20
 80006e4:	f001 f992 	bl	8001a0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2102      	movs	r1, #2
 80006ec:	4837      	ldr	r0, [pc, #220]	; (80007cc <I3G450D_Init+0x130>)
 80006ee:	f002 f88d 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006f2:	2014      	movs	r0, #20
 80006f4:	f001 f98a 	bl	8001a0c <HAL_Delay>
	spiTxBuf[0]=0x21;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <I3G450D_Init+0x134>)
 80006fa:	2221      	movs	r2, #33	; 0x21
 80006fc:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <I3G450D_Init+0x134>)
 8000700:	2200      	movs	r2, #0
 8000702:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000704:	2332      	movs	r3, #50	; 0x32
 8000706:	2202      	movs	r2, #2
 8000708:	4931      	ldr	r1, [pc, #196]	; (80007d0 <I3G450D_Init+0x134>)
 800070a:	4832      	ldr	r0, [pc, #200]	; (80007d4 <I3G450D_Init+0x138>)
 800070c:	f002 ff79 	bl	8003602 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	482d      	ldr	r0, [pc, #180]	; (80007cc <I3G450D_Init+0x130>)
 8000716:	f002 f879 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800071a:	2014      	movs	r0, #20
 800071c:	f001 f976 	bl	8001a0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <I3G450D_Init+0x130>)
 8000726:	f002 f871 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800072a:	2014      	movs	r0, #20
 800072c:	f001 f96e 	bl	8001a0c <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <I3G450D_Init+0x134>)
 8000732:	2222      	movs	r2, #34	; 0x22
 8000734:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <I3G450D_Init+0x134>)
 8000738:	2200      	movs	r2, #0
 800073a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	2202      	movs	r2, #2
 8000740:	4923      	ldr	r1, [pc, #140]	; (80007d0 <I3G450D_Init+0x134>)
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <I3G450D_Init+0x138>)
 8000744:	f002 ff5d 	bl	8003602 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2102      	movs	r1, #2
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <I3G450D_Init+0x130>)
 800074e:	f002 f85d 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000752:	2014      	movs	r0, #20
 8000754:	f001 f95a 	bl	8001a0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2102      	movs	r1, #2
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <I3G450D_Init+0x130>)
 800075e:	f002 f855 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000762:	2014      	movs	r0, #20
 8000764:	f001 f952 	bl	8001a0c <HAL_Delay>
	spiTxBuf[0]=0x23;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <I3G450D_Init+0x134>)
 800076a:	2223      	movs	r2, #35	; 0x23
 800076c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <I3G450D_Init+0x134>)
 8000770:	2220      	movs	r2, #32
 8000772:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000774:	2332      	movs	r3, #50	; 0x32
 8000776:	2202      	movs	r2, #2
 8000778:	4915      	ldr	r1, [pc, #84]	; (80007d0 <I3G450D_Init+0x134>)
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <I3G450D_Init+0x138>)
 800077c:	f002 ff41 	bl	8003602 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2102      	movs	r1, #2
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <I3G450D_Init+0x130>)
 8000786:	f002 f841 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800078a:	2014      	movs	r0, #20
 800078c:	f001 f93e 	bl	8001a0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2102      	movs	r1, #2
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <I3G450D_Init+0x130>)
 8000796:	f002 f839 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800079a:	2014      	movs	r0, #20
 800079c:	f001 f936 	bl	8001a0c <HAL_Delay>
	spiTxBuf[0]=0x24;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <I3G450D_Init+0x134>)
 80007a2:	2224      	movs	r2, #36	; 0x24
 80007a4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <I3G450D_Init+0x134>)
 80007a8:	2210      	movs	r2, #16
 80007aa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80007ac:	2332      	movs	r3, #50	; 0x32
 80007ae:	2202      	movs	r2, #2
 80007b0:	4907      	ldr	r1, [pc, #28]	; (80007d0 <I3G450D_Init+0x134>)
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <I3G450D_Init+0x138>)
 80007b4:	f002 ff25 	bl	8003602 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2102      	movs	r1, #2
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <I3G450D_Init+0x130>)
 80007be:	f002 f825 	bl	800280c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007c2:	2014      	movs	r0, #20
 80007c4:	f001 f922 	bl	8001a0c <HAL_Delay>

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020800 	.word	0x40020800
 80007d0:	200001a8 	.word	0x200001a8
 80007d4:	20000208 	.word	0x20000208

080007d8 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80007e4:	f003 fb84 	bl	8003ef0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000260 	.word	0x20000260
 80007fc:	200003f0 	.word	0x200003f0

08000800 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <Set_LED+0x58>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	b2d9      	uxtb	r1, r3
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <Set_LED+0x58>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	b2d9      	uxtb	r1, r3
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <Set_LED+0x58>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <Set_LED+0x58>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	70da      	strb	r2, [r3, #3]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000390 	.word	0x20000390

0800085c <WS2812_Send>:
}

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	e036      	b.n	80008da <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <WS2812_Send+0xcc>)
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	785b      	ldrb	r3, [r3, #1]
 8000876:	041a      	lsls	r2, r3, #16
 8000878:	492b      	ldr	r1, [pc, #172]	; (8000928 <WS2812_Send+0xcc>)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	440b      	add	r3, r1
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	431a      	orrs	r2, r3
 8000886:	4928      	ldr	r1, [pc, #160]	; (8000928 <WS2812_Send+0xcc>)
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	78db      	ldrb	r3, [r3, #3]
 8000890:	4313      	orrs	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
#endif

		for (int j=23; j>=0; j--)// There are 24 bits per Colour Channel.
 8000894:	2317      	movs	r3, #23
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e019      	b.n	80008ce <WS2812_Send+0x72>
		{
			if (color&(1<<j))// if the bit is a 1 then we want to send a high for 2/3rds of the time ( the high duty cycle 0.4/0.4+ 0.84 = 0.32 , close enough
 800089a:	2201      	movs	r2, #1
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d005      	beq.n	80008b8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = PWM_HI;  // 2/3 of 90 WS2812B HiGH High (1) at 62% duty (0.8µs).
 80008ac:	4a1f      	ldr	r2, [pc, #124]	; (800092c <WS2812_Send+0xd0>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2138      	movs	r1, #56	; 0x38
 80008b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008b6:	e004      	b.n	80008c2 <WS2812_Send+0x66>
			//
			}
			else // duty cycle for low
			{
				pwmData[indx] = PWM_LO;  // 1/3 of 90WS2812B LOW Low (0) at 32% duty (0.4µs).
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <WS2812_Send+0xd0>)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	211c      	movs	r1, #28
 80008be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
		for (int j=23; j>=0; j--)// There are 24 bits per Colour Channel.
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dae2      	bge.n	800089a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	3301      	adds	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2b17      	cmp	r3, #23
 80008de:	ddc5      	ble.n	800086c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	e00a      	b.n	80008fc <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <WS2812_Send+0xd0>)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2100      	movs	r1, #0
 80008ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b31      	cmp	r3, #49	; 0x31
 8000900:	ddf1      	ble.n	80008e6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	b29b      	uxth	r3, r3
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <WS2812_Send+0xd0>)
 8000908:	2100      	movs	r1, #0
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <WS2812_Send+0xd4>)
 800090c:	f003 f928 	bl	8003b60 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){
 8000910:	bf00      	nop
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <WS2812_Send+0xd8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0fb      	beq.n	8000912 <WS2812_Send+0xb6>

	};
	datasentflag = 0;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <WS2812_Send+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000390 	.word	0x20000390
 800092c:	200003f4 	.word	0x200003f4
 8000930:	20000260 	.word	0x20000260
 8000934:	200003f0 	.word	0x200003f0

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fff3 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f82f 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 fa09 	bl	8000d5c <MX_GPIO_Init>
  MX_CRC_Init();
 800094a:	f000 f895 	bl	8000a78 <MX_CRC_Init>
  MX_I2C3_Init();
 800094e:	f000 f8a7 	bl	8000aa0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000952:	f000 f8e5 	bl	8000b20 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000956:	f000 f98d 	bl	8000c74 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800095a:	f000 f9df 	bl	8000d1c <MX_DMA_Init>
  MX_TIM2_Init();
 800095e:	f000 f915 	bl	8000b8c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000962:	f000 f9b1 	bl	8000cc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 8000966:	f7ff fe99 	bl	800069c <I3G450D_Init>
  RetargetInit(&huart1);
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <main+0x68>)
 800096c:	f000 fc20 	bl	80011b0 <RetargetInit>
  ConsoleInit(&huart1);
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <main+0x68>)
 8000972:	f7ff fe0f 	bl	8000594 <ConsoleInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


for(int i = 0; i < MAX_LED; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e008      	b.n	800098e <main+0x56>
{
	// setting all LEDS to be green
	  Set_LED(0, 0, 255, 0);
 800097c:	2300      	movs	r3, #0
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ff3c 	bl	8000800 <Set_LED>
for(int i = 0; i < MAX_LED; i++)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b17      	cmp	r3, #23
 8000992:	ddf3      	ble.n	800097c <main+0x44>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //rainbow_effect_right();

	  WS2812_Send();
 8000994:	f7ff ff62 	bl	800085c <WS2812_Send>
	  HAL_Delay (50);
 8000998:	2032      	movs	r0, #50	; 0x32
 800099a:	f001 f837 	bl	8001a0c <HAL_Delay>
	  WS2812_Send();
 800099e:	e7f9      	b.n	8000994 <main+0x5c>
 80009a0:	20000308 	.word	0x20000308

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fbf0 	bl	8006198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <SystemClock_Config+0xcc>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <SystemClock_Config+0xcc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <SystemClock_Config+0xd0>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a1c:	2348      	movs	r3, #72	; 0x48
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a24:	2303      	movs	r3, #3
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f8c7 	bl	8002bc0 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a38:	f000 fbb4 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2102      	movs	r1, #2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fb29 	bl	80030b0 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a64:	f000 fb9e 	bl	80011a4 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	; 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_CRC_Init+0x20>)
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <MX_CRC_Init+0x24>)
 8000a80:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_CRC_Init+0x20>)
 8000a84:	f001 f8f7 	bl	8001c76 <HAL_CRC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a8e:	f000 fb89 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001ac 	.word	0x200001ac
 8000a9c:	40023000 	.word	0x40023000

08000aa0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C3_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C3_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000ade:	f001 feaf 	bl	8002840 <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ae8:	f000 fb5c 	bl	80011a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000af0:	f001 ffea 	bl	8002ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f000 fb53 	bl	80011a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_I2C3_Init+0x74>)
 8000b02:	f002 f81d 	bl	8002b40 <HAL_I2CEx_ConfigDigitalFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b0c:	f000 fb4a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200001b4 	.word	0x200001b4
 8000b18:	40005c00 	.word	0x40005c00
 8000b1c:	000186a0 	.word	0x000186a0

08000b20 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_SPI5_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b30:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b54:	2218      	movs	r2, #24
 8000b56:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_SPI5_Init+0x64>)
 8000b72:	f002 fcbd 	bl	80034f0 <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b7c:	f000 fb12 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000208 	.word	0x20000208
 8000b88:	40015000 	.word	0x40015000

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bd2:	223b      	movs	r2, #59	; 0x3b
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000be4:	f002 ff14 	bl	8003a10 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000bee:	f000 fad9 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000c00:	f003 fc12 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f000 facb 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000c10:	f002 ff4d 	bl	8003aae <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f000 fac3 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000c2e:	f004 f8df 	bl	8004df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c38:	f000 fab4 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000c54:	f003 fb26 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c5e:	f000 faa1 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM2_Init+0xe4>)
 8000c64:	f000 fcce 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	; 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000260 	.word	0x20000260

08000c74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART1_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART1_UART_Init+0x4c>)
 8000cac:	f004 f930 	bl	8004f10 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 fa75 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000308 	.word	0x20000308
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f004 f906 	bl	8004f10 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 fa4b 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000034c 	.word	0x2000034c
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2010      	movs	r0, #16
 8000d44:	f000 ff61 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f000 ff7a 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	4bb2      	ldr	r3, [pc, #712]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4ab1      	ldr	r2, [pc, #708]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4baf      	ldr	r3, [pc, #700]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	4bab      	ldr	r3, [pc, #684]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4aaa      	ldr	r2, [pc, #680]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4ba4      	ldr	r3, [pc, #656]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4aa3      	ldr	r2, [pc, #652]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4ba1      	ldr	r3, [pc, #644]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	4b9d      	ldr	r3, [pc, #628]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a9c      	ldr	r2, [pc, #624]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b9a      	ldr	r3, [pc, #616]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b96      	ldr	r3, [pc, #600]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a95      	ldr	r2, [pc, #596]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b93      	ldr	r3, [pc, #588]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b8f      	ldr	r3, [pc, #572]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a8e      	ldr	r2, [pc, #568]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b88      	ldr	r3, [pc, #544]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a87      	ldr	r2, [pc, #540]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b85      	ldr	r3, [pc, #532]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b81      	ldr	r3, [pc, #516]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a80      	ldr	r2, [pc, #512]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b7e      	ldr	r3, [pc, #504]	; (8001040 <MX_GPIO_Init+0x2e4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2116      	movs	r1, #22
 8000e56:	487b      	ldr	r0, [pc, #492]	; (8001044 <MX_GPIO_Init+0x2e8>)
 8000e58:	f001 fcd8 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4879      	ldr	r0, [pc, #484]	; (8001048 <MX_GPIO_Init+0x2ec>)
 8000e62:	f001 fcd3 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e6c:	4877      	ldr	r0, [pc, #476]	; (800104c <MX_GPIO_Init+0x2f0>)
 8000e6e:	f001 fccd 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e78:	4875      	ldr	r0, [pc, #468]	; (8001050 <MX_GPIO_Init+0x2f4>)
 8000e7a:	f001 fcc7 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e90:	230c      	movs	r3, #12
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	486e      	ldr	r0, [pc, #440]	; (8001054 <MX_GPIO_Init+0x2f8>)
 8000e9c:	f001 fb0a 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb2:	230e      	movs	r3, #14
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4865      	ldr	r0, [pc, #404]	; (8001054 <MX_GPIO_Init+0x2f8>)
 8000ebe:	f001 faf9 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4859      	ldr	r0, [pc, #356]	; (8001044 <MX_GPIO_Init+0x2e8>)
 8000ede:	f001 fae9 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ee2:	2316      	movs	r3, #22
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4852      	ldr	r0, [pc, #328]	; (8001044 <MX_GPIO_Init+0x2e8>)
 8000efa:	f001 fadb 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000efe:	2307      	movs	r3, #7
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	484d      	ldr	r0, [pc, #308]	; (8001048 <MX_GPIO_Init+0x2ec>)
 8000f14:	f001 face 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f18:	f641 0358 	movw	r3, #6232	; 0x1858
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4844      	ldr	r0, [pc, #272]	; (8001048 <MX_GPIO_Init+0x2ec>)
 8000f36:	f001 fabd 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	483d      	ldr	r0, [pc, #244]	; (8001048 <MX_GPIO_Init+0x2ec>)
 8000f52:	f001 faaf 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f56:	2320      	movs	r3, #32
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f5a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <MX_GPIO_Init+0x2e8>)
 8000f6c:	f001 faa2 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000f70:	2303      	movs	r3, #3
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f80:	2309      	movs	r3, #9
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4833      	ldr	r0, [pc, #204]	; (8001058 <MX_GPIO_Init+0x2fc>)
 8000f8c:	f001 fa92 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f90:	2304      	movs	r3, #4
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482d      	ldr	r0, [pc, #180]	; (8001058 <MX_GPIO_Init+0x2fc>)
 8000fa4:	f001 fa86 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000fa8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4822      	ldr	r0, [pc, #136]	; (8001050 <MX_GPIO_Init+0x2f4>)
 8000fc6:	f001 fa75 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000fca:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481d      	ldr	r0, [pc, #116]	; (800105c <MX_GPIO_Init+0x300>)
 8000fe8:	f001 fa64 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ffe:	230e      	movs	r3, #14
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_GPIO_Init+0x2fc>)
 800100a:	f001 fa53 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800100e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001020:	230c      	movs	r3, #12
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_GPIO_Init+0x2fc>)
 800102c:	f001 fa42 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	e010      	b.n	8001060 <MX_GPIO_Init+0x304>
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021800 	.word	0x40021800
 8001054:	40021400 	.word	0x40021400
 8001058:	40020400 	.word	0x40020400
 800105c:	40021000 	.word	0x40021000
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <MX_GPIO_Init+0x438>)
 800106a:	f001 fa23 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800106e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001080:	230c      	movs	r3, #12
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4843      	ldr	r0, [pc, #268]	; (8001198 <MX_GPIO_Init+0x43c>)
 800108c:	f001 fa12 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	483c      	ldr	r0, [pc, #240]	; (8001198 <MX_GPIO_Init+0x43c>)
 80010a6:	f001 fa05 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80010aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <MX_GPIO_Init+0x43c>)
 80010c4:	f001 f9f6 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010c8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010da:	230e      	movs	r3, #14
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <MX_GPIO_Init+0x440>)
 80010e6:	f001 f9e5 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010ea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fc:	230e      	movs	r3, #14
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4826      	ldr	r0, [pc, #152]	; (80011a0 <MX_GPIO_Init+0x444>)
 8001108:	f001 f9d4 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 800110c:	2308      	movs	r3, #8
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111c:	230e      	movs	r3, #14
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_GPIO_Init+0x43c>)
 8001128:	f001 f9c4 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800112c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113e:	2309      	movs	r3, #9
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_GPIO_Init+0x440>)
 800114a:	f001 f9b3 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800114e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_GPIO_Init+0x440>)
 8001168:	f001 f9a4 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800117c:	230c      	movs	r3, #12
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_GPIO_Init+0x438>)
 8001188:	f001 f994 	bl	80024b4 <HAL_GPIO_Init>

}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	; 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021800 	.word	0x40021800
 80011a0:	40020800 	.word	0x40020800

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <RetargetInit+0x28>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <RetargetInit+0x2c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2202      	movs	r2, #2
 80011c8:	2100      	movs	r1, #0
 80011ca:	f005 f805 	bl	80061d8 <setvbuf>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200008d8 	.word	0x200008d8
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <_isatty>:

int _isatty(int fd) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db04      	blt.n	80011f8 <_isatty+0x18>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	dc01      	bgt.n	80011f8 <_isatty+0x18>
    return 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e005      	b.n	8001204 <_isatty+0x24>

  errno = EBADF;
 80011f8:	f004 ffa4 	bl	8006144 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2209      	movs	r2, #9
 8001200:	601a      	str	r2, [r3, #0]
  return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_write>:

int _write(int fd, char* ptr, int len) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d002      	beq.n	8001224 <_write+0x18>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d111      	bne.n	8001248 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <_write+0x54>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	b29a      	uxth	r2, r3
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	f003 feba 	bl	8004faa <HAL_UART_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <_write+0x38>
      return len;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e008      	b.n	8001256 <_write+0x4a>
    else
      return EIO;
 8001244:	2305      	movs	r3, #5
 8001246:	e006      	b.n	8001256 <_write+0x4a>
  }
  errno = EBADF;
 8001248:	f004 ff7c 	bl	8006144 <__errno>
 800124c:	4603      	mov	r3, r0
 800124e:	2209      	movs	r2, #9
 8001250:	601a      	str	r2, [r3, #0]
  return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200008d8 	.word	0x200008d8

08001264 <_close>:

int _close(int fd) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db04      	blt.n	800127c <_close+0x18>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	dc01      	bgt.n	800127c <_close+0x18>
    return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e006      	b.n	800128a <_close+0x26>

  errno = EBADF;
 800127c:	f004 ff62 	bl	8006144 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	2209      	movs	r2, #9
 8001284:	601a      	str	r2, [r3, #0]
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800129e:	f004 ff51 	bl	8006144 <__errno>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2209      	movs	r2, #9
 80012a6:	601a      	str	r2, [r3, #0]
  return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_read>:

int _read(int fd, char* ptr, int len) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d110      	bne.n	80012e8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <_read+0x4c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	f003 fefc 	bl	80050ce <HAL_UART_Receive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <_read+0x30>
      return 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e008      	b.n	80012f6 <_read+0x42>
    else
      return EIO;
 80012e4:	2305      	movs	r3, #5
 80012e6:	e006      	b.n	80012f6 <_read+0x42>
  }
  errno = EBADF;
 80012e8:	f004 ff2c 	bl	8006144 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2209      	movs	r2, #9
 80012f0:	601a      	str	r2, [r3, #0]
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200008d8 	.word	0x200008d8

08001304 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db08      	blt.n	8001326 <_fstat+0x22>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc05      	bgt.n	8001326 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001320:	605a      	str	r2, [r3, #4]
    return 0;
 8001322:	2300      	movs	r3, #0
 8001324:	e005      	b.n	8001332 <_fstat+0x2e>
  }

  errno = EBADF;
 8001326:	f004 ff0d 	bl	8006144 <__errno>
 800132a:	4603      	mov	r3, r0
 800132c:	2209      	movs	r2, #9
 800132e:	601a      	str	r2, [r3, #0]
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_MspInit+0x68>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_MspInit+0x68>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_MspInit+0x68>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x68>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x68>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x68>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2005      	movs	r0, #5
 8001380:	f000 fc43 	bl	8001c0a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001384:	2005      	movs	r0, #5
 8001386:	f000 fc5c 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2005      	movs	r0, #5
 8001390:	f000 fc3b 	bl	8001c0a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001394:	2005      	movs	r0, #5
 8001396:	f000 fc54 	bl	8001c42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_CRC_MspInit+0x3c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10d      	bne.n	80013d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_CRC_MspInit+0x40>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023000 	.word	0x40023000
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d14b      	bne.n	80014a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001458:	2304      	movs	r3, #4
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001464:	f001 f826 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <HAL_I2C_MspInit+0xd0>)
 8001486:	f001 f815 	bl	80024b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001494:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40005c00 	.word	0x40005c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020000 	.word	0x40020000

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_SPI_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12c      	bne.n	800153c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800151a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800152c:	2305      	movs	r3, #5
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_SPI_MspInit+0x8c>)
 8001538:	f000 ffbc 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40015000 	.word	0x40015000
 8001548:	40023800 	.word	0x40023800
 800154c:	40021400 	.word	0x40021400

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001560:	d145      	bne.n	80015ee <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_TIM_Base_MspInit+0xa8>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 8001580:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_TIM_Base_MspInit+0xb0>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 8001586:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800158a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015c4:	f000 fb74 	bl	8001cb0 <HAL_DMA_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80015ce:	f7ff fde9 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
 80015d8:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_TIM_Base_MspInit+0xac>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	201c      	movs	r0, #28
 80015e4:	f000 fb11 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e8:	201c      	movs	r0, #28
 80015ea:	f000 fb2a 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	200002a8 	.word	0x200002a8
 8001600:	40026088 	.word	0x40026088

08001604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d11e      	bne.n	8001664 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_TIM_MspPostInit+0x68>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_TIM_MspPostInit+0x68>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_TIM_MspPostInit+0x68>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <HAL_TIM_MspPostInit+0x6c>)
 8001660:	f000 ff28 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <HAL_UART_MspInit+0x108>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d135      	bne.n	8001702 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e0:	2307      	movs	r3, #7
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4826      	ldr	r0, [pc, #152]	; (8001784 <HAL_UART_MspInit+0x110>)
 80016ec:	f000 fee2 	bl	80024b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2025      	movs	r0, #37	; 0x25
 80016f6:	f000 fa88 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016fa:	2025      	movs	r0, #37	; 0x25
 80016fc:	f000 faa1 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001700:	e038      	b.n	8001774 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_UART_MspInit+0x114>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d133      	bne.n	8001774 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001744:	2360      	movs	r3, #96	; 0x60
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <HAL_UART_MspInit+0x118>)
 8001760:	f000 fea8 	bl	80024b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2026      	movs	r0, #38	; 0x26
 800176a:	f000 fa4e 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800176e:	2026      	movs	r0, #38	; 0x26
 8001770:	f000 fa67 	bl	8001c42 <HAL_NVIC_EnableIRQ>
}
 8001774:	bf00      	nop
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40011000 	.word	0x40011000
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40004400 	.word	0x40004400
 800178c:	40020c00 	.word	0x40020c00

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8f6 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA1_Stream5_IRQHandler+0x10>)
 80017fa:	f000 fbf1 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002a8 	.word	0x200002a8

08001808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM2_IRQHandler+0x10>)
 800180e:	f002 fc41 	bl	8004094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000260 	.word	0x20000260

0800181c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <USART1_IRQHandler+0x10>)
 8001822:	f003 fd27 	bl	8005274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000308 	.word	0x20000308

08001830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USART2_IRQHandler+0x10>)
 8001836:	f003 fd1d 	bl	8005274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000034c 	.word	0x2000034c

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f004 fc66 	bl	8006144 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20030000 	.word	0x20030000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	200008dc 	.word	0x200008dc
 80018ac:	200008f8 	.word	0x200008f8

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fe:	f7ff ffd7 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f004 fc25 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff f817 	bl	8000938 <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800190c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001918:	080073bc 	.word	0x080073bc
  ldr r2, =_sbss
 800191c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001920:	200008f4 	.word	0x200008f4

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_Init+0x40>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_Init+0x40>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x40>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f94f 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fcee 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f967 	bl	8001c5e <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a8:	f000 f92f 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	200008e0 	.word	0x200008e0

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200008e0 	.word	0x200008e0

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e00e      	b.n	8001ca6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fb85 	bl	80013a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fe9a 	bl	80019f4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e099      	b.n	8001e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	e00f      	b.n	8001d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cee:	f7ff fe81 	bl	80019f4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d908      	bls.n	8001d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e078      	b.n	8001e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e8      	bne.n	8001cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_DMA_Init+0x158>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4313      	orrs	r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f023 0307 	bic.w	r3, r3, #7
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d117      	bne.n	8001dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fb01 	bl	80023bc <DMA_CheckFifoParam>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e016      	b.n	8001e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fab8 	bl	8002350 <DMA_CalcBaseAndBitshift>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	223f      	movs	r2, #63	; 0x3f
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	f010803f 	.word	0xf010803f

08001e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Start_IT+0x26>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e040      	b.n	8001eb4 <HAL_DMA_Start_IT+0xa8>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12f      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fa4a 	bl	80022f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0216 	orr.w	r2, r2, #22
 8001e7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e005      	b.n	8001eb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eca:	f7ff fd93 	bl	80019f4 <HAL_GetTick>
 8001ece:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e052      	b.n	8001f94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0216 	bic.w	r2, r2, #22
 8001efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <HAL_DMA_Abort+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0208 	bic.w	r2, r2, #8
 8001f2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	e013      	b.n	8001f68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f40:	f7ff fd58 	bl	80019f4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d90c      	bls.n	8001f68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e015      	b.n	8001f94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e4      	bne.n	8001f40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	223f      	movs	r2, #63	; 0x3f
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00c      	b.n	8001fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_DMA_IRQHandler+0x248>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a8e      	ldr	r2, [pc, #568]	; (800222c <HAL_DMA_IRQHandler+0x24c>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01a      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2208      	movs	r2, #8
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2204      	movs	r2, #4
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2204      	movs	r2, #4
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2210      	movs	r2, #16
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d043      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03c      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2210      	movs	r2, #16
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d018      	beq.n	8002122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d024      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
 800210e:	e01f      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e016      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0208 	bic.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2220      	movs	r2, #32
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 808f 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8087 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2220      	movs	r2, #32
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b05      	cmp	r3, #5
 8002188:	d136      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0216 	bic.w	r2, r2, #22
 8002198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <HAL_DMA_IRQHandler+0x1da>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	223f      	movs	r2, #63	; 0x3f
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07e      	beq.n	80022ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
        }
        return;
 80021f6:	e079      	b.n	80022ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01d      	beq.n	8002242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	2b00      	cmp	r3, #0
 800221a:	d031      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e02c      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000
 800222c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e01e      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	2b00      	cmp	r3, #0
 8002286:	d032      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d022      	beq.n	80022da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2205      	movs	r2, #5
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d307      	bcc.n	80022c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f2      	bne.n	80022ac <HAL_DMA_IRQHandler+0x2cc>
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
 80022ea:	e000      	b.n	80022ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80022ec:	bf00      	nop
    }
  }
}
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d108      	bne.n	8002334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002332:	e007      	b.n	8002344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b10      	subs	r3, #16
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <DMA_CalcBaseAndBitshift+0x68>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d909      	bls.n	8002392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	659a      	str	r2, [r3, #88]	; 0x58
 8002390:	e007      	b.n	80023a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	aaaaaaab 	.word	0xaaaaaaab
 80023b8:	0800730c 	.word	0x0800730c

080023bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d856      	bhi.n	800248a <DMA_CheckFifoParam+0xce>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <DMA_CheckFifoParam+0x28>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002407 	.word	0x08002407
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	0800248b 	.word	0x0800248b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d046      	beq.n	800248e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002404:	e043      	b.n	800248e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240e:	d140      	bne.n	8002492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e03d      	b.n	8002492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241e:	d121      	bne.n	8002464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d837      	bhi.n	8002496 <DMA_CheckFifoParam+0xda>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <DMA_CheckFifoParam+0x70>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800243d 	.word	0x0800243d
 8002430:	08002443 	.word	0x08002443
 8002434:	0800243d 	.word	0x0800243d
 8002438:	08002455 	.word	0x08002455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e030      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d025      	beq.n	800249a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002452:	e022      	b.n	800249a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800245c:	d11f      	bne.n	800249e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002462:	e01c      	b.n	800249e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d903      	bls.n	8002472 <DMA_CheckFifoParam+0xb6>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d003      	beq.n	8002478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002470:	e018      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      break;
 8002476:	e015      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e00b      	b.n	80024a2 <DMA_CheckFifoParam+0xe6>
      break;
 800248a:	bf00      	nop
 800248c:	e00a      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e008      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e006      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e004      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
    }
  } 
  
  return status; 
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e177      	b.n	80027c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8166 	bne.w	80027ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80c0 	beq.w	80027ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_GPIO_Init+0x324>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_GPIO_Init+0x324>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_GPIO_Init+0x328>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d037      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a55      	ldr	r2, [pc, #340]	; (80027ec <HAL_GPIO_Init+0x338>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a54      	ldr	r2, [pc, #336]	; (80027f0 <HAL_GPIO_Init+0x33c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <HAL_GPIO_Init+0x340>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_GPIO_Init+0x344>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x348>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x34c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	; (8002804 <HAL_GPIO_Init+0x350>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x21a>
 80026ca:	2309      	movs	r3, #9
 80026cc:	e012      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ce:	230a      	movs	r3, #10
 80026d0:	e010      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00e      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	; (80027dc <HAL_GPIO_Init+0x328>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_GPIO_Init+0x354>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f ae84 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021c00 	.word	0x40021c00
 8002800:	40022000 	.word	0x40022000
 8002804:	40022400 	.word	0x40022400
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002828:	e003      	b.n	8002832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e12b      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fdc0 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a4:	f000 fdfc 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a81      	ldr	r2, [pc, #516]	; (8002ab4 <HAL_I2C_Init+0x274>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d807      	bhi.n	80028c4 <HAL_I2C_Init+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <HAL_I2C_Init+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e006      	b.n	80028d2 <HAL_I2C_Init+0x92>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	; (8002abc <HAL_I2C_Init+0x27c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a78      	ldr	r2, [pc, #480]	; (8002ac0 <HAL_I2C_Init+0x280>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6a      	ldr	r2, [pc, #424]	; (8002ab4 <HAL_I2C_Init+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d802      	bhi.n	8002914 <HAL_I2C_Init+0xd4>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	e009      	b.n	8002928 <HAL_I2C_Init+0xe8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_I2C_Init+0x284>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	3301      	adds	r3, #1
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	495c      	ldr	r1, [pc, #368]	; (8002ab4 <HAL_I2C_Init+0x274>)
 8002944:	428b      	cmp	r3, r1
 8002946:	d819      	bhi.n	800297c <HAL_I2C_Init+0x13c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e59      	subs	r1, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fbb1 f3f3 	udiv	r3, r1, r3
 8002956:	1c59      	adds	r1, r3, #1
 8002958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800295c:	400b      	ands	r3, r1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_I2C_Init+0x138>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	e051      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 8002978:	2304      	movs	r3, #4
 800297a:	e04f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_I2C_Init+0x168>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_I2C_Init+0x18e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x196>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e022      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10e      	bne.n	80029fc <HAL_I2C_Init+0x1bc>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e58      	subs	r0, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	440b      	add	r3, r1
 80029ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6911      	ldr	r1, [r2, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	000186a0 	.word	0x000186a0
 8002ab8:	001e847f 	.word	0x001e847f
 8002abc:	003d08ff 	.word	0x003d08ff
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d129      	bne.n	8002b32 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2224      	movs	r2, #36	; 0x24
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0210 	bic.w	r2, r2, #16
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d12a      	bne.n	8002bb0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	f023 030f 	bic.w	r3, r3, #15
 8002b80:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	89fb      	ldrh	r3, [r7, #14]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	89fa      	ldrh	r2, [r7, #14]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e267      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d075      	beq.n	8002cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d00c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d112      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf6:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d05b      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x108>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d157      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e242      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x74>
 8002c26:	4b76      	ldr	r3, [pc, #472]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a75      	ldr	r2, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xb0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x98>
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6f      	ldr	r2, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6c      	ldr	r2, [pc, #432]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xb0>
 8002c58:	4b69      	ldr	r3, [pc, #420]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a68      	ldr	r2, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe febc 	bl	80019f4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe feb8 	bl	80019f4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e207      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xc0>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fea8 	bl	80019f4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fea4 	bl	80019f4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1f3      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xe8>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cee:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x152>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1c7      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4937      	ldr	r1, [pc, #220]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_OscConfig+0x244>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fe5d 	bl	80019f4 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fe59 	bl	80019f4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1a8      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4925      	ldr	r1, [pc, #148]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x244>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fe3c 	bl	80019f4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fe38 	bl	80019f4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e187      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d036      	beq.n	8002e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x248>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fe1c 	bl	80019f4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fe18 	bl	80019f4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e167      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x200>
 8002dde:	e01b      	b.n	8002e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_OscConfig+0x248>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fe05 	bl	80019f4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	e00e      	b.n	8002e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fe01 	bl	80019f4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d907      	bls.n	8002e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e150      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	42470000 	.word	0x42470000
 8002e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b88      	ldr	r3, [pc, #544]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ea      	bne.n	8002dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8097 	beq.w	8002f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a7c      	ldr	r2, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b77      	ldr	r3, [pc, #476]	; (8003034 <HAL_RCC_OscConfig+0x474>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b74      	ldr	r3, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x474>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a73      	ldr	r2, [pc, #460]	; (8003034 <HAL_RCC_OscConfig+0x474>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fdc1 	bl	80019f4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fdbd 	bl	80019f4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e10c      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x474>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2ea>
 8002e9c:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a63      	ldr	r2, [pc, #396]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e01c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x324>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x30c>
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a5e      	ldr	r2, [pc, #376]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a5b      	ldr	r2, [pc, #364]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x324>
 8002ecc:	4b58      	ldr	r3, [pc, #352]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a57      	ldr	r2, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b55      	ldr	r3, [pc, #340]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a54      	ldr	r2, [pc, #336]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002ede:	f023 0304 	bic.w	r3, r3, #4
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fd82 	bl	80019f4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fd7e 	bl	80019f4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0cb      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	4b49      	ldr	r3, [pc, #292]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ee      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x334>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fe fd6c 	bl	80019f4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe fd68 	bl	80019f4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0b5      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f36:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ee      	bne.n	8002f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	4a38      	ldr	r2, [pc, #224]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a1 	beq.w	80030a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d05c      	beq.n	8003024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d141      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_OscConfig+0x478>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fd3c 	bl	80019f4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fd38 	bl	80019f4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e087      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	491b      	ldr	r1, [pc, #108]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x478>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe fd11 	bl	80019f4 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fd0d 	bl	80019f4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e05c      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x416>
 8002ff4:	e054      	b.n	80030a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x478>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fcfa 	bl	80019f4 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fcf6 	bl	80019f4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e045      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_OscConfig+0x470>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x444>
 8003022:	e03d      	b.n	80030a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e038      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
 8003030:	40023800 	.word	0x40023800
 8003034:	40007000 	.word	0x40007000
 8003038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4ec>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d028      	beq.n	800309c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d121      	bne.n	800309c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11a      	bne.n	800309c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0cc      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d90c      	bls.n	80030ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800310e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d044      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d119      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d003      	beq.n	800316e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316a:	2b03      	cmp	r3, #3
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e067      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a0:	f7fe fc28 	bl	80019f4 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fe fc24 	bl	80019f4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04f      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20c      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f821 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490a      	ldr	r1, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fb88 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023c00 	.word	0x40023c00
 800326c:	40023800 	.word	0x40023800
 8003270:	080072f4 	.word	0x080072f4
 8003274:	20000000 	.word	0x20000000
 8003278:	20000004 	.word	0x20000004

0800327c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b094      	sub	sp, #80	; 0x50
 8003282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	647b      	str	r3, [r7, #68]	; 0x44
 8003288:	2300      	movs	r3, #0
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	2300      	movs	r3, #0
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d00d      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x40>
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	f200 80e1 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x34>
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ae:	e0db      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4b73      	ldr	r3, [pc, #460]	; (8003480 <HAL_RCC_GetSysClockFreq+0x204>)
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032b4:	e0db      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_GetSysClockFreq+0x208>)
 80032b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ba:	e0d8      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032bc:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c6:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	63bb      	str	r3, [r7, #56]	; 0x38
 80032dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
 80032e6:	2300      	movs	r3, #0
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003300:	0150      	lsls	r0, r2, #5
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4621      	mov	r1, r4
 8003308:	1a51      	subs	r1, r2, r1
 800330a:	6139      	str	r1, [r7, #16]
 800330c:	4629      	mov	r1, r5
 800330e:	eb63 0301 	sbc.w	r3, r3, r1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003320:	4659      	mov	r1, fp
 8003322:	018b      	lsls	r3, r1, #6
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800332a:	4651      	mov	r1, sl
 800332c:	018a      	lsls	r2, r1, #6
 800332e:	4651      	mov	r1, sl
 8003330:	ebb2 0801 	subs.w	r8, r2, r1
 8003334:	4659      	mov	r1, fp
 8003336:	eb63 0901 	sbc.w	r9, r3, r1
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334e:	4690      	mov	r8, r2
 8003350:	4699      	mov	r9, r3
 8003352:	4623      	mov	r3, r4
 8003354:	eb18 0303 	adds.w	r3, r8, r3
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	462b      	mov	r3, r5
 800335c:	eb49 0303 	adc.w	r3, r9, r3
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800336e:	4629      	mov	r1, r5
 8003370:	024b      	lsls	r3, r1, #9
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003378:	4621      	mov	r1, r4
 800337a:	024a      	lsls	r2, r1, #9
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003382:	2200      	movs	r2, #0
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
 8003386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800338c:	f7fc ff80 	bl	8000290 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003398:	e058      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2200      	movs	r2, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	4611      	mov	r1, r2
 80033a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
 80033b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	f04f 0000 	mov.w	r0, #0
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	0159      	lsls	r1, r3, #5
 80033c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c6:	0150      	lsls	r0, r2, #5
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4641      	mov	r1, r8
 80033ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80033d2:	4649      	mov	r1, r9
 80033d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033ec:	ebb2 040a 	subs.w	r4, r2, sl
 80033f0:	eb63 050b 	sbc.w	r5, r3, fp
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	00eb      	lsls	r3, r5, #3
 80033fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003402:	00e2      	lsls	r2, r4, #3
 8003404:	4614      	mov	r4, r2
 8003406:	461d      	mov	r5, r3
 8003408:	4643      	mov	r3, r8
 800340a:	18e3      	adds	r3, r4, r3
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	464b      	mov	r3, r9
 8003410:	eb45 0303 	adc.w	r3, r5, r3
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003422:	4629      	mov	r1, r5
 8003424:	028b      	lsls	r3, r1, #10
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800342c:	4621      	mov	r1, r4
 800342e:	028a      	lsls	r2, r1, #10
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003436:	2200      	movs	r2, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	61fa      	str	r2, [r7, #28]
 800343c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003440:	f7fc ff26 	bl	8000290 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800345c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800345e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x204>)
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003470:	4618      	mov	r0, r3
 8003472:	3750      	adds	r7, #80	; 0x50
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08007304 	.word	0x08007304

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08007304 	.word	0x08007304

080034f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e07b      	b.n	80035fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003512:	d009      	beq.n	8003528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
 800351a:	e005      	b.n	8003528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd ffbc 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	ea42 0103 	orr.w	r1, r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0104 	and.w	r1, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0210 	and.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b088      	sub	sp, #32
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_SPI_Transmit+0x22>
 8003620:	2302      	movs	r3, #2
 8003622:	e126      	b.n	8003872 <HAL_SPI_Transmit+0x270>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362c:	f7fe f9e2 	bl	80019f4 <HAL_GetTick>
 8003630:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003646:	e10b      	b.n	8003860 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Transmit+0x52>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003658:	e102      	b.n	8003860 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2203      	movs	r2, #3
 800365e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a0:	d10f      	bne.n	80036c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d007      	beq.n	80036e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d14b      	bne.n	8003782 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Transmit+0xf6>
 80036f2:	8afb      	ldrh	r3, [r7, #22]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d13e      	bne.n	8003776 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800371c:	e02b      	b.n	8003776 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d112      	bne.n	8003752 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003750:	e011      	b.n	8003776 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003752:	f7fe f94f 	bl	80019f4 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d803      	bhi.n	800376a <HAL_SPI_Transmit+0x168>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x16e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003774:	e074      	b.n	8003860 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ce      	bne.n	800371e <HAL_SPI_Transmit+0x11c>
 8003780:	e04c      	b.n	800381c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Transmit+0x18e>
 800378a:	8afb      	ldrh	r3, [r7, #22]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d140      	bne.n	8003812 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037b6:	e02c      	b.n	8003812 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d113      	bne.n	80037ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ec:	e011      	b.n	8003812 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ee:	f7fe f901 	bl	80019f4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d803      	bhi.n	8003806 <HAL_SPI_Transmit+0x204>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003804:	d102      	bne.n	800380c <HAL_SPI_Transmit+0x20a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003810:	e026      	b.n	8003860 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1cd      	bne.n	80037b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f8b3 	bl	800398c <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e000      	b.n	8003860 <HAL_SPI_Transmit+0x25e>
  }

error:
 800385e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003870:	7ffb      	ldrb	r3, [r7, #31]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800388c:	f7fe f8b2 	bl	80019f4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800389c:	f7fe f8aa 	bl	80019f4 <HAL_GetTick>
 80038a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	015b      	lsls	r3, r3, #5
 80038a8:	0d1b      	lsrs	r3, r3, #20
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b2:	e054      	b.n	800395e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ba:	d050      	beq.n	800395e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038bc:	f7fe f89a 	bl	80019f4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d902      	bls.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d13d      	bne.n	800394e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d111      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f4:	d004      	beq.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d107      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d10f      	bne.n	800393a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e017      	b.n	800397e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	3b01      	subs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d19b      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <SPI_EndRxTxTransaction+0x7c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <SPI_EndRxTxTransaction+0x80>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0d5b      	lsrs	r3, r3, #21
 80039a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b6:	d112      	bne.n	80039de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff5a 	bl	800387c <SPI_WaitFlagStateUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e00f      	b.n	80039fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d0f2      	beq.n	80039de <SPI_EndRxTxTransaction+0x52>
 80039f8:	e000      	b.n	80039fc <SPI_EndRxTxTransaction+0x70>
        break;
 80039fa:	bf00      	nop
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	165e9f81 	.word	0x165e9f81

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fd8a 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 febe 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e041      	b.n	8003b44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f839 	bl	8003b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fe6f 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e022      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d109      	bne.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x46>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e015      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d109      	bne.n	8003bc0 <HAL_TIM_PWM_Start_DMA+0x60>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e008      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e171      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e022      	b.n	8003c3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start_DMA+0xae>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e015      	b.n	8003c3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e008      	b.n	8003c3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d024      	beq.n	8003c88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start_DMA+0xee>
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e137      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	e016      	b.n	8003c8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6c:	e00e      	b.n	8003c8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	e006      	b.n	8003c8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c86:	e001      	b.n	8003c8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e118      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	f200 80ae 	bhi.w	8003df0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003df1 	.word	0x08003df1
 8003ca4:	08003df1 	.word	0x08003df1
 8003ca8:	08003df1 	.word	0x08003df1
 8003cac:	08003d19 	.word	0x08003d19
 8003cb0:	08003df1 	.word	0x08003df1
 8003cb4:	08003df1 	.word	0x08003df1
 8003cb8:	08003df1 	.word	0x08003df1
 8003cbc:	08003d61 	.word	0x08003d61
 8003cc0:	08003df1 	.word	0x08003df1
 8003cc4:	08003df1 	.word	0x08003df1
 8003cc8:	08003df1 	.word	0x08003df1
 8003ccc:	08003da9 	.word	0x08003da9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	4a7c      	ldr	r2, [pc, #496]	; (8003ec8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ce6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3334      	adds	r3, #52	; 0x34
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	f7fe f888 	bl	8001e0c <HAL_DMA_Start_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0db      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	60da      	str	r2, [r3, #12]
      break;
 8003d16:	e06e      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	4a6a      	ldr	r2, [pc, #424]	; (8003ec8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3338      	adds	r3, #56	; 0x38
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	f7fe f864 	bl	8001e0c <HAL_DMA_Start_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0b7      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	60da      	str	r2, [r3, #12]
      break;
 8003d5e:	e04a      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	333c      	adds	r3, #60	; 0x3c
 8003d84:	461a      	mov	r2, r3
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	f7fe f840 	bl	8001e0c <HAL_DMA_Start_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e093      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da4:	60da      	str	r2, [r3, #12]
      break;
 8003da6:	e026      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3340      	adds	r3, #64	; 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	f7fe f81c 	bl	8001e0c <HAL_DMA_Start_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06f      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dec:	60da      	str	r2, [r3, #12]
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15f      	bne.n	8003ebc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 ffcd 	bl	8004da4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d01d      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d010      	beq.n	8003ebc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e007      	b.n	8003ebc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	080046c1 	.word	0x080046c1
 8003ecc:	08004769 	.word	0x08004769
 8003ed0:	0800462f 	.word	0x0800462f
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40010400 	.word	0x40010400
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40001800 	.word	0x40001800

08003ef0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d855      	bhi.n	8003fb0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f04:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003fb1 	.word	0x08003fb1
 8003f14:	08003fb1 	.word	0x08003fb1
 8003f18:	08003fb1 	.word	0x08003fb1
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003fb1 	.word	0x08003fb1
 8003f24:	08003fb1 	.word	0x08003fb1
 8003f28:	08003fb1 	.word	0x08003fb1
 8003f2c:	08003f79 	.word	0x08003f79
 8003f30:	08003fb1 	.word	0x08003fb1
 8003f34:	08003fb1 	.word	0x08003fb1
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003f95 	.word	0x08003f95
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f821 	bl	8001f9c <HAL_DMA_Abort_IT>
      break;
 8003f5a:	e02c      	b.n	8003fb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe f813 	bl	8001f9c <HAL_DMA_Abort_IT>
      break;
 8003f76:	e01e      	b.n	8003fb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe f805 	bl	8001f9c <HAL_DMA_Abort_IT>
      break;
 8003f92:	e010      	b.n	8003fb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fd fff7 	bl	8001f9c <HAL_DMA_Abort_IT>
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d161      	bne.n	8004080 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 feed 	bl	8004da4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2f      	ldr	r2, [pc, #188]	; (800408c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_PWM_Stop_DMA+0xee>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	f240 4344 	movw	r3, #1092	; 0x444
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10f      	bne.n	8004048 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a1a      	ldr	r2, [r3, #32]
 800402e:	f240 4344 	movw	r3, #1092	; 0x444
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <HAL_TIM_PWM_Stop_DMA+0x168>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004056:	e013      	b.n	8004080 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d104      	bne.n	8004068 <HAL_TIM_PWM_Stop_DMA+0x178>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004066:	e00b      	b.n	8004080 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d104      	bne.n	8004078 <HAL_TIM_PWM_Stop_DMA+0x188>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004076:	e003      	b.n	8004080 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40010400 	.word	0x40010400

08004094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0202 	mvn.w	r2, #2
 80040c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fa81 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa73 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fc fb77 	bl	80007d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0204 	mvn.w	r2, #4
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa57 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa49 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fc fb4d 	bl	80007d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b08      	cmp	r3, #8
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b08      	cmp	r3, #8
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0208 	mvn.w	r2, #8
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2204      	movs	r2, #4
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa2d 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa1f 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fb23 	bl	80007d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0210 	mvn.w	r2, #16
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2208      	movs	r2, #8
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa03 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9f5 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fc faf9 	bl	80007d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0201 	mvn.w	r2, #1
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9cf 	bl	80045b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fe5c 	bl	8004efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d107      	bne.n	8004270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9cb 	bl	8004606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b20      	cmp	r3, #32
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0220 	mvn.w	r2, #32
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fe26 	bl	8004ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0ae      	b.n	8004420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	f200 809f 	bhi.w	8004410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004411 	.word	0x08004411
 80042e0:	08004411 	.word	0x08004411
 80042e4:	08004411 	.word	0x08004411
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	08004411 	.word	0x08004411
 80042f0:	08004411 	.word	0x08004411
 80042f4:	08004411 	.word	0x08004411
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	08004411 	.word	0x08004411
 8004300:	08004411 	.word	0x08004411
 8004304:	08004411 	.word	0x08004411
 8004308:	080043cf 	.word	0x080043cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fafc 	bl	8004910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
      break;
 800434a:	e064      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb4c 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
      break;
 800438c:	e043      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fba1 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	61da      	str	r2, [r3, #28]
      break;
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fbf5 	bl	8004bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
      break;
 800440e:	e002      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIM_ConfigClockSource+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e0b4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x186>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	d03e      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xd4>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	f200 8087 	bhi.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	f000 8086 	beq.w	800459a <HAL_TIM_ConfigClockSource+0x172>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d87f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d01a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xa6>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d87b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d050      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x11a>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d877      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d03c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xfa>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d873      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d058      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x13a>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d86f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d064      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d86b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d060      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d867      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d05a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	e062      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f000 fc41 	bl	8004d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e04f      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f000 fc2a 	bl	8004d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451e:	609a      	str	r2, [r3, #8]
      break;
 8004520:	e03c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fb9e 	bl	8004c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	; 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fbf7 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004540:	e02c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 fbbd 	bl	8004cce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2160      	movs	r1, #96	; 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fbe7 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004560:	e01c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	461a      	mov	r2, r3
 8004570:	f000 fb7e 	bl	8004c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fbd7 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004580:	e00c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 fbce 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004592:	e003      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800459a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d107      	bne.n	8004656 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	e02a      	b.n	80046ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2202      	movs	r2, #2
 8004664:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466e:	e01d      	b.n	80046ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d107      	bne.n	800468a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2204      	movs	r2, #4
 800467e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	e010      	b.n	80046ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2208      	movs	r2, #8
 8004698:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a2:	e003      	b.n	80046ac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff ffb4 	bl	800461a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d10b      	bne.n	80046f0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d136      	bne.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ee:	e031      	b.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10b      	bne.n	8004712 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d125      	bne.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e020      	b.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d10b      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2204      	movs	r2, #4
 8004720:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d114      	bne.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004732:	e00f      	b.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d10a      	bne.n	8004754 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2208      	movs	r2, #8
 8004742:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7fc f83f 	bl	80007d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d103      	bne.n	8004788 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	771a      	strb	r2, [r3, #28]
 8004786:	e019      	b.n	80047bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d103      	bne.n	800479a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2202      	movs	r2, #2
 8004796:	771a      	strb	r2, [r3, #28]
 8004798:	e010      	b.n	80047bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d103      	bne.n	80047ac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2204      	movs	r2, #4
 80047a8:	771a      	strb	r2, [r3, #28]
 80047aa:	e007      	b.n	80047bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d102      	bne.n	80047bc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2208      	movs	r2, #8
 80047ba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff ff18 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2f      	ldr	r2, [pc, #188]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d027      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d023      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <TIM_Base_SetConfig+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <TIM_Base_SetConfig+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <TIM_Base_SetConfig+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a25      	ldr	r2, [pc, #148]	; (8004904 <TIM_Base_SetConfig+0x134>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <TIM_Base_SetConfig+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a23      	ldr	r2, [pc, #140]	; (800490c <TIM_Base_SetConfig+0x13c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	40001800 	.word	0x40001800
 8004908:	40001c00 	.word	0x40001c00
 800490c:	40002000 	.word	0x40002000

08004910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC1_SetConfig+0x64>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10c      	bne.n	800498e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0308 	bic.w	r3, r3, #8
 800497a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC1_SetConfig+0x8e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0320 	bic.w	r3, r3, #32
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10d      	bne.n	8004a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0x94>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x66>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10d      	bne.n	8004b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x92>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d113      	bne.n	8004b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <TIM_OC4_SetConfig+0xa4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC4_SetConfig+0x68>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <TIM_OC4_SetConfig+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d109      	bne.n	8004c40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 030a 	bic.w	r3, r3, #10
 8004cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0210 	bic.w	r2, r3, #16
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f043 0307 	orr.w	r3, r3, #7
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021a      	lsls	r2, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2201      	movs	r2, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e05a      	b.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d022      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e54:	d01d      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d018      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10c      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40001800 	.word	0x40001800

08004ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03f      	b.n	8004fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc fb9c 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fe81 	bl	8005c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08a      	sub	sp, #40	; 0x28
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d17c      	bne.n	80050c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_Transmit+0x2c>
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e075      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Transmit+0x3e>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e06e      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2221      	movs	r2, #33	; 0x21
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffe:	f7fc fcf9 	bl	80019f4 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d108      	bne.n	800502c <HAL_UART_Transmit+0x82>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e003      	b.n	8005034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800503c:	e02a      	b.n	8005094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fbc1 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e036      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3302      	adds	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e007      	b.n	8005086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1cf      	bne.n	800503e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fb91 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b08a      	sub	sp, #40	; 0x28
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	f040 808c 	bne.w	8005208 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Receive+0x2e>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e084      	b.n	800520a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_UART_Receive+0x40>
 800510a:	2302      	movs	r3, #2
 800510c:	e07d      	b.n	800520a <HAL_UART_Receive+0x13c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2222      	movs	r2, #34	; 0x22
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512a:	f7fc fc63 	bl	80019f4 <HAL_GetTick>
 800512e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d108      	bne.n	8005158 <HAL_UART_Receive+0x8a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e003      	b.n	8005160 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005168:	e043      	b.n	80051f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2120      	movs	r1, #32
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fb2b 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e042      	b.n	800520a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10c      	bne.n	80051a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	b29a      	uxth	r2, r3
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3302      	adds	r3, #2
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e01f      	b.n	80051e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d007      	beq.n	80051be <HAL_UART_Receive+0xf0>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <HAL_UART_Receive+0xfe>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e008      	b.n	80051de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1b6      	bne.n	800516a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	d11d      	bne.n	8005268 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Receive_IT+0x26>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e016      	b.n	800526a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Receive_IT+0x38>
 8005246:	2302      	movs	r3, #2
 8005248:	e00f      	b.n	800526a <HAL_UART_Receive_IT+0x58>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	461a      	mov	r2, r3
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fb24 	bl	80058ac <UART_Start_Receive_IT>
 8005264:	4603      	mov	r3, r0
 8005266:	e000      	b.n	800526a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b0ba      	sub	sp, #232	; 0xe8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_UART_IRQHandler+0x66>
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fc07 	bl	8005ae6 <UART_Receive_IT>
      return;
 80052d8:	e256      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80de 	beq.w	80054a0 <HAL_UART_IRQHandler+0x22c>
 80052e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80d1 	beq.w	80054a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xae>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0201 	orr.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xd2>
 800532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xf6>
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <HAL_UART_IRQHandler+0x126>
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0208 	orr.w	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 81ed 	beq.w	800577e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_UART_IRQHandler+0x14e>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb92 	bl	8005ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <HAL_UART_IRQHandler+0x17a>
 80053e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04f      	beq.n	800548e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa9a 	bl	8005928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d141      	bne.n	8005486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800541c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800542e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800543a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	4a7d      	ldr	r2, [pc, #500]	; (8005650 <HAL_UART_IRQHandler+0x3dc>)
 800545c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	4618      	mov	r0, r3
 8005464:	f7fc fd9a 	bl	8001f9c <HAL_DMA_Abort_IT>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	e00e      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f990 	bl	80057a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e00a      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f98c 	bl	80057a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	e006      	b.n	800549c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f988 	bl	80057a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800549a:	e170      	b.n	800577e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	bf00      	nop
    return;
 800549e:	e16e      	b.n	800577e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 814a 	bne.w	800573e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8143 	beq.w	800573e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 813c 	beq.w	800573e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	f040 80b4 	bne.w	8005654 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8140 	beq.w	8005782 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800550a:	429a      	cmp	r2, r3
 800550c:	f080 8139 	bcs.w	8005782 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	f000 8088 	beq.w	8005636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800553c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800555e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800556a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d9      	bne.n	8005526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800559a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800559e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e1      	bne.n	8005572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e3      	bne.n	80055ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005606:	f023 0310 	bic.w	r3, r3, #16
 800560a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005618:	65ba      	str	r2, [r7, #88]	; 0x58
 800561a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800561e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e3      	bne.n	80055f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	4618      	mov	r0, r3
 8005632:	f7fc fc43 	bl	8001ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563e:	b29b      	uxth	r3, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8b6 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564c:	e099      	b.n	8005782 <HAL_UART_IRQHandler+0x50e>
 800564e:	bf00      	nop
 8005650:	080059ef 	.word	0x080059ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 808b 	beq.w	8005786 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8086 	beq.w	8005786 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800569e:	647a      	str	r2, [r7, #68]	; 0x44
 80056a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	623b      	str	r3, [r7, #32]
   return(result);
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056d6:	633a      	str	r2, [r7, #48]	; 0x30
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60fb      	str	r3, [r7, #12]
   return(result);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800571c:	61fa      	str	r2, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	617b      	str	r3, [r7, #20]
   return(result);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f83e 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800573c:	e023      	b.n	8005786 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_UART_IRQHandler+0x4ea>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f95d 	bl	8005a16 <UART_Transmit_IT>
    return;
 800575c:	e014      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00e      	beq.n	8005788 <HAL_UART_IRQHandler+0x514>
 800576a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f99d 	bl	8005ab6 <UART_EndTransmit_IT>
    return;
 800577c:	e004      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
    return;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
      return;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_UART_IRQHandler+0x514>
      return;
 8005786:	bf00      	nop
  }
}
 8005788:	37e8      	adds	r7, #232	; 0xe8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b090      	sub	sp, #64	; 0x40
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e050      	b.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d04c      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f0:	f7fc f900 	bl	80019f4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d241      	bcs.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005820:	637a      	str	r2, [r7, #52]	; 0x34
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	613b      	str	r3, [r7, #16]
   return(result);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005854:	623a      	str	r2, [r7, #32]
 8005856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	61bb      	str	r3, [r7, #24]
   return(result);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e00f      	b.n	80058a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d09f      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3740      	adds	r7, #64	; 0x40
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2222      	movs	r2, #34	; 0x22
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0220 	orr.w	r2, r2, #32
 8005918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b095      	sub	sp, #84	; 0x54
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005950:	643a      	str	r2, [r7, #64]	; 0x40
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	61fb      	str	r3, [r7, #28]
   return(result);
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	64bb      	str	r3, [r7, #72]	; 0x48
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800598a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0310 	bic.w	r3, r3, #16
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c0:	61ba      	str	r2, [r7, #24]
 80059c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	613b      	str	r3, [r7, #16]
   return(result);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059e2:	bf00      	nop
 80059e4:	3754      	adds	r7, #84	; 0x54
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fecb 	bl	80057a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b21      	cmp	r3, #33	; 0x21
 8005a28:	d13e      	bne.n	8005aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	d114      	bne.n	8005a5e <UART_Transmit_IT+0x48>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d110      	bne.n	8005a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	1c9a      	adds	r2, r3, #2
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]
 8005a5c:	e008      	b.n	8005a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6211      	str	r1, [r2, #32]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fe5a 	bl	8005790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08c      	sub	sp, #48	; 0x30
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b22      	cmp	r3, #34	; 0x22
 8005af8:	f040 80ab 	bne.w	8005c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d117      	bne.n	8005b36 <UART_Receive_IT+0x50>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d113      	bne.n	8005b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28
 8005b34:	e026      	b.n	8005b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d007      	beq.n	8005b5a <UART_Receive_IT+0x74>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <UART_Receive_IT+0x82>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e008      	b.n	8005b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4619      	mov	r1, r3
 8005b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d15a      	bne.n	8005c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0220 	bic.w	r2, r2, #32
 8005ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d135      	bne.n	8005c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	613b      	str	r3, [r7, #16]
   return(result);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f023 0310 	bic.w	r3, r3, #16
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfe:	623a      	str	r2, [r7, #32]
 8005c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	69f9      	ldr	r1, [r7, #28]
 8005c04:	6a3a      	ldr	r2, [r7, #32]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d10a      	bne.n	8005c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fdbb 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
 8005c42:	e002      	b.n	8005c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fa fcfd 	bl	8000644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e002      	b.n	8005c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3730      	adds	r7, #48	; 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c60:	b0c0      	sub	sp, #256	; 0x100
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	68d9      	ldr	r1, [r3, #12]
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	ea40 0301 	orr.w	r3, r0, r1
 8005c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cb4:	f021 010c 	bic.w	r1, r1, #12
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	ea40 0301 	orr.w	r3, r0, r1
 8005ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <UART_SetConfig+0x2cc>)
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d005      	beq.n	8005cfc <UART_SetConfig+0xa0>
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <UART_SetConfig+0x2d0>)
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d104      	bne.n	8005d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fd fbe4 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8005d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d04:	e003      	b.n	8005d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d06:	f7fd fbcb 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	f040 810c 	bne.w	8005f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	1891      	adds	r1, r2, r2
 8005d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d36:	415b      	adcs	r3, r3
 8005d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d3e:	4621      	mov	r1, r4
 8005d40:	eb12 0801 	adds.w	r8, r2, r1
 8005d44:	4629      	mov	r1, r5
 8005d46:	eb43 0901 	adc.w	r9, r3, r1
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d5e:	4690      	mov	r8, r2
 8005d60:	4699      	mov	r9, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	eb18 0303 	adds.w	r3, r8, r3
 8005d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	eb49 0303 	adc.w	r3, r9, r3
 8005d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	18db      	adds	r3, r3, r3
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d90:	4613      	mov	r3, r2
 8005d92:	eb42 0303 	adc.w	r3, r2, r3
 8005d96:	657b      	str	r3, [r7, #84]	; 0x54
 8005d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005da0:	f7fa fa76 	bl	8000290 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005daa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	011c      	lsls	r4, r3, #4
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005dda:	4649      	mov	r1, r9
 8005ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df4:	4692      	mov	sl, r2
 8005df6:	469b      	mov	fp, r3
 8005df8:	4643      	mov	r3, r8
 8005dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8005dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e02:	464b      	mov	r3, r9
 8005e04:	eb4b 0303 	adc.w	r3, fp, r3
 8005e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e20:	460b      	mov	r3, r1
 8005e22:	18db      	adds	r3, r3, r3
 8005e24:	643b      	str	r3, [r7, #64]	; 0x40
 8005e26:	4613      	mov	r3, r2
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e36:	f7fa fa2b 	bl	8000290 <__aeabi_uldivmod>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005e42:	fba3 2301 	umull	r2, r3, r3, r1
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	2264      	movs	r2, #100	; 0x64
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	1acb      	subs	r3, r1, r3
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e56:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005e58:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e64:	441c      	add	r4, r3
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e80:	415b      	adcs	r3, r3
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e88:	4641      	mov	r1, r8
 8005e8a:	1851      	adds	r1, r2, r1
 8005e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e8e:	4649      	mov	r1, r9
 8005e90:	414b      	adcs	r3, r1
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	00cb      	lsls	r3, r1, #3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eaa:	4651      	mov	r1, sl
 8005eac:	00ca      	lsls	r2, r1, #3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005edc:	460b      	mov	r3, r1
 8005ede:	18db      	adds	r3, r3, r3
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	eb42 0303 	adc.w	r3, r2, r3
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ef2:	f7fa f9cd 	bl	8000290 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 0207 	and.w	r2, r3, #7
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4422      	add	r2, r4
 8005f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f24:	e105      	b.n	8006132 <UART_SetConfig+0x4d6>
 8005f26:	bf00      	nop
 8005f28:	40011000 	.word	0x40011000
 8005f2c:	40011400 	.word	0x40011400
 8005f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f46:	4642      	mov	r2, r8
 8005f48:	464b      	mov	r3, r9
 8005f4a:	1891      	adds	r1, r2, r2
 8005f4c:	6239      	str	r1, [r7, #32]
 8005f4e:	415b      	adcs	r3, r3
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f56:	4641      	mov	r1, r8
 8005f58:	1854      	adds	r4, r2, r1
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	eb43 0501 	adc.w	r5, r3, r1
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	00eb      	lsls	r3, r5, #3
 8005f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6e:	00e2      	lsls	r2, r4, #3
 8005f70:	4614      	mov	r4, r2
 8005f72:	461d      	mov	r5, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	18e3      	adds	r3, r4, r3
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	eb45 0303 	adc.w	r3, r5, r3
 8005f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	008b      	lsls	r3, r1, #2
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fac:	4621      	mov	r1, r4
 8005fae:	008a      	lsls	r2, r1, #2
 8005fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fb4:	f7fa f96c 	bl	8000290 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4b60      	ldr	r3, [pc, #384]	; (8006140 <UART_SetConfig+0x4e4>)
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	011c      	lsls	r4, r3, #4
 8005fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	1891      	adds	r1, r2, r2
 8005fde:	61b9      	str	r1, [r7, #24]
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe8:	4641      	mov	r1, r8
 8005fea:	1851      	adds	r1, r2, r1
 8005fec:	6139      	str	r1, [r7, #16]
 8005fee:	4649      	mov	r1, r9
 8005ff0:	414b      	adcs	r3, r1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006000:	4659      	mov	r1, fp
 8006002:	00cb      	lsls	r3, r1, #3
 8006004:	4651      	mov	r1, sl
 8006006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600a:	4651      	mov	r1, sl
 800600c:	00ca      	lsls	r2, r1, #3
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	4603      	mov	r3, r0
 8006014:	4642      	mov	r2, r8
 8006016:	189b      	adds	r3, r3, r2
 8006018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800601c:	464b      	mov	r3, r9
 800601e:	460a      	mov	r2, r1
 8006020:	eb42 0303 	adc.w	r3, r2, r3
 8006024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	67bb      	str	r3, [r7, #120]	; 0x78
 8006032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006040:	4649      	mov	r1, r9
 8006042:	008b      	lsls	r3, r1, #2
 8006044:	4641      	mov	r1, r8
 8006046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604a:	4641      	mov	r1, r8
 800604c:	008a      	lsls	r2, r1, #2
 800604e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006052:	f7fa f91d 	bl	8000290 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4b39      	ldr	r3, [pc, #228]	; (8006140 <UART_SetConfig+0x4e4>)
 800605c:	fba3 1302 	umull	r1, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	2164      	movs	r1, #100	; 0x64
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	3332      	adds	r3, #50	; 0x32
 800606e:	4a34      	ldr	r2, [pc, #208]	; (8006140 <UART_SetConfig+0x4e4>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607a:	441c      	add	r4, r3
 800607c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006080:	2200      	movs	r2, #0
 8006082:	673b      	str	r3, [r7, #112]	; 0x70
 8006084:	677a      	str	r2, [r7, #116]	; 0x74
 8006086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800608a:	4642      	mov	r2, r8
 800608c:	464b      	mov	r3, r9
 800608e:	1891      	adds	r1, r2, r2
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	415b      	adcs	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609a:	4641      	mov	r1, r8
 800609c:	1851      	adds	r1, r2, r1
 800609e:	6039      	str	r1, [r7, #0]
 80060a0:	4649      	mov	r1, r9
 80060a2:	414b      	adcs	r3, r1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060b2:	4659      	mov	r1, fp
 80060b4:	00cb      	lsls	r3, r1, #3
 80060b6:	4651      	mov	r1, sl
 80060b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060bc:	4651      	mov	r1, sl
 80060be:	00ca      	lsls	r2, r1, #3
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	4603      	mov	r3, r0
 80060c6:	4642      	mov	r2, r8
 80060c8:	189b      	adds	r3, r3, r2
 80060ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80060cc:	464b      	mov	r3, r9
 80060ce:	460a      	mov	r2, r1
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	663b      	str	r3, [r7, #96]	; 0x60
 80060e0:	667a      	str	r2, [r7, #100]	; 0x64
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060ee:	4649      	mov	r1, r9
 80060f0:	008b      	lsls	r3, r1, #2
 80060f2:	4641      	mov	r1, r8
 80060f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f8:	4641      	mov	r1, r8
 80060fa:	008a      	lsls	r2, r1, #2
 80060fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006100:	f7fa f8c6 	bl	8000290 <__aeabi_uldivmod>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <UART_SetConfig+0x4e4>)
 800610a:	fba3 1302 	umull	r1, r3, r3, r2
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2164      	movs	r1, #100	; 0x64
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	3332      	adds	r3, #50	; 0x32
 800611c:	4a08      	ldr	r2, [pc, #32]	; (8006140 <UART_SetConfig+0x4e4>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4422      	add	r2, r4
 8006130:	609a      	str	r2, [r3, #8]
}
 8006132:	bf00      	nop
 8006134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006138:	46bd      	mov	sp, r7
 800613a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613e:	bf00      	nop
 8006140:	51eb851f 	.word	0x51eb851f

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	; (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	2000000c 	.word	0x2000000c

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	4d0d      	ldr	r5, [pc, #52]	; (8006188 <__libc_init_array+0x38>)
 8006154:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006156:	1b64      	subs	r4, r4, r5
 8006158:	10a4      	asrs	r4, r4, #2
 800615a:	2600      	movs	r6, #0
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	4d0b      	ldr	r5, [pc, #44]	; (8006190 <__libc_init_array+0x40>)
 8006162:	4c0c      	ldr	r4, [pc, #48]	; (8006194 <__libc_init_array+0x44>)
 8006164:	f001 f87c 	bl	8007260 <_init>
 8006168:	1b64      	subs	r4, r4, r5
 800616a:	10a4      	asrs	r4, r4, #2
 800616c:	2600      	movs	r6, #0
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	080073b4 	.word	0x080073b4
 800618c:	080073b4 	.word	0x080073b4
 8006190:	080073b4 	.word	0x080073b4
 8006194:	080073b8 	.word	0x080073b8

08006198 <memset>:
 8006198:	4402      	add	r2, r0
 800619a:	4603      	mov	r3, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <memset+0xa>
 80061a0:	4770      	bx	lr
 80061a2:	f803 1b01 	strb.w	r1, [r3], #1
 80061a6:	e7f9      	b.n	800619c <memset+0x4>

080061a8 <iprintf>:
 80061a8:	b40f      	push	{r0, r1, r2, r3}
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <iprintf+0x2c>)
 80061ac:	b513      	push	{r0, r1, r4, lr}
 80061ae:	681c      	ldr	r4, [r3, #0]
 80061b0:	b124      	cbz	r4, 80061bc <iprintf+0x14>
 80061b2:	69a3      	ldr	r3, [r4, #24]
 80061b4:	b913      	cbnz	r3, 80061bc <iprintf+0x14>
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f9ee 	bl	8006598 <__sinit>
 80061bc:	ab05      	add	r3, sp, #20
 80061be:	9a04      	ldr	r2, [sp, #16]
 80061c0:	68a1      	ldr	r1, [r4, #8]
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fbff 	bl	80069c8 <_vfiprintf_r>
 80061ca:	b002      	add	sp, #8
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <setvbuf>:
 80061d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061dc:	461d      	mov	r5, r3
 80061de:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <setvbuf+0x17c>)
 80061e0:	681f      	ldr	r7, [r3, #0]
 80061e2:	4604      	mov	r4, r0
 80061e4:	460e      	mov	r6, r1
 80061e6:	4690      	mov	r8, r2
 80061e8:	b127      	cbz	r7, 80061f4 <setvbuf+0x1c>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	b913      	cbnz	r3, 80061f4 <setvbuf+0x1c>
 80061ee:	4638      	mov	r0, r7
 80061f0:	f000 f9d2 	bl	8006598 <__sinit>
 80061f4:	4b58      	ldr	r3, [pc, #352]	; (8006358 <setvbuf+0x180>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d167      	bne.n	80062ca <setvbuf+0xf2>
 80061fa:	687c      	ldr	r4, [r7, #4]
 80061fc:	f1b8 0f02 	cmp.w	r8, #2
 8006200:	d006      	beq.n	8006210 <setvbuf+0x38>
 8006202:	f1b8 0f01 	cmp.w	r8, #1
 8006206:	f200 809f 	bhi.w	8006348 <setvbuf+0x170>
 800620a:	2d00      	cmp	r5, #0
 800620c:	f2c0 809c 	blt.w	8006348 <setvbuf+0x170>
 8006210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006212:	07db      	lsls	r3, r3, #31
 8006214:	d405      	bmi.n	8006222 <setvbuf+0x4a>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	0598      	lsls	r0, r3, #22
 800621a:	d402      	bmi.n	8006222 <setvbuf+0x4a>
 800621c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621e:	f000 fa59 	bl	80066d4 <__retarget_lock_acquire_recursive>
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f000 f923 	bl	8006470 <_fflush_r>
 800622a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622c:	b141      	cbz	r1, 8006240 <setvbuf+0x68>
 800622e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <setvbuf+0x64>
 8006236:	4638      	mov	r0, r7
 8006238:	f000 fabc 	bl	80067b4 <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	; 0x34
 8006240:	2300      	movs	r3, #0
 8006242:	61a3      	str	r3, [r4, #24]
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	0619      	lsls	r1, r3, #24
 800624a:	d503      	bpl.n	8006254 <setvbuf+0x7c>
 800624c:	6921      	ldr	r1, [r4, #16]
 800624e:	4638      	mov	r0, r7
 8006250:	f000 fab0 	bl	80067b4 <_free_r>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	f1b8 0f02 	cmp.w	r8, #2
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	d06c      	beq.n	8006340 <setvbuf+0x168>
 8006266:	ab01      	add	r3, sp, #4
 8006268:	466a      	mov	r2, sp
 800626a:	4621      	mov	r1, r4
 800626c:	4638      	mov	r0, r7
 800626e:	f000 fa33 	bl	80066d8 <__swhatbuf_r>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	4318      	orrs	r0, r3
 8006276:	81a0      	strh	r0, [r4, #12]
 8006278:	2d00      	cmp	r5, #0
 800627a:	d130      	bne.n	80062de <setvbuf+0x106>
 800627c:	9d00      	ldr	r5, [sp, #0]
 800627e:	4628      	mov	r0, r5
 8006280:	f000 fa90 	bl	80067a4 <malloc>
 8006284:	4606      	mov	r6, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d155      	bne.n	8006336 <setvbuf+0x15e>
 800628a:	f8dd 9000 	ldr.w	r9, [sp]
 800628e:	45a9      	cmp	r9, r5
 8006290:	d14a      	bne.n	8006328 <setvbuf+0x150>
 8006292:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006296:	2200      	movs	r2, #0
 8006298:	60a2      	str	r2, [r4, #8]
 800629a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	6122      	str	r2, [r4, #16]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a8:	6162      	str	r2, [r4, #20]
 80062aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062ac:	f043 0302 	orr.w	r3, r3, #2
 80062b0:	07d2      	lsls	r2, r2, #31
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	d405      	bmi.n	80062c2 <setvbuf+0xea>
 80062b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062ba:	d102      	bne.n	80062c2 <setvbuf+0xea>
 80062bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062be:	f000 fa0a 	bl	80066d6 <__retarget_lock_release_recursive>
 80062c2:	4628      	mov	r0, r5
 80062c4:	b003      	add	sp, #12
 80062c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <setvbuf+0x184>)
 80062cc:	429c      	cmp	r4, r3
 80062ce:	d101      	bne.n	80062d4 <setvbuf+0xfc>
 80062d0:	68bc      	ldr	r4, [r7, #8]
 80062d2:	e793      	b.n	80061fc <setvbuf+0x24>
 80062d4:	4b22      	ldr	r3, [pc, #136]	; (8006360 <setvbuf+0x188>)
 80062d6:	429c      	cmp	r4, r3
 80062d8:	bf08      	it	eq
 80062da:	68fc      	ldreq	r4, [r7, #12]
 80062dc:	e78e      	b.n	80061fc <setvbuf+0x24>
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d0cd      	beq.n	800627e <setvbuf+0xa6>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	b913      	cbnz	r3, 80062ec <setvbuf+0x114>
 80062e6:	4638      	mov	r0, r7
 80062e8:	f000 f956 	bl	8006598 <__sinit>
 80062ec:	f1b8 0f01 	cmp.w	r8, #1
 80062f0:	bf08      	it	eq
 80062f2:	89a3      	ldrheq	r3, [r4, #12]
 80062f4:	6026      	str	r6, [r4, #0]
 80062f6:	bf04      	itt	eq
 80062f8:	f043 0301 	orreq.w	r3, r3, #1
 80062fc:	81a3      	strheq	r3, [r4, #12]
 80062fe:	89a2      	ldrh	r2, [r4, #12]
 8006300:	f012 0308 	ands.w	r3, r2, #8
 8006304:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006308:	d01c      	beq.n	8006344 <setvbuf+0x16c>
 800630a:	07d3      	lsls	r3, r2, #31
 800630c:	bf41      	itttt	mi
 800630e:	2300      	movmi	r3, #0
 8006310:	426d      	negmi	r5, r5
 8006312:	60a3      	strmi	r3, [r4, #8]
 8006314:	61a5      	strmi	r5, [r4, #24]
 8006316:	bf58      	it	pl
 8006318:	60a5      	strpl	r5, [r4, #8]
 800631a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800631c:	f015 0501 	ands.w	r5, r5, #1
 8006320:	d115      	bne.n	800634e <setvbuf+0x176>
 8006322:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006326:	e7c8      	b.n	80062ba <setvbuf+0xe2>
 8006328:	4648      	mov	r0, r9
 800632a:	f000 fa3b 	bl	80067a4 <malloc>
 800632e:	4606      	mov	r6, r0
 8006330:	2800      	cmp	r0, #0
 8006332:	d0ae      	beq.n	8006292 <setvbuf+0xba>
 8006334:	464d      	mov	r5, r9
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	81a3      	strh	r3, [r4, #12]
 800633e:	e7d0      	b.n	80062e2 <setvbuf+0x10a>
 8006340:	2500      	movs	r5, #0
 8006342:	e7a8      	b.n	8006296 <setvbuf+0xbe>
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	e7e8      	b.n	800631a <setvbuf+0x142>
 8006348:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800634c:	e7b9      	b.n	80062c2 <setvbuf+0xea>
 800634e:	2500      	movs	r5, #0
 8006350:	e7b7      	b.n	80062c2 <setvbuf+0xea>
 8006352:	bf00      	nop
 8006354:	2000000c 	.word	0x2000000c
 8006358:	08007338 	.word	0x08007338
 800635c:	08007358 	.word	0x08007358
 8006360:	08007318 	.word	0x08007318

08006364 <__sflush_r>:
 8006364:	898a      	ldrh	r2, [r1, #12]
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636a:	4605      	mov	r5, r0
 800636c:	0710      	lsls	r0, r2, #28
 800636e:	460c      	mov	r4, r1
 8006370:	d458      	bmi.n	8006424 <__sflush_r+0xc0>
 8006372:	684b      	ldr	r3, [r1, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dc05      	bgt.n	8006384 <__sflush_r+0x20>
 8006378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	dc02      	bgt.n	8006384 <__sflush_r+0x20>
 800637e:	2000      	movs	r0, #0
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006386:	2e00      	cmp	r6, #0
 8006388:	d0f9      	beq.n	800637e <__sflush_r+0x1a>
 800638a:	2300      	movs	r3, #0
 800638c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006390:	682f      	ldr	r7, [r5, #0]
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	d032      	beq.n	80063fc <__sflush_r+0x98>
 8006396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	075a      	lsls	r2, r3, #29
 800639c:	d505      	bpl.n	80063aa <__sflush_r+0x46>
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	1ac0      	subs	r0, r0, r3
 80063a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063a4:	b10b      	cbz	r3, 80063aa <__sflush_r+0x46>
 80063a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063a8:	1ac0      	subs	r0, r0, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	4602      	mov	r2, r0
 80063ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b0:	6a21      	ldr	r1, [r4, #32]
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b0      	blx	r6
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	d106      	bne.n	80063ca <__sflush_r+0x66>
 80063bc:	6829      	ldr	r1, [r5, #0]
 80063be:	291d      	cmp	r1, #29
 80063c0:	d82c      	bhi.n	800641c <__sflush_r+0xb8>
 80063c2:	4a2a      	ldr	r2, [pc, #168]	; (800646c <__sflush_r+0x108>)
 80063c4:	40ca      	lsrs	r2, r1
 80063c6:	07d6      	lsls	r6, r2, #31
 80063c8:	d528      	bpl.n	800641c <__sflush_r+0xb8>
 80063ca:	2200      	movs	r2, #0
 80063cc:	6062      	str	r2, [r4, #4]
 80063ce:	04d9      	lsls	r1, r3, #19
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	d504      	bpl.n	80063e0 <__sflush_r+0x7c>
 80063d6:	1c42      	adds	r2, r0, #1
 80063d8:	d101      	bne.n	80063de <__sflush_r+0x7a>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	b903      	cbnz	r3, 80063e0 <__sflush_r+0x7c>
 80063de:	6560      	str	r0, [r4, #84]	; 0x54
 80063e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063e2:	602f      	str	r7, [r5, #0]
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d0ca      	beq.n	800637e <__sflush_r+0x1a>
 80063e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063ec:	4299      	cmp	r1, r3
 80063ee:	d002      	beq.n	80063f6 <__sflush_r+0x92>
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f9df 	bl	80067b4 <_free_r>
 80063f6:	2000      	movs	r0, #0
 80063f8:	6360      	str	r0, [r4, #52]	; 0x34
 80063fa:	e7c1      	b.n	8006380 <__sflush_r+0x1c>
 80063fc:	6a21      	ldr	r1, [r4, #32]
 80063fe:	2301      	movs	r3, #1
 8006400:	4628      	mov	r0, r5
 8006402:	47b0      	blx	r6
 8006404:	1c41      	adds	r1, r0, #1
 8006406:	d1c7      	bne.n	8006398 <__sflush_r+0x34>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0c4      	beq.n	8006398 <__sflush_r+0x34>
 800640e:	2b1d      	cmp	r3, #29
 8006410:	d001      	beq.n	8006416 <__sflush_r+0xb2>
 8006412:	2b16      	cmp	r3, #22
 8006414:	d101      	bne.n	800641a <__sflush_r+0xb6>
 8006416:	602f      	str	r7, [r5, #0]
 8006418:	e7b1      	b.n	800637e <__sflush_r+0x1a>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	e7ad      	b.n	8006380 <__sflush_r+0x1c>
 8006424:	690f      	ldr	r7, [r1, #16]
 8006426:	2f00      	cmp	r7, #0
 8006428:	d0a9      	beq.n	800637e <__sflush_r+0x1a>
 800642a:	0793      	lsls	r3, r2, #30
 800642c:	680e      	ldr	r6, [r1, #0]
 800642e:	bf08      	it	eq
 8006430:	694b      	ldreq	r3, [r1, #20]
 8006432:	600f      	str	r7, [r1, #0]
 8006434:	bf18      	it	ne
 8006436:	2300      	movne	r3, #0
 8006438:	eba6 0807 	sub.w	r8, r6, r7
 800643c:	608b      	str	r3, [r1, #8]
 800643e:	f1b8 0f00 	cmp.w	r8, #0
 8006442:	dd9c      	ble.n	800637e <__sflush_r+0x1a>
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006448:	4643      	mov	r3, r8
 800644a:	463a      	mov	r2, r7
 800644c:	4628      	mov	r0, r5
 800644e:	47b0      	blx	r6
 8006450:	2800      	cmp	r0, #0
 8006452:	dc06      	bgt.n	8006462 <__sflush_r+0xfe>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006460:	e78e      	b.n	8006380 <__sflush_r+0x1c>
 8006462:	4407      	add	r7, r0
 8006464:	eba8 0800 	sub.w	r8, r8, r0
 8006468:	e7e9      	b.n	800643e <__sflush_r+0xda>
 800646a:	bf00      	nop
 800646c:	20400001 	.word	0x20400001

08006470 <_fflush_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	690b      	ldr	r3, [r1, #16]
 8006474:	4605      	mov	r5, r0
 8006476:	460c      	mov	r4, r1
 8006478:	b913      	cbnz	r3, 8006480 <_fflush_r+0x10>
 800647a:	2500      	movs	r5, #0
 800647c:	4628      	mov	r0, r5
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	b118      	cbz	r0, 800648a <_fflush_r+0x1a>
 8006482:	6983      	ldr	r3, [r0, #24]
 8006484:	b90b      	cbnz	r3, 800648a <_fflush_r+0x1a>
 8006486:	f000 f887 	bl	8006598 <__sinit>
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <_fflush_r+0x6c>)
 800648c:	429c      	cmp	r4, r3
 800648e:	d11b      	bne.n	80064c8 <_fflush_r+0x58>
 8006490:	686c      	ldr	r4, [r5, #4]
 8006492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0ef      	beq.n	800647a <_fflush_r+0xa>
 800649a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800649c:	07d0      	lsls	r0, r2, #31
 800649e:	d404      	bmi.n	80064aa <_fflush_r+0x3a>
 80064a0:	0599      	lsls	r1, r3, #22
 80064a2:	d402      	bmi.n	80064aa <_fflush_r+0x3a>
 80064a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064a6:	f000 f915 	bl	80066d4 <__retarget_lock_acquire_recursive>
 80064aa:	4628      	mov	r0, r5
 80064ac:	4621      	mov	r1, r4
 80064ae:	f7ff ff59 	bl	8006364 <__sflush_r>
 80064b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064b4:	07da      	lsls	r2, r3, #31
 80064b6:	4605      	mov	r5, r0
 80064b8:	d4e0      	bmi.n	800647c <_fflush_r+0xc>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	059b      	lsls	r3, r3, #22
 80064be:	d4dd      	bmi.n	800647c <_fflush_r+0xc>
 80064c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c2:	f000 f908 	bl	80066d6 <__retarget_lock_release_recursive>
 80064c6:	e7d9      	b.n	800647c <_fflush_r+0xc>
 80064c8:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <_fflush_r+0x70>)
 80064ca:	429c      	cmp	r4, r3
 80064cc:	d101      	bne.n	80064d2 <_fflush_r+0x62>
 80064ce:	68ac      	ldr	r4, [r5, #8]
 80064d0:	e7df      	b.n	8006492 <_fflush_r+0x22>
 80064d2:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <_fflush_r+0x74>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	bf08      	it	eq
 80064d8:	68ec      	ldreq	r4, [r5, #12]
 80064da:	e7da      	b.n	8006492 <_fflush_r+0x22>
 80064dc:	08007338 	.word	0x08007338
 80064e0:	08007358 	.word	0x08007358
 80064e4:	08007318 	.word	0x08007318

080064e8 <std>:
 80064e8:	2300      	movs	r3, #0
 80064ea:	b510      	push	{r4, lr}
 80064ec:	4604      	mov	r4, r0
 80064ee:	e9c0 3300 	strd	r3, r3, [r0]
 80064f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064f6:	6083      	str	r3, [r0, #8]
 80064f8:	8181      	strh	r1, [r0, #12]
 80064fa:	6643      	str	r3, [r0, #100]	; 0x64
 80064fc:	81c2      	strh	r2, [r0, #14]
 80064fe:	6183      	str	r3, [r0, #24]
 8006500:	4619      	mov	r1, r3
 8006502:	2208      	movs	r2, #8
 8006504:	305c      	adds	r0, #92	; 0x5c
 8006506:	f7ff fe47 	bl	8006198 <memset>
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <std+0x38>)
 800650c:	6263      	str	r3, [r4, #36]	; 0x24
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <std+0x3c>)
 8006510:	62a3      	str	r3, [r4, #40]	; 0x28
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <std+0x40>)
 8006514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <std+0x44>)
 8006518:	6224      	str	r4, [r4, #32]
 800651a:	6323      	str	r3, [r4, #48]	; 0x30
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	08006f71 	.word	0x08006f71
 8006524:	08006f93 	.word	0x08006f93
 8006528:	08006fcb 	.word	0x08006fcb
 800652c:	08006fef 	.word	0x08006fef

08006530 <_cleanup_r>:
 8006530:	4901      	ldr	r1, [pc, #4]	; (8006538 <_cleanup_r+0x8>)
 8006532:	f000 b8af 	b.w	8006694 <_fwalk_reent>
 8006536:	bf00      	nop
 8006538:	08006471 	.word	0x08006471

0800653c <__sfmoreglue>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	2268      	movs	r2, #104	; 0x68
 8006540:	1e4d      	subs	r5, r1, #1
 8006542:	4355      	muls	r5, r2
 8006544:	460e      	mov	r6, r1
 8006546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800654a:	f000 f99f 	bl	800688c <_malloc_r>
 800654e:	4604      	mov	r4, r0
 8006550:	b140      	cbz	r0, 8006564 <__sfmoreglue+0x28>
 8006552:	2100      	movs	r1, #0
 8006554:	e9c0 1600 	strd	r1, r6, [r0]
 8006558:	300c      	adds	r0, #12
 800655a:	60a0      	str	r0, [r4, #8]
 800655c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006560:	f7ff fe1a 	bl	8006198 <memset>
 8006564:	4620      	mov	r0, r4
 8006566:	bd70      	pop	{r4, r5, r6, pc}

08006568 <__sfp_lock_acquire>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__sfp_lock_acquire+0x8>)
 800656a:	f000 b8b3 	b.w	80066d4 <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	200008e5 	.word	0x200008e5

08006574 <__sfp_lock_release>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sfp_lock_release+0x8>)
 8006576:	f000 b8ae 	b.w	80066d6 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	200008e5 	.word	0x200008e5

08006580 <__sinit_lock_acquire>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__sinit_lock_acquire+0x8>)
 8006582:	f000 b8a7 	b.w	80066d4 <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	200008e6 	.word	0x200008e6

0800658c <__sinit_lock_release>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__sinit_lock_release+0x8>)
 800658e:	f000 b8a2 	b.w	80066d6 <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	200008e6 	.word	0x200008e6

08006598 <__sinit>:
 8006598:	b510      	push	{r4, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	f7ff fff0 	bl	8006580 <__sinit_lock_acquire>
 80065a0:	69a3      	ldr	r3, [r4, #24]
 80065a2:	b11b      	cbz	r3, 80065ac <__sinit+0x14>
 80065a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a8:	f7ff bff0 	b.w	800658c <__sinit_lock_release>
 80065ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065b0:	6523      	str	r3, [r4, #80]	; 0x50
 80065b2:	4b13      	ldr	r3, [pc, #76]	; (8006600 <__sinit+0x68>)
 80065b4:	4a13      	ldr	r2, [pc, #76]	; (8006604 <__sinit+0x6c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	bf04      	itt	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	61a3      	streq	r3, [r4, #24]
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f820 	bl	8006608 <__sfp>
 80065c8:	6060      	str	r0, [r4, #4]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f81c 	bl	8006608 <__sfp>
 80065d0:	60a0      	str	r0, [r4, #8]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f818 	bl	8006608 <__sfp>
 80065d8:	2200      	movs	r2, #0
 80065da:	60e0      	str	r0, [r4, #12]
 80065dc:	2104      	movs	r1, #4
 80065de:	6860      	ldr	r0, [r4, #4]
 80065e0:	f7ff ff82 	bl	80064e8 <std>
 80065e4:	68a0      	ldr	r0, [r4, #8]
 80065e6:	2201      	movs	r2, #1
 80065e8:	2109      	movs	r1, #9
 80065ea:	f7ff ff7d 	bl	80064e8 <std>
 80065ee:	68e0      	ldr	r0, [r4, #12]
 80065f0:	2202      	movs	r2, #2
 80065f2:	2112      	movs	r1, #18
 80065f4:	f7ff ff78 	bl	80064e8 <std>
 80065f8:	2301      	movs	r3, #1
 80065fa:	61a3      	str	r3, [r4, #24]
 80065fc:	e7d2      	b.n	80065a4 <__sinit+0xc>
 80065fe:	bf00      	nop
 8006600:	08007314 	.word	0x08007314
 8006604:	08006531 	.word	0x08006531

08006608 <__sfp>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	4607      	mov	r7, r0
 800660c:	f7ff ffac 	bl	8006568 <__sfp_lock_acquire>
 8006610:	4b1e      	ldr	r3, [pc, #120]	; (800668c <__sfp+0x84>)
 8006612:	681e      	ldr	r6, [r3, #0]
 8006614:	69b3      	ldr	r3, [r6, #24]
 8006616:	b913      	cbnz	r3, 800661e <__sfp+0x16>
 8006618:	4630      	mov	r0, r6
 800661a:	f7ff ffbd 	bl	8006598 <__sinit>
 800661e:	3648      	adds	r6, #72	; 0x48
 8006620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006624:	3b01      	subs	r3, #1
 8006626:	d503      	bpl.n	8006630 <__sfp+0x28>
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	b30b      	cbz	r3, 8006670 <__sfp+0x68>
 800662c:	6836      	ldr	r6, [r6, #0]
 800662e:	e7f7      	b.n	8006620 <__sfp+0x18>
 8006630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006634:	b9d5      	cbnz	r5, 800666c <__sfp+0x64>
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <__sfp+0x88>)
 8006638:	60e3      	str	r3, [r4, #12]
 800663a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800663e:	6665      	str	r5, [r4, #100]	; 0x64
 8006640:	f000 f847 	bl	80066d2 <__retarget_lock_init_recursive>
 8006644:	f7ff ff96 	bl	8006574 <__sfp_lock_release>
 8006648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800664c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006650:	6025      	str	r5, [r4, #0]
 8006652:	61a5      	str	r5, [r4, #24]
 8006654:	2208      	movs	r2, #8
 8006656:	4629      	mov	r1, r5
 8006658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800665c:	f7ff fd9c 	bl	8006198 <memset>
 8006660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006668:	4620      	mov	r0, r4
 800666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666c:	3468      	adds	r4, #104	; 0x68
 800666e:	e7d9      	b.n	8006624 <__sfp+0x1c>
 8006670:	2104      	movs	r1, #4
 8006672:	4638      	mov	r0, r7
 8006674:	f7ff ff62 	bl	800653c <__sfmoreglue>
 8006678:	4604      	mov	r4, r0
 800667a:	6030      	str	r0, [r6, #0]
 800667c:	2800      	cmp	r0, #0
 800667e:	d1d5      	bne.n	800662c <__sfp+0x24>
 8006680:	f7ff ff78 	bl	8006574 <__sfp_lock_release>
 8006684:	230c      	movs	r3, #12
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	e7ee      	b.n	8006668 <__sfp+0x60>
 800668a:	bf00      	nop
 800668c:	08007314 	.word	0x08007314
 8006690:	ffff0001 	.word	0xffff0001

08006694 <_fwalk_reent>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	4606      	mov	r6, r0
 800669a:	4688      	mov	r8, r1
 800669c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066a0:	2700      	movs	r7, #0
 80066a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a6:	f1b9 0901 	subs.w	r9, r9, #1
 80066aa:	d505      	bpl.n	80066b8 <_fwalk_reent+0x24>
 80066ac:	6824      	ldr	r4, [r4, #0]
 80066ae:	2c00      	cmp	r4, #0
 80066b0:	d1f7      	bne.n	80066a2 <_fwalk_reent+0xe>
 80066b2:	4638      	mov	r0, r7
 80066b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b8:	89ab      	ldrh	r3, [r5, #12]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d907      	bls.n	80066ce <_fwalk_reent+0x3a>
 80066be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c2:	3301      	adds	r3, #1
 80066c4:	d003      	beq.n	80066ce <_fwalk_reent+0x3a>
 80066c6:	4629      	mov	r1, r5
 80066c8:	4630      	mov	r0, r6
 80066ca:	47c0      	blx	r8
 80066cc:	4307      	orrs	r7, r0
 80066ce:	3568      	adds	r5, #104	; 0x68
 80066d0:	e7e9      	b.n	80066a6 <_fwalk_reent+0x12>

080066d2 <__retarget_lock_init_recursive>:
 80066d2:	4770      	bx	lr

080066d4 <__retarget_lock_acquire_recursive>:
 80066d4:	4770      	bx	lr

080066d6 <__retarget_lock_release_recursive>:
 80066d6:	4770      	bx	lr

080066d8 <__swhatbuf_r>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	460e      	mov	r6, r1
 80066dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	b096      	sub	sp, #88	; 0x58
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	da08      	bge.n	80066fc <__swhatbuf_r+0x24>
 80066ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	061a      	lsls	r2, r3, #24
 80066f4:	d410      	bmi.n	8006718 <__swhatbuf_r+0x40>
 80066f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066fa:	e00e      	b.n	800671a <__swhatbuf_r+0x42>
 80066fc:	466a      	mov	r2, sp
 80066fe:	f000 fd5d 	bl	80071bc <_fstat_r>
 8006702:	2800      	cmp	r0, #0
 8006704:	dbf1      	blt.n	80066ea <__swhatbuf_r+0x12>
 8006706:	9a01      	ldr	r2, [sp, #4]
 8006708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800670c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006710:	425a      	negs	r2, r3
 8006712:	415a      	adcs	r2, r3
 8006714:	602a      	str	r2, [r5, #0]
 8006716:	e7ee      	b.n	80066f6 <__swhatbuf_r+0x1e>
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	2000      	movs	r0, #0
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	b016      	add	sp, #88	; 0x58
 8006720:	bd70      	pop	{r4, r5, r6, pc}
	...

08006724 <__smakebuf_r>:
 8006724:	898b      	ldrh	r3, [r1, #12]
 8006726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006728:	079d      	lsls	r5, r3, #30
 800672a:	4606      	mov	r6, r0
 800672c:	460c      	mov	r4, r1
 800672e:	d507      	bpl.n	8006740 <__smakebuf_r+0x1c>
 8006730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	2301      	movs	r3, #1
 800673a:	6163      	str	r3, [r4, #20]
 800673c:	b002      	add	sp, #8
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	ab01      	add	r3, sp, #4
 8006742:	466a      	mov	r2, sp
 8006744:	f7ff ffc8 	bl	80066d8 <__swhatbuf_r>
 8006748:	9900      	ldr	r1, [sp, #0]
 800674a:	4605      	mov	r5, r0
 800674c:	4630      	mov	r0, r6
 800674e:	f000 f89d 	bl	800688c <_malloc_r>
 8006752:	b948      	cbnz	r0, 8006768 <__smakebuf_r+0x44>
 8006754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006758:	059a      	lsls	r2, r3, #22
 800675a:	d4ef      	bmi.n	800673c <__smakebuf_r+0x18>
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	f043 0302 	orr.w	r3, r3, #2
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	e7e3      	b.n	8006730 <__smakebuf_r+0xc>
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <__smakebuf_r+0x7c>)
 800676a:	62b3      	str	r3, [r6, #40]	; 0x28
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	6020      	str	r0, [r4, #0]
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	9b00      	ldr	r3, [sp, #0]
 8006778:	6163      	str	r3, [r4, #20]
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	6120      	str	r0, [r4, #16]
 800677e:	b15b      	cbz	r3, 8006798 <__smakebuf_r+0x74>
 8006780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006784:	4630      	mov	r0, r6
 8006786:	f000 fd2b 	bl	80071e0 <_isatty_r>
 800678a:	b128      	cbz	r0, 8006798 <__smakebuf_r+0x74>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	89a0      	ldrh	r0, [r4, #12]
 800679a:	4305      	orrs	r5, r0
 800679c:	81a5      	strh	r5, [r4, #12]
 800679e:	e7cd      	b.n	800673c <__smakebuf_r+0x18>
 80067a0:	08006531 	.word	0x08006531

080067a4 <malloc>:
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <malloc+0xc>)
 80067a6:	4601      	mov	r1, r0
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f000 b86f 	b.w	800688c <_malloc_r>
 80067ae:	bf00      	nop
 80067b0:	2000000c 	.word	0x2000000c

080067b4 <_free_r>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	d044      	beq.n	8006844 <_free_r+0x90>
 80067ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067be:	9001      	str	r0, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f1a1 0404 	sub.w	r4, r1, #4
 80067c6:	bfb8      	it	lt
 80067c8:	18e4      	addlt	r4, r4, r3
 80067ca:	f000 fd2b 	bl	8007224 <__malloc_lock>
 80067ce:	4a1e      	ldr	r2, [pc, #120]	; (8006848 <_free_r+0x94>)
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x30>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	b003      	add	sp, #12
 80067dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e0:	f000 bd26 	b.w	8007230 <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x46>
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1949      	addeq	r1, r1, r5
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x22>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x50>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x46>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1855      	adds	r5, r2, r1
 8006808:	42a5      	cmp	r5, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x70>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	4421      	add	r1, r4
 8006810:	1854      	adds	r4, r2, r1
 8006812:	42a3      	cmp	r3, r4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x26>
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4421      	add	r1, r4
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x26>
 8006824:	d902      	bls.n	800682c <_free_r+0x78>
 8006826:	230c      	movs	r3, #12
 8006828:	6003      	str	r3, [r0, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x26>
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	1961      	adds	r1, r4, r5
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x26>
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	200008e8 	.word	0x200008e8

0800684c <sbrk_aligned>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4e0e      	ldr	r6, [pc, #56]	; (8006888 <sbrk_aligned+0x3c>)
 8006850:	460c      	mov	r4, r1
 8006852:	6831      	ldr	r1, [r6, #0]
 8006854:	4605      	mov	r5, r0
 8006856:	b911      	cbnz	r1, 800685e <sbrk_aligned+0x12>
 8006858:	f000 fb7a 	bl	8006f50 <_sbrk_r>
 800685c:	6030      	str	r0, [r6, #0]
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 fb75 	bl	8006f50 <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d00a      	beq.n	8006880 <sbrk_aligned+0x34>
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	f024 0403 	bic.w	r4, r4, #3
 8006870:	42a0      	cmp	r0, r4
 8006872:	d007      	beq.n	8006884 <sbrk_aligned+0x38>
 8006874:	1a21      	subs	r1, r4, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fb6a 	bl	8006f50 <_sbrk_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d101      	bne.n	8006884 <sbrk_aligned+0x38>
 8006880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006884:	4620      	mov	r0, r4
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	200008ec 	.word	0x200008ec

0800688c <_malloc_r>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	1ccd      	adds	r5, r1, #3
 8006892:	f025 0503 	bic.w	r5, r5, #3
 8006896:	3508      	adds	r5, #8
 8006898:	2d0c      	cmp	r5, #12
 800689a:	bf38      	it	cc
 800689c:	250c      	movcc	r5, #12
 800689e:	2d00      	cmp	r5, #0
 80068a0:	4607      	mov	r7, r0
 80068a2:	db01      	blt.n	80068a8 <_malloc_r+0x1c>
 80068a4:	42a9      	cmp	r1, r5
 80068a6:	d905      	bls.n	80068b4 <_malloc_r+0x28>
 80068a8:	230c      	movs	r3, #12
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	2600      	movs	r6, #0
 80068ae:	4630      	mov	r0, r6
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	4e2e      	ldr	r6, [pc, #184]	; (8006970 <_malloc_r+0xe4>)
 80068b6:	f000 fcb5 	bl	8007224 <__malloc_lock>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	461c      	mov	r4, r3
 80068be:	bb34      	cbnz	r4, 800690e <_malloc_r+0x82>
 80068c0:	4629      	mov	r1, r5
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ffc2 	bl	800684c <sbrk_aligned>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	4604      	mov	r4, r0
 80068cc:	d14d      	bne.n	800696a <_malloc_r+0xde>
 80068ce:	6834      	ldr	r4, [r6, #0]
 80068d0:	4626      	mov	r6, r4
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d140      	bne.n	8006958 <_malloc_r+0xcc>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	4631      	mov	r1, r6
 80068da:	4638      	mov	r0, r7
 80068dc:	eb04 0803 	add.w	r8, r4, r3
 80068e0:	f000 fb36 	bl	8006f50 <_sbrk_r>
 80068e4:	4580      	cmp	r8, r0
 80068e6:	d13a      	bne.n	800695e <_malloc_r+0xd2>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	3503      	adds	r5, #3
 80068ec:	1a6d      	subs	r5, r5, r1
 80068ee:	f025 0503 	bic.w	r5, r5, #3
 80068f2:	3508      	adds	r5, #8
 80068f4:	2d0c      	cmp	r5, #12
 80068f6:	bf38      	it	cc
 80068f8:	250c      	movcc	r5, #12
 80068fa:	4629      	mov	r1, r5
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ffa5 	bl	800684c <sbrk_aligned>
 8006902:	3001      	adds	r0, #1
 8006904:	d02b      	beq.n	800695e <_malloc_r+0xd2>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	442b      	add	r3, r5
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	e00e      	b.n	800692c <_malloc_r+0xa0>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	1b52      	subs	r2, r2, r5
 8006912:	d41e      	bmi.n	8006952 <_malloc_r+0xc6>
 8006914:	2a0b      	cmp	r2, #11
 8006916:	d916      	bls.n	8006946 <_malloc_r+0xba>
 8006918:	1961      	adds	r1, r4, r5
 800691a:	42a3      	cmp	r3, r4
 800691c:	6025      	str	r5, [r4, #0]
 800691e:	bf18      	it	ne
 8006920:	6059      	strne	r1, [r3, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	bf08      	it	eq
 8006926:	6031      	streq	r1, [r6, #0]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4638      	mov	r0, r7
 800692e:	f104 060b 	add.w	r6, r4, #11
 8006932:	f000 fc7d 	bl	8007230 <__malloc_unlock>
 8006936:	f026 0607 	bic.w	r6, r6, #7
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	1af2      	subs	r2, r6, r3
 800693e:	d0b6      	beq.n	80068ae <_malloc_r+0x22>
 8006940:	1b9b      	subs	r3, r3, r6
 8006942:	50a3      	str	r3, [r4, r2]
 8006944:	e7b3      	b.n	80068ae <_malloc_r+0x22>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	42a3      	cmp	r3, r4
 800694a:	bf0c      	ite	eq
 800694c:	6032      	streq	r2, [r6, #0]
 800694e:	605a      	strne	r2, [r3, #4]
 8006950:	e7ec      	b.n	800692c <_malloc_r+0xa0>
 8006952:	4623      	mov	r3, r4
 8006954:	6864      	ldr	r4, [r4, #4]
 8006956:	e7b2      	b.n	80068be <_malloc_r+0x32>
 8006958:	4634      	mov	r4, r6
 800695a:	6876      	ldr	r6, [r6, #4]
 800695c:	e7b9      	b.n	80068d2 <_malloc_r+0x46>
 800695e:	230c      	movs	r3, #12
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4638      	mov	r0, r7
 8006964:	f000 fc64 	bl	8007230 <__malloc_unlock>
 8006968:	e7a1      	b.n	80068ae <_malloc_r+0x22>
 800696a:	6025      	str	r5, [r4, #0]
 800696c:	e7de      	b.n	800692c <_malloc_r+0xa0>
 800696e:	bf00      	nop
 8006970:	200008e8 	.word	0x200008e8

08006974 <__sfputc_r>:
 8006974:	6893      	ldr	r3, [r2, #8]
 8006976:	3b01      	subs	r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	b410      	push	{r4}
 800697c:	6093      	str	r3, [r2, #8]
 800697e:	da08      	bge.n	8006992 <__sfputc_r+0x1e>
 8006980:	6994      	ldr	r4, [r2, #24]
 8006982:	42a3      	cmp	r3, r4
 8006984:	db01      	blt.n	800698a <__sfputc_r+0x16>
 8006986:	290a      	cmp	r1, #10
 8006988:	d103      	bne.n	8006992 <__sfputc_r+0x1e>
 800698a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800698e:	f000 bb33 	b.w	8006ff8 <__swbuf_r>
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	1c58      	adds	r0, r3, #1
 8006996:	6010      	str	r0, [r2, #0]
 8006998:	7019      	strb	r1, [r3, #0]
 800699a:	4608      	mov	r0, r1
 800699c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <__sfputs_r>:
 80069a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a4:	4606      	mov	r6, r0
 80069a6:	460f      	mov	r7, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	18d5      	adds	r5, r2, r3
 80069ac:	42ac      	cmp	r4, r5
 80069ae:	d101      	bne.n	80069b4 <__sfputs_r+0x12>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e007      	b.n	80069c4 <__sfputs_r+0x22>
 80069b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b8:	463a      	mov	r2, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ffda 	bl	8006974 <__sfputc_r>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d1f3      	bne.n	80069ac <__sfputs_r+0xa>
 80069c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069c8 <_vfiprintf_r>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	460d      	mov	r5, r1
 80069ce:	b09d      	sub	sp, #116	; 0x74
 80069d0:	4614      	mov	r4, r2
 80069d2:	4698      	mov	r8, r3
 80069d4:	4606      	mov	r6, r0
 80069d6:	b118      	cbz	r0, 80069e0 <_vfiprintf_r+0x18>
 80069d8:	6983      	ldr	r3, [r0, #24]
 80069da:	b90b      	cbnz	r3, 80069e0 <_vfiprintf_r+0x18>
 80069dc:	f7ff fddc 	bl	8006598 <__sinit>
 80069e0:	4b89      	ldr	r3, [pc, #548]	; (8006c08 <_vfiprintf_r+0x240>)
 80069e2:	429d      	cmp	r5, r3
 80069e4:	d11b      	bne.n	8006a1e <_vfiprintf_r+0x56>
 80069e6:	6875      	ldr	r5, [r6, #4]
 80069e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	d405      	bmi.n	80069fa <_vfiprintf_r+0x32>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	059a      	lsls	r2, r3, #22
 80069f2:	d402      	bmi.n	80069fa <_vfiprintf_r+0x32>
 80069f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f6:	f7ff fe6d 	bl	80066d4 <__retarget_lock_acquire_recursive>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	071b      	lsls	r3, r3, #28
 80069fe:	d501      	bpl.n	8006a04 <_vfiprintf_r+0x3c>
 8006a00:	692b      	ldr	r3, [r5, #16]
 8006a02:	b9eb      	cbnz	r3, 8006a40 <_vfiprintf_r+0x78>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	f000 fb5a 	bl	80070c0 <__swsetup_r>
 8006a0c:	b1c0      	cbz	r0, 8006a40 <_vfiprintf_r+0x78>
 8006a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a10:	07dc      	lsls	r4, r3, #31
 8006a12:	d50e      	bpl.n	8006a32 <_vfiprintf_r+0x6a>
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a18:	b01d      	add	sp, #116	; 0x74
 8006a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1e:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <_vfiprintf_r+0x244>)
 8006a20:	429d      	cmp	r5, r3
 8006a22:	d101      	bne.n	8006a28 <_vfiprintf_r+0x60>
 8006a24:	68b5      	ldr	r5, [r6, #8]
 8006a26:	e7df      	b.n	80069e8 <_vfiprintf_r+0x20>
 8006a28:	4b79      	ldr	r3, [pc, #484]	; (8006c10 <_vfiprintf_r+0x248>)
 8006a2a:	429d      	cmp	r5, r3
 8006a2c:	bf08      	it	eq
 8006a2e:	68f5      	ldreq	r5, [r6, #12]
 8006a30:	e7da      	b.n	80069e8 <_vfiprintf_r+0x20>
 8006a32:	89ab      	ldrh	r3, [r5, #12]
 8006a34:	0598      	lsls	r0, r3, #22
 8006a36:	d4ed      	bmi.n	8006a14 <_vfiprintf_r+0x4c>
 8006a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3a:	f7ff fe4c 	bl	80066d6 <__retarget_lock_release_recursive>
 8006a3e:	e7e9      	b.n	8006a14 <_vfiprintf_r+0x4c>
 8006a40:	2300      	movs	r3, #0
 8006a42:	9309      	str	r3, [sp, #36]	; 0x24
 8006a44:	2320      	movs	r3, #32
 8006a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a4e:	2330      	movs	r3, #48	; 0x30
 8006a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c14 <_vfiprintf_r+0x24c>
 8006a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a58:	f04f 0901 	mov.w	r9, #1
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	469a      	mov	sl, r3
 8006a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a64:	b10a      	cbz	r2, 8006a6a <_vfiprintf_r+0xa2>
 8006a66:	2a25      	cmp	r2, #37	; 0x25
 8006a68:	d1f9      	bne.n	8006a5e <_vfiprintf_r+0x96>
 8006a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a6e:	d00b      	beq.n	8006a88 <_vfiprintf_r+0xc0>
 8006a70:	465b      	mov	r3, fp
 8006a72:	4622      	mov	r2, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7ff ff93 	bl	80069a2 <__sfputs_r>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f000 80aa 	beq.w	8006bd6 <_vfiprintf_r+0x20e>
 8006a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a84:	445a      	add	r2, fp
 8006a86:	9209      	str	r2, [sp, #36]	; 0x24
 8006a88:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80a2 	beq.w	8006bd6 <_vfiprintf_r+0x20e>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a9c:	f10a 0a01 	add.w	sl, sl, #1
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	9307      	str	r3, [sp, #28]
 8006aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8006aaa:	4654      	mov	r4, sl
 8006aac:	2205      	movs	r2, #5
 8006aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab2:	4858      	ldr	r0, [pc, #352]	; (8006c14 <_vfiprintf_r+0x24c>)
 8006ab4:	f7f9 fb9c 	bl	80001f0 <memchr>
 8006ab8:	9a04      	ldr	r2, [sp, #16]
 8006aba:	b9d8      	cbnz	r0, 8006af4 <_vfiprintf_r+0x12c>
 8006abc:	06d1      	lsls	r1, r2, #27
 8006abe:	bf44      	itt	mi
 8006ac0:	2320      	movmi	r3, #32
 8006ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac6:	0713      	lsls	r3, r2, #28
 8006ac8:	bf44      	itt	mi
 8006aca:	232b      	movmi	r3, #43	; 0x2b
 8006acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad6:	d015      	beq.n	8006b04 <_vfiprintf_r+0x13c>
 8006ad8:	9a07      	ldr	r2, [sp, #28]
 8006ada:	4654      	mov	r4, sl
 8006adc:	2000      	movs	r0, #0
 8006ade:	f04f 0c0a 	mov.w	ip, #10
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae8:	3b30      	subs	r3, #48	; 0x30
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d94e      	bls.n	8006b8c <_vfiprintf_r+0x1c4>
 8006aee:	b1b0      	cbz	r0, 8006b1e <_vfiprintf_r+0x156>
 8006af0:	9207      	str	r2, [sp, #28]
 8006af2:	e014      	b.n	8006b1e <_vfiprintf_r+0x156>
 8006af4:	eba0 0308 	sub.w	r3, r0, r8
 8006af8:	fa09 f303 	lsl.w	r3, r9, r3
 8006afc:	4313      	orrs	r3, r2
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	46a2      	mov	sl, r4
 8006b02:	e7d2      	b.n	8006aaa <_vfiprintf_r+0xe2>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	1d19      	adds	r1, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	9103      	str	r1, [sp, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfbb      	ittet	lt
 8006b10:	425b      	neglt	r3, r3
 8006b12:	f042 0202 	orrlt.w	r2, r2, #2
 8006b16:	9307      	strge	r3, [sp, #28]
 8006b18:	9307      	strlt	r3, [sp, #28]
 8006b1a:	bfb8      	it	lt
 8006b1c:	9204      	strlt	r2, [sp, #16]
 8006b1e:	7823      	ldrb	r3, [r4, #0]
 8006b20:	2b2e      	cmp	r3, #46	; 0x2e
 8006b22:	d10c      	bne.n	8006b3e <_vfiprintf_r+0x176>
 8006b24:	7863      	ldrb	r3, [r4, #1]
 8006b26:	2b2a      	cmp	r3, #42	; 0x2a
 8006b28:	d135      	bne.n	8006b96 <_vfiprintf_r+0x1ce>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	1d1a      	adds	r2, r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	9203      	str	r2, [sp, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfb8      	it	lt
 8006b36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b3a:	3402      	adds	r4, #2
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c24 <_vfiprintf_r+0x25c>
 8006b42:	7821      	ldrb	r1, [r4, #0]
 8006b44:	2203      	movs	r2, #3
 8006b46:	4650      	mov	r0, sl
 8006b48:	f7f9 fb52 	bl	80001f0 <memchr>
 8006b4c:	b140      	cbz	r0, 8006b60 <_vfiprintf_r+0x198>
 8006b4e:	2340      	movs	r3, #64	; 0x40
 8006b50:	eba0 000a 	sub.w	r0, r0, sl
 8006b54:	fa03 f000 	lsl.w	r0, r3, r0
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	4303      	orrs	r3, r0
 8006b5c:	3401      	adds	r4, #1
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b64:	482c      	ldr	r0, [pc, #176]	; (8006c18 <_vfiprintf_r+0x250>)
 8006b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	f7f9 fb40 	bl	80001f0 <memchr>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d03f      	beq.n	8006bf4 <_vfiprintf_r+0x22c>
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <_vfiprintf_r+0x254>)
 8006b76:	bb1b      	cbnz	r3, 8006bc0 <_vfiprintf_r+0x1f8>
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	3307      	adds	r3, #7
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	3308      	adds	r3, #8
 8006b82:	9303      	str	r3, [sp, #12]
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	443b      	add	r3, r7
 8006b88:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8a:	e767      	b.n	8006a5c <_vfiprintf_r+0x94>
 8006b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b90:	460c      	mov	r4, r1
 8006b92:	2001      	movs	r0, #1
 8006b94:	e7a5      	b.n	8006ae2 <_vfiprintf_r+0x11a>
 8006b96:	2300      	movs	r3, #0
 8006b98:	3401      	adds	r4, #1
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f04f 0c0a 	mov.w	ip, #10
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba8:	3a30      	subs	r2, #48	; 0x30
 8006baa:	2a09      	cmp	r2, #9
 8006bac:	d903      	bls.n	8006bb6 <_vfiprintf_r+0x1ee>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0c5      	beq.n	8006b3e <_vfiprintf_r+0x176>
 8006bb2:	9105      	str	r1, [sp, #20]
 8006bb4:	e7c3      	b.n	8006b3e <_vfiprintf_r+0x176>
 8006bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bba:	4604      	mov	r4, r0
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e7f0      	b.n	8006ba2 <_vfiprintf_r+0x1da>
 8006bc0:	ab03      	add	r3, sp, #12
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <_vfiprintf_r+0x258>)
 8006bc8:	a904      	add	r1, sp, #16
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f3af 8000 	nop.w
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	1c78      	adds	r0, r7, #1
 8006bd4:	d1d6      	bne.n	8006b84 <_vfiprintf_r+0x1bc>
 8006bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	d405      	bmi.n	8006be8 <_vfiprintf_r+0x220>
 8006bdc:	89ab      	ldrh	r3, [r5, #12]
 8006bde:	059a      	lsls	r2, r3, #22
 8006be0:	d402      	bmi.n	8006be8 <_vfiprintf_r+0x220>
 8006be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006be4:	f7ff fd77 	bl	80066d6 <__retarget_lock_release_recursive>
 8006be8:	89ab      	ldrh	r3, [r5, #12]
 8006bea:	065b      	lsls	r3, r3, #25
 8006bec:	f53f af12 	bmi.w	8006a14 <_vfiprintf_r+0x4c>
 8006bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bf2:	e711      	b.n	8006a18 <_vfiprintf_r+0x50>
 8006bf4:	ab03      	add	r3, sp, #12
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <_vfiprintf_r+0x258>)
 8006bfc:	a904      	add	r1, sp, #16
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f000 f880 	bl	8006d04 <_printf_i>
 8006c04:	e7e4      	b.n	8006bd0 <_vfiprintf_r+0x208>
 8006c06:	bf00      	nop
 8006c08:	08007338 	.word	0x08007338
 8006c0c:	08007358 	.word	0x08007358
 8006c10:	08007318 	.word	0x08007318
 8006c14:	08007378 	.word	0x08007378
 8006c18:	08007382 	.word	0x08007382
 8006c1c:	00000000 	.word	0x00000000
 8006c20:	080069a3 	.word	0x080069a3
 8006c24:	0800737e 	.word	0x0800737e

08006c28 <_printf_common>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	4699      	mov	r9, r3
 8006c30:	688a      	ldr	r2, [r1, #8]
 8006c32:	690b      	ldr	r3, [r1, #16]
 8006c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bfb8      	it	lt
 8006c3c:	4613      	movlt	r3, r2
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c44:	4607      	mov	r7, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b10a      	cbz	r2, 8006c4e <_printf_common+0x26>
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6033      	str	r3, [r6, #0]
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	0699      	lsls	r1, r3, #26
 8006c52:	bf42      	ittt	mi
 8006c54:	6833      	ldrmi	r3, [r6, #0]
 8006c56:	3302      	addmi	r3, #2
 8006c58:	6033      	strmi	r3, [r6, #0]
 8006c5a:	6825      	ldr	r5, [r4, #0]
 8006c5c:	f015 0506 	ands.w	r5, r5, #6
 8006c60:	d106      	bne.n	8006c70 <_printf_common+0x48>
 8006c62:	f104 0a19 	add.w	sl, r4, #25
 8006c66:	68e3      	ldr	r3, [r4, #12]
 8006c68:	6832      	ldr	r2, [r6, #0]
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	42ab      	cmp	r3, r5
 8006c6e:	dc26      	bgt.n	8006cbe <_printf_common+0x96>
 8006c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c74:	1e13      	subs	r3, r2, #0
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	bf18      	it	ne
 8006c7a:	2301      	movne	r3, #1
 8006c7c:	0692      	lsls	r2, r2, #26
 8006c7e:	d42b      	bmi.n	8006cd8 <_printf_common+0xb0>
 8006c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c84:	4649      	mov	r1, r9
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c0      	blx	r8
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d01e      	beq.n	8006ccc <_printf_common+0xa4>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	68e5      	ldr	r5, [r4, #12]
 8006c92:	6832      	ldr	r2, [r6, #0]
 8006c94:	f003 0306 	and.w	r3, r3, #6
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	bf08      	it	eq
 8006c9c:	1aad      	subeq	r5, r5, r2
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	6922      	ldr	r2, [r4, #16]
 8006ca2:	bf0c      	ite	eq
 8006ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ca8:	2500      	movne	r5, #0
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bfc4      	itt	gt
 8006cae:	1a9b      	subgt	r3, r3, r2
 8006cb0:	18ed      	addgt	r5, r5, r3
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	341a      	adds	r4, #26
 8006cb6:	42b5      	cmp	r5, r6
 8006cb8:	d11a      	bne.n	8006cf0 <_printf_common+0xc8>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e008      	b.n	8006cd0 <_printf_common+0xa8>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4652      	mov	r2, sl
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	47c0      	blx	r8
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d103      	bne.n	8006cd4 <_printf_common+0xac>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	e7c6      	b.n	8006c66 <_printf_common+0x3e>
 8006cd8:	18e1      	adds	r1, r4, r3
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	2030      	movs	r0, #48	; 0x30
 8006cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ce2:	4422      	add	r2, r4
 8006ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cec:	3302      	adds	r3, #2
 8006cee:	e7c7      	b.n	8006c80 <_printf_common+0x58>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	47c0      	blx	r8
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d0e6      	beq.n	8006ccc <_printf_common+0xa4>
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7d9      	b.n	8006cb6 <_printf_common+0x8e>
	...

08006d04 <_printf_i>:
 8006d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	7e0f      	ldrb	r7, [r1, #24]
 8006d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d0c:	2f78      	cmp	r7, #120	; 0x78
 8006d0e:	4691      	mov	r9, r2
 8006d10:	4680      	mov	r8, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	469a      	mov	sl, r3
 8006d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d1a:	d807      	bhi.n	8006d2c <_printf_i+0x28>
 8006d1c:	2f62      	cmp	r7, #98	; 0x62
 8006d1e:	d80a      	bhi.n	8006d36 <_printf_i+0x32>
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	f000 80d8 	beq.w	8006ed6 <_printf_i+0x1d2>
 8006d26:	2f58      	cmp	r7, #88	; 0x58
 8006d28:	f000 80a3 	beq.w	8006e72 <_printf_i+0x16e>
 8006d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d34:	e03a      	b.n	8006dac <_printf_i+0xa8>
 8006d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d3a:	2b15      	cmp	r3, #21
 8006d3c:	d8f6      	bhi.n	8006d2c <_printf_i+0x28>
 8006d3e:	a101      	add	r1, pc, #4	; (adr r1, 8006d44 <_printf_i+0x40>)
 8006d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d44:	08006d9d 	.word	0x08006d9d
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006d2d 	.word	0x08006d2d
 8006d50:	08006d2d 	.word	0x08006d2d
 8006d54:	08006d2d 	.word	0x08006d2d
 8006d58:	08006d2d 	.word	0x08006d2d
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006d2d 	.word	0x08006d2d
 8006d64:	08006d2d 	.word	0x08006d2d
 8006d68:	08006d2d 	.word	0x08006d2d
 8006d6c:	08006d2d 	.word	0x08006d2d
 8006d70:	08006ebd 	.word	0x08006ebd
 8006d74:	08006de1 	.word	0x08006de1
 8006d78:	08006e9f 	.word	0x08006e9f
 8006d7c:	08006d2d 	.word	0x08006d2d
 8006d80:	08006d2d 	.word	0x08006d2d
 8006d84:	08006edf 	.word	0x08006edf
 8006d88:	08006d2d 	.word	0x08006d2d
 8006d8c:	08006de1 	.word	0x08006de1
 8006d90:	08006d2d 	.word	0x08006d2d
 8006d94:	08006d2d 	.word	0x08006d2d
 8006d98:	08006ea7 	.word	0x08006ea7
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	602a      	str	r2, [r5, #0]
 8006da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0a3      	b.n	8006ef8 <_printf_i+0x1f4>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	6829      	ldr	r1, [r5, #0]
 8006db4:	0606      	lsls	r6, r0, #24
 8006db6:	f101 0304 	add.w	r3, r1, #4
 8006dba:	d50a      	bpl.n	8006dd2 <_printf_i+0xce>
 8006dbc:	680e      	ldr	r6, [r1, #0]
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	da03      	bge.n	8006dcc <_printf_i+0xc8>
 8006dc4:	232d      	movs	r3, #45	; 0x2d
 8006dc6:	4276      	negs	r6, r6
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dcc:	485e      	ldr	r0, [pc, #376]	; (8006f48 <_printf_i+0x244>)
 8006dce:	230a      	movs	r3, #10
 8006dd0:	e019      	b.n	8006e06 <_printf_i+0x102>
 8006dd2:	680e      	ldr	r6, [r1, #0]
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dda:	bf18      	it	ne
 8006ddc:	b236      	sxthne	r6, r6
 8006dde:	e7ef      	b.n	8006dc0 <_printf_i+0xbc>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	6820      	ldr	r0, [r4, #0]
 8006de4:	1d19      	adds	r1, r3, #4
 8006de6:	6029      	str	r1, [r5, #0]
 8006de8:	0601      	lsls	r1, r0, #24
 8006dea:	d501      	bpl.n	8006df0 <_printf_i+0xec>
 8006dec:	681e      	ldr	r6, [r3, #0]
 8006dee:	e002      	b.n	8006df6 <_printf_i+0xf2>
 8006df0:	0646      	lsls	r6, r0, #25
 8006df2:	d5fb      	bpl.n	8006dec <_printf_i+0xe8>
 8006df4:	881e      	ldrh	r6, [r3, #0]
 8006df6:	4854      	ldr	r0, [pc, #336]	; (8006f48 <_printf_i+0x244>)
 8006df8:	2f6f      	cmp	r7, #111	; 0x6f
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2308      	moveq	r3, #8
 8006dfe:	230a      	movne	r3, #10
 8006e00:	2100      	movs	r1, #0
 8006e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e06:	6865      	ldr	r5, [r4, #4]
 8006e08:	60a5      	str	r5, [r4, #8]
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	bfa2      	ittt	ge
 8006e0e:	6821      	ldrge	r1, [r4, #0]
 8006e10:	f021 0104 	bicge.w	r1, r1, #4
 8006e14:	6021      	strge	r1, [r4, #0]
 8006e16:	b90e      	cbnz	r6, 8006e1c <_printf_i+0x118>
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	d04d      	beq.n	8006eb8 <_printf_i+0x1b4>
 8006e1c:	4615      	mov	r5, r2
 8006e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e22:	fb03 6711 	mls	r7, r3, r1, r6
 8006e26:	5dc7      	ldrb	r7, [r0, r7]
 8006e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	42bb      	cmp	r3, r7
 8006e30:	460e      	mov	r6, r1
 8006e32:	d9f4      	bls.n	8006e1e <_printf_i+0x11a>
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d10b      	bne.n	8006e50 <_printf_i+0x14c>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07de      	lsls	r6, r3, #31
 8006e3c:	d508      	bpl.n	8006e50 <_printf_i+0x14c>
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	6861      	ldr	r1, [r4, #4]
 8006e42:	4299      	cmp	r1, r3
 8006e44:	bfde      	ittt	le
 8006e46:	2330      	movle	r3, #48	; 0x30
 8006e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006e50:	1b52      	subs	r2, r2, r5
 8006e52:	6122      	str	r2, [r4, #16]
 8006e54:	f8cd a000 	str.w	sl, [sp]
 8006e58:	464b      	mov	r3, r9
 8006e5a:	aa03      	add	r2, sp, #12
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f7ff fee2 	bl	8006c28 <_printf_common>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d14c      	bne.n	8006f02 <_printf_i+0x1fe>
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e6c:	b004      	add	sp, #16
 8006e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e72:	4835      	ldr	r0, [pc, #212]	; (8006f48 <_printf_i+0x244>)
 8006e74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e78:	6829      	ldr	r1, [r5, #0]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e80:	6029      	str	r1, [r5, #0]
 8006e82:	061d      	lsls	r5, r3, #24
 8006e84:	d514      	bpl.n	8006eb0 <_printf_i+0x1ac>
 8006e86:	07df      	lsls	r7, r3, #31
 8006e88:	bf44      	itt	mi
 8006e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e8e:	6023      	strmi	r3, [r4, #0]
 8006e90:	b91e      	cbnz	r6, 8006e9a <_printf_i+0x196>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f023 0320 	bic.w	r3, r3, #32
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	2310      	movs	r3, #16
 8006e9c:	e7b0      	b.n	8006e00 <_printf_i+0xfc>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f043 0320 	orr.w	r3, r3, #32
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	2378      	movs	r3, #120	; 0x78
 8006ea8:	4828      	ldr	r0, [pc, #160]	; (8006f4c <_printf_i+0x248>)
 8006eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eae:	e7e3      	b.n	8006e78 <_printf_i+0x174>
 8006eb0:	0659      	lsls	r1, r3, #25
 8006eb2:	bf48      	it	mi
 8006eb4:	b2b6      	uxthmi	r6, r6
 8006eb6:	e7e6      	b.n	8006e86 <_printf_i+0x182>
 8006eb8:	4615      	mov	r5, r2
 8006eba:	e7bb      	b.n	8006e34 <_printf_i+0x130>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	6826      	ldr	r6, [r4, #0]
 8006ec0:	6961      	ldr	r1, [r4, #20]
 8006ec2:	1d18      	adds	r0, r3, #4
 8006ec4:	6028      	str	r0, [r5, #0]
 8006ec6:	0635      	lsls	r5, r6, #24
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0x1cc>
 8006ecc:	6019      	str	r1, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0x1d2>
 8006ed0:	0670      	lsls	r0, r6, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0x1c8>
 8006ed4:	8019      	strh	r1, [r3, #0]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	4615      	mov	r5, r2
 8006edc:	e7ba      	b.n	8006e54 <_printf_i+0x150>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	1d1a      	adds	r2, r3, #4
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	681d      	ldr	r5, [r3, #0]
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4628      	mov	r0, r5
 8006eec:	f7f9 f980 	bl	80001f0 <memchr>
 8006ef0:	b108      	cbz	r0, 8006ef6 <_printf_i+0x1f2>
 8006ef2:	1b40      	subs	r0, r0, r5
 8006ef4:	6060      	str	r0, [r4, #4]
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	2300      	movs	r3, #0
 8006efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f00:	e7a8      	b.n	8006e54 <_printf_i+0x150>
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	462a      	mov	r2, r5
 8006f06:	4649      	mov	r1, r9
 8006f08:	4640      	mov	r0, r8
 8006f0a:	47d0      	blx	sl
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d0ab      	beq.n	8006e68 <_printf_i+0x164>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	079b      	lsls	r3, r3, #30
 8006f14:	d413      	bmi.n	8006f3e <_printf_i+0x23a>
 8006f16:	68e0      	ldr	r0, [r4, #12]
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	4298      	cmp	r0, r3
 8006f1c:	bfb8      	it	lt
 8006f1e:	4618      	movlt	r0, r3
 8006f20:	e7a4      	b.n	8006e6c <_printf_i+0x168>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4632      	mov	r2, r6
 8006f26:	4649      	mov	r1, r9
 8006f28:	4640      	mov	r0, r8
 8006f2a:	47d0      	blx	sl
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d09b      	beq.n	8006e68 <_printf_i+0x164>
 8006f30:	3501      	adds	r5, #1
 8006f32:	68e3      	ldr	r3, [r4, #12]
 8006f34:	9903      	ldr	r1, [sp, #12]
 8006f36:	1a5b      	subs	r3, r3, r1
 8006f38:	42ab      	cmp	r3, r5
 8006f3a:	dcf2      	bgt.n	8006f22 <_printf_i+0x21e>
 8006f3c:	e7eb      	b.n	8006f16 <_printf_i+0x212>
 8006f3e:	2500      	movs	r5, #0
 8006f40:	f104 0619 	add.w	r6, r4, #25
 8006f44:	e7f5      	b.n	8006f32 <_printf_i+0x22e>
 8006f46:	bf00      	nop
 8006f48:	08007389 	.word	0x08007389
 8006f4c:	0800739a 	.word	0x0800739a

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	; (8006f6c <_sbrk_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fa fc72 	bl	8001844 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	200008f0 	.word	0x200008f0

08006f70 <__sread>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	460c      	mov	r4, r1
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	f000 f960 	bl	800723c <_read_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	bfab      	itete	ge
 8006f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f82:	89a3      	ldrhlt	r3, [r4, #12]
 8006f84:	181b      	addge	r3, r3, r0
 8006f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f8a:	bfac      	ite	ge
 8006f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f8e:	81a3      	strhlt	r3, [r4, #12]
 8006f90:	bd10      	pop	{r4, pc}

08006f92 <__swrite>:
 8006f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	461f      	mov	r7, r3
 8006f98:	898b      	ldrh	r3, [r1, #12]
 8006f9a:	05db      	lsls	r3, r3, #23
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	d505      	bpl.n	8006fb0 <__swrite+0x1e>
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	2302      	movs	r3, #2
 8006faa:	2200      	movs	r2, #0
 8006fac:	f000 f928 	bl	8007200 <_lseek_r>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc6:	f000 b869 	b.w	800709c <_write_r>

08006fca <__sseek>:
 8006fca:	b510      	push	{r4, lr}
 8006fcc:	460c      	mov	r4, r1
 8006fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd2:	f000 f915 	bl	8007200 <_lseek_r>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	bf15      	itete	ne
 8006fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fe6:	81a3      	strheq	r3, [r4, #12]
 8006fe8:	bf18      	it	ne
 8006fea:	81a3      	strhne	r3, [r4, #12]
 8006fec:	bd10      	pop	{r4, pc}

08006fee <__sclose>:
 8006fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff2:	f000 b8d3 	b.w	800719c <_close_r>
	...

08006ff8 <__swbuf_r>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	4605      	mov	r5, r0
 8007000:	b118      	cbz	r0, 800700a <__swbuf_r+0x12>
 8007002:	6983      	ldr	r3, [r0, #24]
 8007004:	b90b      	cbnz	r3, 800700a <__swbuf_r+0x12>
 8007006:	f7ff fac7 	bl	8006598 <__sinit>
 800700a:	4b21      	ldr	r3, [pc, #132]	; (8007090 <__swbuf_r+0x98>)
 800700c:	429c      	cmp	r4, r3
 800700e:	d12b      	bne.n	8007068 <__swbuf_r+0x70>
 8007010:	686c      	ldr	r4, [r5, #4]
 8007012:	69a3      	ldr	r3, [r4, #24]
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	071a      	lsls	r2, r3, #28
 800701a:	d52f      	bpl.n	800707c <__swbuf_r+0x84>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	b36b      	cbz	r3, 800707c <__swbuf_r+0x84>
 8007020:	6923      	ldr	r3, [r4, #16]
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	1ac0      	subs	r0, r0, r3
 8007026:	6963      	ldr	r3, [r4, #20]
 8007028:	b2f6      	uxtb	r6, r6
 800702a:	4283      	cmp	r3, r0
 800702c:	4637      	mov	r7, r6
 800702e:	dc04      	bgt.n	800703a <__swbuf_r+0x42>
 8007030:	4621      	mov	r1, r4
 8007032:	4628      	mov	r0, r5
 8007034:	f7ff fa1c 	bl	8006470 <_fflush_r>
 8007038:	bb30      	cbnz	r0, 8007088 <__swbuf_r+0x90>
 800703a:	68a3      	ldr	r3, [r4, #8]
 800703c:	3b01      	subs	r3, #1
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	701e      	strb	r6, [r3, #0]
 8007048:	6963      	ldr	r3, [r4, #20]
 800704a:	3001      	adds	r0, #1
 800704c:	4283      	cmp	r3, r0
 800704e:	d004      	beq.n	800705a <__swbuf_r+0x62>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	07db      	lsls	r3, r3, #31
 8007054:	d506      	bpl.n	8007064 <__swbuf_r+0x6c>
 8007056:	2e0a      	cmp	r6, #10
 8007058:	d104      	bne.n	8007064 <__swbuf_r+0x6c>
 800705a:	4621      	mov	r1, r4
 800705c:	4628      	mov	r0, r5
 800705e:	f7ff fa07 	bl	8006470 <_fflush_r>
 8007062:	b988      	cbnz	r0, 8007088 <__swbuf_r+0x90>
 8007064:	4638      	mov	r0, r7
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <__swbuf_r+0x9c>)
 800706a:	429c      	cmp	r4, r3
 800706c:	d101      	bne.n	8007072 <__swbuf_r+0x7a>
 800706e:	68ac      	ldr	r4, [r5, #8]
 8007070:	e7cf      	b.n	8007012 <__swbuf_r+0x1a>
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <__swbuf_r+0xa0>)
 8007074:	429c      	cmp	r4, r3
 8007076:	bf08      	it	eq
 8007078:	68ec      	ldreq	r4, [r5, #12]
 800707a:	e7ca      	b.n	8007012 <__swbuf_r+0x1a>
 800707c:	4621      	mov	r1, r4
 800707e:	4628      	mov	r0, r5
 8007080:	f000 f81e 	bl	80070c0 <__swsetup_r>
 8007084:	2800      	cmp	r0, #0
 8007086:	d0cb      	beq.n	8007020 <__swbuf_r+0x28>
 8007088:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800708c:	e7ea      	b.n	8007064 <__swbuf_r+0x6c>
 800708e:	bf00      	nop
 8007090:	08007338 	.word	0x08007338
 8007094:	08007358 	.word	0x08007358
 8007098:	08007318 	.word	0x08007318

0800709c <_write_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_write_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa f8ae 	bl	800120c <_write>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_write_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_write_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200008f0 	.word	0x200008f0

080070c0 <__swsetup_r>:
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <__swsetup_r+0xcc>)
 80070c2:	b570      	push	{r4, r5, r6, lr}
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	4606      	mov	r6, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	b125      	cbz	r5, 80070d6 <__swsetup_r+0x16>
 80070cc:	69ab      	ldr	r3, [r5, #24]
 80070ce:	b913      	cbnz	r3, 80070d6 <__swsetup_r+0x16>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7ff fa61 	bl	8006598 <__sinit>
 80070d6:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__swsetup_r+0xd0>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d10f      	bne.n	80070fc <__swsetup_r+0x3c>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e4:	0719      	lsls	r1, r3, #28
 80070e6:	d42c      	bmi.n	8007142 <__swsetup_r+0x82>
 80070e8:	06dd      	lsls	r5, r3, #27
 80070ea:	d411      	bmi.n	8007110 <__swsetup_r+0x50>
 80070ec:	2309      	movs	r3, #9
 80070ee:	6033      	str	r3, [r6, #0]
 80070f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070fa:	e03e      	b.n	800717a <__swsetup_r+0xba>
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <__swsetup_r+0xd4>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <__swsetup_r+0x46>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7eb      	b.n	80070de <__swsetup_r+0x1e>
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <__swsetup_r+0xd8>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7e6      	b.n	80070de <__swsetup_r+0x1e>
 8007110:	0758      	lsls	r0, r3, #29
 8007112:	d512      	bpl.n	800713a <__swsetup_r+0x7a>
 8007114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007116:	b141      	cbz	r1, 800712a <__swsetup_r+0x6a>
 8007118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__swsetup_r+0x66>
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff fb47 	bl	80067b4 <_free_r>
 8007126:	2300      	movs	r3, #0
 8007128:	6363      	str	r3, [r4, #52]	; 0x34
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	2300      	movs	r3, #0
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f043 0308 	orr.w	r3, r3, #8
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	b94b      	cbnz	r3, 800715a <__swsetup_r+0x9a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d003      	beq.n	800715a <__swsetup_r+0x9a>
 8007152:	4621      	mov	r1, r4
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff fae5 	bl	8006724 <__smakebuf_r>
 800715a:	89a0      	ldrh	r0, [r4, #12]
 800715c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007160:	f010 0301 	ands.w	r3, r0, #1
 8007164:	d00a      	beq.n	800717c <__swsetup_r+0xbc>
 8007166:	2300      	movs	r3, #0
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	425b      	negs	r3, r3
 800716e:	61a3      	str	r3, [r4, #24]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	b943      	cbnz	r3, 8007186 <__swsetup_r+0xc6>
 8007174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007178:	d1ba      	bne.n	80070f0 <__swsetup_r+0x30>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	0781      	lsls	r1, r0, #30
 800717e:	bf58      	it	pl
 8007180:	6963      	ldrpl	r3, [r4, #20]
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	e7f4      	b.n	8007170 <__swsetup_r+0xb0>
 8007186:	2000      	movs	r0, #0
 8007188:	e7f7      	b.n	800717a <__swsetup_r+0xba>
 800718a:	bf00      	nop
 800718c:	2000000c 	.word	0x2000000c
 8007190:	08007338 	.word	0x08007338
 8007194:	08007358 	.word	0x08007358
 8007198:	08007318 	.word	0x08007318

0800719c <_close_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d06      	ldr	r5, [pc, #24]	; (80071b8 <_close_r+0x1c>)
 80071a0:	2300      	movs	r3, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	f7fa f85c 	bl	8001264 <_close>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_close_r+0x1a>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_close_r+0x1a>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	200008f0 	.word	0x200008f0

080071bc <_fstat_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	; (80071dc <_fstat_r+0x20>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	f7fa f89b 	bl	8001304 <_fstat>
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	d102      	bne.n	80071d8 <_fstat_r+0x1c>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	b103      	cbz	r3, 80071d8 <_fstat_r+0x1c>
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
 80071da:	bf00      	nop
 80071dc:	200008f0 	.word	0x200008f0

080071e0 <_isatty_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d06      	ldr	r5, [pc, #24]	; (80071fc <_isatty_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7f9 fff8 	bl	80011e0 <_isatty>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_isatty_r+0x1a>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_isatty_r+0x1a>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	200008f0 	.word	0x200008f0

08007200 <_lseek_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d07      	ldr	r5, [pc, #28]	; (8007220 <_lseek_r+0x20>)
 8007204:	4604      	mov	r4, r0
 8007206:	4608      	mov	r0, r1
 8007208:	4611      	mov	r1, r2
 800720a:	2200      	movs	r2, #0
 800720c:	602a      	str	r2, [r5, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	f7fa f83f 	bl	8001292 <_lseek>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_lseek_r+0x1e>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_lseek_r+0x1e>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	200008f0 	.word	0x200008f0

08007224 <__malloc_lock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_lock+0x8>)
 8007226:	f7ff ba55 	b.w	80066d4 <__retarget_lock_acquire_recursive>
 800722a:	bf00      	nop
 800722c:	200008e4 	.word	0x200008e4

08007230 <__malloc_unlock>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__malloc_unlock+0x8>)
 8007232:	f7ff ba50 	b.w	80066d6 <__retarget_lock_release_recursive>
 8007236:	bf00      	nop
 8007238:	200008e4 	.word	0x200008e4

0800723c <_read_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d07      	ldr	r5, [pc, #28]	; (800725c <_read_r+0x20>)
 8007240:	4604      	mov	r4, r0
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	2200      	movs	r2, #0
 8007248:	602a      	str	r2, [r5, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f7fa f832 	bl	80012b4 <_read>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_read_r+0x1e>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_read_r+0x1e>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	200008f0 	.word	0x200008f0

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
