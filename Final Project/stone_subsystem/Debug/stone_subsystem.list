
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800f174  0800f174  0001f174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5d8  0800f5d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5d8  0800f5d8  0001f5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5e0  0800f5e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e0  0800f5e0  0001f5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5e4  0800f5e4  0001f5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000b88  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c18  20000c18  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028157  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c2e  00000000  00000000  00048217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c88  00000000  00000000  0004de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a38  00000000  00000000  0004fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009fbd  00000000  00000000  00051508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002912b  00000000  00000000  0005b4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7acc  00000000  00000000  000845f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c0bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e44  00000000  00000000  0016c10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f15c 	.word	0x0800f15c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800f15c 	.word	0x0800f15c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MovementControllerInit>:
extern movementData_t lastAccel;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 fdd0 	bl	8001144 <Lis3dhInit>
	I3G450D_Init();
 80005a4:	f000 fd14 	bl	8000fd0 <I3G450D_Init>


}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,TIM_HandleTypeDef *timer,SPI_HandleTypeDef *SPIxHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]

	// Make sure that they return okay.
	// There are error enter error state
	// start general timer;

	currentState = START;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <SessionControllerInit+0x2c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80005c2:	f002 f8b9 	bl	8002738 <HAL_GetTick>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <SessionControllerInit+0x30>)
 80005ca:	6013      	str	r3, [r2, #0]
	MovementControllerInit(I2Cxhandle,SPIxHandle);
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f7ff ffe0 	bl	8000594 <MovementControllerInit>


}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	200000b0 	.word	0x200000b0

080005e4 <HAL_GPIO_EXTI_Callback>:
int CliModeProcess(){return 0;}
int StartPreviouseModeProcess(){return 0;}
int InModeProcess(){return 0;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 80005ee:	2301      	movs	r3, #1
 80005f0:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_GPIO_EXTI_Callback+0x30>)
 80005f4:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	4619      	mov	r1, r3
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f002 ff22 	bl	8003444 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_GPIO_EXTI_Callback+0x34>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020000 	.word	0x40020000
 8000618:	200000b4 	.word	0x200000b4

0800061c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	440b      	add	r3, r1
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d114      	bne.n	800066c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
		i++;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800064c:	e00e      	b.n	800066c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	440b      	add	r3, r1
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d001      	beq.n	8000666 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d11a      	bne.n	80006a8 <ConsoleCommandMatch+0x8c>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d817      	bhi.n	80006a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000680:	2b20      	cmp	r3, #32
 8000682:	d011      	beq.n	80006a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800068c:	2b0a      	cmp	r3, #10
 800068e:	d00b      	beq.n	80006a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d005      	beq.n	80006a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1d2      	bne.n	800064e <ConsoleCommandMatch+0x32>
	}

	return result;
 80006a8:	68bb      	ldr	r3, [r7, #8]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b087      	sub	sp, #28
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80006ce:	e00d      	b.n	80006ec <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	441a      	add	r2, r3
 80006d6:	68f9      	ldr	r1, [r7, #12]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	440b      	add	r3, r1
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	701a      	strb	r2, [r3, #0]
		i++;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3ed      	bcc.n	80006d0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006f4:	e007      	b.n	8000706 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4413      	add	r3, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	2bff      	cmp	r3, #255	; 0xff
 800070a:	d9f4      	bls.n	80006f6 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800070c:	693b      	ldr	r3, [r7, #16]
}
 800070e:	4618      	mov	r0, r3
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800071a:	b480      	push	{r7}
 800071c:	b085      	sub	sp, #20
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800072e:	e002      	b.n	8000736 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b0d      	cmp	r3, #13
 8000740:	d009      	beq.n	8000756 <ConsoleCommandEndline+0x3c>
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b0a      	cmp	r3, #10
 800074c:	d003      	beq.n	8000756 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	429a      	cmp	r2, r3
 8000754:	d3ec      	bcc.n	8000730 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d201      	bcs.n	8000762 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000762:	68bb      	ldr	r3, [r7, #8]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fb99 	bl	8000eb0 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 800077e:	480f      	ldr	r0, [pc, #60]	; (80007bc <ConsoleInit+0x4c>)
 8000780:	f000 fbea 	bl	8000f58 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000784:	480e      	ldr	r0, [pc, #56]	; (80007c0 <ConsoleInit+0x50>)
 8000786:	f000 fbe7 	bl	8000f58 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <ConsoleInit+0x54>)
 800078c:	f000 fbe4 	bl	8000f58 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <ConsoleInit+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e007      	b.n	80007ac <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <ConsoleInit+0x5c>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	d9f4      	bls.n	800079c <ConsoleInit+0x2c>
	}

}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	0800f174 	.word	0x0800f174
 80007c0:	0800f1c0 	.word	0x0800f1c0
 80007c4:	0800f1c4 	.word	0x0800f1c4
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	200000b8 	.word	0x200000b8

080007d0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80007d6:	4b54      	ldr	r3, [pc, #336]	; (8000928 <ConsoleProcess+0x158>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a54      	ldr	r2, [pc, #336]	; (800092c <ConsoleProcess+0x15c>)
 80007dc:	1898      	adds	r0, r3, r2
 80007de:	4b52      	ldr	r3, [pc, #328]	; (8000928 <ConsoleProcess+0x158>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80007e6:	463a      	mov	r2, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	f000 fb79 	bl	8000ee0 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d104      	bne.n	80007fe <ConsoleProcess+0x2e>
 80007f4:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <ConsoleProcess+0x160>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 8091 	beq.w	8000920 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 80007fe:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <ConsoleProcess+0x160>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000804:	4b48      	ldr	r3, [pc, #288]	; (8000928 <ConsoleProcess+0x158>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a46      	ldr	r2, [pc, #280]	; (8000928 <ConsoleProcess+0x158>)
 800080e:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000810:	4b45      	ldr	r3, [pc, #276]	; (8000928 <ConsoleProcess+0x158>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4845      	ldr	r0, [pc, #276]	; (800092c <ConsoleProcess+0x15c>)
 8000818:	f7ff ff7f 	bl	800071a <ConsoleCommandEndline>
 800081c:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db7d      	blt.n	8000920 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000824:	f000 fb28 	bl	8000e78 <ConsoleCommandsGetTable>
 8000828:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000832:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000834:	e03d      	b.n	80008b2 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	461a      	mov	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4938      	ldr	r1, [pc, #224]	; (800092c <ConsoleProcess+0x15c>)
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fee6 	bl	800061c <ConsoleCommandMatch>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d02a      	beq.n	80008ac <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4613      	mov	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	461a      	mov	r2, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4830      	ldr	r0, [pc, #192]	; (800092c <ConsoleProcess+0x15c>)
 800086a:	4798      	blx	r3
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d017      	beq.n	80008a6 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <ConsoleProcess+0x164>)
 8000878:	f000 fb6e 	bl	8000f58 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 800087c:	482b      	ldr	r0, [pc, #172]	; (800092c <ConsoleProcess+0x15c>)
 800087e:	f000 fb6b 	bl	8000f58 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8000882:	482d      	ldr	r0, [pc, #180]	; (8000938 <ConsoleProcess+0x168>)
 8000884:	f000 fb68 	bl	8000f58 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4613      	mov	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	461a      	mov	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4413      	add	r3, r2
 8000898:	3308      	adds	r3, #8
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fb5c 	bl	8000f58 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <ConsoleProcess+0x16c>)
 80008a2:	f000 fb59 	bl	8000f58 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	e002      	b.n	80008b2 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4613      	mov	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	461a      	mov	r2, r3
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4413      	add	r3, r2
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <ConsoleProcess+0x100>
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008ce:	d0b2      	beq.n	8000836 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <ConsoleProcess+0x122>
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008dc:	d109      	bne.n	80008f2 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <ConsoleProcess+0x158>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d905      	bls.n	80008f2 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <ConsoleProcess+0x170>)
 80008e8:	f000 fb36 	bl	8000f58 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <ConsoleProcess+0x16c>)
 80008ee:	f000 fb33 	bl	8000f58 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <ConsoleProcess+0x158>)
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	461a      	mov	r2, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <ConsoleProcess+0x15c>)
 80008fe:	f7ff feda 	bl	80006b6 <ConsoleResetBuffer>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <ConsoleProcess+0x158>)
 8000906:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <ConsoleProcess+0x158>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <ConsoleProcess+0x160>)
 8000918:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <ConsoleProcess+0x174>)
 800091c:	f000 fb1c 	bl	8000f58 <ConsoleIoSendString>
		}
	}
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200001b8 	.word	0x200001b8
 800092c:	200000b8 	.word	0x200000b8
 8000930:	200001bc 	.word	0x200001bc
 8000934:	0800f1c8 	.word	0x0800f1c8
 8000938:	0800f1d0 	.word	0x0800f1d0
 800093c:	0800f1c0 	.word	0x0800f1c0
 8000940:	0800f1d8 	.word	0x0800f1d8
 8000944:	0800f1c4 	.word	0x0800f1c4

08000948 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	460b      	mov	r3, r1
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000962:	e00b      	b.n	800097c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b20      	cmp	r3, #32
 800096e:	d102      	bne.n	8000976 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	3301      	adds	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3301      	adds	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	429a      	cmp	r2, r3
 8000982:	d002      	beq.n	800098a <ConsoleParamFindN+0x42>
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d9ec      	bls.n	8000964 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000990:	d102      	bne.n	8000998 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000992:	2310      	movs	r3, #16
 8000994:	75fb      	strb	r3, [r7, #23]
 8000996:	e002      	b.n	800099e <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	601a      	str	r2, [r3, #0]
	}
	return result;
 800099e:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3724      	adds	r7, #36	; 0x24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	460b      	mov	r3, r1
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009be:	f107 021c 	add.w	r2, r7, #28
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	4619      	mov	r1, r3
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff ffbe 	bl	8000948 <ConsoleParamFindN>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	4413      	add	r3, r2
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80009e6:	e011      	b.n	8000a0c <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80009e8:	f107 0214 	add.w	r2, r7, #20
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	4413      	add	r3, r2
 80009f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80009f4:	701a      	strb	r2, [r3, #0]
		i++;
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3301      	adds	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80009fc:	69fa      	ldr	r2, [r7, #28]
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	4413      	add	r3, r2
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000a0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a10:	2b0a      	cmp	r3, #10
 8000a12:	d00a      	beq.n	8000a2a <ConsoleReceiveParamInt16+0x7e>
 8000a14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d006      	beq.n	8000a2a <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000a1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	d002      	beq.n	8000a2a <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	d9de      	bls.n	80009e8 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	2b08      	cmp	r3, #8
 8000a2e:	d102      	bne.n	8000a36 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a30:	2310      	movs	r3, #16
 8000a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10e      	bne.n	8000a5c <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000a3e:	f107 0214 	add.w	r2, r7, #20
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	4413      	add	r3, r2
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00d fa50 	bl	800def4 <atoi>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	460b      	mov	r3, r1
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a7e:	f107 0218 	add.w	r2, r7, #24
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	4619      	mov	r1, r3
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff ff5e 	bl	8000948 <ConsoleParamFindN>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12c      	bne.n	8000af0 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	e01e      	b.n	8000ada <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f107 0217 	add.w	r2, r7, #23
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f8c5 	bl	8000c44 <ConsoleUtilHexCharToInt>
 8000aba:	4603      	mov	r3, r0
 8000abc:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d107      	bne.n	8000ad4 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000ac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ad0:	4413      	add	r3, r2
 8000ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d9dd      	bls.n	8000a9c <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b11      	cmp	r3, #17
 8000ae4:	d101      	bne.n	8000aea <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000aee:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b04:	2300      	movs	r3, #0
 8000b06:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e01b      	b.n	8000b46 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000b0e:	7cfb      	ldrb	r3, [r7, #19]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d115      	bne.n	8000b40 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f1c3 0303 	rsb	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	fa42 f303 	asr.w	r3, r2, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000b2a:	f107 020c 	add.w	r2, r7, #12
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	441a      	add	r2, r3
 8000b32:	7cbb      	ldrb	r3, [r7, #18]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8c5 	bl	8000cc6 <ConsoleUtilsIntToHexChar>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d9e0      	bls.n	8000b0e <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f9fb 	bl	8000f58 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da07      	bge.n	8000b96 <smallItoa+0x2a>
		isNegative = true;
 8000b86:	2301      	movs	r3, #1
 8000b88:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b9a:	e007      	b.n	8000bac <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f1      	bne.n	8000b9c <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	fb01 f202 	mul.w	r2, r1, r2
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	440b      	add	r3, r1
 8000be4:	3230      	adds	r2, #48	; 0x30
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bf2:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	617a      	str	r2, [r7, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e6      	bne.n	8000bcc <smallItoa+0x60>

	if (isNegative) {
 8000bfe:	7ffb      	ldrb	r3, [r7, #31]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	222d      	movs	r2, #45	; 0x2d
 8000c08:	701a      	strb	r2, [r3, #0]
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c24:	f107 0108 	add.w	r1, r7, #8
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff9e 	bl	8000b6c <smallItoa>
	ConsoleIoSendString(out);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f98f 	bl	8000f58 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b2f      	cmp	r3, #47	; 0x2f
 8000c58:	d908      	bls.n	8000c6c <ConsoleUtilHexCharToInt+0x28>
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b39      	cmp	r3, #57	; 0x39
 8000c5e:	d805      	bhi.n	8000c6c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	3b30      	subs	r3, #48	; 0x30
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e025      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b40      	cmp	r3, #64	; 0x40
 8000c70:	d908      	bls.n	8000c84 <ConsoleUtilHexCharToInt+0x40>
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b46      	cmp	r3, #70	; 0x46
 8000c76:	d805      	bhi.n	8000c84 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b37      	subs	r3, #55	; 0x37
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e019      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b60      	cmp	r3, #96	; 0x60
 8000c88:	d908      	bls.n	8000c9c <ConsoleUtilHexCharToInt+0x58>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b66      	cmp	r3, #102	; 0x66
 8000c8e:	d805      	bhi.n	8000c9c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3b57      	subs	r3, #87	; 0x57
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e00d      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d105      	bne.n	8000cae <ConsoleUtilHexCharToInt+0x6a>
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b0d      	cmp	r3, #13
 8000ca6:	d102      	bne.n	8000cae <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d102      	bne.n	8000cb4 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000cae:	2311      	movs	r3, #17
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e001      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	6039      	str	r1, [r7, #0]
 8000cd0:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	d805      	bhi.n	8000ce8 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3330      	adds	r3, #48	; 0x30
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e00d      	b.n	8000d04 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b09      	cmp	r3, #9
 8000cec:	d908      	bls.n	8000d00 <ConsoleUtilsIntToHexChar+0x3a>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d805      	bhi.n	8000d00 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3337      	adds	r3, #55	; 0x37
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e001      	b.n	8000d04 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000d00:	2310      	movs	r3, #16
 8000d02:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d30:	2300      	movs	r3, #0
 8000d32:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d34:	2306      	movs	r3, #6
 8000d36:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e01e      	b.n	8000d7c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <ConsoleCommandHelp+0x68>)
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f902 	bl	8000f58 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <ConsoleCommandHelp+0x6c>)
 8000d56:	f000 f8ff 	bl	8000f58 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	3308      	adds	r3, #8
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <ConsoleCommandHelp+0x68>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f8f4 	bl	8000f58 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <ConsoleCommandHelp+0x70>)
 8000d72:	f000 f8f1 	bl	8000f58 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3db      	bcc.n	8000d3e <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d86:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0800f258 	.word	0x0800f258
 8000d94:	0800f208 	.word	0x0800f208
 8000d98:	0800f20c 	.word	0x0800f20c

08000d9c <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	461a      	mov	r2, r3
 8000daa:	2101      	movs	r1, #1
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fdfd 	bl	80009ac <ConsoleReceiveParamInt16>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d116      	bne.n	8000dea <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <ConsoleCommandParamExampleInt16+0x58>)
 8000dbe:	f000 f8cb 	bl	8000f58 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff25 	bl	8000c16 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <ConsoleCommandParamExampleInt16+0x5c>)
 8000dce:	f000 f8c3 	bl	8000f58 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000dd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8e 	bl	8000afa <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <ConsoleCommandParamExampleInt16+0x60>)
 8000de0:	f000 f8ba 	bl	8000f58 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <ConsoleCommandParamExampleInt16+0x64>)
 8000de6:	f000 f8b7 	bl	8000f58 <ConsoleIoSendString>
	}
	return result;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	0800f210 	.word	0x0800f210
 8000df8:	0800f220 	.word	0x0800f220
 8000dfc:	0800f228 	.word	0x0800f228
 8000e00:	0800f20c 	.word	0x0800f20c

08000e04 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	461a      	mov	r2, r3
 8000e12:	2101      	movs	r1, #1
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fe27 	bl	8000a68 <ConsoleReceiveParamHexUint16>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d109      	bne.n	8000e38 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e26:	f000 f897 	bl	8000f58 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe64 	bl	8000afa <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e34:	f000 f890 	bl	8000f58 <ConsoleIoSendString>
	}
	return result;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0800f22c 	.word	0x0800f22c
 8000e48:	0800f20c 	.word	0x0800f20c

08000e4c <ConsoleCommandVer>:

		return result;

}
static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <ConsoleCommandVer+0x24>)
 8000e5a:	f000 f87d 	bl	8000f58 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <ConsoleCommandVer+0x28>)
 8000e60:	f000 f87a 	bl	8000f58 <ConsoleIoSendString>
	return result;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	0800f23c 	.word	0x0800f23c
 8000e74:	0800f20c 	.word	0x0800f20c

08000e78 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <ConsoleCommandsGetTable+0x10>)
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	0800f258 	.word	0x0800f258

08000e8c <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <reset+0x1c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <reset+0x20>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200001c8 	.word	0x200001c8
 8000eac:	200001c4 	.word	0x200001c4

08000eb0 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <ConsoleIoInit+0x28>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <ConsoleIoInit+0x28>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4905      	ldr	r1, [pc, #20]	; (8000edc <ConsoleIoInit+0x2c>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f007 fbe3 	bl	8008692 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200001c0 	.word	0x200001c0
 8000edc:	200001d6 	.word	0x200001d6

08000ee0 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <ConsoleIoReceive+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d11f      	bne.n	8000f38 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ef8:	e00a      	b.n	8000f10 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4413      	add	r3, r2
 8000f00:	4912      	ldr	r1, [pc, #72]	; (8000f4c <ConsoleIoReceive+0x6c>)
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	440a      	add	r2, r1
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	701a      	strb	r2, [r3, #0]
			i++;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <ConsoleIoReceive+0x70>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d3ed      	bcc.n	8000efa <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <ConsoleIoReceive+0x70>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000f28:	4908      	ldr	r1, [pc, #32]	; (8000f4c <ConsoleIoReceive+0x6c>)
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <ConsoleIoReceive+0x74>)
 8000f2c:	f00d f916 	bl	800e15c <iprintf>
		// reset counts
		reset();
 8000f30:	f7ff ffac 	bl	8000e8c <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e003      	b.n	8000f40 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001c4 	.word	0x200001c4
 8000f4c:	200001cc 	.word	0x200001cc
 8000f50:	200001c8 	.word	0x200001c8
 8000f54:	0800f250 	.word	0x0800f250

08000f58 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <ConsoleIoSendString+0x1c>)
 8000f64:	f00d f8fa 	bl	800e15c <iprintf>
	return CONSOLE_SUCCESS;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800f250 	.word	0x0800f250

08000f78 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_RxCpltCallback+0x44>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000f86:	7811      	ldrb	r1, [r2, #0]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000f8a:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_UART_RxCpltCallback+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_UART_RxCpltCallback+0x44>)
 8000f94:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b0a      	cmp	r3, #10
 8000f9c:	d102      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_UART_RxCpltCallback+0x50>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_UART_RxCpltCallback+0x54>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fb70 	bl	8008692 <HAL_UART_Receive_IT>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001c8 	.word	0x200001c8
 8000fc0:	200001d6 	.word	0x200001d6
 8000fc4:	200001cc 	.word	0x200001cc
 8000fc8:	200001c4 	.word	0x200001c4
 8000fcc:	200001c0 	.word	0x200001c0

08000fd0 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4856      	ldr	r0, [pc, #344]	; (8001134 <I3G450D_Init+0x164>)
 8000fda:	f002 fa4b 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 fbb6 	bl	8002750 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4852      	ldr	r0, [pc, #328]	; (8001134 <I3G450D_Init+0x164>)
 8000fea:	f002 fa43 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 fbae 	bl	8002750 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <I3G450D_Init+0x168>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000ffa:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <I3G450D_Init+0x168>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	494c      	ldr	r1, [pc, #304]	; (8001138 <I3G450D_Init+0x168>)
 8001006:	484d      	ldr	r0, [pc, #308]	; (800113c <I3G450D_Init+0x16c>)
 8001008:	f005 fccf 	bl	80069aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	4848      	ldr	r0, [pc, #288]	; (8001134 <I3G450D_Init+0x164>)
 8001012:	f002 fa2f 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 fb9a 	bl	8002750 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4844      	ldr	r0, [pc, #272]	; (8001134 <I3G450D_Init+0x164>)
 8001022:	f002 fa27 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 fb92 	bl	8002750 <HAL_Delay>
	spiTxBuf[0]=0x21;
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <I3G450D_Init+0x168>)
 800102e:	2221      	movs	r2, #33	; 0x21
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b41      	ldr	r3, [pc, #260]	; (8001138 <I3G450D_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	493e      	ldr	r1, [pc, #248]	; (8001138 <I3G450D_Init+0x168>)
 800103e:	483f      	ldr	r0, [pc, #252]	; (800113c <I3G450D_Init+0x16c>)
 8001040:	f005 fcb3 	bl	80069aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	483a      	ldr	r0, [pc, #232]	; (8001134 <I3G450D_Init+0x164>)
 800104a:	f002 fa13 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 fb7e 	bl	8002750 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4836      	ldr	r0, [pc, #216]	; (8001134 <I3G450D_Init+0x164>)
 800105a:	f002 fa0b 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 fb76 	bl	8002750 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <I3G450D_Init+0x168>)
 8001066:	2222      	movs	r2, #34	; 0x22
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <I3G450D_Init+0x168>)
 800106c:	2200      	movs	r2, #0
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4930      	ldr	r1, [pc, #192]	; (8001138 <I3G450D_Init+0x168>)
 8001076:	4831      	ldr	r0, [pc, #196]	; (800113c <I3G450D_Init+0x16c>)
 8001078:	f005 fc97 	bl	80069aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	482c      	ldr	r0, [pc, #176]	; (8001134 <I3G450D_Init+0x164>)
 8001082:	f002 f9f7 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 fb62 	bl	8002750 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	4828      	ldr	r0, [pc, #160]	; (8001134 <I3G450D_Init+0x164>)
 8001092:	f002 f9ef 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 fb5a 	bl	8002750 <HAL_Delay>
	spiTxBuf[0]=0x23;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <I3G450D_Init+0x168>)
 800109e:	2223      	movs	r2, #35	; 0x23
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <I3G450D_Init+0x168>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4922      	ldr	r1, [pc, #136]	; (8001138 <I3G450D_Init+0x168>)
 80010ae:	4823      	ldr	r0, [pc, #140]	; (800113c <I3G450D_Init+0x16c>)
 80010b0:	f005 fc7b 	bl	80069aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	481e      	ldr	r0, [pc, #120]	; (8001134 <I3G450D_Init+0x164>)
 80010ba:	f002 f9db 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 fb46 	bl	8002750 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <I3G450D_Init+0x164>)
 80010ca:	f002 f9d3 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010ce:	2014      	movs	r0, #20
 80010d0:	f001 fb3e 	bl	8002750 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <I3G450D_Init+0x168>)
 80010d6:	2224      	movs	r2, #36	; 0x24
 80010d8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <I3G450D_Init+0x168>)
 80010dc:	2210      	movs	r2, #16
 80010de:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2202      	movs	r2, #2
 80010e4:	4914      	ldr	r1, [pc, #80]	; (8001138 <I3G450D_Init+0x168>)
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <I3G450D_Init+0x16c>)
 80010e8:	f005 fc5f 	bl	80069aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <I3G450D_Init+0x164>)
 80010f2:	f002 f9bf 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f001 fb2a 	bl	8002750 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2102      	movs	r1, #2
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <I3G450D_Init+0x164>)
 8001102:	f002 f9b7 	bl	8003474 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <I3G450D_Init+0x168>)
 8001108:	228f      	movs	r2, #143	; 0x8f
 800110a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800110c:	2332      	movs	r3, #50	; 0x32
 800110e:	2201      	movs	r2, #1
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <I3G450D_Init+0x168>)
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <I3G450D_Init+0x16c>)
 8001114:	f005 fc49 	bl	80069aa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8001118:	2332      	movs	r3, #50	; 0x32
 800111a:	2201      	movs	r2, #1
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <I3G450D_Init+0x170>)
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <I3G450D_Init+0x16c>)
 8001120:	f005 fd7f 	bl	8006c22 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2102      	movs	r1, #2
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <I3G450D_Init+0x164>)
 800112a:	f002 f9a3 	bl	8003474 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020800 	.word	0x40020800
 8001138:	200001d8 	.word	0x200001d8
 800113c:	200002f0 	.word	0x200002f0
 8001140:	200001dd 	.word	0x200001dd

08001144 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 800114c:	4a40      	ldr	r2, [pc, #256]	; (8001250 <Lis3dhInit+0x10c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001152:	238f      	movs	r3, #143	; 0x8f
 8001154:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <Lis3dhInit+0x10c>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	2130      	movs	r1, #48	; 0x30
 800115c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001160:	2201      	movs	r2, #1
 8001162:	f004 fa2b 	bl	80055bc <HAL_I2C_IsDeviceReady>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <Lis3dhInit+0x10c>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	2130      	movs	r1, #48	; 0x30
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	f003 fefa 	bl	8004f74 <HAL_I2C_Master_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 800118a:	f000 f863 	bl	8001254 <errorHandler>





}
 800118e:	e05b      	b.n	8001248 <Lis3dhInit+0x104>
	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <Lis3dhInit+0x10c>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	2130      	movs	r1, #48	; 0x30
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	f003 ffe5 	bl	8005170 <HAL_I2C_Master_Receive>
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <Lis3dhInit+0x72>
	        	errorHandler();
 80011b0:	f000 f850 	bl	8001254 <errorHandler>
}
 80011b4:	e048      	b.n	8001248 <Lis3dhInit+0x104>
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <Lis3dhInit+0x10c>)
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	2130      	movs	r1, #48	; 0x30
 80011c0:	f107 0214 	add.w	r2, r7, #20
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f003 fed2 	bl	8004f74 <HAL_I2C_Master_Transmit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <Lis3dhInit+0x10c>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	2130      	movs	r1, #48	; 0x30
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	f003 ffc3 	bl	8005170 <HAL_I2C_Master_Receive>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
				sendBuff[0] = LIS3DH_REG_CTRL1;
 80011ee:	2320      	movs	r3, #32
 80011f0:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = 0x57;
 80011f2:	2357      	movs	r3, #87	; 0x57
 80011f4:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <Lis3dhInit+0x10c>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	2130      	movs	r1, #48	; 0x30
 80011fc:	f107 0214 	add.w	r2, r7, #20
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2302      	movs	r3, #2
 8001208:	f003 feb4 	bl	8004f74 <HAL_I2C_Master_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	75fb      	strb	r3, [r7, #23]
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <Lis3dhInit+0x10c>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	2130      	movs	r1, #48	; 0x30
 800121a:	f107 0214 	add.w	r2, r7, #20
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	f003 fea5 	bl	8004f74 <HAL_I2C_Master_Transmit>
 800122a:	4603      	mov	r3, r0
 800122c:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <Lis3dhInit+0x10c>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	2130      	movs	r1, #48	; 0x30
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	f003 ff96 	bl	8005170 <HAL_I2C_Master_Receive>
 8001244:	4603      	mov	r3, r0
 8001246:	75fb      	strb	r3, [r7, #23]
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001e4 	.word	0x200001e4

08001254 <errorHandler>:
	*acelY = y;
	*acelZ = z;

}
void errorHandler()
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	// handle the error
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126a:	f001 f9ff 	bl	800266c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f839 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fadd 	bl	8001830 <MX_GPIO_Init>
  MX_CRC_Init();
 8001276:	f000 f89f 	bl	80013b8 <MX_CRC_Init>
  MX_I2C3_Init();
 800127a:	f000 f8f1 	bl	8001460 <MX_I2C3_Init>
  MX_SPI5_Init();
 800127e:	f000 f965 	bl	800154c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001282:	f000 f999 	bl	80015b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001286:	f000 fa5f 	bl	8001748 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800128a:	f000 fab1 	bl	80017f0 <MX_DMA_Init>
  MX_TIM2_Init();
 800128e:	f000 f9e7 	bl	8001660 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001292:	f000 fa83 	bl	800179c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001296:	f000 f923 	bl	80014e0 <MX_SPI3_Init>
  MX_FATFS_Init();
 800129a:	f009 f979 	bl	800a590 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800129e:	f00c faeb 	bl	800d878 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80012a2:	f000 f89d 	bl	80013e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  RetargetInit(&huart1);
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <main+0x70>)
 80012a8:	f000 fcf0 	bl	8001c8c <RetargetInit>
  ConsoleInit(&huart1);
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <main+0x70>)
 80012ae:	f7ff fa5f 	bl	8000770 <ConsoleInit>
  //Lis3dhInit(&htim2);
  SessionControllerInit(&hi2c2,&htim2,&hspi5);
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <main+0x74>)
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <main+0x78>)
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <main+0x7c>)
 80012b8:	f7ff f97a 	bl	80005b0 <SessionControllerInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80012c0:	230b      	movs	r3, #11
 80012c2:	71bb      	strb	r3, [r7, #6]
  int usbWriteFlag = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	603b      	str	r3, [r7, #0]
uint8_t x,y,z;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012c8:	f00c fafc 	bl	800d8c4 <MX_USB_HOST_Process>
	 // 	  	 ++angle;
	  		//led_render();
	  		// Some delay*/


			ConsoleProcess();
 80012cc:	f7ff fa80 	bl	80007d0 <ConsoleProcess>
    MX_USB_HOST_Process();
 80012d0:	e7fa      	b.n	80012c8 <main+0x64>
 80012d2:	bf00      	nop
 80012d4:	20000438 	.word	0x20000438
 80012d8:	200002f0 	.word	0x200002f0
 80012dc:	20000390 	.word	0x20000390
 80012e0:	200001f0 	.word	0x200001f0

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00c fe4a 	bl	800df8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xd0>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800135c:	2348      	movs	r3, #72	; 0x48
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001364:	2303      	movs	r3, #3
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fdfb 	bl	8005f68 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001378:	f000 fc82 	bl	8001c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f005 f85d 	bl	8006458 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a4:	f000 fc6c 	bl	8001c80 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_CRC_Init+0x20>)
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <MX_CRC_Init+0x24>)
 80013c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_CRC_Init+0x20>)
 80013c4:	f001 faf9 	bl	80029ba <HAL_CRC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013ce:	f000 fc57 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001e8 	.word	0x200001e8
 80013dc:	40023000 	.word	0x40023000

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_I2C2_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_I2C2_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_I2C2_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <MX_I2C2_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_I2C2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_I2C2_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_I2C2_Init+0x74>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_I2C2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_I2C2_Init+0x74>)
 800141e:	f003 fc65 	bl	8004cec <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 fc2a 	bl	8001c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_I2C2_Init+0x74>)
 8001430:	f004 fd1f 	bl	8005e72 <HAL_I2CEx_ConfigAnalogFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800143a:	f000 fc21 	bl	8001c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C2_Init+0x74>)
 8001442:	f004 fd52 	bl	8005eea <HAL_I2CEx_ConfigDigitalFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 fc18 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001f0 	.word	0x200001f0
 8001458:	40005800 	.word	0x40005800
 800145c:	000186a0 	.word	0x000186a0

08001460 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <MX_I2C3_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_I2C3_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <MX_I2C3_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_I2C3_Init+0x74>)
 800147e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_I2C3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_I2C3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_I2C3_Init+0x74>)
 800149e:	f003 fc25 	bl	8004cec <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 fbea 	bl	8001c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <MX_I2C3_Init+0x74>)
 80014b0:	f004 fcdf 	bl	8005e72 <HAL_I2CEx_ConfigAnalogFilter>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014ba:	f000 fbe1 	bl	8001c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_I2C3_Init+0x74>)
 80014c2:	f004 fd12 	bl	8005eea <HAL_I2CEx_ConfigDigitalFilter>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014cc:	f000 fbd8 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000244 	.word	0x20000244
 80014d8:	40005c00 	.word	0x40005c00
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_SPI3_Init+0x64>)
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <MX_SPI3_Init+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_SPI3_Init+0x64>)
 80014ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_SPI3_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_SPI3_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_SPI3_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_SPI3_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_SPI3_Init+0x64>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_SPI3_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_SPI3_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_SPI3_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_SPI3_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_SPI3_Init+0x64>)
 800152c:	220a      	movs	r2, #10
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_SPI3_Init+0x64>)
 8001532:	f005 f9b1 	bl	8006898 <HAL_SPI_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800153c:	f000 fba0 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000298 	.word	0x20000298
 8001548:	40003c00 	.word	0x40003c00

0800154c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <MX_SPI5_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_SPI5_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001580:	2218      	movs	r2, #24
 8001582:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_SPI5_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_SPI5_Init+0x64>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_SPI5_Init+0x64>)
 800159e:	f005 f97b 	bl	8006898 <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 fb6a 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002f0 	.word	0x200002f0
 80015b4:	40015000 	.word	0x40015000

080015b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <MX_TIM1_Init+0xa4>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_TIM1_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001600:	4815      	ldr	r0, [pc, #84]	; (8001658 <MX_TIM1_Init+0xa0>)
 8001602:	f005 fef1 	bl	80073e8 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 fb38 	bl	8001c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4619      	mov	r1, r3
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_TIM1_Init+0xa0>)
 800161e:	f006 fa27 	bl	8007a70 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001628:	f000 fb2a 	bl	8001c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM1_Init+0xa0>)
 800163a:	f006 fe19 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 fb1c 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM1_Init+0xa0>)
 800164a:	f000 fe11 	bl	8002270 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000348 	.word	0x20000348
 800165c:	40010000 	.word	0x40010000

08001660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	; 0x38
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <MX_TIM2_Init+0xe4>)
 8001692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <MX_TIM2_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016a6:	223b      	movs	r2, #59	; 0x3b
 80016a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b6:	4823      	ldr	r0, [pc, #140]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016b8:	f005 fe96 	bl	80073e8 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016c2:	f000 fadd 	bl	8001c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d0:	4619      	mov	r1, r3
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016d4:	f006 f9cc 	bl	8007a70 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016de:	f000 facf 	bl	8001c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016e2:	4818      	ldr	r0, [pc, #96]	; (8001744 <MX_TIM2_Init+0xe4>)
 80016e4:	f005 fecf 	bl	8007486 <HAL_TIM_PWM_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ee:	f000 fac7 	bl	8001c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <MX_TIM2_Init+0xe4>)
 8001702:	f006 fdb5 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800170c:	f000 fab8 	bl	8001c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_TIM2_Init+0xe4>)
 8001728:	f006 f8e0 	bl	80078ec <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001732:	f000 faa5 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <MX_TIM2_Init+0xe4>)
 8001738:	f000 fe08 	bl	800234c <HAL_TIM_MspPostInit>

}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	; 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000390 	.word	0x20000390

08001748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_USART1_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART1_UART_Init+0x4c>)
 8001780:	f006 fe06 	bl	8008390 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f000 fa79 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000438 	.word	0x20000438
 8001798:	40011000 	.word	0x40011000

0800179c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART2_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f006 fddc 	bl	8008390 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f000 fa4f 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000047c 	.word	0x2000047c
 80017ec:	40004400 	.word	0x40004400

080017f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_DMA_Init+0x3c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <MX_DMA_Init+0x3c>)
 8001800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_DMA_Init+0x3c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2010      	movs	r0, #16
 8001818:	f001 f899 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800181c:	2010      	movs	r0, #16
 800181e:	f001 f8b2 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	4bb2      	ldr	r3, [pc, #712]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4ab1      	ldr	r2, [pc, #708]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4baf      	ldr	r3, [pc, #700]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	4bab      	ldr	r3, [pc, #684]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4aaa      	ldr	r2, [pc, #680]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4ba8      	ldr	r3, [pc, #672]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	4ba4      	ldr	r3, [pc, #656]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4aa3      	ldr	r2, [pc, #652]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4ba1      	ldr	r3, [pc, #644]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	4b9d      	ldr	r3, [pc, #628]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a9c      	ldr	r2, [pc, #624]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b9a      	ldr	r3, [pc, #616]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a95      	ldr	r2, [pc, #596]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b93      	ldr	r3, [pc, #588]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a8e      	ldr	r2, [pc, #568]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a87      	ldr	r2, [pc, #540]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b81      	ldr	r3, [pc, #516]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a80      	ldr	r2, [pc, #512]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b7e      	ldr	r3, [pc, #504]	; (8001b14 <MX_GPIO_Init+0x2e4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2116      	movs	r1, #22
 800192a:	487b      	ldr	r0, [pc, #492]	; (8001b18 <MX_GPIO_Init+0x2e8>)
 800192c:	f001 fda2 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	4879      	ldr	r0, [pc, #484]	; (8001b1c <MX_GPIO_Init+0x2ec>)
 8001936:	f001 fd9d 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f243 0104 	movw	r1, #12292	; 0x3004
 8001940:	4877      	ldr	r0, [pc, #476]	; (8001b20 <MX_GPIO_Init+0x2f0>)
 8001942:	f001 fd97 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800194c:	4875      	ldr	r0, [pc, #468]	; (8001b24 <MX_GPIO_Init+0x2f4>)
 800194e:	f001 fd91 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 8001952:	f64f 0338 	movw	r3, #63544	; 0xf838
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001964:	230c      	movs	r3, #12
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	486e      	ldr	r0, [pc, #440]	; (8001b28 <MX_GPIO_Init+0x2f8>)
 8001970:	f001 fbbc 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001986:	230e      	movs	r3, #14
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	4865      	ldr	r0, [pc, #404]	; (8001b28 <MX_GPIO_Init+0x2f8>)
 8001992:	f001 fbab 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001996:	2301      	movs	r3, #1
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a6:	230c      	movs	r3, #12
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4859      	ldr	r0, [pc, #356]	; (8001b18 <MX_GPIO_Init+0x2e8>)
 80019b2:	f001 fb9b 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80019b6:	2316      	movs	r3, #22
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4852      	ldr	r0, [pc, #328]	; (8001b18 <MX_GPIO_Init+0x2e8>)
 80019ce:	f001 fb8d 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80019d2:	2301      	movs	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	484d      	ldr	r0, [pc, #308]	; (8001b1c <MX_GPIO_Init+0x2ec>)
 80019e8:	f001 fb80 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80019ec:	2306      	movs	r3, #6
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4846      	ldr	r0, [pc, #280]	; (8001b1c <MX_GPIO_Init+0x2ec>)
 8001a02:	f001 fb73 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001a06:	f641 0358 	movw	r3, #6232	; 0x1858
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a18:	230e      	movs	r3, #14
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	483e      	ldr	r0, [pc, #248]	; (8001b1c <MX_GPIO_Init+0x2ec>)
 8001a24:	f001 fb62 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4837      	ldr	r0, [pc, #220]	; (8001b1c <MX_GPIO_Init+0x2ec>)
 8001a40:	f001 fb54 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001a44:	2320      	movs	r3, #32
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	482f      	ldr	r0, [pc, #188]	; (8001b18 <MX_GPIO_Init+0x2e8>)
 8001a5a:	f001 fb47 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a6e:	2309      	movs	r3, #9
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	482c      	ldr	r0, [pc, #176]	; (8001b2c <MX_GPIO_Init+0x2fc>)
 8001a7a:	f001 fb37 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin test_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|test_Pin;
 8001a7e:	2384      	movs	r3, #132	; 0x84
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4826      	ldr	r0, [pc, #152]	; (8001b2c <MX_GPIO_Init+0x2fc>)
 8001a92:	f001 fb2b 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a96:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481c      	ldr	r0, [pc, #112]	; (8001b24 <MX_GPIO_Init+0x2f4>)
 8001ab4:	f001 fb1a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001ab8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aca:	230c      	movs	r3, #12
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4816      	ldr	r0, [pc, #88]	; (8001b30 <MX_GPIO_Init+0x300>)
 8001ad6:	f001 fb09 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001ada:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aec:	230e      	movs	r3, #14
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_GPIO_Init+0x2fc>)
 8001af8:	f001 faf8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001afc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b0e:	230c      	movs	r3, #12
 8001b10:	e010      	b.n	8001b34 <MX_GPIO_Init+0x304>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40021000 	.word	0x40021000
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	484c      	ldr	r0, [pc, #304]	; (8001c70 <MX_GPIO_Init+0x440>)
 8001b3e:	f001 fad5 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PWM_DEBUG_Pin */
  GPIO_InitStruct.Pin = TE_Pin|PWM_DEBUG_Pin;
 8001b42:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4846      	ldr	r0, [pc, #280]	; (8001c70 <MX_GPIO_Init+0x440>)
 8001b58:	f001 fac8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 8001b5c:	f243 0304 	movw	r3, #12292	; 0x3004
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	483e      	ldr	r0, [pc, #248]	; (8001c70 <MX_GPIO_Init+0x440>)
 8001b76:	f001 fab9 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b7a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b8c:	230e      	movs	r3, #14
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	4837      	ldr	r0, [pc, #220]	; (8001c74 <MX_GPIO_Init+0x444>)
 8001b98:	f001 faa8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bac:	230e      	movs	r3, #14
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4830      	ldr	r0, [pc, #192]	; (8001c78 <MX_GPIO_Init+0x448>)
 8001bb8:	f001 fa98 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bcc:	230e      	movs	r3, #14
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4826      	ldr	r0, [pc, #152]	; (8001c70 <MX_GPIO_Init+0x440>)
 8001bd8:	f001 fa88 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4820      	ldr	r0, [pc, #128]	; (8001c74 <MX_GPIO_Init+0x444>)
 8001bf2:	f001 fa7b 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <MX_GPIO_Init+0x444>)
 8001c14:	f001 fa6a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001c18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4810      	ldr	r0, [pc, #64]	; (8001c74 <MX_GPIO_Init+0x444>)
 8001c32:	f001 fa5b 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c46:	230c      	movs	r3, #12
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <MX_GPIO_Init+0x44c>)
 8001c52:	f001 fa4b 	bl	80030ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2006      	movs	r0, #6
 8001c5c:	f000 fe77 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c60:	2006      	movs	r0, #6
 8001c62:	f000 fe90 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40020400 	.word	0x40020400

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
}
 8001c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <Error_Handler+0x8>
	...

08001c8c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <RetargetInit+0x28>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <RetargetInit+0x2c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	f00c fa81 	bl	800e1ac <setvbuf>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200004c0 	.word	0x200004c0
 8001cb8:	2000002c 	.word	0x2000002c

08001cbc <_isatty>:

int _isatty(int fd) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db04      	blt.n	8001cd4 <_isatty+0x18>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	dc01      	bgt.n	8001cd4 <_isatty+0x18>
    return 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e005      	b.n	8001ce0 <_isatty+0x24>

  errno = EBADF;
 8001cd4:	f00c f912 	bl	800defc <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2209      	movs	r2, #9
 8001cdc:	601a      	str	r2, [r3, #0]
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_write>:

int _write(int fd, char* ptr, int len) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <_write+0x18>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d111      	bne.n	8001d24 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <_write+0x54>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	f006 fb8c 	bl	800842a <HAL_UART_Transmit>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <_write+0x38>
      return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	e008      	b.n	8001d32 <_write+0x4a>
    else
      return EIO;
 8001d20:	2305      	movs	r3, #5
 8001d22:	e006      	b.n	8001d32 <_write+0x4a>
  }
  errno = EBADF;
 8001d24:	f00c f8ea 	bl	800defc <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2209      	movs	r2, #9
 8001d2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004c0 	.word	0x200004c0

08001d40 <_close>:

int _close(int fd) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db04      	blt.n	8001d58 <_close+0x18>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	dc01      	bgt.n	8001d58 <_close+0x18>
    return 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <_close+0x26>

  errno = EBADF;
 8001d58:	f00c f8d0 	bl	800defc <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2209      	movs	r2, #9
 8001d60:	601a      	str	r2, [r3, #0]
  return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d7a:	f00c f8bf 	bl	800defc <__errno>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2209      	movs	r2, #9
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d110      	bne.n	8001dc4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <_read+0x4c>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001daa:	2201      	movs	r2, #1
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	f006 fbce 	bl	800854e <HAL_UART_Receive>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <_read+0x30>
      return 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e008      	b.n	8001dd2 <_read+0x42>
    else
      return EIO;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	e006      	b.n	8001dd2 <_read+0x42>
  }
  errno = EBADF;
 8001dc4:	f00c f89a 	bl	800defc <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2209      	movs	r2, #9
 8001dcc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004c0 	.word	0x200004c0

08001de0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db08      	blt.n	8001e02 <_fstat+0x22>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	dc05      	bgt.n	8001e02 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfc:	605a      	str	r2, [r3, #4]
    return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e005      	b.n	8001e0e <_fstat+0x2e>
  }

  errno = EBADF;
 8001e02:	f00c f87b 	bl	800defc <__errno>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2209      	movs	r2, #9
 8001e0a:	601a      	str	r2, [r3, #0]
  return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d852      	bhi.n	8001ece <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e046      	b.n	8001ebc <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dd01      	ble.n	8001e50 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001e4c:	2126      	movs	r1, #38	; 0x26
 8001e4e:	e000      	b.n	8001e52 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001e50:	2113      	movs	r1, #19
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3318      	adds	r3, #24
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001e58:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a2c      	ldr	r2, [pc, #176]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dd01      	ble.n	8001e7e <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001e7a:	2126      	movs	r1, #38	; 0x26
 8001e7c:	e000      	b.n	8001e80 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001e7e:	2113      	movs	r1, #19
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3320      	adds	r3, #32
 8001e84:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001e86:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	3302      	adds	r3, #2
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dd01      	ble.n	8001eac <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001ea8:	2126      	movs	r1, #38	; 0x26
 8001eaa:	e000      	b.n	8001eae <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001eac:	2113      	movs	r1, #19
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3328      	adds	r3, #40	; 0x28
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001eb4:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d9b5      	bls.n	8001e2e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001eca:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8001ecc:	e01d      	b.n	8001f0a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b07      	cmp	r3, #7
 8001ed4:	d812      	bhi.n	8001efc <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001ed6:	2318      	movs	r3, #24
 8001ed8:	72fb      	strb	r3, [r7, #11]
 8001eda:	e006      	b.n	8001eea <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	54d1      	strb	r1, [r2, r3]
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	72fb      	strb	r3, [r7, #11]
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	2b2f      	cmp	r3, #47	; 0x2f
 8001eee:	d9f5      	bls.n	8001edc <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	e006      	b.n	8001f0a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001f02:	2100      	movs	r1, #0
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001f06:	f005 fb17 	bl	8007538 <HAL_TIM_PWM_Stop_DMA>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000508 	.word	0x20000508
 8001f18:	200004c4 	.word	0x200004c4
 8001f1c:	200004d8 	.word	0x200004d8
 8001f20:	20000390 	.word	0x20000390

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_MspInit+0x68>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_MspInit+0x68>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_MspInit+0x68>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_MspInit+0x68>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_MspInit+0x68>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_MspInit+0x68>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2005      	movs	r0, #5
 8001f68:	f000 fcf1 	bl	800294e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f6c:	2005      	movs	r0, #5
 8001f6e:	f000 fd0a 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2005      	movs	r0, #5
 8001f78:	f000 fce9 	bl	800294e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f7c:	2005      	movs	r0, #5
 8001f7e:	f000 fd02 	bl	8002986 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10d      	bne.n	8001fbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023000 	.word	0x40023000
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <HAL_I2C_MspInit+0x144>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d13a      	bne.n	800206c <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_I2C_MspInit+0x148>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b45      	ldr	r3, [pc, #276]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_I2C_MspInit+0x148>)
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800202e:	2303      	movs	r3, #3
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800203e:	2304      	movs	r3, #4
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	4619      	mov	r1, r3
 8002048:	4835      	ldr	r0, [pc, #212]	; (8002120 <HAL_I2C_MspInit+0x14c>)
 800204a:	f001 f84f 	bl	80030ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800206a:	e050      	b.n	800210e <HAL_I2C_MspInit+0x13a>
  else if(hi2c->Instance==I2C3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <HAL_I2C_MspInit+0x150>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d14b      	bne.n	800210e <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_I2C_MspInit+0x148>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_I2C_MspInit+0x148>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_I2C_MspInit+0x148>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80020ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b4:	2312      	movs	r3, #18
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020c0:	2304      	movs	r3, #4
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <HAL_I2C_MspInit+0x154>)
 80020cc:	f001 f80e 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d6:	2312      	movs	r3, #18
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020da:	2301      	movs	r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020e2:	2304      	movs	r3, #4
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <HAL_I2C_MspInit+0x158>)
 80020ee:	f000 fffd 	bl	80030ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_I2C_MspInit+0x148>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_I2C_MspInit+0x148>)
 80020fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_I2C_MspInit+0x148>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	bf00      	nop
 8002110:	3738      	adds	r7, #56	; 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40005800 	.word	0x40005800
 800211c:	40023800 	.word	0x40023800
 8002120:	40021400 	.word	0x40021400
 8002124:	40005c00 	.word	0x40005c00
 8002128:	40020800 	.word	0x40020800
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_SPI_MspInit+0x128>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d14c      	bne.n	80021ec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <HAL_SPI_MspInit+0x12c>)
 800215c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_SPI_MspInit+0x12c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b8:	2306      	movs	r3, #6
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <HAL_SPI_MspInit+0x130>)
 80021c4:	f000 ff92 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021da:	2306      	movs	r3, #6
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	481f      	ldr	r0, [pc, #124]	; (8002264 <HAL_SPI_MspInit+0x134>)
 80021e6:	f000 ff81 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80021ea:	e031      	b.n	8002250 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_SPI_MspInit+0x138>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12c      	bne.n	8002250 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_SPI_MspInit+0x12c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_SPI_MspInit+0x12c>)
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_SPI_MspInit+0x12c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800222e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002240:	2305      	movs	r3, #5
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	; (800226c <HAL_SPI_MspInit+0x13c>)
 800224c:	f000 ff4e 	bl	80030ec <HAL_GPIO_Init>
}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40003c00 	.word	0x40003c00
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020800 	.word	0x40020800
 8002268:	40015000 	.word	0x40015000
 800226c:	40021400 	.word	0x40021400

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2f      	ldr	r2, [pc, #188]	; (800233c <HAL_TIM_Base_MspInit+0xcc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800229e:	e049      	b.n	8002334 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d144      	bne.n	8002334 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_TIM_Base_MspInit+0xd0>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_TIM_Base_MspInit+0xd8>)
 80022ca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022ce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022d2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 80022fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002300:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 8002304:	2200      	movs	r2, #0
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002308:	480e      	ldr	r0, [pc, #56]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 800230a:	f000 fb73 	bl	80029f4 <HAL_DMA_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_TIM_Base_MspInit+0xa8>
      Error_Handler();
 8002314:	f7ff fcb4 	bl	8001c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_TIM_Base_MspInit+0xd4>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	201c      	movs	r0, #28
 800232a:	f000 fb10 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800232e:	201c      	movs	r0, #28
 8002330:	f000 fb29 	bl	8002986 <HAL_NVIC_EnableIRQ>
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	40023800 	.word	0x40023800
 8002344:	200003d8 	.word	0x200003d8
 8002348:	40026088 	.word	0x40026088

0800234c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d11d      	bne.n	80023aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_TIM_MspPostInit+0x68>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_TIM_MspPostInit+0x68>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_TIM_MspPostInit+0x68>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800238a:	2320      	movs	r3, #32
 800238c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 80023a6:	f000 fea1 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000

080023bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <HAL_UART_MspInit+0xf8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d135      	bne.n	800244a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 80023e8:	f043 0310 	orr.w	r3, r3, #16
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002416:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002428:	2307      	movs	r3, #7
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	4822      	ldr	r0, [pc, #136]	; (80024bc <HAL_UART_MspInit+0x100>)
 8002434:	f000 fe5a 	bl	80030ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2025      	movs	r0, #37	; 0x25
 800243e:	f000 fa86 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002442:	2025      	movs	r0, #37	; 0x25
 8002444:	f000 fa9f 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002448:	e030      	b.n	80024ac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_UART_MspInit+0x104>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d12b      	bne.n	80024ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800245e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800248c:	2360      	movs	r3, #96	; 0x60
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800249c:	2307      	movs	r3, #7
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	4807      	ldr	r0, [pc, #28]	; (80024c4 <HAL_UART_MspInit+0x108>)
 80024a8:	f000 fe20 	bl	80030ec <HAL_GPIO_Init>
}
 80024ac:	bf00      	nop
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <NMI_Handler+0x4>

080024ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler+0x4>

080024da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002514:	f000 f8fc 	bl	8002710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 ffba 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <DMA1_Stream5_IRQHandler+0x10>)
 800253e:	f000 fb99 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200003d8 	.word	0x200003d8

0800254c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM2_IRQHandler+0x10>)
 8002552:	f005 f8c3 	bl	80076dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000390 	.word	0x20000390

08002560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <USART1_IRQHandler+0x10>)
 8002566:	f006 f8c5 	bl	80086f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000438 	.word	0x20000438

08002574 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <OTG_HS_IRQHandler+0x10>)
 800257a:	f001 fa17 	bl	80039ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000904 	.word	0x20000904

08002588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <_sbrk+0x5c>)
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <_sbrk+0x60>)
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <_sbrk+0x64>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <_sbrk+0x68>)
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d207      	bcs.n	80025c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b8:	f00b fca0 	bl	800defc <__errno>
 80025bc:	4603      	mov	r3, r0
 80025be:	220c      	movs	r2, #12
 80025c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c6:	e009      	b.n	80025dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <_sbrk+0x64>)
 80025d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20030000 	.word	0x20030000
 80025e8:	00000400 	.word	0x00000400
 80025ec:	2000050c 	.word	0x2000050c
 80025f0:	20000c18 	.word	0x20000c18

080025f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <SystemInit+0x20>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <SystemInit+0x20>)
 8002600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002650 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800261e:	490e      	ldr	r1, [pc, #56]	; (8002658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002634:	4c0b      	ldr	r4, [pc, #44]	; (8002664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002642:	f7ff ffd7 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002646:	f00b fc5f 	bl	800df08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264a:	f7fe fe0b 	bl	8001264 <main>
  bx  lr    
 800264e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002650:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002658:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800265c:	0800f5e8 	.word	0x0800f5e8
  ldr r2, =_sbss
 8002660:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002664:	20000c18 	.word	0x20000c18

08002668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC_IRQHandler>
	...

0800266c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_Init+0x40>)
 8002676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_Init+0x40>)
 8002682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_Init+0x40>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f000 f94f 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f808 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a0:	f7ff fc40 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f967 	bl	80029a2 <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ec:	f000 f92f 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000000 	.word	0x20000000
 8002708:	20000008 	.word	0x20000008
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000008 	.word	0x20000008
 8002734:	20000510 	.word	0x20000510

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000510 	.word	0x20000510

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff ffee 	bl	8002738 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffde 	bl	8002738 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff3e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff8e 	bl	800288c <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff31 	bl	80027fc <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00e      	b.n	80029ea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	795b      	ldrb	r3, [r3, #5]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fad7 	bl	8001f90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fe9a 	bl	8002738 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e099      	b.n	8002b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	e00f      	b.n	8002a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff fe81 	bl	8002738 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d908      	bls.n	8002a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e078      	b.n	8002b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e8      	bne.n	8002a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_DMA_Init+0x158>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d117      	bne.n	8002b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa7b 	bl	8002ff4 <DMA_CheckFifoParam>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b12:	2301      	movs	r3, #1
 8002b14:	e016      	b.n	8002b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa32 	bl	8002f88 <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	223f      	movs	r2, #63	; 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f010803f 	.word	0xf010803f

08002b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b5e:	f7ff fdeb 	bl	8002738 <HAL_GetTick>
 8002b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d008      	beq.n	8002b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e052      	b.n	8002c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0216 	bic.w	r2, r2, #22
 8002b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <HAL_DMA_Abort+0x62>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0208 	bic.w	r2, r2, #8
 8002bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd2:	e013      	b.n	8002bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd4:	f7ff fdb0 	bl	8002738 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d90c      	bls.n	8002bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e015      	b.n	8002c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e4      	bne.n	8002bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	223f      	movs	r2, #63	; 0x3f
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00c      	b.n	8002c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2205      	movs	r2, #5
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c80:	4b8e      	ldr	r3, [pc, #568]	; (8002ebc <HAL_DMA_IRQHandler+0x248>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a8e      	ldr	r2, [pc, #568]	; (8002ec0 <HAL_DMA_IRQHandler+0x24c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0204 	bic.w	r2, r2, #4
 8002cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2208      	movs	r2, #8
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2210      	movs	r2, #16
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d043      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2210      	movs	r2, #16
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	e01f      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0208 	bic.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2220      	movs	r2, #32
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 808f 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8087 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d136      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0216 	bic.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x1da>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0208 	bic.w	r2, r2, #8
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	223f      	movs	r2, #63	; 0x3f
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d07e      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
        }
        return;
 8002e8a:	e079      	b.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d031      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e02c      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e01e      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10f      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0210 	bic.w	r2, r2, #16
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d032      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d307      	bcc.n	8002f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f2      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x2cc>
 8002f5a:	e000      	b.n	8002f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f80:	bf00      	nop
    }
  }
}
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3b10      	subs	r3, #16
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <DMA_CalcBaseAndBitshift+0x64>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d909      	bls.n	8002fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	1d1a      	adds	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc8:	e007      	b.n	8002fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	aaaaaaab 	.word	0xaaaaaaab
 8002ff0:	0800f420 	.word	0x0800f420

08002ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11f      	bne.n	800304e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d856      	bhi.n	80030c2 <DMA_CheckFifoParam+0xce>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <DMA_CheckFifoParam+0x28>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	0800302d 	.word	0x0800302d
 8003020:	0800303f 	.word	0x0800303f
 8003024:	0800302d 	.word	0x0800302d
 8003028:	080030c3 	.word	0x080030c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d046      	beq.n	80030c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800303c:	e043      	b.n	80030c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003046:	d140      	bne.n	80030ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304c:	e03d      	b.n	80030ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	d121      	bne.n	800309c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d837      	bhi.n	80030ce <DMA_CheckFifoParam+0xda>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x70>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003075 	.word	0x08003075
 8003068:	0800307b 	.word	0x0800307b
 800306c:	08003075 	.word	0x08003075
 8003070:	0800308d 	.word	0x0800308d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e030      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d025      	beq.n	80030d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308a:	e022      	b.n	80030d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003094:	d11f      	bne.n	80030d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800309a:	e01c      	b.n	80030d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d903      	bls.n	80030aa <DMA_CheckFifoParam+0xb6>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d003      	beq.n	80030b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a8:	e018      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      break;
 80030ae:	e015      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e00b      	b.n	80030da <DMA_CheckFifoParam+0xe6>
      break;
 80030c2:	bf00      	nop
 80030c4:	e00a      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e008      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e006      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e004      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;   
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <DMA_CheckFifoParam+0xe8>
      break;
 80030da:	bf00      	nop
    }
  } 
  
  return status; 
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e177      	b.n	80033f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8166 	bne.w	80033f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80c0 	beq.w	80033f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_GPIO_Init+0x324>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_GPIO_Init+0x324>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_GPIO_Init+0x324>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328e:	4a61      	ldr	r2, [pc, #388]	; (8003414 <HAL_GPIO_Init+0x328>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_GPIO_Init+0x32c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d037      	beq.n	800332a <HAL_GPIO_Init+0x23e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_GPIO_Init+0x330>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_GPIO_Init+0x23a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_GPIO_Init+0x334>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02b      	beq.n	8003322 <HAL_GPIO_Init+0x236>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a55      	ldr	r2, [pc, #340]	; (8003424 <HAL_GPIO_Init+0x338>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x232>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a54      	ldr	r2, [pc, #336]	; (8003428 <HAL_GPIO_Init+0x33c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x22e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a53      	ldr	r2, [pc, #332]	; (800342c <HAL_GPIO_Init+0x340>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x22a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_GPIO_Init+0x344>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x226>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x348>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x222>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a50      	ldr	r2, [pc, #320]	; (8003438 <HAL_GPIO_Init+0x34c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x21e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_GPIO_Init+0x350>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x21a>
 8003302:	2309      	movs	r3, #9
 8003304:	e012      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003306:	230a      	movs	r3, #10
 8003308:	e010      	b.n	800332c <HAL_GPIO_Init+0x240>
 800330a:	2308      	movs	r3, #8
 800330c:	e00e      	b.n	800332c <HAL_GPIO_Init+0x240>
 800330e:	2307      	movs	r3, #7
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003312:	2306      	movs	r3, #6
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x240>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x240>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x240>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	; (8003414 <HAL_GPIO_Init+0x328>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_GPIO_Init+0x354>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336e:	4a34      	ldr	r2, [pc, #208]	; (8003440 <HAL_GPIO_Init+0x354>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_GPIO_Init+0x354>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_GPIO_Init+0x354>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c2:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f ae84 	bls.w	8003108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40022000 	.word	0x40022000
 800343c:	40022400 	.word	0x40022400
 8003440:	40013c00 	.word	0x40013c00

08003444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	e001      	b.n	8003466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f88c 	bl	80005e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b08f      	sub	sp, #60	; 0x3c
 80034dc:	af0a      	add	r7, sp, #40	; 0x28
 80034de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e054      	b.n	8003594 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f00a fa15 	bl	800d934 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f006 f8bd 	bl	80096a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	687e      	ldr	r6, [r7, #4]
 8003536:	466d      	mov	r5, sp
 8003538:	f106 0410 	add.w	r4, r6, #16
 800353c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003548:	e885 0003 	stmia.w	r5, {r0, r1}
 800354c:	1d33      	adds	r3, r6, #4
 800354e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f006 f837 	bl	80095c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f006 f8b4 	bl	80096ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	687e      	ldr	r6, [r7, #4]
 800356a:	466d      	mov	r5, sp
 800356c:	f106 0410 	add.w	r4, r6, #16
 8003570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800357c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003580:	1d33      	adds	r3, r6, #4
 8003582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f006 fa3d 	bl	8009a04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800359c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	70fb      	strb	r3, [r7, #3]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70bb      	strb	r3, [r7, #2]
 80035b2:	4613      	mov	r3, r2
 80035b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_HCD_HC_Init+0x28>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e076      	b.n	80036b2 <HAL_HCD_HC_Init+0x116>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	333d      	adds	r3, #61	; 0x3d
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3338      	adds	r3, #56	; 0x38
 80035ec:	787a      	ldrb	r2, [r7, #1]
 80035ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3340      	adds	r3, #64	; 0x40
 80035fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003600:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3339      	adds	r3, #57	; 0x39
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	333f      	adds	r3, #63	; 0x3f
 8003622:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	78ba      	ldrb	r2, [r7, #2]
 800362c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003630:	b2d0      	uxtb	r0, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	333a      	adds	r3, #58	; 0x3a
 800363e:	4602      	mov	r2, r0
 8003640:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da09      	bge.n	800365e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	333b      	adds	r3, #59	; 0x3b
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e008      	b.n	8003670 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	333b      	adds	r3, #59	; 0x3b
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	333c      	adds	r3, #60	; 0x3c
 800367e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003682:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	787c      	ldrb	r4, [r7, #1]
 800368a:	78ba      	ldrb	r2, [r7, #2]
 800368c:	78f9      	ldrb	r1, [r7, #3]
 800368e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4623      	mov	r3, r4
 80036a0:	f006 fb36 	bl	8009d10 <USB_HC_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}

080036ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_HCD_HC_Halt+0x1e>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e00f      	b.n	80036f8 <HAL_HCD_HC_Halt+0x3e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fd86 	bl	800a1fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	461a      	mov	r2, r3
 800370e:	4603      	mov	r3, r0
 8003710:	70fb      	strb	r3, [r7, #3]
 8003712:	460b      	mov	r3, r1
 8003714:	70bb      	strb	r3, [r7, #2]
 8003716:	4613      	mov	r3, r2
 8003718:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333b      	adds	r3, #59	; 0x3b
 8003728:	78ba      	ldrb	r2, [r7, #2]
 800372a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	333f      	adds	r3, #63	; 0x3f
 800373a:	787a      	ldrb	r2, [r7, #1]
 800373c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800373e:	7c3b      	ldrb	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d112      	bne.n	800376a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3342      	adds	r3, #66	; 0x42
 8003752:	2203      	movs	r2, #3
 8003754:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	333d      	adds	r3, #61	; 0x3d
 8003764:	7f3a      	ldrb	r2, [r7, #28]
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e008      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3342      	adds	r3, #66	; 0x42
 8003778:	2202      	movs	r2, #2
 800377a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b03      	cmp	r3, #3
 8003780:	f200 80c6 	bhi.w	8003910 <HAL_HCD_HC_SubmitRequest+0x210>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080038fd 	.word	0x080038fd
 8003794:	08003801 	.word	0x08003801
 8003798:	0800387f 	.word	0x0800387f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800379c:	7c3b      	ldrb	r3, [r7, #16]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 80b8 	bne.w	8003914 <HAL_HCD_HC_SubmitRequest+0x214>
 80037a4:	78bb      	ldrb	r3, [r7, #2]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80b4 	bne.w	8003914 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80037ac:	8b3b      	ldrh	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3355      	adds	r3, #85	; 0x55
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3355      	adds	r3, #85	; 0x55
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3342      	adds	r3, #66	; 0x42
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80037ea:	e093      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3342      	adds	r3, #66	; 0x42
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
      break;
 80037fe:	e089      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003800:	78bb      	ldrb	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11d      	bne.n	8003842 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3355      	adds	r3, #85	; 0x55
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3342      	adds	r3, #66	; 0x42
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800382c:	e073      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3342      	adds	r3, #66	; 0x42
 800383c:	2202      	movs	r2, #2
 800383e:	701a      	strb	r2, [r3, #0]
      break;
 8003840:	e069      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3354      	adds	r3, #84	; 0x54
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3342      	adds	r3, #66	; 0x42
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
      break;
 8003868:	e055      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3342      	adds	r3, #66	; 0x42
 8003878:	2202      	movs	r2, #2
 800387a:	701a      	strb	r2, [r3, #0]
      break;
 800387c:	e04b      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800387e:	78bb      	ldrb	r3, [r7, #2]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11d      	bne.n	80038c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3355      	adds	r3, #85	; 0x55
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3342      	adds	r3, #66	; 0x42
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038aa:	e034      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3342      	adds	r3, #66	; 0x42
 80038ba:	2202      	movs	r2, #2
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e02a      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3354      	adds	r3, #84	; 0x54
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3342      	adds	r3, #66	; 0x42
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
      break;
 80038e6:	e016      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3342      	adds	r3, #66	; 0x42
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
      break;
 80038fa:	e00c      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3342      	adds	r3, #66	; 0x42
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e002      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003914:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3344      	adds	r3, #68	; 0x44
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	8b3a      	ldrh	r2, [r7, #24]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	202c      	movs	r0, #44	; 0x2c
 8003930:	fb00 f303 	mul.w	r3, r0, r3
 8003934:	440b      	add	r3, r1
 8003936:	334c      	adds	r3, #76	; 0x4c
 8003938:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	3360      	adds	r3, #96	; 0x60
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3350      	adds	r3, #80	; 0x50
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3339      	adds	r3, #57	; 0x39
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3361      	adds	r3, #97	; 0x61
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	222c      	movs	r2, #44	; 0x2c
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	3338      	adds	r3, #56	; 0x38
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	18d1      	adds	r1, r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	f006 fada 	bl	8009f54 <USB_HC_StartXfer>
 80039a0:	4603      	mov	r3, r0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f005 ffdb 	bl	800997e <USB_GetMode>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	f040 80f6 	bne.w	8003bbc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f005 ffbf 	bl	8009958 <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ec 	beq.w	8003bba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f005 ffb6 	bl	8009958 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f6:	d104      	bne.n	8003a02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f005 ffa6 	bl	8009958 <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a16:	d104      	bne.n	8003a22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 ff96 	bl	8009958 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a36:	d104      	bne.n	8003a42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f005 ff86 	bl	8009958 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d103      	bne.n	8003a5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f005 ff78 	bl	8009958 <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a72:	d11c      	bne.n	8003aae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a8e:	2110      	movs	r1, #16
 8003a90:	6938      	ldr	r0, [r7, #16]
 8003a92:	f005 fe67 	bl	8009764 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a96:	6938      	ldr	r0, [r7, #16]
 8003a98:	f005 fe98 	bl	80097cc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f006 f86e 	bl	8009b84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f009 ffbd 	bl	800da28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f005 ff50 	bl	8009958 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003abe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac2:	d102      	bne.n	8003aca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f001 f89e 	bl	8004c06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f005 ff42 	bl	8009958 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d106      	bne.n	8003aec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f009 ff86 	bl	800d9f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f005 ff31 	bl	8009958 <USB_ReadInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d101      	bne.n	8003b04 <HAL_HCD_IRQHandler+0x158>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_HCD_IRQHandler+0x15a>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0210 	bic.w	r2, r2, #16
 8003b18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 ffa1 	bl	8004a62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0210 	orr.w	r2, r2, #16
 8003b2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f005 ff0f 	bl	8009958 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b44:	d13a      	bne.n	8003bbc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f006 fb44 	bl	800a1d8 <USB_HC_ReadInterrupt>
 8003b50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e025      	b.n	8003ba4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d106      	bne.n	8003b92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8ab 	bl	8003ce6 <HCD_HC_IN_IRQHandler>
 8003b90:	e005      	b.n	8003b9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fbf9 	bl	8004390 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3d4      	bcc.n	8003b58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb6:	615a      	str	r2, [r3, #20]
 8003bb8:	e000      	b.n	8003bbc <HAL_HCD_IRQHandler+0x210>
      return;
 8003bba:	bf00      	nop
    }
  }
}
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_HCD_Start+0x16>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e013      	b.n	8003c00 <HAL_HCD_Start+0x3e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2101      	movs	r1, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f006 f830 	bl	8009c4c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f005 fd48 	bl	8009686 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_HCD_Stop+0x16>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e00d      	b.n	8003c3a <HAL_HCD_Stop+0x32>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 fc1e 	bl	800a46c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 ffd2 	bl	8009bf8 <USB_ResetPort>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3360      	adds	r3, #96	; 0x60
 8003c78:	781b      	ldrb	r3, [r3, #0]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3350      	adds	r3, #80	; 0x50
 8003ca0:	681b      	ldr	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 f816 	bl	8009cec <USB_GetCurrentFrame>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 fff1 	bl	8009cbe <USB_GetHostSpeed>
 8003cdc:	4603      	mov	r3, r0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d11a      	bne.n	8003d4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2304      	movs	r3, #4
 8003d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3361      	adds	r3, #97	; 0x61
 8003d36:	2206      	movs	r2, #6
 8003d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f006 fa58 	bl	800a1fa <USB_HC_Halt>
 8003d4a:	e0af      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d11b      	bne.n	8003d9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3361      	adds	r3, #97	; 0x61
 8003d86:	2207      	movs	r2, #7
 8003d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f006 fa30 	bl	800a1fa <USB_HC_Halt>
 8003d9a:	e087      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d109      	bne.n	8003dc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	e072      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d11a      	bne.n	8003e12 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	461a      	mov	r2, r3
 8003dea:	2308      	movs	r3, #8
 8003dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3361      	adds	r3, #97	; 0x61
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f006 f9f5 	bl	800a1fa <USB_HC_Halt>
 8003e10:	e04c      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d11b      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3361      	adds	r3, #97	; 0x61
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f006 f9cd 	bl	800a1fa <USB_HC_Halt>
 8003e60:	e024      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d119      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3361      	adds	r3, #97	; 0x61
 8003e98:	2206      	movs	r2, #6
 8003e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f006 f9a7 	bl	800a1fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec2:	d112      	bne.n	8003eea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 f993 	bl	800a1fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ee8:	e24e      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80df 	bne.w	80040c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d019      	beq.n	8003f3e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	3348      	adds	r3, #72	; 0x48
 8003f18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0159      	lsls	r1, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	440b      	add	r3, r1
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003f2c:	1ad2      	subs	r2, r2, r3
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	202c      	movs	r0, #44	; 0x2c
 8003f34:	fb00 f303 	mul.w	r3, r0, r3
 8003f38:	440b      	add	r3, r1
 8003f3a:	3350      	adds	r3, #80	; 0x50
 8003f3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	3361      	adds	r3, #97	; 0x61
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	335c      	adds	r3, #92	; 0x5c
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2301      	movs	r3, #1
 8003f72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	333f      	adds	r3, #63	; 0x3f
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	333f      	adds	r3, #63	; 0x3f
 8003f96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d111      	bne.n	8003fc0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f006 f927 	bl	800a1fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2310      	movs	r3, #16
 8003fbc:	6093      	str	r3, [r2, #8]
 8003fbe:	e03a      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	333f      	adds	r3, #63	; 0x3f
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d009      	beq.n	8003fe8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	333f      	adds	r3, #63	; 0x3f
 8003fe2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d126      	bne.n	8004036 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004006:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	212c      	movs	r1, #44	; 0x2c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	3360      	adds	r3, #96	; 0x60
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	b2d9      	uxtb	r1, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	202c      	movs	r0, #44	; 0x2c
 8004024:	fb00 f303 	mul.w	r3, r0, r3
 8004028:	4413      	add	r3, r2
 800402a:	3360      	adds	r3, #96	; 0x60
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f009 fd07 	bl	800da44 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d12b      	bne.n	8004096 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3348      	adds	r3, #72	; 0x48
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	202c      	movs	r0, #44	; 0x2c
 8004054:	fb00 f202 	mul.w	r2, r0, r2
 8004058:	440a      	add	r2, r1
 800405a:	3240      	adds	r2, #64	; 0x40
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 818e 	beq.w	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3354      	adds	r3, #84	; 0x54
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2d8      	uxtb	r0, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3354      	adds	r3, #84	; 0x54
 8004090:	4602      	mov	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
}
 8004094:	e178      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3354      	adds	r3, #84	; 0x54
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2d8      	uxtb	r0, r3
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	3354      	adds	r3, #84	; 0x54
 80040ba:	4602      	mov	r2, r0
 80040bc:	701a      	strb	r2, [r3, #0]
}
 80040be:	e163      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	f040 80f6 	bne.w	80042c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3361      	adds	r3, #97	; 0x61
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d109      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3360      	adds	r3, #96	; 0x60
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e0c9      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3361      	adds	r3, #97	; 0x61
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d109      	bne.n	8004128 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	2205      	movs	r2, #5
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e0b5      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3361      	adds	r3, #97	; 0x61
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d009      	beq.n	8004150 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3361      	adds	r3, #97	; 0x61
 800414a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800414c:	2b08      	cmp	r3, #8
 800414e:	d150      	bne.n	80041f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	335c      	adds	r3, #92	; 0x5c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	202c      	movs	r0, #44	; 0x2c
 8004168:	fb00 f303 	mul.w	r3, r0, r3
 800416c:	440b      	add	r3, r1
 800416e:	335c      	adds	r3, #92	; 0x5c
 8004170:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	335c      	adds	r3, #92	; 0x5c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d912      	bls.n	80041ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	335c      	adds	r3, #92	; 0x5c
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	2204      	movs	r2, #4
 80041a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041aa:	e073      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3360      	adds	r3, #96	; 0x60
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041f0:	e050      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3361      	adds	r3, #97	; 0x61
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d122      	bne.n	800424c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	212c      	movs	r1, #44	; 0x2c
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	4413      	add	r3, r2
 8004212:	3360      	adds	r3, #96	; 0x60
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800422e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004236:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e023      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3361      	adds	r3, #97	; 0x61
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b07      	cmp	r3, #7
 800425e:	d119      	bne.n	8004294 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	335c      	adds	r3, #92	; 0x5c
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	202c      	movs	r0, #44	; 0x2c
 8004278:	fb00 f303 	mul.w	r3, r0, r3
 800427c:	440b      	add	r3, r1
 800427e:	335c      	adds	r3, #92	; 0x5c
 8004280:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3360      	adds	r3, #96	; 0x60
 8004290:	2204      	movs	r2, #4
 8004292:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	461a      	mov	r2, r3
 80042a2:	2302      	movs	r3, #2
 80042a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	b2d9      	uxtb	r1, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	202c      	movs	r0, #44	; 0x2c
 80042b0:	fb00 f303 	mul.w	r3, r0, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3360      	adds	r3, #96	; 0x60
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f009 fbc1 	bl	800da44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042c2:	e061      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d156      	bne.n	8004388 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	333f      	adds	r3, #63	; 0x3f
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d111      	bne.n	8004312 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	335c      	adds	r3, #92	; 0x5c
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f005 ff75 	bl	800a1fa <USB_HC_Halt>
 8004310:	e031      	b.n	8004376 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	333f      	adds	r3, #63	; 0x3f
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	212c      	movs	r1, #44	; 0x2c
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	4413      	add	r3, r2
 8004332:	333f      	adds	r3, #63	; 0x3f
 8004334:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004336:	2b02      	cmp	r3, #2
 8004338:	d11d      	bne.n	8004376 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	335c      	adds	r3, #92	; 0x5c
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3361      	adds	r3, #97	; 0x61
 8004362:	2203      	movs	r2, #3
 8004364:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f005 ff42 	bl	800a1fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	461a      	mov	r2, r3
 8004384:	2310      	movs	r3, #16
 8004386:	6093      	str	r3, [r2, #8]
}
 8004388:	bf00      	nop
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d11a      	bne.n	80043f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	461a      	mov	r2, r3
 80043ce:	2304      	movs	r3, #4
 80043d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	3361      	adds	r3, #97	; 0x61
 80043e0:	2206      	movs	r2, #6
 80043e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f005 ff03 	bl	800a1fa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80043f4:	e331      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b20      	cmp	r3, #32
 800440a:	d12e      	bne.n	800446a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	2320      	movs	r3, #32
 800441c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	333d      	adds	r3, #61	; 0x3d
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	f040 8313 	bne.w	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	333d      	adds	r3, #61	; 0x3d
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3360      	adds	r3, #96	; 0x60
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f005 fec9 	bl	800a1fa <USB_HC_Halt>
}
 8004468:	e2f7      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	d112      	bne.n	80044a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004494:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f005 feaa 	bl	800a1fa <USB_HC_Halt>
}
 80044a6:	e2d8      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d140      	bne.n	8004540 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	335c      	adds	r3, #92	; 0x5c
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d111      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	333d      	adds	r3, #61	; 0x3d
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	2340      	movs	r3, #64	; 0x40
 8004508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	461a      	mov	r2, r3
 8004518:	2301      	movs	r3, #1
 800451a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	3361      	adds	r3, #97	; 0x61
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f005 fe5e 	bl	800a1fa <USB_HC_Halt>
}
 800453e:	e28c      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d12c      	bne.n	80045b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	3361      	adds	r3, #97	; 0x61
 8004564:	2204      	movs	r2, #4
 8004566:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	333d      	adds	r3, #61	; 0x3d
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	335c      	adds	r3, #92	; 0x5c
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f005 fe2f 	bl	800a1fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	461a      	mov	r2, r3
 80045aa:	2340      	movs	r3, #64	; 0x40
 80045ac:	6093      	str	r3, [r2, #8]
}
 80045ae:	e254      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11a      	bne.n	80045fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d2:	461a      	mov	r2, r3
 80045d4:	2308      	movs	r3, #8
 80045d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3361      	adds	r3, #97	; 0x61
 80045e6:	2205      	movs	r2, #5
 80045e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f005 fe00 	bl	800a1fa <USB_HC_Halt>
}
 80045fa:	e22e      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b10      	cmp	r3, #16
 8004610:	d140      	bne.n	8004694 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	335c      	adds	r3, #92	; 0x5c
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3361      	adds	r3, #97	; 0x61
 8004632:	2203      	movs	r2, #3
 8004634:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	333d      	adds	r3, #61	; 0x3d
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d112      	bne.n	8004670 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	333c      	adds	r3, #60	; 0x3c
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	333d      	adds	r3, #61	; 0x3d
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f005 fdbd 	bl	800a1fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	461a      	mov	r2, r3
 800468e:	2310      	movs	r3, #16
 8004690:	6093      	str	r3, [r2, #8]
}
 8004692:	e1e2      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d164      	bne.n	8004774 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d111      	bne.n	80046d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	3361      	adds	r3, #97	; 0x61
 80046c0:	2206      	movs	r2, #6
 80046c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f005 fd93 	bl	800a1fa <USB_HC_Halt>
 80046d4:	e044      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	335c      	adds	r3, #92	; 0x5c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	202c      	movs	r0, #44	; 0x2c
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	440b      	add	r3, r1
 80046f4:	335c      	adds	r3, #92	; 0x5c
 80046f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	335c      	adds	r3, #92	; 0x5c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d920      	bls.n	800474e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	335c      	adds	r3, #92	; 0x5c
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	212c      	movs	r1, #44	; 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	3360      	adds	r3, #96	; 0x60
 800472c:	2204      	movs	r2, #4
 800472e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	b2d9      	uxtb	r1, r3
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	202c      	movs	r0, #44	; 0x2c
 800473a:	fb00 f303 	mul.w	r3, r0, r3
 800473e:	4413      	add	r3, r2
 8004740:	3360      	adds	r3, #96	; 0x60
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f009 f97c 	bl	800da44 <HAL_HCD_HC_NotifyURBChange_Callback>
 800474c:	e008      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3360      	adds	r3, #96	; 0x60
 800475c:	2202      	movs	r2, #2
 800475e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	461a      	mov	r2, r3
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	6093      	str	r3, [r2, #8]
}
 8004772:	e172      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	d11b      	bne.n	80047c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3361      	adds	r3, #97	; 0x61
 800479a:	2208      	movs	r2, #8
 800479c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f005 fd26 	bl	800a1fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	461a      	mov	r2, r3
 80047bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c0:	6093      	str	r3, [r2, #8]
}
 80047c2:	e14a      	b.n	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	f040 813f 	bne.w	8004a5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3361      	adds	r3, #97	; 0x61
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d17d      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3360      	adds	r3, #96	; 0x60
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	212c      	movs	r1, #44	; 0x2c
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	333f      	adds	r3, #63	; 0x3f
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d00a      	beq.n	800482c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	333f      	adds	r3, #63	; 0x3f
 8004824:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	f040 8100 	bne.w	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d113      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3355      	adds	r3, #85	; 0x55
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f083 0301 	eor.w	r3, r3, #1
 8004848:	b2d8      	uxtb	r0, r3
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3355      	adds	r3, #85	; 0x55
 8004858:	4602      	mov	r2, r0
 800485a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 80e3 	bne.w	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	334c      	adds	r3, #76	; 0x4c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80d8 	beq.w	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	334c      	adds	r3, #76	; 0x4c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	202c      	movs	r0, #44	; 0x2c
 8004892:	fb00 f202 	mul.w	r2, r0, r2
 8004896:	440a      	add	r2, r1
 8004898:	3240      	adds	r2, #64	; 0x40
 800489a:	8812      	ldrh	r2, [r2, #0]
 800489c:	4413      	add	r3, r2
 800489e:	3b01      	subs	r3, #1
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	202c      	movs	r0, #44	; 0x2c
 80048a6:	fb00 f202 	mul.w	r2, r0, r2
 80048aa:	440a      	add	r2, r1
 80048ac:	3240      	adds	r2, #64	; 0x40
 80048ae:	8812      	ldrh	r2, [r2, #0]
 80048b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80b5 	beq.w	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3355      	adds	r3, #85	; 0x55
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f083 0301 	eor.w	r3, r3, #1
 80048d6:	b2d8      	uxtb	r0, r3
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3355      	adds	r3, #85	; 0x55
 80048e6:	4602      	mov	r2, r0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e09f      	b.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	3361      	adds	r3, #97	; 0x61
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d109      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3360      	adds	r3, #96	; 0x60
 800490e:	2202      	movs	r2, #2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e08b      	b.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3361      	adds	r3, #97	; 0x61
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d109      	bne.n	800493c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3360      	adds	r3, #96	; 0x60
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e077      	b.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3361      	adds	r3, #97	; 0x61
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d109      	bne.n	8004964 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	3360      	adds	r3, #96	; 0x60
 800495e:	2205      	movs	r2, #5
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e063      	b.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3361      	adds	r3, #97	; 0x61
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b06      	cmp	r3, #6
 8004976:	d009      	beq.n	800498c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3361      	adds	r3, #97	; 0x61
 8004986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004988:	2b08      	cmp	r3, #8
 800498a:	d14f      	bne.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	335c      	adds	r3, #92	; 0x5c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	202c      	movs	r0, #44	; 0x2c
 80049a4:	fb00 f303 	mul.w	r3, r0, r3
 80049a8:	440b      	add	r3, r1
 80049aa:	335c      	adds	r3, #92	; 0x5c
 80049ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	212c      	movs	r1, #44	; 0x2c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	335c      	adds	r3, #92	; 0x5c
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d912      	bls.n	80049e8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	335c      	adds	r3, #92	; 0x5c
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3360      	adds	r3, #96	; 0x60
 80049e2:	2204      	movs	r2, #4
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e021      	b.n	8004a2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3360      	adds	r3, #96	; 0x60
 80049f6:	2202      	movs	r2, #2
 80049f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	461a      	mov	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	b2d9      	uxtb	r1, r3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	202c      	movs	r0, #44	; 0x2c
 8004a48:	fb00 f303 	mul.w	r3, r0, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3360      	adds	r3, #96	; 0x60
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f008 fff5 	bl	800da44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	0c5b      	lsrs	r3, r3, #17
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d004      	beq.n	8004aa8 <HCD_RXQLVL_IRQHandler+0x46>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b05      	cmp	r3, #5
 8004aa2:	f000 80a9 	beq.w	8004bf8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004aa6:	e0aa      	b.n	8004bfe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80a6 	beq.w	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3344      	adds	r3, #68	; 0x44
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 809b 	beq.w	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3350      	adds	r3, #80	; 0x50
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	441a      	add	r2, r3
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	202c      	movs	r0, #44	; 0x2c
 8004ae0:	fb00 f303 	mul.w	r3, r0, r3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	334c      	adds	r3, #76	; 0x4c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d87a      	bhi.n	8004be4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3344      	adds	r3, #68	; 0x44
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	b292      	uxth	r2, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f004 fece 	bl	80098a8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3344      	adds	r3, #68	; 0x44
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	441a      	add	r2, r3
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	202c      	movs	r0, #44	; 0x2c
 8004b26:	fb00 f303 	mul.w	r3, r0, r3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3344      	adds	r3, #68	; 0x44
 8004b2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3350      	adds	r3, #80	; 0x50
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	441a      	add	r2, r3
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	202c      	movs	r0, #44	; 0x2c
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	440b      	add	r3, r1
 8004b50:	3350      	adds	r3, #80	; 0x50
 8004b52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	0cdb      	lsrs	r3, r3, #19
 8004b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3340      	adds	r3, #64	; 0x40
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d13c      	bne.n	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d039      	beq.n	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3354      	adds	r3, #84	; 0x54
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f083 0301 	eor.w	r3, r3, #1
 8004bce:	b2d8      	uxtb	r0, r3
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3354      	adds	r3, #84	; 0x54
 8004bde:	4602      	mov	r2, r0
 8004be0:	701a      	strb	r2, [r3, #0]
      break;
 8004be2:	e00b      	b.n	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	212c      	movs	r1, #44	; 0x2c
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	3360      	adds	r3, #96	; 0x60
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
      break;
 8004bf6:	e001      	b.n	8004bfc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004bfc:	bf00      	nop
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d10b      	bne.n	8004c56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d102      	bne.n	8004c4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f008 fedf 	bl	800da0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d132      	bne.n	8004cc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f043 0308 	orr.w	r3, r3, #8
 8004c66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d126      	bne.n	8004cc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d113      	bne.n	8004ca2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c84:	d106      	bne.n	8004c94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f004 ff79 	bl	8009b84 <USB_InitFSLSPClkSel>
 8004c92:	e011      	b.n	8004cb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 ff72 	bl	8009b84 <USB_InitFSLSPClkSel>
 8004ca0:	e00a      	b.n	8004cb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d106      	bne.n	8004cb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004cb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f008 fed1 	bl	800da60 <HAL_HCD_PortEnabled_Callback>
 8004cbe:	e002      	b.n	8004cc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f008 fedb 	bl	800da7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d103      	bne.n	8004cd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e12b      	b.n	8004f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd f95e 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d50:	f001 fd7a 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8004d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a81      	ldr	r2, [pc, #516]	; (8004f60 <HAL_I2C_Init+0x274>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d807      	bhi.n	8004d70 <HAL_I2C_Init+0x84>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a80      	ldr	r2, [pc, #512]	; (8004f64 <HAL_I2C_Init+0x278>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	bf94      	ite	ls
 8004d68:	2301      	movls	r3, #1
 8004d6a:	2300      	movhi	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e006      	b.n	8004d7e <HAL_I2C_Init+0x92>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a7d      	ldr	r2, [pc, #500]	; (8004f68 <HAL_I2C_Init+0x27c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0e7      	b.n	8004f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a78      	ldr	r2, [pc, #480]	; (8004f6c <HAL_I2C_Init+0x280>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	0c9b      	lsrs	r3, r3, #18
 8004d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a6a      	ldr	r2, [pc, #424]	; (8004f60 <HAL_I2C_Init+0x274>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d802      	bhi.n	8004dc0 <HAL_I2C_Init+0xd4>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	e009      	b.n	8004dd4 <HAL_I2C_Init+0xe8>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	4a69      	ldr	r2, [pc, #420]	; (8004f70 <HAL_I2C_Init+0x284>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	495c      	ldr	r1, [pc, #368]	; (8004f60 <HAL_I2C_Init+0x274>)
 8004df0:	428b      	cmp	r3, r1
 8004df2:	d819      	bhi.n	8004e28 <HAL_I2C_Init+0x13c>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1e59      	subs	r1, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e08:	400b      	ands	r3, r1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_I2C_Init+0x138>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1e59      	subs	r1, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e22:	e051      	b.n	8004ec8 <HAL_I2C_Init+0x1dc>
 8004e24:	2304      	movs	r3, #4
 8004e26:	e04f      	b.n	8004ec8 <HAL_I2C_Init+0x1dc>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d111      	bne.n	8004e54 <HAL_I2C_Init+0x168>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e58      	subs	r0, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	440b      	add	r3, r1
 8004e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	e012      	b.n	8004e7a <HAL_I2C_Init+0x18e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1e58      	subs	r0, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6859      	ldr	r1, [r3, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	0099      	lsls	r1, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Init+0x196>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e022      	b.n	8004ec8 <HAL_I2C_Init+0x1dc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10e      	bne.n	8004ea8 <HAL_I2C_Init+0x1bc>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1e58      	subs	r0, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	440b      	add	r3, r1
 8004e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea6:	e00f      	b.n	8004ec8 <HAL_I2C_Init+0x1dc>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1e58      	subs	r0, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	0099      	lsls	r1, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	6809      	ldr	r1, [r1, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6911      	ldr	r1, [r2, #16]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68d2      	ldr	r2, [r2, #12]
 8004f02:	4311      	orrs	r1, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	000186a0 	.word	0x000186a0
 8004f64:	001e847f 	.word	0x001e847f
 8004f68:	003d08ff 	.word	0x003d08ff
 8004f6c:	431bde83 	.word	0x431bde83
 8004f70:	10624dd3 	.word	0x10624dd3

08004f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	460b      	mov	r3, r1
 8004f82:	817b      	strh	r3, [r7, #10]
 8004f84:	4613      	mov	r3, r2
 8004f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f88:	f7fd fbd6 	bl	8002738 <HAL_GetTick>
 8004f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	f040 80e0 	bne.w	800515c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2319      	movs	r3, #25
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4970      	ldr	r1, [pc, #448]	; (8005168 <HAL_I2C_Master_Transmit+0x1f4>)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fd86 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e0d3      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_I2C_Master_Transmit+0x50>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e0cc      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d007      	beq.n	8004fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	; 0x21
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2210      	movs	r2, #16
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	893a      	ldrh	r2, [r7, #8]
 800501a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a50      	ldr	r2, [pc, #320]	; (800516c <HAL_I2C_Master_Transmit+0x1f8>)
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800502c:	8979      	ldrh	r1, [r7, #10]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fbf0 	bl	8005818 <I2C_MasterRequestWrite>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e08d      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005058:	e066      	b.n	8005128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fe00 	bl	8005c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06b      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d11b      	bne.n	80050fc <HAL_I2C_Master_Transmit+0x188>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d017      	beq.n	80050fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	6a39      	ldr	r1, [r7, #32]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fdf0 	bl	8005ce6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	2b04      	cmp	r3, #4
 8005112:	d107      	bne.n	8005124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01a      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d194      	bne.n	800505a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	00100002 	.word	0x00100002
 800516c:	ffff0000 	.word	0xffff0000

08005170 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	; 0x30
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	460b      	mov	r3, r1
 800517e:	817b      	strh	r3, [r7, #10]
 8005180:	4613      	mov	r3, r2
 8005182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005184:	f7fd fad8 	bl	8002738 <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	f040 820b 	bne.w	80055ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2319      	movs	r3, #25
 800519e:	2201      	movs	r2, #1
 80051a0:	497c      	ldr	r1, [pc, #496]	; (8005394 <HAL_I2C_Master_Receive+0x224>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fc88 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	e1fe      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2C_Master_Receive+0x50>
 80051bc:	2302      	movs	r3, #2
 80051be:	e1f7      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d007      	beq.n	80051e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2222      	movs	r2, #34	; 0x22
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2210      	movs	r2, #16
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	893a      	ldrh	r2, [r7, #8]
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a5c      	ldr	r2, [pc, #368]	; (8005398 <HAL_I2C_Master_Receive+0x228>)
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005228:	8979      	ldrh	r1, [r7, #10]
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fb74 	bl	800591c <I2C_MasterRequestRead>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e1b8      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d113      	bne.n	800526e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e18c      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	2b01      	cmp	r3, #1
 8005274:	d11b      	bne.n	80052ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e16c      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d11b      	bne.n	80052ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	e14c      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005314:	e138      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	2b03      	cmp	r3, #3
 800531c:	f200 80f1 	bhi.w	8005502 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005324:	2b01      	cmp	r3, #1
 8005326:	d123      	bne.n	8005370 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fd1b 	bl	8005d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e139      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800536e:	e10b      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	2b02      	cmp	r3, #2
 8005376:	d14e      	bne.n	8005416 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2200      	movs	r2, #0
 8005380:	4906      	ldr	r1, [pc, #24]	; (800539c <HAL_I2C_Master_Receive+0x22c>)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fb98 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e10e      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
 8005392:	bf00      	nop
 8005394:	00100002 	.word	0x00100002
 8005398:	ffff0000 	.word	0xffff0000
 800539c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005414:	e0b8      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	4966      	ldr	r1, [pc, #408]	; (80055b8 <HAL_I2C_Master_Receive+0x448>)
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fb49 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0bf      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2200      	movs	r2, #0
 800547a:	494f      	ldr	r1, [pc, #316]	; (80055b8 <HAL_I2C_Master_Receive+0x448>)
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fb1b 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e091      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005500:	e042      	b.n	8005588 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fc2e 	bl	8005d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e04c      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d118      	bne.n	8005588 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	f47f aec2 	bne.w	8005316 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3728      	adds	r7, #40	; 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	00010004 	.word	0x00010004

080055bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	460b      	mov	r3, r1
 80055ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7fd f8b4 	bl	8002738 <HAL_GetTick>
 80055d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b20      	cmp	r3, #32
 80055e0:	f040 8111 	bne.w	8005806 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2319      	movs	r3, #25
 80055ea:	2201      	movs	r2, #1
 80055ec:	4988      	ldr	r1, [pc, #544]	; (8005810 <HAL_I2C_IsDeviceReady+0x254>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa62 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
 80055fc:	e104      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_I2C_IsDeviceReady+0x50>
 8005608:	2302      	movs	r3, #2
 800560a:	e0fd      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d007      	beq.n	8005632 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2224      	movs	r2, #36	; 0x24
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_I2C_IsDeviceReady+0x258>)
 8005654:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fa20 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568c:	d103      	bne.n	8005696 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e0b6      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800569a:	897b      	ldrh	r3, [r7, #10]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056aa:	f7fd f845 	bl	8002738 <HAL_GetTick>
 80056ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056de:	e025      	b.n	800572c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056e0:	f7fd f82a 	bl	8002738 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <HAL_I2C_IsDeviceReady+0x13a>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	22a0      	movs	r2, #160	; 0xa0
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2ba0      	cmp	r3, #160	; 0xa0
 8005736:	d005      	beq.n	8005744 <HAL_I2C_IsDeviceReady+0x188>
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <HAL_I2C_IsDeviceReady+0x188>
 800573e:	7dbb      	ldrb	r3, [r7, #22]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0cd      	beq.n	80056e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b02      	cmp	r3, #2
 8005758:	d129      	bne.n	80057ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005768:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2319      	movs	r3, #25
 8005786:	2201      	movs	r2, #1
 8005788:	4921      	ldr	r1, [pc, #132]	; (8005810 <HAL_I2C_IsDeviceReady+0x254>)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f994 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e036      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e02c      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	2319      	movs	r3, #25
 80057ce:	2201      	movs	r2, #1
 80057d0:	490f      	ldr	r1, [pc, #60]	; (8005810 <HAL_I2C_IsDeviceReady+0x254>)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f970 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e012      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	f4ff af32 	bcc.w	8005656 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	00100002 	.word	0x00100002
 8005814:	ffff0000 	.word	0xffff0000

08005818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	460b      	mov	r3, r1
 8005826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d006      	beq.n	8005842 <I2C_MasterRequestWrite+0x2a>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d003      	beq.n	8005842 <I2C_MasterRequestWrite+0x2a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e00b      	b.n	800586c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b12      	cmp	r3, #18
 800585a:	d107      	bne.n	800586c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f91d 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d103      	bne.n	800589c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e035      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e01b      	b.n	80058f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030f 	orn	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	490e      	ldr	r1, [pc, #56]	; (8005914 <I2C_MasterRequestWrite+0xfc>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f943 	bl	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e010      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4907      	ldr	r1, [pc, #28]	; (8005918 <I2C_MasterRequestWrite+0x100>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f933 	bl	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	00010008 	.word	0x00010008
 8005918:	00010002 	.word	0x00010002

0800591c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	460b      	mov	r3, r1
 800592a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005940:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d006      	beq.n	8005956 <I2C_MasterRequestRead+0x3a>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d003      	beq.n	8005956 <I2C_MasterRequestRead+0x3a>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005954:	d108      	bne.n	8005968 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e00b      	b.n	8005980 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	2b11      	cmp	r3, #17
 800596e:	d107      	bne.n	8005980 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f893 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d103      	bne.n	80059b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e079      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059bc:	d108      	bne.n	80059d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e05f      	b.n	8005a90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	11db      	asrs	r3, r3, #7
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 0306 	and.w	r3, r3, #6
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f063 030f 	orn	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4930      	ldr	r1, [pc, #192]	; (8005ab0 <I2C_MasterRequestRead+0x194>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f8b9 	bl	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e054      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059fe:	897b      	ldrh	r3, [r7, #10]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4929      	ldr	r1, [pc, #164]	; (8005ab4 <I2C_MasterRequestRead+0x198>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f8a9 	bl	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e044      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f831 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6a:	d103      	bne.n	8005a74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e017      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	11db      	asrs	r3, r3, #7
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0306 	and.w	r3, r3, #6
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f063 030e 	orn	r3, r3, #14
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4907      	ldr	r1, [pc, #28]	; (8005ab4 <I2C_MasterRequestRead+0x198>)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f865 	bl	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	00010008 	.word	0x00010008
 8005ab4:	00010002 	.word	0x00010002

08005ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac8:	e025      	b.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad0:	d021      	beq.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fc fe31 	bl	8002738 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d116      	bne.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e023      	b.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d10d      	bne.n	8005b3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	43da      	mvns	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	e00c      	b.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d0b6      	beq.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b74:	e051      	b.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b84:	d123      	bne.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0204 	orr.w	r2, r3, #4
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e046      	b.n	8005c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd4:	d021      	beq.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fc fdaf 	bl	8002738 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d116      	bne.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 0220 	orr.w	r2, r3, #32
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e020      	b.n	8005c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d10c      	bne.n	8005c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	43da      	mvns	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e00b      	b.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	43da      	mvns	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d18d      	bne.n	8005b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c70:	e02d      	b.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f8ce 	bl	8005e14 <I2C_IsAcknowledgeFailed>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e02d      	b.n	8005cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c88:	d021      	beq.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8a:	f7fc fd55 	bl	8002738 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d116      	bne.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e007      	b.n	8005cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d1ca      	bne.n	8005c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cf2:	e02d      	b.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f88d 	bl	8005e14 <I2C_IsAcknowledgeFailed>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02d      	b.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d0a:	d021      	beq.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0c:	f7fc fd14 	bl	8002738 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d302      	bcc.n	8005d22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d116      	bne.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e007      	b.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d1ca      	bne.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d74:	e042      	b.n	8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d119      	bne.n	8005db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0210 	mvn.w	r2, #16
 8005d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e029      	b.n	8005e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db8:	f7fc fcbe 	bl	8002738 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d116      	bne.n	8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e007      	b.n	8005e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d1b5      	bne.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d11b      	bne.n	8005e64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f043 0204 	orr.w	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d129      	bne.n	8005edc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2224      	movs	r2, #36	; 0x24
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0210 	bic.w	r2, r2, #16
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d12a      	bne.n	8005f5a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	; 0x24
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	f023 030f 	bic.w	r3, r3, #15
 8005f2a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	89fb      	ldrh	r3, [r7, #14]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	89fa      	ldrh	r2, [r7, #14]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e000      	b.n	8005f5c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e267      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d075      	beq.n	8006072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f86:	4b88      	ldr	r3, [pc, #544]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d00c      	beq.n	8005fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f92:	4b85      	ldr	r3, [pc, #532]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d112      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9e:	4b82      	ldr	r3, [pc, #520]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	4b7e      	ldr	r3, [pc, #504]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05b      	beq.n	8006070 <HAL_RCC_OscConfig+0x108>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d157      	bne.n	8006070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e242      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCC_OscConfig+0x74>
 8005fce:	4b76      	ldr	r3, [pc, #472]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a75      	ldr	r2, [pc, #468]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e01d      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0x98>
 8005fe6:	4b70      	ldr	r3, [pc, #448]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6f      	ldr	r2, [pc, #444]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b6d      	ldr	r3, [pc, #436]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6c      	ldr	r2, [pc, #432]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8006000:	4b69      	ldr	r3, [pc, #420]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a68      	ldr	r2, [pc, #416]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b66      	ldr	r3, [pc, #408]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a65      	ldr	r2, [pc, #404]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fc fb8a 	bl	8002738 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc fb86 	bl	8002738 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e207      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b5b      	ldr	r3, [pc, #364]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0xc0>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fc fb76 	bl	8002738 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006050:	f7fc fb72 	bl	8002738 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e1f3      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	4b51      	ldr	r3, [pc, #324]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0xe8>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d063      	beq.n	8006146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800607e:	4b4a      	ldr	r3, [pc, #296]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608a:	4b47      	ldr	r3, [pc, #284]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006092:	2b08      	cmp	r3, #8
 8006094:	d11c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006096:	4b44      	ldr	r3, [pc, #272]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d116      	bne.n	80060d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	4b41      	ldr	r3, [pc, #260]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_RCC_OscConfig+0x152>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e1c7      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	4937      	ldr	r1, [pc, #220]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ce:	e03a      	b.n	8006146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d8:	4b34      	ldr	r3, [pc, #208]	; (80061ac <HAL_RCC_OscConfig+0x244>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060de:	f7fc fb2b 	bl	8002738 <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060e6:	f7fc fb27 	bl	8002738 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e1a8      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f8:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4925      	ldr	r1, [pc, #148]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]
 8006118:	e015      	b.n	8006146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_RCC_OscConfig+0x244>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc fb0a 	bl	8002738 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006128:	f7fc fb06 	bl	8002738 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e187      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d036      	beq.n	80061c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <HAL_RCC_OscConfig+0x248>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006160:	f7fc faea 	bl	8002738 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006168:	f7fc fae6 	bl	8002738 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e167      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_OscConfig+0x240>)
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x200>
 8006186:	e01b      	b.n	80061c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006188:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_OscConfig+0x248>)
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800618e:	f7fc fad3 	bl	8002738 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006194:	e00e      	b.n	80061b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006196:	f7fc facf 	bl	8002738 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d907      	bls.n	80061b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e150      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470000 	.word	0x42470000
 80061b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b4:	4b88      	ldr	r3, [pc, #544]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ea      	bne.n	8006196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8097 	beq.w	80062fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d2:	4b81      	ldr	r3, [pc, #516]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061de:	2300      	movs	r3, #0
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	4b7d      	ldr	r3, [pc, #500]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	4a7c      	ldr	r2, [pc, #496]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6413      	str	r3, [r2, #64]	; 0x40
 80061ee:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fe:	4b77      	ldr	r3, [pc, #476]	; (80063dc <HAL_RCC_OscConfig+0x474>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d118      	bne.n	800623c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620a:	4b74      	ldr	r3, [pc, #464]	; (80063dc <HAL_RCC_OscConfig+0x474>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a73      	ldr	r2, [pc, #460]	; (80063dc <HAL_RCC_OscConfig+0x474>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006216:	f7fc fa8f 	bl	8002738 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621e:	f7fc fa8b 	bl	8002738 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e10c      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_OscConfig+0x474>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d106      	bne.n	8006252 <HAL_RCC_OscConfig+0x2ea>
 8006244:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6713      	str	r3, [r2, #112]	; 0x70
 8006250:	e01c      	b.n	800628c <HAL_RCC_OscConfig+0x324>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x30c>
 800625a:	4b5f      	ldr	r3, [pc, #380]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a5e      	ldr	r2, [pc, #376]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006260:	f043 0304 	orr.w	r3, r3, #4
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a5b      	ldr	r2, [pc, #364]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0x324>
 8006274:	4b58      	ldr	r3, [pc, #352]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a57      	ldr	r2, [pc, #348]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a54      	ldr	r2, [pc, #336]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006286:	f023 0304 	bic.w	r3, r3, #4
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006294:	f7fc fa50 	bl	8002738 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629a:	e00a      	b.n	80062b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629c:	f7fc fa4c 	bl	8002738 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e0cb      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	4b49      	ldr	r3, [pc, #292]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0ee      	beq.n	800629c <HAL_RCC_OscConfig+0x334>
 80062be:	e014      	b.n	80062ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c0:	f7fc fa3a 	bl	8002738 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c6:	e00a      	b.n	80062de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fc fa36 	bl	8002738 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0b5      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062de:	4b3e      	ldr	r3, [pc, #248]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ee      	bne.n	80062c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f0:	4b39      	ldr	r3, [pc, #228]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a1 	beq.w	8006448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006306:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b08      	cmp	r3, #8
 8006310:	d05c      	beq.n	80063cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d141      	bne.n	800639e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_RCC_OscConfig+0x478>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fc fa0a 	bl	8002738 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006328:	f7fc fa06 	bl	8002738 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e087      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633a:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	3b01      	subs	r3, #1
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	491b      	ldr	r1, [pc, #108]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006370:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x478>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006376:	f7fc f9df 	bl	8002738 <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800637e:	f7fc f9db 	bl	8002738 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e05c      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x416>
 800639c:	e054      	b.n	8006448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <HAL_RCC_OscConfig+0x478>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a4:	f7fc f9c8 	bl	8002738 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc f9c4 	bl	8002738 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e045      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <HAL_RCC_OscConfig+0x470>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x444>
 80063ca:	e03d      	b.n	8006448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e038      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40007000 	.word	0x40007000
 80063e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063e4:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <HAL_RCC_OscConfig+0x4ec>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d028      	beq.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d121      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d11a      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006414:	4013      	ands	r3, r2
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800641a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800641c:	4293      	cmp	r3, r2
 800641e:	d111      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	3b01      	subs	r3, #1
 800642e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d107      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40023800 	.word	0x40023800

08006458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0cc      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800646c:	4b68      	ldr	r3, [pc, #416]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d90c      	bls.n	8006494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4b65      	ldr	r3, [pc, #404]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b63      	ldr	r3, [pc, #396]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0b8      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ac:	4b59      	ldr	r3, [pc, #356]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a58      	ldr	r2, [pc, #352]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064c4:	4b53      	ldr	r3, [pc, #332]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a52      	ldr	r2, [pc, #328]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d0:	4b50      	ldr	r3, [pc, #320]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	494d      	ldr	r1, [pc, #308]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d044      	beq.n	8006578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	4b47      	ldr	r3, [pc, #284]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d003      	beq.n	8006516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006512:	2b03      	cmp	r3, #3
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006516:	4b3f      	ldr	r3, [pc, #252]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e06f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006526:	4b3b      	ldr	r3, [pc, #236]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e067      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 0203 	bic.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4934      	ldr	r1, [pc, #208]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006548:	f7fc f8f6 	bl	8002738 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	e00a      	b.n	8006566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006550:	f7fc f8f2 	bl	8002738 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e04f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 020c 	and.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	429a      	cmp	r2, r3
 8006576:	d1eb      	bne.n	8006550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d20c      	bcs.n	80065a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b22      	ldr	r3, [pc, #136]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e032      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4916      	ldr	r1, [pc, #88]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	490e      	ldr	r1, [pc, #56]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065de:	f000 f821 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	490a      	ldr	r1, [pc, #40]	; (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 80065f0:	5ccb      	ldrb	r3, [r1, r3]
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_ClockConfig+0x1c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc f856 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40023c00 	.word	0x40023c00
 8006614:	40023800 	.word	0x40023800
 8006618:	0800f408 	.word	0x0800f408
 800661c:	20000000 	.word	0x20000000
 8006620:	20000004 	.word	0x20000004

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006628:	b094      	sub	sp, #80	; 0x50
 800662a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	2300      	movs	r3, #0
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	2300      	movs	r3, #0
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800663c:	4b79      	ldr	r3, [pc, #484]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 030c 	and.w	r3, r3, #12
 8006644:	2b08      	cmp	r3, #8
 8006646:	d00d      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x40>
 8006648:	2b08      	cmp	r3, #8
 800664a:	f200 80e1 	bhi.w	8006810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x34>
 8006652:	2b04      	cmp	r3, #4
 8006654:	d003      	beq.n	800665e <HAL_RCC_GetSysClockFreq+0x3a>
 8006656:	e0db      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006658:	4b73      	ldr	r3, [pc, #460]	; (8006828 <HAL_RCC_GetSysClockFreq+0x204>)
 800665a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800665c:	e0db      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800665e:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_GetSysClockFreq+0x208>)
 8006660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006662:	e0d8      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006664:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800666e:	4b6d      	ldr	r3, [pc, #436]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d063      	beq.n	8006742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800667a:	4b6a      	ldr	r3, [pc, #424]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	2200      	movs	r2, #0
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
 8006684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	0159      	lsls	r1, r3, #5
 80066a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a8:	0150      	lsls	r0, r2, #5
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4621      	mov	r1, r4
 80066b0:	1a51      	subs	r1, r2, r1
 80066b2:	6139      	str	r1, [r7, #16]
 80066b4:	4629      	mov	r1, r5
 80066b6:	eb63 0301 	sbc.w	r3, r3, r1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066c8:	4659      	mov	r1, fp
 80066ca:	018b      	lsls	r3, r1, #6
 80066cc:	4651      	mov	r1, sl
 80066ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066d2:	4651      	mov	r1, sl
 80066d4:	018a      	lsls	r2, r1, #6
 80066d6:	4651      	mov	r1, sl
 80066d8:	ebb2 0801 	subs.w	r8, r2, r1
 80066dc:	4659      	mov	r1, fp
 80066de:	eb63 0901 	sbc.w	r9, r3, r1
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066f6:	4690      	mov	r8, r2
 80066f8:	4699      	mov	r9, r3
 80066fa:	4623      	mov	r3, r4
 80066fc:	eb18 0303 	adds.w	r3, r8, r3
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	462b      	mov	r3, r5
 8006704:	eb49 0303 	adc.w	r3, r9, r3
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006716:	4629      	mov	r1, r5
 8006718:	024b      	lsls	r3, r1, #9
 800671a:	4621      	mov	r1, r4
 800671c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006720:	4621      	mov	r1, r4
 8006722:	024a      	lsls	r2, r1, #9
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800672a:	2200      	movs	r2, #0
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
 800672e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006734:	f7f9 fdac 	bl	8000290 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4613      	mov	r3, r2
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006740:	e058      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006742:	4b38      	ldr	r3, [pc, #224]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	2200      	movs	r2, #0
 800674a:	4618      	mov	r0, r3
 800674c:	4611      	mov	r1, r2
 800674e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
 8006758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	f04f 0000 	mov.w	r0, #0
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	0159      	lsls	r1, r3, #5
 800676a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800676e:	0150      	lsls	r0, r2, #5
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4641      	mov	r1, r8
 8006776:	ebb2 0a01 	subs.w	sl, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800678c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006794:	ebb2 040a 	subs.w	r4, r2, sl
 8006798:	eb63 050b 	sbc.w	r5, r3, fp
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	00eb      	lsls	r3, r5, #3
 80067a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067aa:	00e2      	lsls	r2, r4, #3
 80067ac:	4614      	mov	r4, r2
 80067ae:	461d      	mov	r5, r3
 80067b0:	4643      	mov	r3, r8
 80067b2:	18e3      	adds	r3, r4, r3
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	464b      	mov	r3, r9
 80067b8:	eb45 0303 	adc.w	r3, r5, r3
 80067bc:	607b      	str	r3, [r7, #4]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ca:	4629      	mov	r1, r5
 80067cc:	028b      	lsls	r3, r1, #10
 80067ce:	4621      	mov	r1, r4
 80067d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067d4:	4621      	mov	r1, r4
 80067d6:	028a      	lsls	r2, r1, #10
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067de:	2200      	movs	r2, #0
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e8:	f7f9 fd52 	bl	8000290 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4613      	mov	r3, r2
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800680e:	e002      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_RCC_GetSysClockFreq+0x204>)
 8006812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006818:	4618      	mov	r0, r3
 800681a:	3750      	adds	r7, #80	; 0x50
 800681c:	46bd      	mov	sp, r7
 800681e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800
 8006828:	00f42400 	.word	0x00f42400
 800682c:	007a1200 	.word	0x007a1200

08006830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <HAL_RCC_GetHCLKFreq+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000000 	.word	0x20000000

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800684c:	f7ff fff0 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	0a9b      	lsrs	r3, r3, #10
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4903      	ldr	r1, [pc, #12]	; (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40023800 	.word	0x40023800
 800686c:	0800f418 	.word	0x0800f418

08006870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006874:	f7ff ffdc 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006878:	4602      	mov	r2, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4903      	ldr	r1, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006886:	5ccb      	ldrb	r3, [r1, r3]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40023800 	.word	0x40023800
 8006894:	0800f418 	.word	0x0800f418

08006898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e07b      	b.n	80069a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ba:	d009      	beq.n	80068d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	61da      	str	r2, [r3, #28]
 80068c2:	e005      	b.n	80068d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb fc20 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006906:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006954:	ea42 0103 	orr.w	r1, r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 0104 	and.w	r1, r3, #4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	f003 0210 	and.w	r2, r3, #16
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006990:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b088      	sub	sp, #32
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_SPI_Transmit+0x22>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e126      	b.n	8006c1a <HAL_SPI_Transmit+0x270>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d4:	f7fb feb0 	bl	8002738 <HAL_GetTick>
 80069d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d002      	beq.n	80069f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069ee:	e10b      	b.n	8006c08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Transmit+0x52>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a00:	e102      	b.n	8006c08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2203      	movs	r2, #3
 8006a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a48:	d10f      	bne.n	8006a6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d007      	beq.n	8006a88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a90:	d14b      	bne.n	8006b2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_SPI_Transmit+0xf6>
 8006a9a:	8afb      	ldrh	r3, [r7, #22]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d13e      	bne.n	8006b1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ac4:	e02b      	b.n	8006b1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d112      	bne.n	8006afa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	1c9a      	adds	r2, r3, #2
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006af8:	e011      	b.n	8006b1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afa:	f7fb fe1d 	bl	8002738 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d803      	bhi.n	8006b12 <HAL_SPI_Transmit+0x168>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b10:	d102      	bne.n	8006b18 <HAL_SPI_Transmit+0x16e>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b1c:	e074      	b.n	8006c08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1ce      	bne.n	8006ac6 <HAL_SPI_Transmit+0x11c>
 8006b28:	e04c      	b.n	8006bc4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_SPI_Transmit+0x18e>
 8006b32:	8afb      	ldrh	r3, [r7, #22]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d140      	bne.n	8006bba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b5e:	e02c      	b.n	8006bba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d113      	bne.n	8006b96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	7812      	ldrb	r2, [r2, #0]
 8006b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b94:	e011      	b.n	8006bba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b96:	f7fb fdcf 	bl	8002738 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d803      	bhi.n	8006bae <HAL_SPI_Transmit+0x204>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bac:	d102      	bne.n	8006bb4 <HAL_SPI_Transmit+0x20a>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bb8:	e026      	b.n	8006c08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1cd      	bne.n	8006b60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fbcb 	bl	8007364 <SPI_EndRxTxTransaction>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e000      	b.n	8006c08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b088      	sub	sp, #32
 8006c26:	af02      	add	r7, sp, #8
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3e:	d112      	bne.n	8006c66 <HAL_SPI_Receive+0x44>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10e      	bne.n	8006c66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f8f1 	bl	8006e44 <HAL_SPI_TransmitReceive>
 8006c62:	4603      	mov	r3, r0
 8006c64:	e0ea      	b.n	8006e3c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_SPI_Receive+0x52>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e0e3      	b.n	8006e3c <HAL_SPI_Receive+0x21a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c7c:	f7fb fd5c 	bl	8002738 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c92:	e0ca      	b.n	8006e2a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_Receive+0x7e>
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ca4:	e0c1      	b.n	8006e2a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cec:	d10f      	bne.n	8006d0e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d007      	beq.n	8006d2c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d162      	bne.n	8006dfa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d34:	e02e      	b.n	8006d94 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d115      	bne.n	8006d70 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f103 020c 	add.w	r2, r3, #12
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d6e:	e011      	b.n	8006d94 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d70:	f7fb fce2 	bl	8002738 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d803      	bhi.n	8006d88 <HAL_SPI_Receive+0x166>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d86:	d102      	bne.n	8006d8e <HAL_SPI_Receive+0x16c>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d92:	e04a      	b.n	8006e2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1cb      	bne.n	8006d36 <HAL_SPI_Receive+0x114>
 8006d9e:	e031      	b.n	8006e04 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d113      	bne.n	8006dd6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	b292      	uxth	r2, r2
 8006dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dd4:	e011      	b.n	8006dfa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd6:	f7fb fcaf 	bl	8002738 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d803      	bhi.n	8006dee <HAL_SPI_Receive+0x1cc>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d102      	bne.n	8006df4 <HAL_SPI_Receive+0x1d2>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006df8:	e017      	b.n	8006e2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1cd      	bne.n	8006da0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fa45 	bl	8007298 <SPI_EndRxTransaction>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
 8006e26:	e000      	b.n	8006e2a <HAL_SPI_Receive+0x208>
  }

error :
 8006e28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08c      	sub	sp, #48	; 0x30
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e52:	2301      	movs	r3, #1
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x26>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e18a      	b.n	8007180 <HAL_SPI_TransmitReceive+0x33c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e72:	f7fb fc61 	bl	8002738 <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e88:	887b      	ldrh	r3, [r7, #2]
 8006e8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d00f      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x70>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9a:	d107      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x68>
 8006ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d003      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eb2:	e15b      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_SPI_TransmitReceive+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SPI_TransmitReceive+0x82>
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ecc:	e14e      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2205      	movs	r2, #5
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	887a      	ldrh	r2, [r7, #2]
 8006f0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d007      	beq.n	8006f36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d178      	bne.n	8007032 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x10a>
 8006f48:	8b7b      	ldrh	r3, [r7, #26]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d166      	bne.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f72:	e053      	b.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d11b      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x176>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d016      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x176>
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d113      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	1c9a      	adds	r2, r3, #2
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d119      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x1b8>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d014      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	1c9a      	adds	r2, r3, #2
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ffc:	f7fb fb9c 	bl	8002738 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007008:	429a      	cmp	r2, r3
 800700a:	d807      	bhi.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007012:	d003      	beq.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800701a:	e0a7      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1a6      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x130>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1a1      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x130>
 8007030:	e07c      	b.n	800712c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x1fc>
 800703a:	8b7b      	ldrh	r3, [r7, #26]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d16b      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007066:	e057      	b.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d11c      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d114      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d119      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x2ae>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d014      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ee:	2301      	movs	r3, #1
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070f2:	f7fb fb21 	bl	8002738 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070fe:	429a      	cmp	r2, r3
 8007100:	d803      	bhi.n	800710a <HAL_SPI_TransmitReceive+0x2c6>
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007108:	d102      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x2cc>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007116:	e029      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1a2      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x224>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d19d      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f917 	bl	8007364 <SPI_EndRxTxTransaction>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d006      	beq.n	800714a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007148:	e010      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	e000      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800716a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800717c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007180:	4618      	mov	r0, r3
 8007182:	3730      	adds	r7, #48	; 0x30
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007198:	f7fb face 	bl	8002738 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a8:	f7fb fac6 	bl	8002738 <HAL_GetTick>
 80071ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ae:	4b39      	ldr	r3, [pc, #228]	; (8007294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	015b      	lsls	r3, r3, #5
 80071b4:	0d1b      	lsrs	r3, r3, #20
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071be:	e054      	b.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c6:	d050      	beq.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c8:	f7fb fab6 	bl	8002738 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d902      	bls.n	80071de <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d13d      	bne.n	800725a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f6:	d111      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007200:	d004      	beq.n	800720c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720a:	d107      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007224:	d10f      	bne.n	8007246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e017      	b.n	800728a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3b01      	subs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d19b      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000000 	.word	0x20000000

08007298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ac:	d111      	bne.n	80072d2 <SPI_EndRxTransaction+0x3a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	d004      	beq.n	80072c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c0:	d107      	bne.n	80072d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072da:	d12a      	bne.n	8007332 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d012      	beq.n	800730c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff ff49 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02d      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e026      	b.n	800735a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	2101      	movs	r1, #1
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff ff36 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01a      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f043 0220 	orr.w	r2, r3, #32
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e013      	b.n	800735a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	2101      	movs	r1, #1
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff23 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e000      	b.n	800735a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007370:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <SPI_EndRxTxTransaction+0x7c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <SPI_EndRxTxTransaction+0x80>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	0d5b      	lsrs	r3, r3, #21
 800737c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800738e:	d112      	bne.n	80073b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff fef4 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e00f      	b.n	80073d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3b01      	subs	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d0f2      	beq.n	80073b6 <SPI_EndRxTxTransaction+0x52>
 80073d0:	e000      	b.n	80073d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80073d2:	bf00      	nop
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000000 	.word	0x20000000
 80073e4:	165e9f81 	.word	0x165e9f81

080073e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e041      	b.n	800747e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fa ff2e 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f000 fc12 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e041      	b.n	800751c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f839 	bl	8007524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f000 fbc3 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b0c      	cmp	r3, #12
 800754a:	d855      	bhi.n	80075f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007589 	.word	0x08007589
 8007558:	080075f9 	.word	0x080075f9
 800755c:	080075f9 	.word	0x080075f9
 8007560:	080075f9 	.word	0x080075f9
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075f9 	.word	0x080075f9
 800756c:	080075f9 	.word	0x080075f9
 8007570:	080075f9 	.word	0x080075f9
 8007574:	080075c1 	.word	0x080075c1
 8007578:	080075f9 	.word	0x080075f9
 800757c:	080075f9 	.word	0x080075f9
 8007580:	080075f9 	.word	0x080075f9
 8007584:	080075dd 	.word	0x080075dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	4618      	mov	r0, r3
 800759e:	f7fb fb47 	bl	8002c30 <HAL_DMA_Abort_IT>
      break;
 80075a2:	e02c      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fb fb39 	bl	8002c30 <HAL_DMA_Abort_IT>
      break;
 80075be:	e01e      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fb fb2b 	bl	8002c30 <HAL_DMA_Abort_IT>
      break;
 80075da:	e010      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fb fb1d 	bl	8002c30 <HAL_DMA_Abort_IT>
      break;
 80075f6:	e002      	b.n	80075fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d161      	bne.n	80076c8 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2200      	movs	r2, #0
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fe09 	bl	8008224 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_TIM_PWM_Stop_DMA+0xee>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d101      	bne.n	800762a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	f241 1311 	movw	r3, #4369	; 0x1111
 800763a:	4013      	ands	r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10f      	bne.n	8007660 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6a1a      	ldr	r2, [r3, #32]
 8007646:	f240 4344 	movw	r3, #1092	; 0x444
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d107      	bne.n	8007660 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	f241 1311 	movw	r3, #4369	; 0x1111
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10f      	bne.n	8007690 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6a1a      	ldr	r2, [r3, #32]
 8007676:	f240 4344 	movw	r3, #1092	; 0x444
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d107      	bne.n	8007690 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d104      	bne.n	80076a0 <HAL_TIM_PWM_Stop_DMA+0x168>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800769e:	e013      	b.n	80076c8 <HAL_TIM_PWM_Stop_DMA+0x190>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d104      	bne.n	80076b0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ae:	e00b      	b.n	80076c8 <HAL_TIM_PWM_Stop_DMA+0x190>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d104      	bne.n	80076c0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076be:	e003      	b.n	80076c8 <HAL_TIM_PWM_Stop_DMA+0x190>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40010000 	.word	0x40010000
 80076d8:	40010400 	.word	0x40010400

080076dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0202 	mvn.w	r2, #2
 8007708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa81 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa73 	bl	8007c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fa fb73 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b04      	cmp	r3, #4
 8007744:	d122      	bne.n	800778c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b04      	cmp	r3, #4
 8007752:	d11b      	bne.n	800778c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0204 	mvn.w	r2, #4
 800775c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa57 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 8007778:	e005      	b.n	8007786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa49 	bl	8007c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fa fb49 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b08      	cmp	r3, #8
 8007798:	d122      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d11b      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0208 	mvn.w	r2, #8
 80077b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa2d 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa1f 	bl	8007c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fa fb1f 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d122      	bne.n	8007834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b10      	cmp	r3, #16
 80077fa:	d11b      	bne.n	8007834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0210 	mvn.w	r2, #16
 8007804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2208      	movs	r2, #8
 800780a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa03 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 8007820:	e005      	b.n	800782e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9f5 	bl	8007c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fa faf5 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b01      	cmp	r3, #1
 8007840:	d10e      	bne.n	8007860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0201 	mvn.w	r2, #1
 8007858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9cf 	bl	8007bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d10e      	bne.n	800788c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d107      	bne.n	800788c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fd78 	bl	800837c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d10e      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d107      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9c1 	bl	8007c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0220 	mvn.w	r2, #32
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fd42 	bl	8008368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007906:	2302      	movs	r3, #2
 8007908:	e0ae      	b.n	8007a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b0c      	cmp	r3, #12
 8007916:	f200 809f 	bhi.w	8007a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007955 	.word	0x08007955
 8007924:	08007a59 	.word	0x08007a59
 8007928:	08007a59 	.word	0x08007a59
 800792c:	08007a59 	.word	0x08007a59
 8007930:	08007995 	.word	0x08007995
 8007934:	08007a59 	.word	0x08007a59
 8007938:	08007a59 	.word	0x08007a59
 800793c:	08007a59 	.word	0x08007a59
 8007940:	080079d7 	.word	0x080079d7
 8007944:	08007a59 	.word	0x08007a59
 8007948:	08007a59 	.word	0x08007a59
 800794c:	08007a59 	.word	0x08007a59
 8007950:	08007a17 	.word	0x08007a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fa18 	bl	8007d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0208 	orr.w	r2, r2, #8
 800796e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0204 	bic.w	r2, r2, #4
 800797e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6999      	ldr	r1, [r3, #24]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	619a      	str	r2, [r3, #24]
      break;
 8007992:	e064      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fa68 	bl	8007e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6999      	ldr	r1, [r3, #24]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	021a      	lsls	r2, r3, #8
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	619a      	str	r2, [r3, #24]
      break;
 80079d4:	e043      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fabd 	bl	8007f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0208 	orr.w	r2, r2, #8
 80079f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0204 	bic.w	r2, r2, #4
 8007a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	61da      	str	r2, [r3, #28]
      break;
 8007a14:	e023      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fb11 	bl	8008044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69d9      	ldr	r1, [r3, #28]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	021a      	lsls	r2, r3, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	61da      	str	r2, [r3, #28]
      break;
 8007a56:	e002      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_TIM_ConfigClockSource+0x1c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e0b4      	b.n	8007bf6 <HAL_TIM_ConfigClockSource+0x186>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac4:	d03e      	beq.n	8007b44 <HAL_TIM_ConfigClockSource+0xd4>
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aca:	f200 8087 	bhi.w	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad2:	f000 8086 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x172>
 8007ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ada:	d87f      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007adc:	2b70      	cmp	r3, #112	; 0x70
 8007ade:	d01a      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0xa6>
 8007ae0:	2b70      	cmp	r3, #112	; 0x70
 8007ae2:	d87b      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ae4:	2b60      	cmp	r3, #96	; 0x60
 8007ae6:	d050      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x11a>
 8007ae8:	2b60      	cmp	r3, #96	; 0x60
 8007aea:	d877      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007aec:	2b50      	cmp	r3, #80	; 0x50
 8007aee:	d03c      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0xfa>
 8007af0:	2b50      	cmp	r3, #80	; 0x50
 8007af2:	d873      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d058      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x13a>
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d86f      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d064      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b00:	2b30      	cmp	r3, #48	; 0x30
 8007b02:	d86b      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d060      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d867      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d05c      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d05a      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x15a>
 8007b14:	e062      	b.n	8007bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6899      	ldr	r1, [r3, #8]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f000 fb5d 	bl	80081e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	609a      	str	r2, [r3, #8]
      break;
 8007b42:	e04f      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6899      	ldr	r1, [r3, #8]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f000 fb46 	bl	80081e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b66:	609a      	str	r2, [r3, #8]
      break;
 8007b68:	e03c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 faba 	bl	80080f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2150      	movs	r1, #80	; 0x50
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fb13 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 8007b88:	e02c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f000 fad9 	bl	800814e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2160      	movs	r1, #96	; 0x60
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb03 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 8007ba8:	e01c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f000 fa9a 	bl	80080f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2140      	movs	r1, #64	; 0x40
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 faf3 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 8007bc8:	e00c      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f000 faea 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 8007bda:	e003      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
      break;
 8007be0:	e000      	b.n	8007be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a40      	ldr	r2, [pc, #256]	; (8007d64 <TIM_Base_SetConfig+0x114>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d013      	beq.n	8007c90 <TIM_Base_SetConfig+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6e:	d00f      	beq.n	8007c90 <TIM_Base_SetConfig+0x40>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a3d      	ldr	r2, [pc, #244]	; (8007d68 <TIM_Base_SetConfig+0x118>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00b      	beq.n	8007c90 <TIM_Base_SetConfig+0x40>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a3c      	ldr	r2, [pc, #240]	; (8007d6c <TIM_Base_SetConfig+0x11c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d007      	beq.n	8007c90 <TIM_Base_SetConfig+0x40>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a3b      	ldr	r2, [pc, #236]	; (8007d70 <TIM_Base_SetConfig+0x120>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_Base_SetConfig+0x40>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a3a      	ldr	r2, [pc, #232]	; (8007d74 <TIM_Base_SetConfig+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d108      	bne.n	8007ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a2f      	ldr	r2, [pc, #188]	; (8007d64 <TIM_Base_SetConfig+0x114>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d02b      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb0:	d027      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a2c      	ldr	r2, [pc, #176]	; (8007d68 <TIM_Base_SetConfig+0x118>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d023      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a2b      	ldr	r2, [pc, #172]	; (8007d6c <TIM_Base_SetConfig+0x11c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01f      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a2a      	ldr	r2, [pc, #168]	; (8007d70 <TIM_Base_SetConfig+0x120>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d01b      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a29      	ldr	r2, [pc, #164]	; (8007d74 <TIM_Base_SetConfig+0x124>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d017      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <TIM_Base_SetConfig+0x128>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <TIM_Base_SetConfig+0x12c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00f      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <TIM_Base_SetConfig+0x130>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00b      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a25      	ldr	r2, [pc, #148]	; (8007d84 <TIM_Base_SetConfig+0x134>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d007      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a24      	ldr	r2, [pc, #144]	; (8007d88 <TIM_Base_SetConfig+0x138>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d003      	beq.n	8007d02 <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a23      	ldr	r2, [pc, #140]	; (8007d8c <TIM_Base_SetConfig+0x13c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d108      	bne.n	8007d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <TIM_Base_SetConfig+0x114>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_Base_SetConfig+0xf8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <TIM_Base_SetConfig+0x124>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d103      	bne.n	8007d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	615a      	str	r2, [r3, #20]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800
 8007d70:	40000c00 	.word	0x40000c00
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40014400 	.word	0x40014400
 8007d80:	40014800 	.word	0x40014800
 8007d84:	40001800 	.word	0x40001800
 8007d88:	40001c00 	.word	0x40001c00
 8007d8c:	40002000 	.word	0x40002000

08007d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f023 0201 	bic.w	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 0302 	bic.w	r3, r3, #2
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <TIM_OC1_SetConfig+0xd8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_OC1_SetConfig+0x64>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <TIM_OC1_SetConfig+0xdc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d10c      	bne.n	8007e0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0308 	bic.w	r3, r3, #8
 8007dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f023 0304 	bic.w	r3, r3, #4
 8007e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <TIM_OC1_SetConfig+0xd8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_OC1_SetConfig+0x8e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <TIM_OC1_SetConfig+0xdc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d111      	bne.n	8007e42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	621a      	str	r2, [r3, #32]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40010400 	.word	0x40010400

08007e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f023 0210 	bic.w	r2, r3, #16
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f023 0320 	bic.w	r3, r3, #32
 8007eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <TIM_OC2_SetConfig+0xe4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_OC2_SetConfig+0x68>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a21      	ldr	r2, [pc, #132]	; (8007f58 <TIM_OC2_SetConfig+0xe8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d10d      	bne.n	8007ef4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a17      	ldr	r2, [pc, #92]	; (8007f54 <TIM_OC2_SetConfig+0xe4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_OC2_SetConfig+0x94>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <TIM_OC2_SetConfig+0xe8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d113      	bne.n	8007f2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400

08007f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a21      	ldr	r2, [pc, #132]	; (800803c <TIM_OC3_SetConfig+0xe0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d003      	beq.n	8007fc2 <TIM_OC3_SetConfig+0x66>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a20      	ldr	r2, [pc, #128]	; (8008040 <TIM_OC3_SetConfig+0xe4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10d      	bne.n	8007fde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a16      	ldr	r2, [pc, #88]	; (800803c <TIM_OC3_SetConfig+0xe0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_OC3_SetConfig+0x92>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <TIM_OC3_SetConfig+0xe4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d113      	bne.n	8008016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	621a      	str	r2, [r3, #32]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400

08008044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800808e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	031b      	lsls	r3, r3, #12
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a12      	ldr	r2, [pc, #72]	; (80080e8 <TIM_OC4_SetConfig+0xa4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC4_SetConfig+0x68>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a11      	ldr	r2, [pc, #68]	; (80080ec <TIM_OC4_SetConfig+0xa8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d109      	bne.n	80080c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	019b      	lsls	r3, r3, #6
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000
 80080ec:	40010400 	.word	0x40010400

080080f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0201 	bic.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 030a 	bic.w	r3, r3, #10
 800812c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	f023 0210 	bic.w	r2, r3, #16
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	031b      	lsls	r3, r3, #12
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800818a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f043 0307 	orr.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	431a      	orrs	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	609a      	str	r2, [r3, #8]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2201      	movs	r2, #1
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	43db      	mvns	r3, r3
 8008246:	401a      	ands	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008284:	2302      	movs	r3, #2
 8008286:	e05a      	b.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a21      	ldr	r2, [pc, #132]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d022      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d4:	d01d      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1d      	ldr	r2, [pc, #116]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1b      	ldr	r2, [pc, #108]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1a      	ldr	r2, [pc, #104]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a18      	ldr	r2, [pc, #96]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a17      	ldr	r2, [pc, #92]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a15      	ldr	r2, [pc, #84]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10c      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4313      	orrs	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40010400 	.word	0x40010400
 8008360:	40014000 	.word	0x40014000
 8008364:	40001800 	.word	0x40001800

08008368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e03f      	b.n	8008422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7fa f800 	bl	80023bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2224      	movs	r2, #36	; 0x24
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fe81 	bl	80090dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695a      	ldr	r2, [r3, #20]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b08a      	sub	sp, #40	; 0x28
 800842e:	af02      	add	r7, sp, #8
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b20      	cmp	r3, #32
 8008448:	d17c      	bne.n	8008544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <HAL_UART_Transmit+0x2c>
 8008450:	88fb      	ldrh	r3, [r7, #6]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e075      	b.n	8008546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_UART_Transmit+0x3e>
 8008464:	2302      	movs	r3, #2
 8008466:	e06e      	b.n	8008546 <HAL_UART_Transmit+0x11c>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2221      	movs	r2, #33	; 0x21
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800847e:	f7fa f95b 	bl	8002738 <HAL_GetTick>
 8008482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008498:	d108      	bne.n	80084ac <HAL_UART_Transmit+0x82>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	e003      	b.n	80084b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084bc:	e02a      	b.n	8008514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2180      	movs	r1, #128	; 0x80
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fbc1 	bl	8008c50 <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e036      	b.n	8008546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	3302      	adds	r3, #2
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e007      	b.n	8008506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1cf      	bne.n	80084be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2200      	movs	r2, #0
 8008526:	2140      	movs	r1, #64	; 0x40
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fb91 	bl	8008c50 <UART_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e006      	b.n	8008546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e000      	b.n	8008546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
  }
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b08a      	sub	sp, #40	; 0x28
 8008552:	af02      	add	r7, sp, #8
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	603b      	str	r3, [r7, #0]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b20      	cmp	r3, #32
 800856c:	f040 808c 	bne.w	8008688 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UART_Receive+0x2e>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e084      	b.n	800868a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_UART_Receive+0x40>
 800858a:	2302      	movs	r3, #2
 800858c:	e07d      	b.n	800868a <HAL_UART_Receive+0x13c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2222      	movs	r2, #34	; 0x22
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085aa:	f7fa f8c5 	bl	8002738 <HAL_GetTick>
 80085ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c4:	d108      	bne.n	80085d8 <HAL_UART_Receive+0x8a>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	e003      	b.n	80085e0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80085e8:	e043      	b.n	8008672 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2120      	movs	r1, #32
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 fb2b 	bl	8008c50 <UART_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e042      	b.n	800868a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10c      	bne.n	8008624 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008616:	b29a      	uxth	r2, r3
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	3302      	adds	r3, #2
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e01f      	b.n	8008664 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862c:	d007      	beq.n	800863e <HAL_UART_Receive+0xf0>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <HAL_UART_Receive+0xfe>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e008      	b.n	800865e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008658:	b2da      	uxtb	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1b6      	bne.n	80085ea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2220      	movs	r2, #32
 8008680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e000      	b.n	800868a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008688:	2302      	movs	r3, #2
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	4613      	mov	r3, r2
 800869e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d11d      	bne.n	80086e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_UART_Receive_IT+0x26>
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e016      	b.n	80086ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_UART_Receive_IT+0x38>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e00f      	b.n	80086ea <HAL_UART_Receive_IT+0x58>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086d8:	88fb      	ldrh	r3, [r7, #6]
 80086da:	461a      	mov	r2, r3
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fb24 	bl	8008d2c <UART_Start_Receive_IT>
 80086e4:	4603      	mov	r3, r0
 80086e6:	e000      	b.n	80086ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
  }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b0ba      	sub	sp, #232	; 0xe8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800871a:	2300      	movs	r3, #0
 800871c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008720:	2300      	movs	r3, #0
 8008722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10f      	bne.n	800875a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <HAL_UART_IRQHandler+0x66>
 8008746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fc07 	bl	8008f66 <UART_Receive_IT>
      return;
 8008758:	e256      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800875a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80de 	beq.w	8008920 <HAL_UART_IRQHandler+0x22c>
 8008764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 80d1 	beq.w	8008920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <HAL_UART_IRQHandler+0xae>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f043 0201 	orr.w	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <HAL_UART_IRQHandler+0xd2>
 80087ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	f043 0202 	orr.w	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00b      	beq.n	80087ea <HAL_UART_IRQHandler+0xf6>
 80087d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	f043 0204 	orr.w	r2, r3, #4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d011      	beq.n	800881a <HAL_UART_IRQHandler+0x126>
 80087f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f043 0208 	orr.w	r2, r3, #8
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 81ed 	beq.w	8008bfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_UART_IRQHandler+0x14e>
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb92 	bl	8008f66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	bf0c      	ite	eq
 8008850:	2301      	moveq	r3, #1
 8008852:	2300      	movne	r3, #0
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <HAL_UART_IRQHandler+0x17a>
 8008866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d04f      	beq.n	800890e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa9a 	bl	8008da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d141      	bne.n	8008906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800889c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3314      	adds	r3, #20
 80088aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1d9      	bne.n	8008882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d013      	beq.n	80088fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	4a7d      	ldr	r2, [pc, #500]	; (8008ad0 <HAL_UART_IRQHandler+0x3dc>)
 80088dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fa f9a4 	bl	8002c30 <HAL_DMA_Abort_IT>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d016      	beq.n	800891c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fc:	e00e      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f990 	bl	8008c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008904:	e00a      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f98c 	bl	8008c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890c:	e006      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f988 	bl	8008c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800891a:	e170      	b.n	8008bfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891c:	bf00      	nop
    return;
 800891e:	e16e      	b.n	8008bfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	2b01      	cmp	r3, #1
 8008926:	f040 814a 	bne.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800892a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8143 	beq.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 813c 	beq.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	f040 80b4 	bne.w	8008ad4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8140 	beq.w	8008c02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800898a:	429a      	cmp	r2, r3
 800898c:	f080 8139 	bcs.w	8008c02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a2:	f000 8088 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	330c      	adds	r3, #12
 80089ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1d9      	bne.n	80089a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3314      	adds	r3, #20
 8008a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e1      	bne.n	80089f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3314      	adds	r3, #20
 8008a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e3      	bne.n	8008a2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a86:	f023 0310 	bic.w	r3, r3, #16
 8008a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a98:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e3      	bne.n	8008a74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fa f84d 	bl	8002b50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f8b6 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008acc:	e099      	b.n	8008c02 <HAL_UART_IRQHandler+0x50e>
 8008ace:	bf00      	nop
 8008ad0:	08008e6f 	.word	0x08008e6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 808b 	beq.w	8008c06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8086 	beq.w	8008c06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8008b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e3      	bne.n	8008afa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3314      	adds	r3, #20
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	623b      	str	r3, [r7, #32]
   return(result);
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3314      	adds	r3, #20
 8008b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b56:	633a      	str	r2, [r7, #48]	; 0x30
 8008b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e3      	bne.n	8008b32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0310 	bic.w	r3, r3, #16
 8008b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	330c      	adds	r3, #12
 8008b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b9c:	61fa      	str	r2, [r7, #28]
 8008b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	69b9      	ldr	r1, [r7, #24]
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e3      	bne.n	8008b78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f83e 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bbc:	e023      	b.n	8008c06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_UART_IRQHandler+0x4ea>
 8008bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f95d 	bl	8008e96 <UART_Transmit_IT>
    return;
 8008bdc:	e014      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00e      	beq.n	8008c08 <HAL_UART_IRQHandler+0x514>
 8008bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d008      	beq.n	8008c08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f99d 	bl	8008f36 <UART_EndTransmit_IT>
    return;
 8008bfc:	e004      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
    return;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
      return;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
      return;
 8008c06:	bf00      	nop
  }
}
 8008c08:	37e8      	adds	r7, #232	; 0xe8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop

08008c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b090      	sub	sp, #64	; 0x40
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c60:	e050      	b.n	8008d04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c68:	d04c      	beq.n	8008d04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c70:	f7f9 fd62 	bl	8002738 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d241      	bcs.n	8008d04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ca0:	637a      	str	r2, [r7, #52]	; 0x34
 8008ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e5      	bne.n	8008c80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3314      	adds	r3, #20
 8008cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd4:	623a      	str	r2, [r7, #32]
 8008cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	69f9      	ldr	r1, [r7, #28]
 8008cda:	6a3a      	ldr	r2, [r7, #32]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e5      	bne.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e00f      	b.n	8008d24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d09f      	beq.n	8008c62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3740      	adds	r7, #64	; 0x40
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	88fa      	ldrh	r2, [r7, #6]
 8008d44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	88fa      	ldrh	r2, [r7, #6]
 8008d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2222      	movs	r2, #34	; 0x22
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f042 0201 	orr.w	r2, r2, #1
 8008d88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f042 0220 	orr.w	r2, r2, #32
 8008d98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b095      	sub	sp, #84	; 0x54
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	330c      	adds	r3, #12
 8008db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dd0:	643a      	str	r2, [r7, #64]	; 0x40
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e5      	bne.n	8008db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3314      	adds	r3, #20
 8008dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3314      	adds	r3, #20
 8008e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d119      	bne.n	8008e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f023 0310 	bic.w	r3, r3, #16
 8008e36:	647b      	str	r3, [r7, #68]	; 0x44
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e40:	61ba      	str	r2, [r7, #24]
 8008e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6979      	ldr	r1, [r7, #20]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e5      	bne.n	8008e20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e62:	bf00      	nop
 8008e64:	3754      	adds	r7, #84	; 0x54
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fecb 	bl	8008c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b21      	cmp	r3, #33	; 0x21
 8008ea8:	d13e      	bne.n	8008f28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb2:	d114      	bne.n	8008ede <UART_Transmit_IT+0x48>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d110      	bne.n	8008ede <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	1c9a      	adds	r2, r3, #2
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	621a      	str	r2, [r3, #32]
 8008edc:	e008      	b.n	8008ef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	1c59      	adds	r1, r3, #1
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6211      	str	r1, [r2, #32]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4619      	mov	r1, r3
 8008efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10f      	bne.n	8008f24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e000      	b.n	8008f2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fe5a 	bl	8008c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b08c      	sub	sp, #48	; 0x30
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b22      	cmp	r3, #34	; 0x22
 8008f78:	f040 80ab 	bne.w	80090d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f84:	d117      	bne.n	8008fb6 <UART_Receive_IT+0x50>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d113      	bne.n	8008fb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fae:	1c9a      	adds	r2, r3, #2
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8008fb4:	e026      	b.n	8009004 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc8:	d007      	beq.n	8008fda <UART_Receive_IT+0x74>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <UART_Receive_IT+0x82>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e008      	b.n	8008ffa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29b      	uxth	r3, r3
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4619      	mov	r1, r3
 8009012:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009014:	2b00      	cmp	r3, #0
 8009016:	d15a      	bne.n	80090ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0220 	bic.w	r2, r2, #32
 8009026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695a      	ldr	r2, [r3, #20]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009054:	2b01      	cmp	r3, #1
 8009056:	d135      	bne.n	80090c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	613b      	str	r3, [r7, #16]
   return(result);
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f023 0310 	bic.w	r3, r3, #16
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907e:	623a      	str	r2, [r7, #32]
 8009080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	69f9      	ldr	r1, [r7, #28]
 8009084:	6a3a      	ldr	r2, [r7, #32]
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	61bb      	str	r3, [r7, #24]
   return(result);
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e5      	bne.n	800905e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b10      	cmp	r3, #16
 800909e:	d10a      	bne.n	80090b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090a0:	2300      	movs	r3, #0
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff fdbb 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
 80090c2:	e002      	b.n	80090ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7f7 ff57 	bl	8000f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e002      	b.n	80090d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e000      	b.n	80090d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090d2:	2302      	movs	r3, #2
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3730      	adds	r7, #48	; 0x30
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090e0:	b0c0      	sub	sp, #256	; 0x100
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	68d9      	ldr	r1, [r3, #12]
 80090fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	ea40 0301 	orr.w	r3, r0, r1
 8009104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	431a      	orrs	r2, r3
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	431a      	orrs	r2, r3
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009134:	f021 010c 	bic.w	r1, r1, #12
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009142:	430b      	orrs	r3, r1
 8009144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009156:	6999      	ldr	r1, [r3, #24]
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	ea40 0301 	orr.w	r3, r0, r1
 8009162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b8f      	ldr	r3, [pc, #572]	; (80093a8 <UART_SetConfig+0x2cc>)
 800916c:	429a      	cmp	r2, r3
 800916e:	d005      	beq.n	800917c <UART_SetConfig+0xa0>
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b8d      	ldr	r3, [pc, #564]	; (80093ac <UART_SetConfig+0x2d0>)
 8009178:	429a      	cmp	r2, r3
 800917a:	d104      	bne.n	8009186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800917c:	f7fd fb78 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8009180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009184:	e003      	b.n	800918e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009186:	f7fd fb5f 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 800918a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009198:	f040 810c 	bne.w	80093b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800919c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091ae:	4622      	mov	r2, r4
 80091b0:	462b      	mov	r3, r5
 80091b2:	1891      	adds	r1, r2, r2
 80091b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80091b6:	415b      	adcs	r3, r3
 80091b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091be:	4621      	mov	r1, r4
 80091c0:	eb12 0801 	adds.w	r8, r2, r1
 80091c4:	4629      	mov	r1, r5
 80091c6:	eb43 0901 	adc.w	r9, r3, r1
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091de:	4690      	mov	r8, r2
 80091e0:	4699      	mov	r9, r3
 80091e2:	4623      	mov	r3, r4
 80091e4:	eb18 0303 	adds.w	r3, r8, r3
 80091e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091ec:	462b      	mov	r3, r5
 80091ee:	eb49 0303 	adc.w	r3, r9, r3
 80091f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800920a:	460b      	mov	r3, r1
 800920c:	18db      	adds	r3, r3, r3
 800920e:	653b      	str	r3, [r7, #80]	; 0x50
 8009210:	4613      	mov	r3, r2
 8009212:	eb42 0303 	adc.w	r3, r2, r3
 8009216:	657b      	str	r3, [r7, #84]	; 0x54
 8009218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800921c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009220:	f7f7 f836 	bl	8000290 <__aeabi_uldivmod>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4b61      	ldr	r3, [pc, #388]	; (80093b0 <UART_SetConfig+0x2d4>)
 800922a:	fba3 2302 	umull	r2, r3, r3, r2
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	011c      	lsls	r4, r3, #4
 8009232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800923c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	1891      	adds	r1, r2, r2
 800924a:	64b9      	str	r1, [r7, #72]	; 0x48
 800924c:	415b      	adcs	r3, r3
 800924e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009254:	4641      	mov	r1, r8
 8009256:	eb12 0a01 	adds.w	sl, r2, r1
 800925a:	4649      	mov	r1, r9
 800925c:	eb43 0b01 	adc.w	fp, r3, r1
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800926c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009274:	4692      	mov	sl, r2
 8009276:	469b      	mov	fp, r3
 8009278:	4643      	mov	r3, r8
 800927a:	eb1a 0303 	adds.w	r3, sl, r3
 800927e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009282:	464b      	mov	r3, r9
 8009284:	eb4b 0303 	adc.w	r3, fp, r3
 8009288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800929c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092a0:	460b      	mov	r3, r1
 80092a2:	18db      	adds	r3, r3, r3
 80092a4:	643b      	str	r3, [r7, #64]	; 0x40
 80092a6:	4613      	mov	r3, r2
 80092a8:	eb42 0303 	adc.w	r3, r2, r3
 80092ac:	647b      	str	r3, [r7, #68]	; 0x44
 80092ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092b6:	f7f6 ffeb 	bl	8000290 <__aeabi_uldivmod>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <UART_SetConfig+0x2d4>)
 80092c2:	fba3 2301 	umull	r2, r3, r3, r1
 80092c6:	095b      	lsrs	r3, r3, #5
 80092c8:	2264      	movs	r2, #100	; 0x64
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	1acb      	subs	r3, r1, r3
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092d6:	4b36      	ldr	r3, [pc, #216]	; (80093b0 <UART_SetConfig+0x2d4>)
 80092d8:	fba3 2302 	umull	r2, r3, r3, r2
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092e4:	441c      	add	r4, r3
 80092e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092f8:	4642      	mov	r2, r8
 80092fa:	464b      	mov	r3, r9
 80092fc:	1891      	adds	r1, r2, r2
 80092fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009300:	415b      	adcs	r3, r3
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009308:	4641      	mov	r1, r8
 800930a:	1851      	adds	r1, r2, r1
 800930c:	6339      	str	r1, [r7, #48]	; 0x30
 800930e:	4649      	mov	r1, r9
 8009310:	414b      	adcs	r3, r1
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009320:	4659      	mov	r1, fp
 8009322:	00cb      	lsls	r3, r1, #3
 8009324:	4651      	mov	r1, sl
 8009326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800932a:	4651      	mov	r1, sl
 800932c:	00ca      	lsls	r2, r1, #3
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	4603      	mov	r3, r0
 8009334:	4642      	mov	r2, r8
 8009336:	189b      	adds	r3, r3, r2
 8009338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800933c:	464b      	mov	r3, r9
 800933e:	460a      	mov	r2, r1
 8009340:	eb42 0303 	adc.w	r3, r2, r3
 8009344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800935c:	460b      	mov	r3, r1
 800935e:	18db      	adds	r3, r3, r3
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
 8009362:	4613      	mov	r3, r2
 8009364:	eb42 0303 	adc.w	r3, r2, r3
 8009368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800936a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800936e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009372:	f7f6 ff8d 	bl	8000290 <__aeabi_uldivmod>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <UART_SetConfig+0x2d4>)
 800937c:	fba3 1302 	umull	r1, r3, r3, r2
 8009380:	095b      	lsrs	r3, r3, #5
 8009382:	2164      	movs	r1, #100	; 0x64
 8009384:	fb01 f303 	mul.w	r3, r1, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	3332      	adds	r3, #50	; 0x32
 800938e:	4a08      	ldr	r2, [pc, #32]	; (80093b0 <UART_SetConfig+0x2d4>)
 8009390:	fba2 2303 	umull	r2, r3, r2, r3
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	f003 0207 	and.w	r2, r3, #7
 800939a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4422      	add	r2, r4
 80093a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093a4:	e105      	b.n	80095b2 <UART_SetConfig+0x4d6>
 80093a6:	bf00      	nop
 80093a8:	40011000 	.word	0x40011000
 80093ac:	40011400 	.word	0x40011400
 80093b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093c6:	4642      	mov	r2, r8
 80093c8:	464b      	mov	r3, r9
 80093ca:	1891      	adds	r1, r2, r2
 80093cc:	6239      	str	r1, [r7, #32]
 80093ce:	415b      	adcs	r3, r3
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
 80093d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093d6:	4641      	mov	r1, r8
 80093d8:	1854      	adds	r4, r2, r1
 80093da:	4649      	mov	r1, r9
 80093dc:	eb43 0501 	adc.w	r5, r3, r1
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	00eb      	lsls	r3, r5, #3
 80093ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ee:	00e2      	lsls	r2, r4, #3
 80093f0:	4614      	mov	r4, r2
 80093f2:	461d      	mov	r5, r3
 80093f4:	4643      	mov	r3, r8
 80093f6:	18e3      	adds	r3, r4, r3
 80093f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093fc:	464b      	mov	r3, r9
 80093fe:	eb45 0303 	adc.w	r3, r5, r3
 8009402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009422:	4629      	mov	r1, r5
 8009424:	008b      	lsls	r3, r1, #2
 8009426:	4621      	mov	r1, r4
 8009428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800942c:	4621      	mov	r1, r4
 800942e:	008a      	lsls	r2, r1, #2
 8009430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009434:	f7f6 ff2c 	bl	8000290 <__aeabi_uldivmod>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4b60      	ldr	r3, [pc, #384]	; (80095c0 <UART_SetConfig+0x4e4>)
 800943e:	fba3 2302 	umull	r2, r3, r3, r2
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	011c      	lsls	r4, r3, #4
 8009446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800944a:	2200      	movs	r2, #0
 800944c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	1891      	adds	r1, r2, r2
 800945e:	61b9      	str	r1, [r7, #24]
 8009460:	415b      	adcs	r3, r3
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009468:	4641      	mov	r1, r8
 800946a:	1851      	adds	r1, r2, r1
 800946c:	6139      	str	r1, [r7, #16]
 800946e:	4649      	mov	r1, r9
 8009470:	414b      	adcs	r3, r1
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009480:	4659      	mov	r1, fp
 8009482:	00cb      	lsls	r3, r1, #3
 8009484:	4651      	mov	r1, sl
 8009486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800948a:	4651      	mov	r1, sl
 800948c:	00ca      	lsls	r2, r1, #3
 800948e:	4610      	mov	r0, r2
 8009490:	4619      	mov	r1, r3
 8009492:	4603      	mov	r3, r0
 8009494:	4642      	mov	r2, r8
 8009496:	189b      	adds	r3, r3, r2
 8009498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800949c:	464b      	mov	r3, r9
 800949e:	460a      	mov	r2, r1
 80094a0:	eb42 0303 	adc.w	r3, r2, r3
 80094a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80094b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094c0:	4649      	mov	r1, r9
 80094c2:	008b      	lsls	r3, r1, #2
 80094c4:	4641      	mov	r1, r8
 80094c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ca:	4641      	mov	r1, r8
 80094cc:	008a      	lsls	r2, r1, #2
 80094ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094d2:	f7f6 fedd 	bl	8000290 <__aeabi_uldivmod>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4b39      	ldr	r3, [pc, #228]	; (80095c0 <UART_SetConfig+0x4e4>)
 80094dc:	fba3 1302 	umull	r1, r3, r3, r2
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	2164      	movs	r1, #100	; 0x64
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	3332      	adds	r3, #50	; 0x32
 80094ee:	4a34      	ldr	r2, [pc, #208]	; (80095c0 <UART_SetConfig+0x4e4>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094fa:	441c      	add	r4, r3
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	673b      	str	r3, [r7, #112]	; 0x70
 8009504:	677a      	str	r2, [r7, #116]	; 0x74
 8009506:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800950a:	4642      	mov	r2, r8
 800950c:	464b      	mov	r3, r9
 800950e:	1891      	adds	r1, r2, r2
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	415b      	adcs	r3, r3
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800951a:	4641      	mov	r1, r8
 800951c:	1851      	adds	r1, r2, r1
 800951e:	6039      	str	r1, [r7, #0]
 8009520:	4649      	mov	r1, r9
 8009522:	414b      	adcs	r3, r1
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	f04f 0300 	mov.w	r3, #0
 800952e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009532:	4659      	mov	r1, fp
 8009534:	00cb      	lsls	r3, r1, #3
 8009536:	4651      	mov	r1, sl
 8009538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953c:	4651      	mov	r1, sl
 800953e:	00ca      	lsls	r2, r1, #3
 8009540:	4610      	mov	r0, r2
 8009542:	4619      	mov	r1, r3
 8009544:	4603      	mov	r3, r0
 8009546:	4642      	mov	r2, r8
 8009548:	189b      	adds	r3, r3, r2
 800954a:	66bb      	str	r3, [r7, #104]	; 0x68
 800954c:	464b      	mov	r3, r9
 800954e:	460a      	mov	r2, r1
 8009550:	eb42 0303 	adc.w	r3, r2, r3
 8009554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	663b      	str	r3, [r7, #96]	; 0x60
 8009560:	667a      	str	r2, [r7, #100]	; 0x64
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800956e:	4649      	mov	r1, r9
 8009570:	008b      	lsls	r3, r1, #2
 8009572:	4641      	mov	r1, r8
 8009574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009578:	4641      	mov	r1, r8
 800957a:	008a      	lsls	r2, r1, #2
 800957c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009580:	f7f6 fe86 	bl	8000290 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <UART_SetConfig+0x4e4>)
 800958a:	fba3 1302 	umull	r1, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	2164      	movs	r1, #100	; 0x64
 8009592:	fb01 f303 	mul.w	r3, r1, r3
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	3332      	adds	r3, #50	; 0x32
 800959c:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <UART_SetConfig+0x4e4>)
 800959e:	fba2 2303 	umull	r2, r3, r2, r3
 80095a2:	095b      	lsrs	r3, r3, #5
 80095a4:	f003 020f 	and.w	r2, r3, #15
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4422      	add	r2, r4
 80095b0:	609a      	str	r2, [r3, #8]
}
 80095b2:	bf00      	nop
 80095b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095b8:	46bd      	mov	sp, r7
 80095ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095be:	bf00      	nop
 80095c0:	51eb851f 	.word	0x51eb851f

080095c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095c4:	b084      	sub	sp, #16
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	f107 001c 	add.w	r0, r7, #28
 80095d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d122      	bne.n	8009622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009606:	2b01      	cmp	r3, #1
 8009608:	d105      	bne.n	8009616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f9c0 	bl	800999c <USB_CoreReset>
 800961c:	4603      	mov	r3, r0
 800961e:	73fb      	strb	r3, [r7, #15]
 8009620:	e01a      	b.n	8009658 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9b4 	bl	800999c <USB_CoreReset>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
 800964a:	e005      	b.n	8009658 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	2b01      	cmp	r3, #1
 800965c:	d10b      	bne.n	8009676 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f043 0206 	orr.w	r2, r3, #6
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f043 0220 	orr.w	r2, r3, #32
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009682:	b004      	add	sp, #16
 8009684:	4770      	bx	lr

08009686 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f043 0201 	orr.w	r2, r3, #1
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f023 0201 	bic.w	r2, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d115      	bne.n	8009718 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096f8:	2001      	movs	r0, #1
 80096fa:	f7f9 f829 	bl	8002750 <HAL_Delay>
      ms++;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f93a 	bl	800997e <USB_GetMode>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d01e      	beq.n	800974e <USB_SetCurrentMode+0x84>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b31      	cmp	r3, #49	; 0x31
 8009714:	d9f0      	bls.n	80096f8 <USB_SetCurrentMode+0x2e>
 8009716:	e01a      	b.n	800974e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d115      	bne.n	800974a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800972a:	2001      	movs	r0, #1
 800972c:	f7f9 f810 	bl	8002750 <HAL_Delay>
      ms++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f921 	bl	800997e <USB_GetMode>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <USB_SetCurrentMode+0x84>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b31      	cmp	r3, #49	; 0x31
 8009746:	d9f0      	bls.n	800972a <USB_SetCurrentMode+0x60>
 8009748:	e001      	b.n	800974e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e005      	b.n	800975a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b32      	cmp	r3, #50	; 0x32
 8009752:	d101      	bne.n	8009758 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a13      	ldr	r2, [pc, #76]	; (80097c8 <USB_FlushTxFifo+0x64>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d901      	bls.n	8009784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e01b      	b.n	80097bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	daf2      	bge.n	8009772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	019b      	lsls	r3, r3, #6
 8009794:	f043 0220 	orr.w	r2, r3, #32
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3301      	adds	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4a08      	ldr	r2, [pc, #32]	; (80097c8 <USB_FlushTxFifo+0x64>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d901      	bls.n	80097ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e006      	b.n	80097bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	d0f0      	beq.n	800979c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	00030d40 	.word	0x00030d40

080097cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4a11      	ldr	r2, [pc, #68]	; (8009828 <USB_FlushRxFifo+0x5c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d901      	bls.n	80097ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e018      	b.n	800981c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	daf2      	bge.n	80097d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2210      	movs	r2, #16
 80097fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <USB_FlushRxFifo+0x5c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e006      	b.n	800981c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b10      	cmp	r3, #16
 8009818:	d0f0      	beq.n	80097fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	00030d40 	.word	0x00030d40

0800982c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	; 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	460b      	mov	r3, r1
 800983c:	71fb      	strb	r3, [r7, #7]
 800983e:	4613      	mov	r3, r2
 8009840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800984a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d123      	bne.n	800989a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009852:	88bb      	ldrh	r3, [r7, #4]
 8009854:	3303      	adds	r3, #3
 8009856:	089b      	lsrs	r3, r3, #2
 8009858:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800985a:	2300      	movs	r3, #0
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e018      	b.n	8009892 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	031a      	lsls	r2, r3, #12
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	4413      	add	r3, r2
 8009868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986c:	461a      	mov	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	3301      	adds	r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3301      	adds	r3, #1
 800987e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	3301      	adds	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	3301      	adds	r3, #1
 800988a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3301      	adds	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	429a      	cmp	r2, r3
 8009898:	d3e2      	bcc.n	8009860 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3724      	adds	r7, #36	; 0x24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b08b      	sub	sp, #44	; 0x2c
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	089b      	lsrs	r3, r3, #2
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	623b      	str	r3, [r7, #32]
 80098d2:	e014      	b.n	80098fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	601a      	str	r2, [r3, #0]
    pDest++;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	3301      	adds	r3, #1
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	3301      	adds	r3, #1
 80098ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	3301      	adds	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	3301      	adds	r3, #1
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	3301      	adds	r3, #1
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	6a3a      	ldr	r2, [r7, #32]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	429a      	cmp	r2, r3
 8009904:	d3e6      	bcc.n	80098d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009906:	8bfb      	ldrh	r3, [r7, #30]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01e      	beq.n	800994a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009916:	461a      	mov	r2, r3
 8009918:	f107 0310 	add.w	r3, r7, #16
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
 800992c:	b2da      	uxtb	r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	701a      	strb	r2, [r3, #0]
      i++;
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	3301      	adds	r3, #1
 8009936:	623b      	str	r3, [r7, #32]
      pDest++;
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	3301      	adds	r3, #1
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800993e:	8bfb      	ldrh	r3, [r7, #30]
 8009940:	3b01      	subs	r3, #1
 8009942:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009944:	8bfb      	ldrh	r3, [r7, #30]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1ea      	bne.n	8009920 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800994c:	4618      	mov	r0, r3
 800994e:	372c      	adds	r7, #44	; 0x2c
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4013      	ands	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009970:	68fb      	ldr	r3, [r7, #12]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f003 0301 	and.w	r3, r3, #1
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
	...

0800999c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <USB_CoreReset+0x64>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e01b      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	daf2      	bge.n	80099a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f043 0201 	orr.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <USB_CoreReset+0x64>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d901      	bls.n	80099e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e006      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d0f0      	beq.n	80099d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	00030d40 	.word	0x00030d40

08009a04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a04:	b084      	sub	sp, #16
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a24:	461a      	mov	r2, r3
 8009a26:	2300      	movs	r3, #0
 8009a28:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d018      	beq.n	8009a8c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d10a      	bne.n	8009a76 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a6e:	f043 0304 	orr.w	r3, r3, #4
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	e014      	b.n	8009aa0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a84:	f023 0304 	bic.w	r3, r3, #4
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	e009      	b.n	8009aa0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a9a:	f023 0304 	bic.w	r3, r3, #4
 8009a9e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009aa0:	2110      	movs	r1, #16
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff fe5e 	bl	8009764 <USB_FlushTxFifo>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fe8a 	bl	80097cc <USB_FlushRxFifo>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	e015      	b.n	8009af4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ada:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2300      	movs	r3, #0
 8009aec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	3301      	adds	r3, #1
 8009af2:	613b      	str	r3, [r7, #16]
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3e5      	bcc.n	8009ac8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b08:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b1c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <USB_HostInit+0x16c>)
 8009b22:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <USB_HostInit+0x170>)
 8009b28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009b2c:	e009      	b.n	8009b42 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2280      	movs	r2, #128	; 0x80
 8009b32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a10      	ldr	r2, [pc, #64]	; (8009b78 <USB_HostInit+0x174>)
 8009b38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a0f      	ldr	r2, [pc, #60]	; (8009b7c <USB_HostInit+0x178>)
 8009b3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f043 0210 	orr.w	r2, r3, #16
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <USB_HostInit+0x17c>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b6c:	b004      	add	sp, #16
 8009b6e:	4770      	bx	lr
 8009b70:	01000200 	.word	0x01000200
 8009b74:	00e00300 	.word	0x00e00300
 8009b78:	00600080 	.word	0x00600080
 8009b7c:	004000e0 	.word	0x004000e0
 8009b80:	a3200008 	.word	0xa3200008

08009b84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ba2:	f023 0303 	bic.w	r3, r3, #3
 8009ba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d107      	bne.n	8009bd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009bd2:	6053      	str	r3, [r2, #4]
 8009bd4:	e009      	b.n	8009bea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d106      	bne.n	8009bea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009be2:	461a      	mov	r2, r3
 8009be4:	f241 7370 	movw	r3, #6000	; 0x1770
 8009be8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c26:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c28:	2064      	movs	r0, #100	; 0x64
 8009c2a:	f7f8 fd91 	bl	8002750 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009c3c:	200a      	movs	r0, #10
 8009c3e:	f7f8 fd87 	bl	8002750 <HAL_Delay>

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d109      	bne.n	8009c90 <USB_DriveVbus+0x44>
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d106      	bne.n	8009c90 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c8e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9a:	d109      	bne.n	8009cb0 <USB_DriveVbus+0x64>
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	0c5b      	lsrs	r3, r3, #17
 8009cdc:	f003 0303 	and.w	r3, r3, #3
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	b29b      	uxth	r3, r3
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b088      	sub	sp, #32
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	70fb      	strb	r3, [r7, #3]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70bb      	strb	r3, [r7, #2]
 8009d26:	4613      	mov	r3, r2
 8009d28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d87e      	bhi.n	8009e4c <USB_HC_Init+0x13c>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USB_HC_Init+0x44>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009e0f 	.word	0x08009e0f
 8009d5c:	08009d65 	.word	0x08009d65
 8009d60:	08009dd1 	.word	0x08009dd1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d70:	461a      	mov	r2, r3
 8009d72:	f240 439d 	movw	r3, #1181	; 0x49d
 8009d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da10      	bge.n	8009da2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d9e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009da0:	e057      	b.n	8009e52 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d051      	beq.n	8009e52 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009dcc:	60d3      	str	r3, [r2, #12]
      break;
 8009dce:	e040      	b.n	8009e52 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ddc:	461a      	mov	r2, r3
 8009dde:	f240 639d 	movw	r3, #1693	; 0x69d
 8009de2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da34      	bge.n	8009e56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e0c:	e023      	b.n	8009e56 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f240 2325 	movw	r3, #549	; 0x225
 8009e20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	da17      	bge.n	8009e5a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	78fa      	ldrb	r2, [r7, #3]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e44:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009e48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009e4a:	e006      	b.n	8009e5a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	77fb      	strb	r3, [r7, #31]
      break;
 8009e50:	e004      	b.n	8009e5c <USB_HC_Init+0x14c>
      break;
 8009e52:	bf00      	nop
 8009e54:	e002      	b.n	8009e5c <USB_HC_Init+0x14c>
      break;
 8009e56:	bf00      	nop
 8009e58:	e000      	b.n	8009e5c <USB_HC_Init+0x14c>
      break;
 8009e5a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e76:	f043 0302 	orr.w	r3, r3, #2
 8009e7a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e82:	699a      	ldr	r2, [r3, #24]
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	f003 030f 	and.w	r3, r3, #15
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e90:	6939      	ldr	r1, [r7, #16]
 8009e92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e96:	4313      	orrs	r3, r2
 8009e98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009ea6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da03      	bge.n	8009eb6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e001      	b.n	8009eba <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff feff 	bl	8009cbe <USB_GetHostSpeed>
 8009ec0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d106      	bne.n	8009ed8 <USB_HC_Init+0x1c8>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d003      	beq.n	8009ed8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	e001      	b.n	8009edc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009edc:	787b      	ldrb	r3, [r7, #1]
 8009ede:	059b      	lsls	r3, r3, #22
 8009ee0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ee4:	78bb      	ldrb	r3, [r7, #2]
 8009ee6:	02db      	lsls	r3, r3, #11
 8009ee8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009eec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ef2:	049b      	lsls	r3, r3, #18
 8009ef4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ef8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009efa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	0159      	lsls	r1, r3, #5
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	440b      	add	r3, r1
 8009f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f12:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f18:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d003      	beq.n	8009f2a <USB_HC_Init+0x21a>
 8009f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d10f      	bne.n	8009f4a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f48:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08c      	sub	sp, #48	; 0x30
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	785b      	ldrb	r3, [r3, #1]
 8009f6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f70:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02d      	beq.n	8009fda <USB_HC_StartXfer+0x86>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	791b      	ldrb	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d129      	bne.n	8009fda <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d117      	bne.n	8009fbc <USB_HC_StartXfer+0x68>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	79db      	ldrb	r3, [r3, #7]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <USB_HC_StartXfer+0x48>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	79db      	ldrb	r3, [r3, #7]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d10f      	bne.n	8009fbc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	6a3a      	ldr	r2, [r7, #32]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fba:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10b      	bne.n	8009fda <USB_HC_StartXfer+0x86>
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	795b      	ldrb	r3, [r3, #5]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d107      	bne.n	8009fda <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 fa0f 	bl	800a3f4 <USB_DoPing>
      return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e0f8      	b.n	800a1cc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d018      	beq.n	800a014 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	8912      	ldrh	r2, [r2, #8]
 8009fea:	4413      	add	r3, r2
 8009fec:	3b01      	subs	r3, #1
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	8912      	ldrh	r2, [r2, #8]
 8009ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ff6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ffa:	8b7b      	ldrh	r3, [r7, #26]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d90b      	bls.n	800a018 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a000:	8b7b      	ldrh	r3, [r7, #26]
 800a002:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	8912      	ldrh	r2, [r2, #8]
 800a00a:	fb03 f202 	mul.w	r2, r3, r2
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	611a      	str	r2, [r3, #16]
 800a012:	e001      	b.n	800a018 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a014:	2301      	movs	r3, #1
 800a016:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	78db      	ldrb	r3, [r3, #3]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d007      	beq.n	800a030 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	8912      	ldrh	r2, [r2, #8]
 800a026:	fb03 f202 	mul.w	r2, r3, r2
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	611a      	str	r2, [r3, #16]
 800a02e:	e003      	b.n	800a038 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	695a      	ldr	r2, [r3, #20]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a042:	04d9      	lsls	r1, r3, #19
 800a044:	4b63      	ldr	r3, [pc, #396]	; (800a1d4 <USB_HC_StartXfer+0x280>)
 800a046:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a048:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	7a9b      	ldrb	r3, [r3, #10]
 800a04e:	075b      	lsls	r3, r3, #29
 800a050:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a054:	69f9      	ldr	r1, [r7, #28]
 800a056:	0148      	lsls	r0, r1, #5
 800a058:	6a39      	ldr	r1, [r7, #32]
 800a05a:	4401      	add	r1, r0
 800a05c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a060:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a062:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	68d9      	ldr	r1, [r3, #12]
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	4413      	add	r3, r2
 800a076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07a:	460a      	mov	r2, r1
 800a07c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf0c      	ite	eq
 800a08e:	2301      	moveq	r3, #1
 800a090:	2300      	movne	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	69fa      	ldr	r2, [r7, #28]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	6a3a      	ldr	r2, [r7, #32]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	7e7b      	ldrb	r3, [r7, #25]
 800a0c6:	075b      	lsls	r3, r3, #29
 800a0c8:	69f9      	ldr	r1, [r7, #28]
 800a0ca:	0148      	lsls	r0, r1, #5
 800a0cc:	6a39      	ldr	r1, [r7, #32]
 800a0ce:	4401      	add	r1, r0
 800a0d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0ee:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	78db      	ldrb	r3, [r3, #3]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	e003      	b.n	800a10a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a108:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a110:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11e:	461a      	mov	r2, r3
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e04e      	b.n	800a1cc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d149      	bne.n	800a1ca <USB_HC_StartXfer+0x276>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d045      	beq.n	800a1ca <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	79db      	ldrb	r3, [r3, #7]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d830      	bhi.n	800a1a8 <USB_HC_StartXfer+0x254>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <USB_HC_StartXfer+0x1f8>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a15d 	.word	0x0800a15d
 800a150:	0800a181 	.word	0x0800a181
 800a154:	0800a15d 	.word	0x0800a15d
 800a158:	0800a181 	.word	0x0800a181
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	3303      	adds	r3, #3
 800a162:	089b      	lsrs	r3, r3, #2
 800a164:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a166:	8afa      	ldrh	r2, [r7, #22]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	429a      	cmp	r2, r3
 800a170:	d91c      	bls.n	800a1ac <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f043 0220 	orr.w	r2, r3, #32
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a17e:	e015      	b.n	800a1ac <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	3303      	adds	r3, #3
 800a186:	089b      	lsrs	r3, r3, #2
 800a188:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a18a:	8afa      	ldrh	r2, [r7, #22]
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	b29b      	uxth	r3, r3
 800a196:	429a      	cmp	r2, r3
 800a198:	d90a      	bls.n	800a1b0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1a6:	e003      	b.n	800a1b0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a1a8:	bf00      	nop
 800a1aa:	e002      	b.n	800a1b2 <USB_HC_StartXfer+0x25e>
        break;
 800a1ac:	bf00      	nop
 800a1ae:	e000      	b.n	800a1b2 <USB_HC_StartXfer+0x25e>
        break;
 800a1b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	68d9      	ldr	r1, [r3, #12]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	785a      	ldrb	r2, [r3, #1]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	9000      	str	r0, [sp, #0]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fb31 	bl	800982c <USB_WritePacket>
  }

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3728      	adds	r7, #40	; 0x28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	1ff80000 	.word	0x1ff80000

0800a1d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	b29b      	uxth	r3, r3
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b089      	sub	sp, #36	; 0x24
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	460b      	mov	r3, r1
 800a204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	0c9b      	lsrs	r3, r3, #18
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	0fdb      	lsrs	r3, r3, #31
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b20      	cmp	r3, #32
 800a248:	d104      	bne.n	800a254 <USB_HC_Halt+0x5a>
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	e0c8      	b.n	800a3e6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <USB_HC_Halt+0x66>
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d163      	bne.n	800a328 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	4413      	add	r3, r2
 800a268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	69fa      	ldr	r2, [r7, #28]
 800a274:	440a      	add	r2, r1
 800a276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a27a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a27e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f040 80ab 	bne.w	800a3e4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d133      	bne.n	800a302 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	0151      	lsls	r1, r2, #5
 800a2ac:	69fa      	ldr	r2, [r7, #28]
 800a2ae:	440a      	add	r2, r1
 800a2b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	0151      	lsls	r1, r2, #5
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	440a      	add	r2, r1
 800a2d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2d8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2e6:	d81d      	bhi.n	800a324 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2fe:	d0ec      	beq.n	800a2da <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a300:	e070      	b.n	800a3e4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	0151      	lsls	r1, r2, #5
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	440a      	add	r2, r1
 800a318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a320:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a322:	e05f      	b.n	800a3e4 <USB_HC_Halt+0x1ea>
            break;
 800a324:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a326:	e05d      	b.n	800a3e4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a346:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d133      	bne.n	800a3c0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a376:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a396:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3a4:	d81d      	bhi.n	800a3e2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3bc:	d0ec      	beq.n	800a398 <USB_HC_Halt+0x19e>
 800a3be:	e011      	b.n	800a3e4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e000      	b.n	800a3e4 <USB_HC_Halt+0x1ea>
          break;
 800a3e2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3724      	adds	r7, #36	; 0x24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a408:	2301      	movs	r3, #1
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	04da      	lsls	r2, r3, #19
 800a410:	4b15      	ldr	r3, [pc, #84]	; (800a468 <USB_DoPing+0x74>)
 800a412:	4013      	ands	r3, r2
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a424:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a43c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a444:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a452:	461a      	mov	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	1ff80000 	.word	0x1ff80000

0800a46c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff f911 	bl	80096a8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a486:	2110      	movs	r1, #16
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff f96b 	bl	8009764 <USB_FlushTxFifo>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff f997 	bl	80097cc <USB_FlushRxFifo>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	e01f      	b.n	800a4ee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	61bb      	str	r3, [r7, #24]
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	2b0f      	cmp	r3, #15
 800a4f2:	d9dc      	bls.n	800a4ae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	61bb      	str	r3, [r7, #24]
 800a4f8:	e034      	b.n	800a564 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	4413      	add	r3, r2
 800a502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a510:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a518:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a520:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52e:	461a      	mov	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a540:	d80c      	bhi.n	800a55c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a558:	d0ec      	beq.n	800a534 <USB_StopHost+0xc8>
 800a55a:	e000      	b.n	800a55e <USB_StopHost+0xf2>
        break;
 800a55c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	3301      	adds	r3, #1
 800a562:	61bb      	str	r3, [r7, #24]
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b0f      	cmp	r3, #15
 800a568:	d9c7      	bls.n	800a4fa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a570:	461a      	mov	r2, r3
 800a572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a576:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a57e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff f880 	bl	8009686 <USB_EnableGlobalInt>

  return ret;
 800a586:	7ffb      	ldrb	r3, [r7, #31]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a594:	4904      	ldr	r1, [pc, #16]	; (800a5a8 <MX_FATFS_Init+0x18>)
 800a596:	4805      	ldr	r0, [pc, #20]	; (800a5ac <MX_FATFS_Init+0x1c>)
 800a598:	f003 f95e 	bl	800d858 <FATFS_LinkDriver>
 800a59c:	4603      	mov	r3, r0
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <MX_FATFS_Init+0x20>)
 800a5a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20000518 	.word	0x20000518
 800a5ac:	0800f428 	.word	0x0800f428
 800a5b0:	20000514 	.word	0x20000514

0800a5b4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4808      	ldr	r0, [pc, #32]	; (800a600 <USBH_status+0x34>)
 800a5e0:	f000 fe32 	bl	800b248 <USBH_MSC_UnitIsReady>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <USBH_status+0x24>
  {
    res = RES_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]
 800a5ee:	e001      	b.n	800a5f4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000528 	.word	0x20000528

0800a604 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b094      	sub	sp, #80	; 0x50
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a61a:	7bf9      	ldrb	r1, [r7, #15]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4813      	ldr	r0, [pc, #76]	; (800a674 <USBH_read+0x70>)
 800a626:	f000 fe59 	bl	800b2dc <USBH_MSC_Read>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <USBH_read+0x34>
  {
    res = RES_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a636:	e017      	b.n	800a668 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a638:	f107 0210 	add.w	r2, r7, #16
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	4619      	mov	r1, r3
 800a640:	480c      	ldr	r0, [pc, #48]	; (800a674 <USBH_read+0x70>)
 800a642:	f000 fe27 	bl	800b294 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a646:	7f7b      	ldrb	r3, [r7, #29]
 800a648:	2b3a      	cmp	r3, #58	; 0x3a
 800a64a:	d005      	beq.n	800a658 <USBH_read+0x54>
 800a64c:	2b3a      	cmp	r3, #58	; 0x3a
 800a64e:	dc07      	bgt.n	800a660 <USBH_read+0x5c>
 800a650:	2b04      	cmp	r3, #4
 800a652:	d001      	beq.n	800a658 <USBH_read+0x54>
 800a654:	2b28      	cmp	r3, #40	; 0x28
 800a656:	d103      	bne.n	800a660 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a658:	2303      	movs	r3, #3
 800a65a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a65e:	e003      	b.n	800a668 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a666:	bf00      	nop
    }
  }

  return res;
 800a668:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3748      	adds	r7, #72	; 0x48
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20000528 	.word	0x20000528

0800a678 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b094      	sub	sp, #80	; 0x50
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a68e:	7bf9      	ldrb	r1, [r7, #15]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	4817      	ldr	r0, [pc, #92]	; (800a6f8 <USBH_write+0x80>)
 800a69a:	f000 fe88 	bl	800b3ae <USBH_MSC_Write>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <USBH_write+0x34>
  {
    res = RES_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a6aa:	e01f      	b.n	800a6ec <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a6ac:	f107 0210 	add.w	r2, r7, #16
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4810      	ldr	r0, [pc, #64]	; (800a6f8 <USBH_write+0x80>)
 800a6b6:	f000 fded 	bl	800b294 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a6ba:	7f7b      	ldrb	r3, [r7, #29]
 800a6bc:	2b3a      	cmp	r3, #58	; 0x3a
 800a6be:	d00d      	beq.n	800a6dc <USBH_write+0x64>
 800a6c0:	2b3a      	cmp	r3, #58	; 0x3a
 800a6c2:	dc0f      	bgt.n	800a6e4 <USBH_write+0x6c>
 800a6c4:	2b28      	cmp	r3, #40	; 0x28
 800a6c6:	d009      	beq.n	800a6dc <USBH_write+0x64>
 800a6c8:	2b28      	cmp	r3, #40	; 0x28
 800a6ca:	dc0b      	bgt.n	800a6e4 <USBH_write+0x6c>
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d005      	beq.n	800a6dc <USBH_write+0x64>
 800a6d0:	2b27      	cmp	r3, #39	; 0x27
 800a6d2:	d107      	bne.n	800a6e4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6da:	e007      	b.n	800a6ec <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6e2:	e003      	b.n	800a6ec <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6ea:	bf00      	nop
    }
  }

  return res;
 800a6ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3748      	adds	r7, #72	; 0x48
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000528 	.word	0x20000528

0800a6fc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b090      	sub	sp, #64	; 0x40
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	603a      	str	r2, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
 800a708:	460b      	mov	r3, r1
 800a70a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a712:	79bb      	ldrb	r3, [r7, #6]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d852      	bhi.n	800a7be <USBH_ioctl+0xc2>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <USBH_ioctl+0x24>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a731 	.word	0x0800a731
 800a724:	0800a739 	.word	0x0800a739
 800a728:	0800a763 	.word	0x0800a763
 800a72c:	0800a78f 	.word	0x0800a78f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a736:	e045      	b.n	800a7c4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a738:	f107 0208 	add.w	r2, r7, #8
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4619      	mov	r1, r3
 800a740:	4823      	ldr	r0, [pc, #140]	; (800a7d0 <USBH_ioctl+0xd4>)
 800a742:	f000 fda7 	bl	800b294 <USBH_MSC_GetLUNInfo>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a758:	e034      	b.n	800a7c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a760:	e030      	b.n	800a7c4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a762:	f107 0208 	add.w	r2, r7, #8
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	4619      	mov	r1, r3
 800a76a:	4819      	ldr	r0, [pc, #100]	; (800a7d0 <USBH_ioctl+0xd4>)
 800a76c:	f000 fd92 	bl	800b294 <USBH_MSC_GetLUNInfo>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a776:	8a3b      	ldrh	r3, [r7, #16]
 800a778:	461a      	mov	r2, r3
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a784:	e01e      	b.n	800a7c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a78c:	e01a      	b.n	800a7c4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a78e:	f107 0208 	add.w	r2, r7, #8
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	4619      	mov	r1, r3
 800a796:	480e      	ldr	r0, [pc, #56]	; (800a7d0 <USBH_ioctl+0xd4>)
 800a798:	f000 fd7c 	bl	800b294 <USBH_MSC_GetLUNInfo>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d109      	bne.n	800a7b6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a7a2:	8a3b      	ldrh	r3, [r7, #16]
 800a7a4:	0a5b      	lsrs	r3, r3, #9
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7b4:	e006      	b.n	800a7c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7bc:	e002      	b.n	800a7c4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a7be:	2304      	movs	r3, #4
 800a7c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a7c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3740      	adds	r7, #64	; 0x40
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000528 	.word	0x20000528

0800a7d4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b089      	sub	sp, #36	; 0x24
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7e2:	7919      	ldrb	r1, [r3, #4]
 800a7e4:	2350      	movs	r3, #80	; 0x50
 800a7e6:	2206      	movs	r2, #6
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 fc6b 	bl	800c0c4 <USBH_FindInterface>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2bff      	cmp	r3, #255	; 0xff
 800a7f6:	d002      	beq.n	800a7fe <USBH_MSC_InterfaceInit+0x2a>
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d901      	bls.n	800a802 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a7fe:	2302      	movs	r3, #2
 800a800:	e106      	b.n	800aa10 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f001 fc40 	bl	800c08c <USBH_SelectInterface>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a816:	2302      	movs	r3, #2
 800a818:	e0fa      	b.n	800aa10 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a820:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a824:	f003 fb94 	bl	800df50 <malloc>
 800a828:	4603      	mov	r3, r0
 800a82a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a83c:	2302      	movs	r3, #2
 800a83e:	e0e7      	b.n	800aa10 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a840:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a844:	2100      	movs	r1, #0
 800a846:	68b8      	ldr	r0, [r7, #8]
 800a848:	f003 fba0 	bl	800df8c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	211a      	movs	r1, #26
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	4413      	add	r3, r2
 800a858:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	da16      	bge.n	800a892 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	211a      	movs	r1, #26
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	4413      	add	r3, r2
 800a870:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	211a      	movs	r1, #26
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	4413      	add	r3, r2
 800a886:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a88a:	881a      	ldrh	r2, [r3, #0]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	815a      	strh	r2, [r3, #10]
 800a890:	e015      	b.n	800a8be <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	211a      	movs	r1, #26
 800a898:	fb01 f303 	mul.w	r3, r1, r3
 800a89c:	4413      	add	r3, r2
 800a89e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	211a      	movs	r1, #26
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8b8:	881a      	ldrh	r2, [r3, #0]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	211a      	movs	r1, #26
 800a8c4:	fb01 f303 	mul.w	r3, r1, r3
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	b25b      	sxtb	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da16      	bge.n	800a904 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	211a      	movs	r1, #26
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8e6:	781a      	ldrb	r2, [r3, #0]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	211a      	movs	r1, #26
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a8fc:	881a      	ldrh	r2, [r3, #0]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	815a      	strh	r2, [r3, #10]
 800a902:	e015      	b.n	800a930 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	211a      	movs	r1, #26
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	4413      	add	r3, r2
 800a910:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a914:	781a      	ldrb	r2, [r3, #0]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	211a      	movs	r1, #26
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	4413      	add	r3, r2
 800a926:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2200      	movs	r2, #0
 800a934:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2200      	movs	r2, #0
 800a93a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2200      	movs	r2, #0
 800a940:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	799b      	ldrb	r3, [r3, #6]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f002 fed6 	bl	800d6fa <USBH_AllocPipe>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	79db      	ldrb	r3, [r3, #7]
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f002 fecc 	bl	800d6fa <USBH_AllocPipe>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fdc4 	bl	800b4f8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	799b      	ldrb	r3, [r3, #6]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01e      	beq.n	800a9b6 <USBH_MSC_InterfaceInit+0x1e2>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	891b      	ldrh	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01a      	beq.n	800a9b6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	7959      	ldrb	r1, [r3, #5]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	7998      	ldrb	r0, [r3, #6]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	8912      	ldrh	r2, [r2, #8]
 800a998:	9202      	str	r2, [sp, #8]
 800a99a:	2202      	movs	r2, #2
 800a99c:	9201      	str	r2, [sp, #4]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	4623      	mov	r3, r4
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f002 fe79 	bl	800d69c <USBH_OpenPipe>
 800a9aa:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	79db      	ldrb	r3, [r3, #7]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02c      	beq.n	800aa0e <USBH_MSC_InterfaceInit+0x23a>
 800a9b4:	e001      	b.n	800a9ba <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e02a      	b.n	800aa10 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	895b      	ldrh	r3, [r3, #10]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d025      	beq.n	800aa0e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	7919      	ldrb	r1, [r3, #4]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	79d8      	ldrb	r0, [r3, #7]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	8952      	ldrh	r2, [r2, #10]
 800a9da:	9202      	str	r2, [sp, #8]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	9201      	str	r2, [sp, #4]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f002 fe58 	bl	800d69c <USBH_OpenPipe>
 800a9ec:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	791b      	ldrb	r3, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f003 f9c8 	bl	800dd8c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	795b      	ldrb	r3, [r3, #5]
 800aa00:	2200      	movs	r2, #0
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f003 f9c1 	bl	800dd8c <USBH_LL_SetToggle>

  return USBH_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800aa0e:	2303      	movs	r3, #3
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd90      	pop	{r4, r7, pc}

0800aa18 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	795b      	ldrb	r3, [r3, #5]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00e      	beq.n	800aa50 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	795b      	ldrb	r3, [r3, #5]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f002 fe4e 	bl	800d6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	795b      	ldrb	r3, [r3, #5]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f002 fe79 	bl	800d73c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	791b      	ldrb	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00e      	beq.n	800aa76 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	791b      	ldrb	r3, [r3, #4]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f002 fe3b 	bl	800d6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	791b      	ldrb	r3, [r3, #4]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f002 fe66 	bl	800d73c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f003 fa68 	bl	800df60 <free>
    phost->pActiveClass->pData = 0U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa96:	2200      	movs	r2, #0
 800aa98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aab6:	2301      	movs	r3, #1
 800aab8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	7b9b      	ldrb	r3, [r3, #14]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d041      	beq.n	800ab46 <USBH_MSC_ClassRequest+0xa2>
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	dc4b      	bgt.n	800ab5e <USBH_MSC_ClassRequest+0xba>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <USBH_MSC_ClassRequest+0x2a>
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d147      	bne.n	800ab5e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fcf1 	bl	800b4ba <USBH_MSC_BOT_REQ_GetMaxLUN>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d104      	bne.n	800aaec <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d137      	bne.n	800ab62 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d804      	bhi.n	800ab04 <USBH_MSC_ClassRequest+0x60>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	3301      	adds	r3, #1
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	e000      	b.n	800ab06 <USBH_MSC_ClassRequest+0x62>
 800ab04:	2202      	movs	r2, #2
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73bb      	strb	r3, [r7, #14]
 800ab0e:	e014      	b.n	800ab3a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	2134      	movs	r1, #52	; 0x34
 800ab16:	fb01 f303 	mul.w	r3, r1, r3
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3392      	adds	r3, #146	; 0x92
 800ab1e:	2202      	movs	r2, #2
 800ab20:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	2134      	movs	r1, #52	; 0x34
 800ab28:	fb01 f303 	mul.w	r3, r1, r3
 800ab2c:	4413      	add	r3, r2
 800ab2e:	33c1      	adds	r3, #193	; 0xc1
 800ab30:	2200      	movs	r2, #0
 800ab32:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	3301      	adds	r3, #1
 800ab38:	73bb      	strb	r3, [r7, #14]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	7bba      	ldrb	r2, [r7, #14]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d3e5      	bcc.n	800ab10 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ab44:	e00d      	b.n	800ab62 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f002 f888 	bl	800cc5e <USBH_ClrFeature>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d108      	bne.n	800ab66 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	7bda      	ldrb	r2, [r3, #15]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ab5c:	e003      	b.n	800ab66 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ab5e:	bf00      	nop
 800ab60:	e002      	b.n	800ab68 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab62:	bf00      	nop
 800ab64:	e000      	b.n	800ab68 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab66:	bf00      	nop
  }

  return status;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	7b1b      	ldrb	r3, [r3, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <USBH_MSC_Process+0x2e>
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	f000 8271 	beq.w	800b082 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800aba0:	e272      	b.n	800b088 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	429a      	cmp	r2, r3
 800abb0:	f080 824f 	bcs.w	800b052 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abba:	4619      	mov	r1, r3
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	2334      	movs	r3, #52	; 0x34
 800abc0:	fb01 f303 	mul.w	r3, r1, r3
 800abc4:	4413      	add	r3, r2
 800abc6:	3391      	adds	r3, #145	; 0x91
 800abc8:	2201      	movs	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abd2:	4619      	mov	r1, r3
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	2334      	movs	r3, #52	; 0x34
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	4413      	add	r3, r2
 800abde:	3390      	adds	r3, #144	; 0x90
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	f200 8243 	bhi.w	800b06e <USBH_MSC_Process+0x4fa>
 800abe8:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <USBH_MSC_Process+0x7c>)
 800abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abee:	bf00      	nop
 800abf0:	0800ac15 	.word	0x0800ac15
 800abf4:	0800b06f 	.word	0x0800b06f
 800abf8:	0800acdd 	.word	0x0800acdd
 800abfc:	0800ae61 	.word	0x0800ae61
 800ac00:	0800ac3b 	.word	0x0800ac3b
 800ac04:	0800af2d 	.word	0x0800af2d
 800ac08:	0800b06f 	.word	0x0800b06f
 800ac0c:	0800b06f 	.word	0x0800b06f
 800ac10:	0800b041 	.word	0x0800b041
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	2334      	movs	r3, #52	; 0x34
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	4413      	add	r3, r2
 800ac26:	3390      	adds	r3, #144	; 0x90
 800ac28:	2204      	movs	r2, #4
 800ac2a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ac38:	e222      	b.n	800b080 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac40:	b2d9      	uxtb	r1, r3
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2334      	movs	r3, #52	; 0x34
 800ac4c:	fb02 f303 	mul.w	r3, r2, r3
 800ac50:	3398      	adds	r3, #152	; 0x98
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	4413      	add	r3, r2
 800ac56:	3307      	adds	r3, #7
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 ff6a 	bl	800bb34 <USBH_MSC_SCSI_Inquiry>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac70:	4619      	mov	r1, r3
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	2334      	movs	r3, #52	; 0x34
 800ac76:	fb01 f303 	mul.w	r3, r1, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3390      	adds	r3, #144	; 0x90
 800ac7e:	2202      	movs	r2, #2
 800ac80:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d10c      	bne.n	800aca2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	2334      	movs	r3, #52	; 0x34
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	4413      	add	r3, r2
 800ac9a:	3390      	adds	r3, #144	; 0x90
 800ac9c:	2205      	movs	r2, #5
 800ac9e:	701a      	strb	r2, [r3, #0]
            break;
 800aca0:	e1e7      	b.n	800b072 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	f040 81e4 	bne.w	800b072 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acb0:	4619      	mov	r1, r3
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	2334      	movs	r3, #52	; 0x34
 800acb6:	fb01 f303 	mul.w	r3, r1, r3
 800acba:	4413      	add	r3, r2
 800acbc:	3390      	adds	r3, #144	; 0x90
 800acbe:	2201      	movs	r2, #1
 800acc0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acc8:	4619      	mov	r1, r3
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	2334      	movs	r3, #52	; 0x34
 800acce:	fb01 f303 	mul.w	r3, r1, r3
 800acd2:	4413      	add	r3, r2
 800acd4:	3391      	adds	r3, #145	; 0x91
 800acd6:	2202      	movs	r2, #2
 800acd8:	701a      	strb	r2, [r3, #0]
            break;
 800acda:	e1ca      	b.n	800b072 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fe66 	bl	800b9b8 <USBH_MSC_SCSI_TestUnitReady>
 800acec:	4603      	mov	r3, r0
 800acee:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d149      	bne.n	800ad8a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acfc:	4619      	mov	r1, r3
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	2334      	movs	r3, #52	; 0x34
 800ad02:	fb01 f303 	mul.w	r3, r1, r3
 800ad06:	4413      	add	r3, r2
 800ad08:	3392      	adds	r3, #146	; 0x92
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00c      	beq.n	800ad2a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad16:	4619      	mov	r1, r3
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	2334      	movs	r3, #52	; 0x34
 800ad1c:	fb01 f303 	mul.w	r3, r1, r3
 800ad20:	4413      	add	r3, r2
 800ad22:	33c1      	adds	r3, #193	; 0xc1
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]
 800ad28:	e00b      	b.n	800ad42 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad30:	4619      	mov	r1, r3
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	2334      	movs	r3, #52	; 0x34
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	33c1      	adds	r3, #193	; 0xc1
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad48:	4619      	mov	r1, r3
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	2334      	movs	r3, #52	; 0x34
 800ad4e:	fb01 f303 	mul.w	r3, r1, r3
 800ad52:	4413      	add	r3, r2
 800ad54:	3390      	adds	r3, #144	; 0x90
 800ad56:	2203      	movs	r2, #3
 800ad58:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad60:	4619      	mov	r1, r3
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	2334      	movs	r3, #52	; 0x34
 800ad66:	fb01 f303 	mul.w	r3, r1, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	3391      	adds	r3, #145	; 0x91
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad78:	4619      	mov	r1, r3
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	2334      	movs	r3, #52	; 0x34
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	4413      	add	r3, r2
 800ad84:	3392      	adds	r3, #146	; 0x92
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d14a      	bne.n	800ae26 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad96:	4619      	mov	r1, r3
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	2334      	movs	r3, #52	; 0x34
 800ad9c:	fb01 f303 	mul.w	r3, r1, r3
 800ada0:	4413      	add	r3, r2
 800ada2:	3392      	adds	r3, #146	; 0x92
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d00c      	beq.n	800adc4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adb0:	4619      	mov	r1, r3
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	2334      	movs	r3, #52	; 0x34
 800adb6:	fb01 f303 	mul.w	r3, r1, r3
 800adba:	4413      	add	r3, r2
 800adbc:	33c1      	adds	r3, #193	; 0xc1
 800adbe:	2201      	movs	r2, #1
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e00b      	b.n	800addc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adca:	4619      	mov	r1, r3
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	2334      	movs	r3, #52	; 0x34
 800add0:	fb01 f303 	mul.w	r3, r1, r3
 800add4:	4413      	add	r3, r2
 800add6:	33c1      	adds	r3, #193	; 0xc1
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ade2:	4619      	mov	r1, r3
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	2334      	movs	r3, #52	; 0x34
 800ade8:	fb01 f303 	mul.w	r3, r1, r3
 800adec:	4413      	add	r3, r2
 800adee:	3390      	adds	r3, #144	; 0x90
 800adf0:	2205      	movs	r2, #5
 800adf2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adfa:	4619      	mov	r1, r3
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	2334      	movs	r3, #52	; 0x34
 800ae00:	fb01 f303 	mul.w	r3, r1, r3
 800ae04:	4413      	add	r3, r2
 800ae06:	3391      	adds	r3, #145	; 0x91
 800ae08:	2201      	movs	r2, #1
 800ae0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae12:	4619      	mov	r1, r3
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	2334      	movs	r3, #52	; 0x34
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3392      	adds	r3, #146	; 0x92
 800ae20:	2202      	movs	r2, #2
 800ae22:	701a      	strb	r2, [r3, #0]
            break;
 800ae24:	e127      	b.n	800b076 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	f040 8124 	bne.w	800b076 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae34:	4619      	mov	r1, r3
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	2334      	movs	r3, #52	; 0x34
 800ae3a:	fb01 f303 	mul.w	r3, r1, r3
 800ae3e:	4413      	add	r3, r2
 800ae40:	3390      	adds	r3, #144	; 0x90
 800ae42:	2201      	movs	r2, #1
 800ae44:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	2334      	movs	r3, #52	; 0x34
 800ae52:	fb01 f303 	mul.w	r3, r1, r3
 800ae56:	4413      	add	r3, r2
 800ae58:	3391      	adds	r3, #145	; 0x91
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	701a      	strb	r2, [r3, #0]
            break;
 800ae5e:	e10a      	b.n	800b076 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae66:	b2d9      	uxtb	r1, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae6e:	461a      	mov	r2, r3
 800ae70:	2334      	movs	r3, #52	; 0x34
 800ae72:	fb02 f303 	mul.w	r3, r2, r3
 800ae76:	3390      	adds	r3, #144	; 0x90
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fddc 	bl	800ba3e <USBH_MSC_SCSI_ReadCapacity>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d120      	bne.n	800aed2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae96:	4619      	mov	r1, r3
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	2334      	movs	r3, #52	; 0x34
 800ae9c:	fb01 f303 	mul.w	r3, r1, r3
 800aea0:	4413      	add	r3, r2
 800aea2:	3390      	adds	r3, #144	; 0x90
 800aea4:	2201      	movs	r2, #1
 800aea6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeae:	4619      	mov	r1, r3
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	2334      	movs	r3, #52	; 0x34
 800aeb4:	fb01 f303 	mul.w	r3, r1, r3
 800aeb8:	4413      	add	r3, r2
 800aeba:	3391      	adds	r3, #145	; 0x91
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec6:	3301      	adds	r3, #1
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aed0:	e0d3      	b.n	800b07a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d10c      	bne.n	800aef2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aede:	4619      	mov	r1, r3
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	2334      	movs	r3, #52	; 0x34
 800aee4:	fb01 f303 	mul.w	r3, r1, r3
 800aee8:	4413      	add	r3, r2
 800aeea:	3390      	adds	r3, #144	; 0x90
 800aeec:	2205      	movs	r2, #5
 800aeee:	701a      	strb	r2, [r3, #0]
            break;
 800aef0:	e0c3      	b.n	800b07a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	f040 80c0 	bne.w	800b07a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af00:	4619      	mov	r1, r3
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	2334      	movs	r3, #52	; 0x34
 800af06:	fb01 f303 	mul.w	r3, r1, r3
 800af0a:	4413      	add	r3, r2
 800af0c:	3390      	adds	r3, #144	; 0x90
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af18:	4619      	mov	r1, r3
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	2334      	movs	r3, #52	; 0x34
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	4413      	add	r3, r2
 800af24:	3391      	adds	r3, #145	; 0x91
 800af26:	2202      	movs	r2, #2
 800af28:	701a      	strb	r2, [r3, #0]
            break;
 800af2a:	e0a6      	b.n	800b07a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af32:	b2d9      	uxtb	r1, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af3a:	461a      	mov	r2, r3
 800af3c:	2334      	movs	r3, #52	; 0x34
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	3398      	adds	r3, #152	; 0x98
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4413      	add	r3, r2
 800af48:	3304      	adds	r3, #4
 800af4a:	461a      	mov	r2, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fe96 	bl	800bc7e <USBH_MSC_SCSI_RequestSense>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d145      	bne.n	800afe8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af62:	4619      	mov	r1, r3
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	2334      	movs	r3, #52	; 0x34
 800af68:	fb01 f303 	mul.w	r3, r1, r3
 800af6c:	4413      	add	r3, r2
 800af6e:	339c      	adds	r3, #156	; 0x9c
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b06      	cmp	r3, #6
 800af74:	d00c      	beq.n	800af90 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af7c:	4619      	mov	r1, r3
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	2334      	movs	r3, #52	; 0x34
 800af82:	fb01 f303 	mul.w	r3, r1, r3
 800af86:	4413      	add	r3, r2
 800af88:	339c      	adds	r3, #156	; 0x9c
 800af8a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d117      	bne.n	800afc0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	f242 720f 	movw	r2, #9999	; 0x270f
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d80c      	bhi.n	800afc0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afac:	4619      	mov	r1, r3
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	2334      	movs	r3, #52	; 0x34
 800afb2:	fb01 f303 	mul.w	r3, r1, r3
 800afb6:	4413      	add	r3, r2
 800afb8:	3390      	adds	r3, #144	; 0x90
 800afba:	2202      	movs	r2, #2
 800afbc:	701a      	strb	r2, [r3, #0]
                  break;
 800afbe:	e05f      	b.n	800b080 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afc6:	4619      	mov	r1, r3
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	2334      	movs	r3, #52	; 0x34
 800afcc:	fb01 f303 	mul.w	r3, r1, r3
 800afd0:	4413      	add	r3, r2
 800afd2:	3390      	adds	r3, #144	; 0x90
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afde:	3301      	adds	r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d10c      	bne.n	800b008 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff4:	4619      	mov	r1, r3
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	2334      	movs	r3, #52	; 0x34
 800affa:	fb01 f303 	mul.w	r3, r1, r3
 800affe:	4413      	add	r3, r2
 800b000:	3390      	adds	r3, #144	; 0x90
 800b002:	2208      	movs	r2, #8
 800b004:	701a      	strb	r2, [r3, #0]
            break;
 800b006:	e03a      	b.n	800b07e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	d137      	bne.n	800b07e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b014:	4619      	mov	r1, r3
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	2334      	movs	r3, #52	; 0x34
 800b01a:	fb01 f303 	mul.w	r3, r1, r3
 800b01e:	4413      	add	r3, r2
 800b020:	3390      	adds	r3, #144	; 0x90
 800b022:	2201      	movs	r2, #1
 800b024:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b02c:	4619      	mov	r1, r3
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	2334      	movs	r3, #52	; 0x34
 800b032:	fb01 f303 	mul.w	r3, r1, r3
 800b036:	4413      	add	r3, r2
 800b038:	3391      	adds	r3, #145	; 0x91
 800b03a:	2202      	movs	r2, #2
 800b03c:	701a      	strb	r2, [r3, #0]
            break;
 800b03e:	e01e      	b.n	800b07e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b046:	3301      	adds	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b050:	e016      	b.n	800b080 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2200      	movs	r2, #0
 800b056:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2201      	movs	r2, #1
 800b05e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b066:	2102      	movs	r1, #2
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	4798      	blx	r3
      break;
 800b06c:	e00c      	b.n	800b088 <USBH_MSC_Process+0x514>
            break;
 800b06e:	bf00      	nop
 800b070:	e00a      	b.n	800b088 <USBH_MSC_Process+0x514>
            break;
 800b072:	bf00      	nop
 800b074:	e008      	b.n	800b088 <USBH_MSC_Process+0x514>
            break;
 800b076:	bf00      	nop
 800b078:	e006      	b.n	800b088 <USBH_MSC_Process+0x514>
            break;
 800b07a:	bf00      	nop
 800b07c:	e004      	b.n	800b088 <USBH_MSC_Process+0x514>
            break;
 800b07e:	bf00      	nop
      break;
 800b080:	e002      	b.n	800b088 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
      break;
 800b086:	bf00      	nop
  }
  return error;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3718      	adds	r7, #24
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop

0800b094 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af02      	add	r7, sp, #8
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	2134      	movs	r1, #52	; 0x34
 800b0ce:	fb01 f303 	mul.w	r3, r1, r3
 800b0d2:	4413      	add	r3, r2
 800b0d4:	3390      	adds	r3, #144	; 0x90
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b07      	cmp	r3, #7
 800b0da:	d03c      	beq.n	800b156 <USBH_MSC_RdWrProcess+0xac>
 800b0dc:	2b07      	cmp	r3, #7
 800b0de:	f300 80a7 	bgt.w	800b230 <USBH_MSC_RdWrProcess+0x186>
 800b0e2:	2b05      	cmp	r3, #5
 800b0e4:	d06c      	beq.n	800b1c0 <USBH_MSC_RdWrProcess+0x116>
 800b0e6:	2b06      	cmp	r3, #6
 800b0e8:	f040 80a2 	bne.w	800b230 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b0ec:	78f9      	ldrb	r1, [r7, #3]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fea5 	bl	800be46 <USBH_MSC_SCSI_Read>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b100:	7bfb      	ldrb	r3, [r7, #15]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	2134      	movs	r1, #52	; 0x34
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	4413      	add	r3, r2
 800b112:	3390      	adds	r3, #144	; 0x90
 800b114:	2201      	movs	r2, #1
 800b116:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b11c:	e08a      	b.n	800b234 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d109      	bne.n	800b138 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	2134      	movs	r1, #52	; 0x34
 800b12a:	fb01 f303 	mul.w	r3, r1, r3
 800b12e:	4413      	add	r3, r2
 800b130:	3390      	adds	r3, #144	; 0x90
 800b132:	2205      	movs	r2, #5
 800b134:	701a      	strb	r2, [r3, #0]
      break;
 800b136:	e07d      	b.n	800b234 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d17a      	bne.n	800b234 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	2134      	movs	r1, #52	; 0x34
 800b144:	fb01 f303 	mul.w	r3, r1, r3
 800b148:	4413      	add	r3, r2
 800b14a:	3390      	adds	r3, #144	; 0x90
 800b14c:	2208      	movs	r2, #8
 800b14e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b150:	2302      	movs	r3, #2
 800b152:	75fb      	strb	r3, [r7, #23]
      break;
 800b154:	e06e      	b.n	800b234 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b156:	78f9      	ldrb	r1, [r7, #3]
 800b158:	2300      	movs	r3, #0
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	2300      	movs	r3, #0
 800b15e:	2200      	movs	r2, #0
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fe05 	bl	800bd70 <USBH_MSC_SCSI_Write>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10b      	bne.n	800b188 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	2134      	movs	r1, #52	; 0x34
 800b176:	fb01 f303 	mul.w	r3, r1, r3
 800b17a:	4413      	add	r3, r2
 800b17c:	3390      	adds	r3, #144	; 0x90
 800b17e:	2201      	movs	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b186:	e057      	b.n	800b238 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d109      	bne.n	800b1a2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b18e:	78fb      	ldrb	r3, [r7, #3]
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	2134      	movs	r1, #52	; 0x34
 800b194:	fb01 f303 	mul.w	r3, r1, r3
 800b198:	4413      	add	r3, r2
 800b19a:	3390      	adds	r3, #144	; 0x90
 800b19c:	2205      	movs	r2, #5
 800b19e:	701a      	strb	r2, [r3, #0]
      break;
 800b1a0:	e04a      	b.n	800b238 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d147      	bne.n	800b238 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b1a8:	78fb      	ldrb	r3, [r7, #3]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	2134      	movs	r1, #52	; 0x34
 800b1ae:	fb01 f303 	mul.w	r3, r1, r3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	3390      	adds	r3, #144	; 0x90
 800b1b6:	2208      	movs	r2, #8
 800b1b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b1be:	e03b      	b.n	800b238 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	2234      	movs	r2, #52	; 0x34
 800b1c4:	fb02 f303 	mul.w	r3, r2, r3
 800b1c8:	3398      	adds	r3, #152	; 0x98
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	1d1a      	adds	r2, r3, #4
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fd52 	bl	800bc7e <USBH_MSC_SCSI_RequestSense>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d113      	bne.n	800b20c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b1e4:	78fb      	ldrb	r3, [r7, #3]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	2134      	movs	r1, #52	; 0x34
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	3390      	adds	r3, #144	; 0x90
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	2134      	movs	r1, #52	; 0x34
 800b1fc:	fb01 f303 	mul.w	r3, r1, r3
 800b200:	4413      	add	r3, r2
 800b202:	3391      	adds	r3, #145	; 0x91
 800b204:	2202      	movs	r2, #2
 800b206:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b208:	2302      	movs	r3, #2
 800b20a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d014      	beq.n	800b23c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	2b04      	cmp	r3, #4
 800b216:	d111      	bne.n	800b23c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	2134      	movs	r1, #52	; 0x34
 800b21e:	fb01 f303 	mul.w	r3, r1, r3
 800b222:	4413      	add	r3, r2
 800b224:	3390      	adds	r3, #144	; 0x90
 800b226:	2208      	movs	r2, #8
 800b228:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b22a:	2302      	movs	r3, #2
 800b22c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b22e:	e005      	b.n	800b23c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b230:	bf00      	nop
 800b232:	e004      	b.n	800b23e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b234:	bf00      	nop
 800b236:	e002      	b.n	800b23e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b238:	bf00      	nop
 800b23a:	e000      	b.n	800b23e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b23c:	bf00      	nop

  }
  return error;
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b0b      	cmp	r3, #11
 800b266:	d10c      	bne.n	800b282 <USBH_MSC_UnitIsReady+0x3a>
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	2134      	movs	r1, #52	; 0x34
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	4413      	add	r3, r2
 800b274:	3391      	adds	r3, #145	; 0x91
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d102      	bne.n	800b282 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b27c:	2301      	movs	r3, #1
 800b27e:	73fb      	strb	r3, [r7, #15]
 800b280:	e001      	b.n	800b286 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b286:	7bfb      	ldrb	r3, [r7, #15]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	460b      	mov	r3, r1
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b0b      	cmp	r3, #11
 800b2b4:	d10d      	bne.n	800b2d2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	2234      	movs	r2, #52	; 0x34
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	3390      	adds	r3, #144	; 0x90
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	2234      	movs	r2, #52	; 0x34
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f002 fe51 	bl	800df70 <memcpy>
    return USBH_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e000      	b.n	800b2d4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b2d2:	2302      	movs	r3, #2
  }
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	603b      	str	r3, [r7, #0]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00e      	beq.n	800b320 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b308:	2b0b      	cmp	r3, #11
 800b30a:	d109      	bne.n	800b320 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b30c:	7afb      	ldrb	r3, [r7, #11]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	2134      	movs	r1, #52	; 0x34
 800b312:	fb01 f303 	mul.w	r3, r1, r3
 800b316:	4413      	add	r3, r2
 800b318:	3390      	adds	r3, #144	; 0x90
 800b31a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d001      	beq.n	800b324 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b320:	2302      	movs	r3, #2
 800b322:	e040      	b.n	800b3a6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2206      	movs	r2, #6
 800b328:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	2134      	movs	r1, #52	; 0x34
 800b330:	fb01 f303 	mul.w	r3, r1, r3
 800b334:	4413      	add	r3, r2
 800b336:	3390      	adds	r3, #144	; 0x90
 800b338:	2206      	movs	r2, #6
 800b33a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	b29a      	uxth	r2, r3
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b346:	7af9      	ldrb	r1, [r7, #11]
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fd78 	bl	800be46 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b35c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b35e:	e016      	b.n	800b38e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	1ad2      	subs	r2, r2, r3
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	f242 7110 	movw	r1, #10000	; 0x2710
 800b370:	fb01 f303 	mul.w	r3, r1, r3
 800b374:	429a      	cmp	r2, r3
 800b376:	d805      	bhi.n	800b384 <USBH_MSC_Read+0xa8>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d104      	bne.n	800b38e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2201      	movs	r2, #1
 800b388:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b38a:	2302      	movs	r3, #2
 800b38c:	e00b      	b.n	800b3a6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	4619      	mov	r1, r3
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fe89 	bl	800b0aa <USBH_MSC_RdWrProcess>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d0e0      	beq.n	800b360 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b088      	sub	sp, #32
 800b3b2:	af02      	add	r7, sp, #8
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00e      	beq.n	800b3f2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b3da:	2b0b      	cmp	r3, #11
 800b3dc:	d109      	bne.n	800b3f2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	2134      	movs	r1, #52	; 0x34
 800b3e4:	fb01 f303 	mul.w	r3, r1, r3
 800b3e8:	4413      	add	r3, r2
 800b3ea:	3390      	adds	r3, #144	; 0x90
 800b3ec:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d001      	beq.n	800b3f6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	e040      	b.n	800b478 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2207      	movs	r2, #7
 800b3fa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b3fc:	7afb      	ldrb	r3, [r7, #11]
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	2134      	movs	r1, #52	; 0x34
 800b402:	fb01 f303 	mul.w	r3, r1, r3
 800b406:	4413      	add	r3, r2
 800b408:	3390      	adds	r3, #144	; 0x90
 800b40a:	2207      	movs	r2, #7
 800b40c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	b29a      	uxth	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b418:	7af9      	ldrb	r1, [r7, #11]
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fca4 	bl	800bd70 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b42e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b430:	e016      	b.n	800b460 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	f242 7110 	movw	r1, #10000	; 0x2710
 800b442:	fb01 f303 	mul.w	r3, r1, r3
 800b446:	429a      	cmp	r2, r3
 800b448:	d805      	bhi.n	800b456 <USBH_MSC_Write+0xa8>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d104      	bne.n	800b460 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2201      	movs	r2, #1
 800b45a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b45c:	2302      	movs	r3, #2
 800b45e:	e00b      	b.n	800b478 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b460:	7afb      	ldrb	r3, [r7, #11]
 800b462:	4619      	mov	r1, r3
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fe20 	bl	800b0aa <USBH_MSC_RdWrProcess>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d0e0      	beq.n	800b432 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2201      	movs	r2, #1
 800b474:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2221      	movs	r2, #33	; 0x21
 800b48c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	22ff      	movs	r2, #255	; 0xff
 800b492:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 fea4 	bl	800d1f8 <USBH_CtlReq>
 800b4b0:	4603      	mov	r3, r0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	22a1      	movs	r2, #161	; 0xa1
 800b4c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	22fe      	movs	r2, #254	; 0xfe
 800b4ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 fe86 	bl	800d1f8 <USBH_CtlReq>
 800b4ec:	4603      	mov	r3, r0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	4a09      	ldr	r2, [pc, #36]	; (800b534 <USBH_MSC_BOT_Init+0x3c>)
 800b50e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4a09      	ldr	r2, [pc, #36]	; (800b538 <USBH_MSC_BOT_Init+0x40>)
 800b514:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	43425355 	.word	0x43425355
 800b538:	20304050 	.word	0x20304050

0800b53c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af02      	add	r7, sp, #8
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b548:	2301      	movs	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b54c:	2301      	movs	r3, #1
 800b54e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b550:	2301      	movs	r3, #1
 800b552:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b554:	2300      	movs	r3, #0
 800b556:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b56c:	3b01      	subs	r3, #1
 800b56e:	2b0a      	cmp	r3, #10
 800b570:	f200 819e 	bhi.w	800b8b0 <USBH_MSC_BOT_Process+0x374>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <USBH_MSC_BOT_Process+0x40>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b5a9 	.word	0x0800b5a9
 800b580:	0800b5d1 	.word	0x0800b5d1
 800b584:	0800b63b 	.word	0x0800b63b
 800b588:	0800b659 	.word	0x0800b659
 800b58c:	0800b6dd 	.word	0x0800b6dd
 800b590:	0800b6ff 	.word	0x0800b6ff
 800b594:	0800b797 	.word	0x0800b797
 800b598:	0800b7b3 	.word	0x0800b7b3
 800b59c:	0800b805 	.word	0x0800b805
 800b5a0:	0800b835 	.word	0x0800b835
 800b5a4:	0800b897 	.word	0x0800b897
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	795b      	ldrb	r3, [r3, #5]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	9200      	str	r2, [sp, #0]
 800b5c6:	221f      	movs	r2, #31
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f002 f824 	bl	800d616 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b5ce:	e17e      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	795b      	ldrb	r3, [r3, #5]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f002 fbae 	bl	800dd38 <USBH_LL_GetURBState>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b5e0:	7d3b      	ldrb	r3, [r7, #20]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d118      	bne.n	800b618 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00f      	beq.n	800b60e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b5f4:	b25b      	sxtb	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da04      	bge.n	800b604 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2203      	movs	r2, #3
 800b5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b602:	e157      	b.n	800b8b4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2205      	movs	r2, #5
 800b608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b60c:	e152      	b.n	800b8b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2207      	movs	r2, #7
 800b612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b616:	e14d      	b.n	800b8b4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b618:	7d3b      	ldrb	r3, [r7, #20]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d104      	bne.n	800b628 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b626:	e145      	b.n	800b8b4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b628:	7d3b      	ldrb	r3, [r7, #20]
 800b62a:	2b05      	cmp	r3, #5
 800b62c:	f040 8142 	bne.w	800b8b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	220a      	movs	r2, #10
 800b634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b638:	e13c      	b.n	800b8b4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	895a      	ldrh	r2, [r3, #10]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f002 f809 	bl	800d660 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2204      	movs	r2, #4
 800b652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b656:	e13a      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	791b      	ldrb	r3, [r3, #4]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f002 fb6a 	bl	800dd38 <USBH_LL_GetURBState>
 800b664:	4603      	mov	r3, r0
 800b666:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b668:	7d3b      	ldrb	r3, [r7, #20]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d12d      	bne.n	800b6ca <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	8952      	ldrh	r2, [r2, #10]
 800b676:	4293      	cmp	r3, r2
 800b678:	d910      	bls.n	800b69c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	8952      	ldrh	r2, [r2, #10]
 800b684:	441a      	add	r2, r3
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	8952      	ldrh	r2, [r2, #10]
 800b694:	1a9a      	subs	r2, r3, r2
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	65da      	str	r2, [r3, #92]	; 0x5c
 800b69a:	e002      	b.n	800b6a2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	895a      	ldrh	r2, [r3, #10]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	791b      	ldrb	r3, [r3, #4]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 ffd1 	bl	800d660 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b6be:	e0fb      	b.n	800b8b8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	2207      	movs	r2, #7
 800b6c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b6c8:	e0f6      	b.n	800b8b8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b6ca:	7d3b      	ldrb	r3, [r7, #20]
 800b6cc:	2b05      	cmp	r3, #5
 800b6ce:	f040 80f3 	bne.w	800b8b8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	2209      	movs	r2, #9
 800b6d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b6da:	e0ed      	b.n	800b8b8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	891a      	ldrh	r2, [r3, #8]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	795b      	ldrb	r3, [r3, #5]
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	9000      	str	r0, [sp, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 ff91 	bl	800d616 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2206      	movs	r2, #6
 800b6f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b6fc:	e0e7      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	795b      	ldrb	r3, [r3, #5]
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f002 fb17 	bl	800dd38 <USBH_LL_GetURBState>
 800b70a:	4603      	mov	r3, r0
 800b70c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b70e:	7d3b      	ldrb	r3, [r7, #20]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d12f      	bne.n	800b774 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	8912      	ldrh	r2, [r2, #8]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d910      	bls.n	800b742 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	8912      	ldrh	r2, [r2, #8]
 800b72a:	441a      	add	r2, r3
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	8912      	ldrh	r2, [r2, #8]
 800b73a:	1a9a      	subs	r2, r3, r2
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b740:	e002      	b.n	800b748 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2200      	movs	r2, #0
 800b746:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00c      	beq.n	800b76a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	891a      	ldrh	r2, [r3, #8]
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	795b      	ldrb	r3, [r3, #5]
 800b75e:	2001      	movs	r0, #1
 800b760:	9000      	str	r0, [sp, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f001 ff57 	bl	800d616 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b768:	e0a8      	b.n	800b8bc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2207      	movs	r2, #7
 800b76e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b772:	e0a3      	b.n	800b8bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b774:	7d3b      	ldrb	r3, [r7, #20]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d104      	bne.n	800b784 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	2205      	movs	r2, #5
 800b77e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b782:	e09b      	b.n	800b8bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b784:	7d3b      	ldrb	r3, [r7, #20]
 800b786:	2b05      	cmp	r3, #5
 800b788:	f040 8098 	bne.w	800b8bc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	220a      	movs	r2, #10
 800b790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b794:	e092      	b.n	800b8bc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	791b      	ldrb	r3, [r3, #4]
 800b7a0:	220d      	movs	r2, #13
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 ff5c 	bl	800d660 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	2208      	movs	r2, #8
 800b7ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b7b0:	e08d      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	791b      	ldrb	r3, [r3, #4]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f002 fabd 	bl	800dd38 <USBH_LL_GetURBState>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b7c2:	7d3b      	ldrb	r3, [r7, #20]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d115      	bne.n	800b7f4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f8a9 	bl	800b930 <USBH_MSC_DecodeCSW>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b7e2:	7d7b      	ldrb	r3, [r7, #21]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b7ec:	e068      	b.n	800b8c0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f2:	e065      	b.n	800b8c0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b7f4:	7d3b      	ldrb	r3, [r7, #20]
 800b7f6:	2b05      	cmp	r3, #5
 800b7f8:	d162      	bne.n	800b8c0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2209      	movs	r2, #9
 800b7fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b802:	e05d      	b.n	800b8c0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	2200      	movs	r2, #0
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f864 	bl	800b8d8 <USBH_MSC_BOT_Abort>
 800b810:	4603      	mov	r3, r0
 800b812:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b814:	7dbb      	ldrb	r3, [r7, #22]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d104      	bne.n	800b824 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2207      	movs	r2, #7
 800b81e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b822:	e04f      	b.n	800b8c4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b824:	7dbb      	ldrb	r3, [r7, #22]
 800b826:	2b04      	cmp	r3, #4
 800b828:	d14c      	bne.n	800b8c4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	220b      	movs	r2, #11
 800b82e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b832:	e047      	b.n	800b8c4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	2201      	movs	r2, #1
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f84c 	bl	800b8d8 <USBH_MSC_BOT_Abort>
 800b840:	4603      	mov	r3, r0
 800b842:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b844:	7dbb      	ldrb	r3, [r7, #22]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11d      	bne.n	800b886 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	795b      	ldrb	r3, [r3, #5]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f002 facb 	bl	800ddec <USBH_LL_GetToggle>
 800b856:	4603      	mov	r3, r0
 800b858:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	7959      	ldrb	r1, [r3, #5]
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	f1c3 0301 	rsb	r3, r3, #1
 800b864:	b2db      	uxtb	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f002 fa8f 	bl	800dd8c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	791b      	ldrb	r3, [r3, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f002 fa88 	bl	800dd8c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2209      	movs	r2, #9
 800b880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b884:	e020      	b.n	800b8c8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b886:	7dbb      	ldrb	r3, [r7, #22]
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d11d      	bne.n	800b8c8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	220b      	movs	r2, #11
 800b890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b894:	e018      	b.n	800b8c8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fdf2 	bl	800b480 <USBH_MSC_BOT_REQ_Reset>
 800b89c:	4603      	mov	r3, r0
 800b89e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d112      	bne.n	800b8cc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b8ae:	e00d      	b.n	800b8cc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b8b0:	bf00      	nop
 800b8b2:	e00c      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8b4:	bf00      	nop
 800b8b6:	e00a      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8b8:	bf00      	nop
 800b8ba:	e008      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8bc:	bf00      	nop
 800b8be:	e006      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8c0:	bf00      	nop
 800b8c2:	e004      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8c4:	bf00      	nop
 800b8c6:	e002      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8c8:	bf00      	nop
 800b8ca:	e000      	b.n	800b8ce <USBH_MSC_BOT_Process+0x392>
      break;
 800b8cc:	bf00      	nop
  }
  return status;
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b8f6:	78bb      	ldrb	r3, [r7, #2]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <USBH_MSC_BOT_Abort+0x2a>
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d009      	beq.n	800b914 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b900:	e011      	b.n	800b926 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	79db      	ldrb	r3, [r3, #7]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f9a8 	bl	800cc5e <USBH_ClrFeature>
 800b90e:	4603      	mov	r3, r0
 800b910:	73fb      	strb	r3, [r7, #15]
      break;
 800b912:	e008      	b.n	800b926 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	799b      	ldrb	r3, [r3, #6]
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f001 f99f 	bl	800cc5e <USBH_ClrFeature>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
      break;
 800b924:	bf00      	nop
  }
  return status;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b942:	2301      	movs	r3, #1
 800b944:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	791b      	ldrb	r3, [r3, #4]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f002 f961 	bl	800dc14 <USBH_LL_GetLastXferSize>
 800b952:	4603      	mov	r3, r0
 800b954:	2b0d      	cmp	r3, #13
 800b956:	d002      	beq.n	800b95e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b958:	2302      	movs	r3, #2
 800b95a:	73fb      	strb	r3, [r7, #15]
 800b95c:	e024      	b.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b962:	4a14      	ldr	r2, [pc, #80]	; (800b9b4 <USBH_MSC_DecodeCSW+0x84>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d11d      	bne.n	800b9a4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b970:	429a      	cmp	r2, r3
 800b972:	d119      	bne.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d102      	bne.n	800b984 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b97e:	2300      	movs	r3, #0
 800b980:	73fb      	strb	r3, [r7, #15]
 800b982:	e011      	b.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d102      	bne.n	800b994 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b98e:	2301      	movs	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]
 800b992:	e009      	b.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d104      	bne.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b99e:	2302      	movs	r3, #2
 800b9a0:	73fb      	strb	r3, [r7, #15]
 800b9a2:	e001      	b.n	800b9a8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	53425355 	.word	0x53425355

0800b9b8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ce:	69db      	ldr	r3, [r3, #28]
 800b9d0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d002      	beq.n	800b9e2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d021      	beq.n	800ba24 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b9e0:	e028      	b.n	800ba34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	220a      	movs	r2, #10
 800b9f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	3363      	adds	r3, #99	; 0x63
 800b9fc:	2210      	movs	r2, #16
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f002 fac3 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	73fb      	strb	r3, [r7, #15]
      break;
 800ba22:	e007      	b.n	800ba34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fd87 	bl	800b53c <USBH_MSC_BOT_Process>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
      break;
 800ba32:	bf00      	nop
  }

  return error;
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b086      	sub	sp, #24
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	460b      	mov	r3, r1
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d002      	beq.n	800ba6a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d027      	beq.n	800bab8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ba68:	e05f      	b.n	800bb2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2208      	movs	r2, #8
 800ba6e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	2280      	movs	r2, #128	; 0x80
 800ba74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	3363      	adds	r3, #99	; 0x63
 800ba84:	2210      	movs	r2, #16
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f002 fa7f 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2225      	movs	r2, #37	; 0x25
 800ba92:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f103 0210 	add.w	r2, r3, #16
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bab2:	2301      	movs	r3, #1
 800bab4:	75fb      	strb	r3, [r7, #23]
      break;
 800bab6:	e038      	b.n	800bb2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bab8:	7afb      	ldrb	r3, [r7, #11]
 800baba:	4619      	mov	r1, r3
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff fd3d 	bl	800b53c <USBH_MSC_BOT_Process>
 800bac2:	4603      	mov	r3, r0
 800bac4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d12d      	bne.n	800bb28 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bad2:	3303      	adds	r3, #3
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bade:	3302      	adds	r3, #2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baec:	3301      	adds	r3, #1
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800baf2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	061b      	lsls	r3, r3, #24
 800bafe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb0a:	3307      	adds	r3, #7
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb16:	3306      	adds	r3, #6
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	809a      	strh	r2, [r3, #4]
      break;
 800bb28:	bf00      	nop
  }

  return error;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bb42:	2302      	movs	r3, #2
 800bb44:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d002      	beq.n	800bb60 <USBH_MSC_SCSI_Inquiry+0x2c>
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d03d      	beq.n	800bbda <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bb5e:	e089      	b.n	800bc74 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2224      	movs	r2, #36	; 0x24
 800bb64:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2280      	movs	r2, #128	; 0x80
 800bb6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	220a      	movs	r2, #10
 800bb72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3363      	adds	r3, #99	; 0x63
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f002 fa04 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2212      	movs	r2, #18
 800bb88:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	015b      	lsls	r3, r3, #5
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2224      	movs	r2, #36	; 0x24
 800bbac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f103 0210 	add.w	r2, r3, #16
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbd8:	e04c      	b.n	800bc74 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bbda:	7afb      	ldrb	r3, [r7, #11]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f7ff fcac 	bl	800b53c <USBH_MSC_BOT_Process>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d141      	bne.n	800bc72 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bbee:	2222      	movs	r2, #34	; 0x22
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f002 f9ca 	bl	800df8c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 031f 	and.w	r3, r3, #31
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	095b      	lsrs	r3, r3, #5
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc20:	3301      	adds	r3, #1
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	da03      	bge.n	800bc32 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	709a      	strb	r2, [r3, #2]
 800bc30:	e002      	b.n	800bc38 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	1cd8      	adds	r0, r3, #3
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc42:	3308      	adds	r3, #8
 800bc44:	2208      	movs	r2, #8
 800bc46:	4619      	mov	r1, r3
 800bc48:	f002 f992 	bl	800df70 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f103 000c 	add.w	r0, r3, #12
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc58:	3310      	adds	r3, #16
 800bc5a:	2210      	movs	r2, #16
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f002 f987 	bl	800df70 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	331d      	adds	r3, #29
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bc6c:	3220      	adds	r2, #32
 800bc6e:	6812      	ldr	r2, [r2, #0]
 800bc70:	601a      	str	r2, [r3, #0]
      break;
 800bc72:	bf00      	nop
  }

  return error;
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b086      	sub	sp, #24
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	460b      	mov	r3, r1
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d002      	beq.n	800bcaa <USBH_MSC_SCSI_RequestSense+0x2c>
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d03d      	beq.n	800bd24 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bca8:	e05d      	b.n	800bd66 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	220e      	movs	r2, #14
 800bcae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	2280      	movs	r2, #128	; 0x80
 800bcb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	220a      	movs	r2, #10
 800bcbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	3363      	adds	r3, #99	; 0x63
 800bcc4:	2210      	movs	r2, #16
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f002 f95f 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2203      	movs	r2, #3
 800bcd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bcd6:	7afb      	ldrb	r3, [r7, #11]
 800bcd8:	015b      	lsls	r3, r3, #5
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	220e      	movs	r2, #14
 800bcf6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f103 0210 	add.w	r2, r3, #16
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	75fb      	strb	r3, [r7, #23]
      break;
 800bd22:	e020      	b.n	800bd66 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd24:	7afb      	ldrb	r3, [r7, #11]
 800bd26:	4619      	mov	r1, r3
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff fc07 	bl	800b53c <USBH_MSC_BOT_Process>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d115      	bne.n	800bd64 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd3e:	3302      	adds	r3, #2
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd52:	7b1a      	ldrb	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd5e:	7b5a      	ldrb	r2, [r3, #13]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	709a      	strb	r2, [r3, #2]
      break;
 800bd64:	bf00      	nop
  }

  return error;
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	607a      	str	r2, [r7, #4]
 800bd7a:	603b      	str	r3, [r7, #0]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bd80:	2302      	movs	r3, #2
 800bd82:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d002      	beq.n	800bd9e <USBH_MSC_SCSI_Write+0x2e>
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d047      	beq.n	800be2c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bd9c:	e04e      	b.n	800be3c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800bda4:	461a      	mov	r2, r3
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	fb03 f202 	mul.w	r2, r3, r2
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	220a      	movs	r2, #10
 800bdbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	3363      	adds	r3, #99	; 0x63
 800bdc4:	2210      	movs	r2, #16
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f002 f8df 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	222a      	movs	r2, #42	; 0x2a
 800bdd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800bdd6:	79fa      	ldrb	r2, [r7, #7]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800bdde:	79ba      	ldrb	r2, [r7, #6]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800bde6:	797a      	ldrb	r2, [r7, #5]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800bdee:	1d3b      	adds	r3, r7, #4
 800bdf0:	781a      	ldrb	r2, [r3, #0]
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800bdf8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800be02:	f107 0320 	add.w	r3, r7, #32
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2202      	movs	r2, #2
 800be1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800be26:	2301      	movs	r3, #1
 800be28:	75fb      	strb	r3, [r7, #23]
      break;
 800be2a:	e007      	b.n	800be3c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	4619      	mov	r1, r3
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff fb83 	bl	800b53c <USBH_MSC_BOT_Process>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]
      break;
 800be3a:	bf00      	nop
  }

  return error;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b086      	sub	sp, #24
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
 800be52:	460b      	mov	r3, r1
 800be54:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800be56:	2302      	movs	r3, #2
 800be58:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d002      	beq.n	800be74 <USBH_MSC_SCSI_Read+0x2e>
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d047      	beq.n	800bf02 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800be72:	e04e      	b.n	800bf12 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800be7a:	461a      	mov	r2, r3
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	fb03 f202 	mul.w	r2, r3, r2
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2280      	movs	r2, #128	; 0x80
 800be8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	220a      	movs	r2, #10
 800be92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	3363      	adds	r3, #99	; 0x63
 800be9a:	2210      	movs	r2, #16
 800be9c:	2100      	movs	r1, #0
 800be9e:	4618      	mov	r0, r3
 800bea0:	f002 f874 	bl	800df8c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2228      	movs	r2, #40	; 0x28
 800bea8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800beac:	79fa      	ldrb	r2, [r7, #7]
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800beb4:	79ba      	ldrb	r2, [r7, #6]
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800bebc:	797a      	ldrb	r2, [r7, #5]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800bec4:	1d3b      	adds	r3, r7, #4
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800bece:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bed8:	f107 0320 	add.w	r3, r7, #32
 800bedc:	781a      	ldrb	r2, [r3, #0]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	2202      	movs	r2, #2
 800bef0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800befc:	2301      	movs	r3, #1
 800befe:	75fb      	strb	r3, [r7, #23]
      break;
 800bf00:	e007      	b.n	800bf12 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	4619      	mov	r1, r3
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7ff fb18 	bl	800b53c <USBH_MSC_BOT_Process>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf10:	bf00      	nop
  }

  return error;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bf30:	2302      	movs	r3, #2
 800bf32:	e029      	b.n	800bf88 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	79fa      	ldrb	r2, [r7, #7]
 800bf38:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f81f 	bl	800bf90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f001 fd89 	bl	800da98 <USBH_LL_Init>

  return USBH_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e009      	b.n	800bfb6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	33e0      	adds	r3, #224	; 0xe0
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	2200      	movs	r2, #0
 800bfae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b0f      	cmp	r3, #15
 800bfba:	d9f2      	bls.n	800bfa2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e009      	b.n	800bfd6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bfcc:	2200      	movs	r2, #0
 800bfce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfdc:	d3f1      	bcc.n	800bfc2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2240      	movs	r2, #64	; 0x40
 800c002:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d016      	beq.n	800c07a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10e      	bne.n	800c074 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c05c:	1c59      	adds	r1, r3, #1
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	33de      	adds	r3, #222	; 0xde
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
 800c072:	e004      	b.n	800c07e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c074:	2302      	movs	r3, #2
 800c076:	73fb      	strb	r3, [r7, #15]
 800c078:	e001      	b.n	800c07e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c07a:	2302      	movs	r3, #2
 800c07c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c0a2:	78fa      	ldrb	r2, [r7, #3]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d204      	bcs.n	800c0b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c0b0:	e001      	b.n	800c0b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b087      	sub	sp, #28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	70fb      	strb	r3, [r7, #3]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70bb      	strb	r3, [r7, #2]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c0ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0ee:	e025      	b.n	800c13c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
 800c0f2:	221a      	movs	r2, #26
 800c0f4:	fb02 f303 	mul.w	r3, r2, r3
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	3302      	adds	r3, #2
 800c100:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	795b      	ldrb	r3, [r3, #5]
 800c106:	78fa      	ldrb	r2, [r7, #3]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d002      	beq.n	800c112 <USBH_FindInterface+0x4e>
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	2bff      	cmp	r3, #255	; 0xff
 800c110:	d111      	bne.n	800c136 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c116:	78ba      	ldrb	r2, [r7, #2]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d002      	beq.n	800c122 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c11c:	78bb      	ldrb	r3, [r7, #2]
 800c11e:	2bff      	cmp	r3, #255	; 0xff
 800c120:	d109      	bne.n	800c136 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c126:	787a      	ldrb	r2, [r7, #1]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d002      	beq.n	800c132 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c12c:	787b      	ldrb	r3, [r7, #1]
 800c12e:	2bff      	cmp	r3, #255	; 0xff
 800c130:	d101      	bne.n	800c136 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	e006      	b.n	800c144 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
 800c138:	3301      	adds	r3, #1
 800c13a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d9d6      	bls.n	800c0f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c142:	23ff      	movs	r3, #255	; 0xff
}
 800c144:	4618      	mov	r0, r3
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 fce3 	bl	800db24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c15e:	2101      	movs	r1, #1
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fdfc 	bl	800dd5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af04      	add	r7, sp, #16
 800c176:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c178:	2302      	movs	r3, #2
 800c17a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d102      	bne.n	800c192 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2203      	movs	r2, #3
 800c190:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b0b      	cmp	r3, #11
 800c19a:	f200 81be 	bhi.w	800c51a <USBH_Process+0x3aa>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <USBH_Process+0x34>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1d5 	.word	0x0800c1d5
 800c1a8:	0800c207 	.word	0x0800c207
 800c1ac:	0800c26f 	.word	0x0800c26f
 800c1b0:	0800c4b5 	.word	0x0800c4b5
 800c1b4:	0800c51b 	.word	0x0800c51b
 800c1b8:	0800c313 	.word	0x0800c313
 800c1bc:	0800c45b 	.word	0x0800c45b
 800c1c0:	0800c349 	.word	0x0800c349
 800c1c4:	0800c369 	.word	0x0800c369
 800c1c8:	0800c389 	.word	0x0800c389
 800c1cc:	0800c3cd 	.word	0x0800c3cd
 800c1d0:	0800c49d 	.word	0x0800c49d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 819e 	beq.w	800c51e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c1e8:	20c8      	movs	r0, #200	; 0xc8
 800c1ea:	f001 fe2f 	bl	800de4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fcf5 	bl	800dbde <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c204:	e18b      	b.n	800c51e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d107      	bne.n	800c220 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c21e:	e18d      	b.n	800c53c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c22a:	d914      	bls.n	800c256 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c232:	3301      	adds	r3, #1
 800c234:	b2da      	uxtb	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c242:	2b03      	cmp	r3, #3
 800c244:	d903      	bls.n	800c24e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	220d      	movs	r2, #13
 800c24a:	701a      	strb	r2, [r3, #0]
      break;
 800c24c:	e176      	b.n	800c53c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	701a      	strb	r2, [r3, #0]
      break;
 800c254:	e172      	b.n	800c53c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c25c:	f103 020a 	add.w	r2, r3, #10
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c266:	200a      	movs	r0, #10
 800c268:	f001 fdf0 	bl	800de4c <USBH_Delay>
      break;
 800c26c:	e166      	b.n	800c53c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c27e:	2104      	movs	r1, #4
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c284:	2064      	movs	r0, #100	; 0x64
 800c286:	f001 fde1 	bl	800de4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 fc80 	bl	800db90 <USBH_LL_GetSpeed>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2205      	movs	r2, #5
 800c29e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 fa29 	bl	800d6fa <USBH_AllocPipe>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c2b0:	2180      	movs	r1, #128	; 0x80
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 fa21 	bl	800d6fa <USBH_AllocPipe>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7919      	ldrb	r1, [r3, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	9202      	str	r2, [sp, #8]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	9201      	str	r2, [sp, #4]
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2280      	movs	r2, #128	; 0x80
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 f9da 	bl	800d69c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7959      	ldrb	r1, [r3, #5]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2fc:	b292      	uxth	r2, r2
 800c2fe:	9202      	str	r2, [sp, #8]
 800c300:	2200      	movs	r2, #0
 800c302:	9201      	str	r2, [sp, #4]
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	4603      	mov	r3, r0
 800c308:	2200      	movs	r2, #0
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f001 f9c6 	bl	800d69c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c310:	e114      	b.n	800c53c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f918 	bl	800c548 <USBH_HandleEnum>
 800c318:	4603      	mov	r3, r0
 800c31a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b00      	cmp	r3, #0
 800c322:	f040 80fe 	bne.w	800c522 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c334:	2b01      	cmp	r3, #1
 800c336:	d103      	bne.n	800c340 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2208      	movs	r2, #8
 800c33c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c33e:	e0f0      	b.n	800c522 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2207      	movs	r2, #7
 800c344:	701a      	strb	r2, [r3, #0]
      break;
 800c346:	e0ec      	b.n	800c522 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 80e9 	beq.w	800c526 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c35a:	2101      	movs	r1, #1
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2208      	movs	r2, #8
 800c364:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c366:	e0de      	b.n	800c526 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c36e:	b29b      	uxth	r3, r3
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fc2c 	bl	800cbd0 <USBH_SetCfg>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f040 80d5 	bne.w	800c52a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2209      	movs	r2, #9
 800c384:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c386:	e0d0      	b.n	800c52a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c38e:	f003 0320 	and.w	r3, r3, #32
 800c392:	2b00      	cmp	r3, #0
 800c394:	d016      	beq.n	800c3c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c396:	2101      	movs	r1, #1
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fc3c 	bl	800cc16 <USBH_SetFeature>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d103      	bne.n	800c3b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	220a      	movs	r2, #10
 800c3ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3b0:	e0bd      	b.n	800c52e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	f040 80b9 	bne.w	800c52e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	220a      	movs	r2, #10
 800c3c0:	701a      	strb	r2, [r3, #0]
      break;
 800c3c2:	e0b4      	b.n	800c52e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	220a      	movs	r2, #10
 800c3c8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ca:	e0b0      	b.n	800c52e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 80ad 	beq.w	800c532 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]
 800c3e4:	e016      	b.n	800c414 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c3e6:	7bfa      	ldrb	r2, [r7, #15]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	32de      	adds	r2, #222	; 0xde
 800c3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f0:	791a      	ldrb	r2, [r3, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d108      	bne.n	800c40e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c3fc:	7bfa      	ldrb	r2, [r7, #15]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	32de      	adds	r2, #222	; 0xde
 800c402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c40c:	e005      	b.n	800c41a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	3301      	adds	r3, #1
 800c412:	73fb      	strb	r3, [r7, #15]
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d0e5      	beq.n	800c3e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d016      	beq.n	800c452 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	4798      	blx	r3
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2206      	movs	r2, #6
 800c43a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c442:	2103      	movs	r1, #3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c448:	e073      	b.n	800c532 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	220d      	movs	r2, #13
 800c44e:	701a      	strb	r2, [r3, #0]
      break;
 800c450:	e06f      	b.n	800c532 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	220d      	movs	r2, #13
 800c456:	701a      	strb	r2, [r3, #0]
      break;
 800c458:	e06b      	b.n	800c532 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c460:	2b00      	cmp	r3, #0
 800c462:	d017      	beq.n	800c494 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	4798      	blx	r3
 800c470:	4603      	mov	r3, r0
 800c472:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	220b      	movs	r2, #11
 800c480:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c482:	e058      	b.n	800c536 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d154      	bne.n	800c536 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	220d      	movs	r2, #13
 800c490:	701a      	strb	r2, [r3, #0]
      break;
 800c492:	e050      	b.n	800c536 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	220d      	movs	r2, #13
 800c498:	701a      	strb	r2, [r3, #0]
      break;
 800c49a:	e04c      	b.n	800c536 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d049      	beq.n	800c53a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4ac:	695b      	ldr	r3, [r3, #20]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
      }
      break;
 800c4b2:	e042      	b.n	800c53a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff fd67 	bl	800bf90 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d009      	beq.n	800c4e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4f0:	2105      	movs	r1, #5
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d107      	bne.n	800c512 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fe20 	bl	800c150 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c510:	e014      	b.n	800c53c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 fb06 	bl	800db24 <USBH_LL_Start>
      break;
 800c518:	e010      	b.n	800c53c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c51a:	bf00      	nop
 800c51c:	e00e      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c51e:	bf00      	nop
 800c520:	e00c      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c522:	bf00      	nop
 800c524:	e00a      	b.n	800c53c <USBH_Process+0x3cc>
    break;
 800c526:	bf00      	nop
 800c528:	e008      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c52a:	bf00      	nop
 800c52c:	e006      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c52e:	bf00      	nop
 800c530:	e004      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c532:	bf00      	nop
 800c534:	e002      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c536:	bf00      	nop
 800c538:	e000      	b.n	800c53c <USBH_Process+0x3cc>
      break;
 800c53a:	bf00      	nop
  }
  return USBH_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop

0800c548 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af04      	add	r7, sp, #16
 800c54e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c550:	2301      	movs	r3, #1
 800c552:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c554:	2301      	movs	r3, #1
 800c556:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	785b      	ldrb	r3, [r3, #1]
 800c55c:	2b07      	cmp	r3, #7
 800c55e:	f200 81c1 	bhi.w	800c8e4 <USBH_HandleEnum+0x39c>
 800c562:	a201      	add	r2, pc, #4	; (adr r2, 800c568 <USBH_HandleEnum+0x20>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c647 	.word	0x0800c647
 800c570:	0800c6b1 	.word	0x0800c6b1
 800c574:	0800c73f 	.word	0x0800c73f
 800c578:	0800c7a9 	.word	0x0800c7a9
 800c57c:	0800c819 	.word	0x0800c819
 800c580:	0800c85f 	.word	0x0800c85f
 800c584:	0800c8a5 	.word	0x0800c8a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c588:	2108      	movs	r1, #8
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fa50 	bl	800ca30 <USBH_Get_DevDesc>
 800c590:	4603      	mov	r3, r0
 800c592:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c594:	7bbb      	ldrb	r3, [r7, #14]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d130      	bne.n	800c5fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	7919      	ldrb	r1, [r3, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c5be:	b292      	uxth	r2, r2
 800c5c0:	9202      	str	r2, [sp, #8]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	9201      	str	r2, [sp, #4]
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2280      	movs	r2, #128	; 0x80
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f001 f865 	bl	800d69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	7959      	ldrb	r1, [r3, #5]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5e6:	b292      	uxth	r2, r2
 800c5e8:	9202      	str	r2, [sp, #8]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	9201      	str	r2, [sp, #4]
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 f851 	bl	800d69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c5fa:	e175      	b.n	800c8e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	f040 8172 	bne.w	800c8e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c60a:	3301      	adds	r3, #1
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d903      	bls.n	800c626 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	220d      	movs	r2, #13
 800c622:	701a      	strb	r2, [r3, #0]
      break;
 800c624:	e160      	b.n	800c8e8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	795b      	ldrb	r3, [r3, #5]
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f001 f885 	bl	800d73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	791b      	ldrb	r3, [r3, #4]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 f87f 	bl	800d73c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
      break;
 800c644:	e150      	b.n	800c8e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c646:	2112      	movs	r1, #18
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f9f1 	bl	800ca30 <USBH_Get_DevDesc>
 800c64e:	4603      	mov	r3, r0
 800c650:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c652:	7bbb      	ldrb	r3, [r7, #14]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d103      	bne.n	800c660 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c65e:	e145      	b.n	800c8ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	2b03      	cmp	r3, #3
 800c664:	f040 8142 	bne.w	800c8ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c66e:	3301      	adds	r3, #1
 800c670:	b2da      	uxtb	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d903      	bls.n	800c68a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	220d      	movs	r2, #13
 800c686:	701a      	strb	r2, [r3, #0]
      break;
 800c688:	e130      	b.n	800c8ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	795b      	ldrb	r3, [r3, #5]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 f853 	bl	800d73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	791b      	ldrb	r3, [r3, #4]
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f001 f84d 	bl	800d73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
      break;
 800c6ae:	e11d      	b.n	800c8ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fa68 	bl	800cb88 <USBH_SetAddress>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d132      	bne.n	800c728 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c6c2:	2002      	movs	r0, #2
 800c6c4:	f001 fbc2 	bl	800de4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7919      	ldrb	r1, [r3, #4]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6ea:	b292      	uxth	r2, r2
 800c6ec:	9202      	str	r2, [sp, #8]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	9201      	str	r2, [sp, #4]
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2280      	movs	r2, #128	; 0x80
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 ffcf 	bl	800d69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	7959      	ldrb	r1, [r3, #5]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c712:	b292      	uxth	r2, r2
 800c714:	9202      	str	r2, [sp, #8]
 800c716:	2200      	movs	r2, #0
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4603      	mov	r3, r0
 800c71e:	2200      	movs	r2, #0
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 ffbb 	bl	800d69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c726:	e0e3      	b.n	800c8f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	f040 80e0 	bne.w	800c8f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	220d      	movs	r2, #13
 800c734:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	705a      	strb	r2, [r3, #1]
      break;
 800c73c:	e0d8      	b.n	800c8f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c73e:	2109      	movs	r1, #9
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f99d 	bl	800ca80 <USBH_Get_CfgDesc>
 800c746:	4603      	mov	r3, r0
 800c748:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d103      	bne.n	800c758 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2204      	movs	r2, #4
 800c754:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c756:	e0cd      	b.n	800c8f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	f040 80ca 	bne.w	800c8f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c766:	3301      	adds	r3, #1
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c776:	2b03      	cmp	r3, #3
 800c778:	d903      	bls.n	800c782 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	220d      	movs	r2, #13
 800c77e:	701a      	strb	r2, [r3, #0]
      break;
 800c780:	e0b8      	b.n	800c8f4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	795b      	ldrb	r3, [r3, #5]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 ffd7 	bl	800d73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	791b      	ldrb	r3, [r3, #4]
 800c792:	4619      	mov	r1, r3
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 ffd1 	bl	800d73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
      break;
 800c7a6:	e0a5      	b.n	800c8f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f965 	bl	800ca80 <USBH_Get_CfgDesc>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2205      	movs	r2, #5
 800c7c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7c6:	e097      	b.n	800c8f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	f040 8094 	bne.w	800c8f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d903      	bls.n	800c7f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	220d      	movs	r2, #13
 800c7ee:	701a      	strb	r2, [r3, #0]
      break;
 800c7f0:	e082      	b.n	800c8f8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	795b      	ldrb	r3, [r3, #5]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 ff9f 	bl	800d73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	791b      	ldrb	r3, [r3, #4]
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 ff99 	bl	800d73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
      break;
 800c816:	e06f      	b.n	800c8f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d019      	beq.n	800c856 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c82e:	23ff      	movs	r3, #255	; 0xff
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f949 	bl	800cac8 <USBH_Get_StringDesc>
 800c836:	4603      	mov	r3, r0
 800c838:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d103      	bne.n	800c848 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2206      	movs	r2, #6
 800c844:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c846:	e059      	b.n	800c8fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c848:	7bbb      	ldrb	r3, [r7, #14]
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d156      	bne.n	800c8fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2206      	movs	r2, #6
 800c852:	705a      	strb	r2, [r3, #1]
      break;
 800c854:	e052      	b.n	800c8fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2206      	movs	r2, #6
 800c85a:	705a      	strb	r2, [r3, #1]
      break;
 800c85c:	e04e      	b.n	800c8fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c864:	2b00      	cmp	r3, #0
 800c866:	d019      	beq.n	800c89c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c874:	23ff      	movs	r3, #255	; 0xff
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f926 	bl	800cac8 <USBH_Get_StringDesc>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c880:	7bbb      	ldrb	r3, [r7, #14]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2207      	movs	r2, #7
 800c88a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c88c:	e038      	b.n	800c900 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
 800c890:	2b03      	cmp	r3, #3
 800c892:	d135      	bne.n	800c900 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2207      	movs	r2, #7
 800c898:	705a      	strb	r2, [r3, #1]
      break;
 800c89a:	e031      	b.n	800c900 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2207      	movs	r2, #7
 800c8a0:	705a      	strb	r2, [r3, #1]
      break;
 800c8a2:	e02d      	b.n	800c900 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d017      	beq.n	800c8de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c8ba:	23ff      	movs	r3, #255	; 0xff
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f903 	bl	800cac8 <USBH_Get_StringDesc>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8c6:	7bbb      	ldrb	r3, [r7, #14]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d102      	bne.n	800c8d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c8d0:	e018      	b.n	800c904 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d115      	bne.n	800c904 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73fb      	strb	r3, [r7, #15]
      break;
 800c8dc:	e012      	b.n	800c904 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e2:	e00f      	b.n	800c904 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c8e4:	bf00      	nop
 800c8e6:	e00e      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8e8:	bf00      	nop
 800c8ea:	e00c      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8ec:	bf00      	nop
 800c8ee:	e00a      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8f0:	bf00      	nop
 800c8f2:	e008      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8f4:	bf00      	nop
 800c8f6:	e006      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8f8:	bf00      	nop
 800c8fa:	e004      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c8fc:	bf00      	nop
 800c8fe:	e002      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c900:	bf00      	nop
 800c902:	e000      	b.n	800c906 <USBH_HandleEnum+0x3be>
      break;
 800c904:	bf00      	nop
  }
  return Status;
 800c906:	7bfb      	ldrb	r3, [r7, #15]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c922:	bf00      	nop
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f804 	bl	800c952 <USBH_HandleSof>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b0b      	cmp	r3, #11
 800c962:	d10a      	bne.n	800c97a <USBH_HandleSof+0x28>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d005      	beq.n	800c97a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	4798      	blx	r3
  }
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c992:	bf00      	nop
}
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c9ae:	bf00      	nop
}
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 f8a6 	bl	800db5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fe91 	bl	800d73c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	795b      	ldrb	r3, [r3, #5]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fe8b 	bl	800d73c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca4e:	2100      	movs	r1, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f864 	bl	800cb1e <USBH_GetDescriptor>
 800ca56:	4603      	mov	r3, r0
 800ca58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca6c:	78fa      	ldrb	r2, [r7, #3]
 800ca6e:	b292      	uxth	r2, r2
 800ca70:	4619      	mov	r1, r3
 800ca72:	f000 f918 	bl	800cca6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	331c      	adds	r3, #28
 800ca90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ca92:	887b      	ldrh	r3, [r7, #2]
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f83d 	bl	800cb1e <USBH_GetDescriptor>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d107      	bne.n	800cabe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800caae:	887b      	ldrh	r3, [r7, #2]
 800cab0:	461a      	mov	r2, r3
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f987 	bl	800cdc8 <USBH_ParseCfgDesc>
 800caba:	4603      	mov	r3, r0
 800cabc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af02      	add	r7, sp, #8
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	607a      	str	r2, [r7, #4]
 800cad2:	461a      	mov	r2, r3
 800cad4:	460b      	mov	r3, r1
 800cad6:	72fb      	strb	r3, [r7, #11]
 800cad8:	4613      	mov	r3, r2
 800cada:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cae4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800caec:	893b      	ldrh	r3, [r7, #8]
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	460b      	mov	r3, r1
 800caf2:	2100      	movs	r1, #0
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 f812 	bl	800cb1e <USBH_GetDescriptor>
 800cafa:	4603      	mov	r3, r0
 800cafc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d107      	bne.n	800cb14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb0a:	893a      	ldrh	r2, [r7, #8]
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 fb24 	bl	800d15c <USBH_ParseStringDesc>
  }

  return status;
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	72fb      	strb	r3, [r7, #11]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	789b      	ldrb	r3, [r3, #2]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d11c      	bne.n	800cb72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cb38:	7afb      	ldrb	r3, [r7, #11]
 800cb3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2206      	movs	r2, #6
 800cb48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	893a      	ldrh	r2, [r7, #8]
 800cb4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cb50:	893b      	ldrh	r3, [r7, #8]
 800cb52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb5a:	d104      	bne.n	800cb66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f240 4209 	movw	r2, #1033	; 0x409
 800cb62:	829a      	strh	r2, [r3, #20]
 800cb64:	e002      	b.n	800cb6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	8b3a      	ldrh	r2, [r7, #24]
 800cb70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cb72:	8b3b      	ldrh	r3, [r7, #24]
 800cb74:	461a      	mov	r2, r3
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 fb3d 	bl	800d1f8 <USBH_CtlReq>
 800cb7e:	4603      	mov	r3, r0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d10f      	bne.n	800cbbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2205      	movs	r2, #5
 800cba6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cba8:	78fb      	ldrb	r3, [r7, #3]
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fb19 	bl	800d1f8 <USBH_CtlReq>
 800cbc6:	4603      	mov	r3, r0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	789b      	ldrb	r3, [r3, #2]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d10e      	bne.n	800cc02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2209      	movs	r2, #9
 800cbee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	887a      	ldrh	r2, [r7, #2]
 800cbf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc02:	2200      	movs	r2, #0
 800cc04:	2100      	movs	r1, #0
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 faf6 	bl	800d1f8 <USBH_CtlReq>
 800cc0c:	4603      	mov	r3, r0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	789b      	ldrb	r3, [r3, #2]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d10f      	bne.n	800cc4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2203      	movs	r2, #3
 800cc34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cc36:	78fb      	ldrb	r3, [r7, #3]
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fad2 	bl	800d1f8 <USBH_CtlReq>
 800cc54:	4603      	mov	r3, r0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	460b      	mov	r3, r1
 800cc68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	789b      	ldrb	r3, [r3, #2]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d10f      	bne.n	800cc92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2202      	movs	r2, #2
 800cc76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800cc92:	2200      	movs	r2, #0
 800cc94:	2100      	movs	r1, #0
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 faae 	bl	800d1f8 <USBH_CtlReq>
 800cc9c:	4603      	mov	r3, r0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	781a      	ldrb	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	785a      	ldrb	r2, [r3, #1]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	3302      	adds	r3, #2
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	3303      	adds	r3, #3
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	021b      	lsls	r3, r3, #8
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	791a      	ldrb	r2, [r3, #4]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	795a      	ldrb	r2, [r3, #5]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	799a      	ldrb	r2, [r3, #6]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	79da      	ldrb	r2, [r3, #7]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	79db      	ldrb	r3, [r3, #7]
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	dc11      	bgt.n	800cd2c <USBH_ParseDevDesc+0x86>
 800cd08:	2b08      	cmp	r3, #8
 800cd0a:	db16      	blt.n	800cd3a <USBH_ParseDevDesc+0x94>
 800cd0c:	3b08      	subs	r3, #8
 800cd0e:	2201      	movs	r2, #1
 800cd10:	fa02 f303 	lsl.w	r3, r2, r3
 800cd14:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800cd18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bf14      	ite	ne
 800cd20:	2301      	movne	r3, #1
 800cd22:	2300      	moveq	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d102      	bne.n	800cd30 <USBH_ParseDevDesc+0x8a>
 800cd2a:	e006      	b.n	800cd3a <USBH_ParseDevDesc+0x94>
 800cd2c:	2b40      	cmp	r3, #64	; 0x40
 800cd2e:	d104      	bne.n	800cd3a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	79da      	ldrb	r2, [r3, #7]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	71da      	strb	r2, [r3, #7]
      break;
 800cd38:	e003      	b.n	800cd42 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2240      	movs	r2, #64	; 0x40
 800cd3e:	71da      	strb	r2, [r3, #7]
      break;
 800cd40:	bf00      	nop
  }

  if (length > 8U)
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	2b08      	cmp	r3, #8
 800cd46:	d939      	bls.n	800cdbc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	3309      	adds	r3, #9
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	330a      	adds	r3, #10
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	330b      	adds	r3, #11
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	021b      	lsls	r3, r3, #8
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	330c      	adds	r3, #12
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	330d      	adds	r3, #13
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	021b      	lsls	r3, r3, #8
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	7b9a      	ldrb	r2, [r3, #14]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	7bda      	ldrb	r2, [r3, #15]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	7c1a      	ldrb	r2, [r3, #16]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	7c5a      	ldrb	r2, [r3, #17]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	745a      	strb	r2, [r3, #17]
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08c      	sub	sp, #48	; 0x30
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cddc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cde8:	2300      	movs	r3, #0
 800cdea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	781a      	ldrb	r2, [r3, #0]
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	785a      	ldrb	r2, [r3, #1]
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	3302      	adds	r3, #2
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	3303      	adds	r3, #3
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	021b      	lsls	r3, r3, #8
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce24:	bf28      	it	cs
 800ce26:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	791a      	ldrb	r2, [r3, #4]
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	795a      	ldrb	r2, [r3, #5]
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	799a      	ldrb	r2, [r3, #6]
 800ce44:	6a3b      	ldr	r3, [r7, #32]
 800ce46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	79da      	ldrb	r2, [r3, #7]
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	7a1a      	ldrb	r2, [r3, #8]
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b09      	cmp	r3, #9
 800ce5e:	d002      	beq.n	800ce66 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ce60:	6a3b      	ldr	r3, [r7, #32]
 800ce62:	2209      	movs	r2, #9
 800ce64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ce66:	88fb      	ldrh	r3, [r7, #6]
 800ce68:	2b09      	cmp	r3, #9
 800ce6a:	f240 809d 	bls.w	800cfa8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ce6e:	2309      	movs	r3, #9
 800ce70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce76:	e081      	b.n	800cf7c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce78:	f107 0316 	add.w	r3, r7, #22
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce80:	f000 f99f 	bl	800d1c2 <USBH_GetNextDesc>
 800ce84:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	785b      	ldrb	r3, [r3, #1]
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d176      	bne.n	800cf7c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b09      	cmp	r3, #9
 800ce94:	d002      	beq.n	800ce9c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	2209      	movs	r2, #9
 800ce9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ce9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea0:	221a      	movs	r2, #26
 800cea2:	fb02 f303 	mul.w	r3, r2, r3
 800cea6:	3308      	adds	r3, #8
 800cea8:	6a3a      	ldr	r2, [r7, #32]
 800ceaa:	4413      	add	r3, r2
 800ceac:	3302      	adds	r3, #2
 800ceae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ceb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceb2:	69f8      	ldr	r0, [r7, #28]
 800ceb4:	f000 f87e 	bl	800cfb4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cec2:	e043      	b.n	800cf4c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cec4:	f107 0316 	add.w	r3, r7, #22
 800cec8:	4619      	mov	r1, r3
 800ceca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cecc:	f000 f979 	bl	800d1c2 <USBH_GetNextDesc>
 800ced0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	785b      	ldrb	r3, [r3, #1]
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	d138      	bne.n	800cf4c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	795b      	ldrb	r3, [r3, #5]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d10f      	bne.n	800cf02 <USBH_ParseCfgDesc+0x13a>
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	799b      	ldrb	r3, [r3, #6]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d10b      	bne.n	800cf02 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	79db      	ldrb	r3, [r3, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10f      	bne.n	800cf12 <USBH_ParseCfgDesc+0x14a>
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b09      	cmp	r3, #9
 800cef8:	d00b      	beq.n	800cf12 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	2209      	movs	r2, #9
 800cefe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cf00:	e007      	b.n	800cf12 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b07      	cmp	r3, #7
 800cf08:	d004      	beq.n	800cf14 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	2207      	movs	r2, #7
 800cf0e:	701a      	strb	r2, [r3, #0]
 800cf10:	e000      	b.n	800cf14 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cf12:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cf1c:	3201      	adds	r2, #1
 800cf1e:	00d2      	lsls	r2, r2, #3
 800cf20:	211a      	movs	r1, #26
 800cf22:	fb01 f303 	mul.w	r3, r1, r3
 800cf26:	4413      	add	r3, r2
 800cf28:	3308      	adds	r3, #8
 800cf2a:	6a3a      	ldr	r2, [r7, #32]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	3304      	adds	r3, #4
 800cf30:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cf32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf34:	69b9      	ldr	r1, [r7, #24]
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 f86b 	bl	800d012 <USBH_ParseEPDesc>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cf42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf46:	3301      	adds	r3, #1
 800cf48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	791b      	ldrb	r3, [r3, #4]
 800cf50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d204      	bcs.n	800cf62 <USBH_ParseCfgDesc+0x19a>
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	885a      	ldrh	r2, [r3, #2]
 800cf5c:	8afb      	ldrh	r3, [r7, #22]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d8b0      	bhi.n	800cec4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	791b      	ldrb	r3, [r3, #4]
 800cf66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d201      	bcs.n	800cf72 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e01c      	b.n	800cfac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800cf72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf76:	3301      	adds	r3, #1
 800cf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d805      	bhi.n	800cf90 <USBH_ParseCfgDesc+0x1c8>
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	885a      	ldrh	r2, [r3, #2]
 800cf88:	8afb      	ldrh	r3, [r7, #22]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	f63f af74 	bhi.w	800ce78 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	791b      	ldrb	r3, [r3, #4]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	bf28      	it	cs
 800cf98:	2302      	movcs	r3, #2
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d201      	bcs.n	800cfa8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	e001      	b.n	800cfac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800cfa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3730      	adds	r7, #48	; 0x30
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781a      	ldrb	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	785a      	ldrb	r2, [r3, #1]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	789a      	ldrb	r2, [r3, #2]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	78da      	ldrb	r2, [r3, #3]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	791a      	ldrb	r2, [r3, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	795a      	ldrb	r2, [r3, #5]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	799a      	ldrb	r2, [r3, #6]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	79da      	ldrb	r2, [r3, #7]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	7a1a      	ldrb	r2, [r3, #8]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	721a      	strb	r2, [r3, #8]
}
 800d006:	bf00      	nop
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d012:	b480      	push	{r7}
 800d014:	b087      	sub	sp, #28
 800d016:	af00      	add	r7, sp, #0
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781a      	ldrb	r2, [r3, #0]
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	785a      	ldrb	r2, [r3, #1]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	789a      	ldrb	r2, [r3, #2]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	78da      	ldrb	r2, [r3, #3]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	3304      	adds	r3, #4
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	b29a      	uxth	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	3305      	adds	r3, #5
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	b29b      	uxth	r3, r3
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	b29b      	uxth	r3, r3
 800d056:	4313      	orrs	r3, r2
 800d058:	b29a      	uxth	r2, r3
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	799a      	ldrb	r2, [r3, #6]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	889b      	ldrh	r3, [r3, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d102      	bne.n	800d074 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d06e:	2303      	movs	r3, #3
 800d070:	75fb      	strb	r3, [r7, #23]
 800d072:	e033      	b.n	800d0dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	889b      	ldrh	r3, [r3, #4]
 800d078:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d07c:	f023 0307 	bic.w	r3, r3, #7
 800d080:	b29a      	uxth	r2, r3
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	889b      	ldrh	r3, [r3, #4]
 800d08a:	b21a      	sxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3304      	adds	r3, #4
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	b299      	uxth	r1, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	3305      	adds	r3, #5
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d110      	bne.n	800d0ce <USBH_ParseEPDesc+0xbc>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	b299      	uxth	r1, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3305      	adds	r3, #5
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	430b      	orrs	r3, r1
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	b21b      	sxth	r3, r3
 800d0c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	e001      	b.n	800d0d2 <USBH_ParseEPDesc+0xc0>
 800d0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	b21b      	sxth	r3, r3
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d116      	bne.n	800d114 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	78db      	ldrb	r3, [r3, #3]
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d005      	beq.n	800d0fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	78db      	ldrb	r3, [r3, #3]
 800d0f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d0fa:	2b03      	cmp	r3, #3
 800d0fc:	d127      	bne.n	800d14e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	799b      	ldrb	r3, [r3, #6]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d003      	beq.n	800d10e <USBH_ParseEPDesc+0xfc>
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	799b      	ldrb	r3, [r3, #6]
 800d10a:	2b10      	cmp	r3, #16
 800d10c:	d91f      	bls.n	800d14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d10e:	2303      	movs	r3, #3
 800d110:	75fb      	strb	r3, [r7, #23]
 800d112:	e01c      	b.n	800d14e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	78db      	ldrb	r3, [r3, #3]
 800d118:	f003 0303 	and.w	r3, r3, #3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d10a      	bne.n	800d136 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	799b      	ldrb	r3, [r3, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d003      	beq.n	800d130 <USBH_ParseEPDesc+0x11e>
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	799b      	ldrb	r3, [r3, #6]
 800d12c:	2b10      	cmp	r3, #16
 800d12e:	d90e      	bls.n	800d14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d130:	2303      	movs	r3, #3
 800d132:	75fb      	strb	r3, [r7, #23]
 800d134:	e00b      	b.n	800d14e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	78db      	ldrb	r3, [r3, #3]
 800d13a:	f003 0303 	and.w	r3, r3, #3
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d105      	bne.n	800d14e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	799b      	ldrb	r3, [r3, #6]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d14a:	2303      	movs	r3, #3
 800d14c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d150:	4618      	mov	r0, r3
 800d152:	371c      	adds	r7, #28
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	4613      	mov	r3, r2
 800d168:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3301      	adds	r3, #1
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	2b03      	cmp	r3, #3
 800d172:	d120      	bne.n	800d1b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	1e9a      	subs	r2, r3, #2
 800d17a:	88fb      	ldrh	r3, [r7, #6]
 800d17c:	4293      	cmp	r3, r2
 800d17e:	bf28      	it	cs
 800d180:	4613      	movcs	r3, r2
 800d182:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	3302      	adds	r3, #2
 800d188:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d18a:	2300      	movs	r3, #0
 800d18c:	82fb      	strh	r3, [r7, #22]
 800d18e:	e00b      	b.n	800d1a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d190:	8afb      	ldrh	r3, [r7, #22]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	781a      	ldrb	r2, [r3, #0]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d1a2:	8afb      	ldrh	r3, [r7, #22]
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	82fb      	strh	r3, [r7, #22]
 800d1a8:	8afa      	ldrh	r2, [r7, #22]
 800d1aa:	8abb      	ldrh	r3, [r7, #20]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d3ef      	bcc.n	800d190 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	701a      	strb	r2, [r3, #0]
  }
}
 800d1b6:	bf00      	nop
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b085      	sub	sp, #20
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	881a      	ldrh	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	4413      	add	r3, r2
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d206:	2301      	movs	r3, #1
 800d208:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	789b      	ldrb	r3, [r3, #2]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d002      	beq.n	800d218 <USBH_CtlReq+0x20>
 800d212:	2b02      	cmp	r3, #2
 800d214:	d00f      	beq.n	800d236 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d216:	e027      	b.n	800d268 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	88fa      	ldrh	r2, [r7, #6]
 800d222:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2201      	movs	r2, #1
 800d228:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2202      	movs	r2, #2
 800d22e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d230:	2301      	movs	r3, #1
 800d232:	75fb      	strb	r3, [r7, #23]
      break;
 800d234:	e018      	b.n	800d268 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 f81c 	bl	800d274 <USBH_HandleControl>
 800d23c:	4603      	mov	r3, r0
 800d23e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <USBH_CtlReq+0x54>
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d106      	bne.n	800d25a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	761a      	strb	r2, [r3, #24]
      break;
 800d258:	e005      	b.n	800d266 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d102      	bne.n	800d266 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	709a      	strb	r2, [r3, #2]
      break;
 800d266:	bf00      	nop
  }
  return status;
 800d268:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3718      	adds	r7, #24
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
	...

0800d274 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af02      	add	r7, sp, #8
 800d27a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d27c:	2301      	movs	r3, #1
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	7e1b      	ldrb	r3, [r3, #24]
 800d288:	3b01      	subs	r3, #1
 800d28a:	2b0a      	cmp	r3, #10
 800d28c:	f200 8156 	bhi.w	800d53c <USBH_HandleControl+0x2c8>
 800d290:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <USBH_HandleControl+0x24>)
 800d292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d296:	bf00      	nop
 800d298:	0800d2c5 	.word	0x0800d2c5
 800d29c:	0800d2df 	.word	0x0800d2df
 800d2a0:	0800d349 	.word	0x0800d349
 800d2a4:	0800d36f 	.word	0x0800d36f
 800d2a8:	0800d3a7 	.word	0x0800d3a7
 800d2ac:	0800d3d1 	.word	0x0800d3d1
 800d2b0:	0800d423 	.word	0x0800d423
 800d2b4:	0800d445 	.word	0x0800d445
 800d2b8:	0800d481 	.word	0x0800d481
 800d2bc:	0800d4a7 	.word	0x0800d4a7
 800d2c0:	0800d4e5 	.word	0x0800d4e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f103 0110 	add.w	r1, r3, #16
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	795b      	ldrb	r3, [r3, #5]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f943 	bl	800d55c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2202      	movs	r2, #2
 800d2da:	761a      	strb	r2, [r3, #24]
      break;
 800d2dc:	e139      	b.n	800d552 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	795b      	ldrb	r3, [r3, #5]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fd27 	bl	800dd38 <USBH_LL_GetURBState>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d11e      	bne.n	800d332 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7c1b      	ldrb	r3, [r3, #16]
 800d2f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	8adb      	ldrh	r3, [r3, #22]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d306:	7b7b      	ldrb	r3, [r7, #13]
 800d308:	2b80      	cmp	r3, #128	; 0x80
 800d30a:	d103      	bne.n	800d314 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2203      	movs	r2, #3
 800d310:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d312:	e115      	b.n	800d540 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2205      	movs	r2, #5
 800d318:	761a      	strb	r2, [r3, #24]
      break;
 800d31a:	e111      	b.n	800d540 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d31c:	7b7b      	ldrb	r3, [r7, #13]
 800d31e:	2b80      	cmp	r3, #128	; 0x80
 800d320:	d103      	bne.n	800d32a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2209      	movs	r2, #9
 800d326:	761a      	strb	r2, [r3, #24]
      break;
 800d328:	e10a      	b.n	800d540 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2207      	movs	r2, #7
 800d32e:	761a      	strb	r2, [r3, #24]
      break;
 800d330:	e106      	b.n	800d540 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	2b04      	cmp	r3, #4
 800d336:	d003      	beq.n	800d340 <USBH_HandleControl+0xcc>
 800d338:	7bbb      	ldrb	r3, [r7, #14]
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	f040 8100 	bne.w	800d540 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	220b      	movs	r2, #11
 800d344:	761a      	strb	r2, [r3, #24]
      break;
 800d346:	e0fb      	b.n	800d540 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d34e:	b29a      	uxth	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6899      	ldr	r1, [r3, #8]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	899a      	ldrh	r2, [r3, #12]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	791b      	ldrb	r3, [r3, #4]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f93a 	bl	800d5da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2204      	movs	r2, #4
 800d36a:	761a      	strb	r2, [r3, #24]
      break;
 800d36c:	e0f1      	b.n	800d552 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	791b      	ldrb	r3, [r3, #4]
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fcdf 	bl	800dd38 <USBH_LL_GetURBState>
 800d37a:	4603      	mov	r3, r0
 800d37c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d102      	bne.n	800d38a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2209      	movs	r2, #9
 800d388:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	2b05      	cmp	r3, #5
 800d38e:	d102      	bne.n	800d396 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d390:	2303      	movs	r3, #3
 800d392:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d394:	e0d6      	b.n	800d544 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	2b04      	cmp	r3, #4
 800d39a:	f040 80d3 	bne.w	800d544 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	220b      	movs	r2, #11
 800d3a2:	761a      	strb	r2, [r3, #24]
      break;
 800d3a4:	e0ce      	b.n	800d544 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6899      	ldr	r1, [r3, #8]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	899a      	ldrh	r2, [r3, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	795b      	ldrb	r3, [r3, #5]
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	9000      	str	r0, [sp, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f8ea 	bl	800d590 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2206      	movs	r2, #6
 800d3cc:	761a      	strb	r2, [r3, #24]
      break;
 800d3ce:	e0c0      	b.n	800d552 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	795b      	ldrb	r3, [r3, #5]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fcae 	bl	800dd38 <USBH_LL_GetURBState>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d103      	bne.n	800d3ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2207      	movs	r2, #7
 800d3ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d3ec:	e0ac      	b.n	800d548 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d3ee:	7bbb      	ldrb	r3, [r7, #14]
 800d3f0:	2b05      	cmp	r3, #5
 800d3f2:	d105      	bne.n	800d400 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	220c      	movs	r2, #12
 800d3f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d3fe:	e0a3      	b.n	800d548 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d103      	bne.n	800d40e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2205      	movs	r2, #5
 800d40a:	761a      	strb	r2, [r3, #24]
      break;
 800d40c:	e09c      	b.n	800d548 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	2b04      	cmp	r3, #4
 800d412:	f040 8099 	bne.w	800d548 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	220b      	movs	r2, #11
 800d41a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d41c:	2302      	movs	r3, #2
 800d41e:	73fb      	strb	r3, [r7, #15]
      break;
 800d420:	e092      	b.n	800d548 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	791b      	ldrb	r3, [r3, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	2100      	movs	r1, #0
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f8d5 	bl	800d5da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d436:	b29a      	uxth	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2208      	movs	r2, #8
 800d440:	761a      	strb	r2, [r3, #24]

      break;
 800d442:	e086      	b.n	800d552 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	791b      	ldrb	r3, [r3, #4]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fc74 	bl	800dd38 <USBH_LL_GetURBState>
 800d450:	4603      	mov	r3, r0
 800d452:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d105      	bne.n	800d466 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	220d      	movs	r2, #13
 800d45e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d464:	e072      	b.n	800d54c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d466:	7bbb      	ldrb	r3, [r7, #14]
 800d468:	2b04      	cmp	r3, #4
 800d46a:	d103      	bne.n	800d474 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	220b      	movs	r2, #11
 800d470:	761a      	strb	r2, [r3, #24]
      break;
 800d472:	e06b      	b.n	800d54c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	2b05      	cmp	r3, #5
 800d478:	d168      	bne.n	800d54c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d47a:	2303      	movs	r3, #3
 800d47c:	73fb      	strb	r3, [r7, #15]
      break;
 800d47e:	e065      	b.n	800d54c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	795b      	ldrb	r3, [r3, #5]
 800d484:	2201      	movs	r2, #1
 800d486:	9200      	str	r2, [sp, #0]
 800d488:	2200      	movs	r2, #0
 800d48a:	2100      	movs	r1, #0
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f87f 	bl	800d590 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d498:	b29a      	uxth	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	220a      	movs	r2, #10
 800d4a2:	761a      	strb	r2, [r3, #24]
      break;
 800d4a4:	e055      	b.n	800d552 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	795b      	ldrb	r3, [r3, #5]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fc43 	bl	800dd38 <USBH_LL_GetURBState>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d105      	bne.n	800d4c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	220d      	movs	r2, #13
 800d4c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d4c6:	e043      	b.n	800d550 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d103      	bne.n	800d4d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2209      	movs	r2, #9
 800d4d2:	761a      	strb	r2, [r3, #24]
      break;
 800d4d4:	e03c      	b.n	800d550 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	d139      	bne.n	800d550 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	220b      	movs	r2, #11
 800d4e0:	761a      	strb	r2, [r3, #24]
      break;
 800d4e2:	e035      	b.n	800d550 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7e5b      	ldrb	r3, [r3, #25]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	765a      	strb	r2, [r3, #25]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7e5b      	ldrb	r3, [r3, #25]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d806      	bhi.n	800d506 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d504:	e025      	b.n	800d552 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d50c:	2106      	movs	r1, #6
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	795b      	ldrb	r3, [r3, #5]
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f90c 	bl	800d73c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	791b      	ldrb	r3, [r3, #4]
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f906 	bl	800d73c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d536:	2302      	movs	r3, #2
 800d538:	73fb      	strb	r3, [r7, #15]
      break;
 800d53a:	e00a      	b.n	800d552 <USBH_HandleControl+0x2de>

    default:
      break;
 800d53c:	bf00      	nop
 800d53e:	e008      	b.n	800d552 <USBH_HandleControl+0x2de>
      break;
 800d540:	bf00      	nop
 800d542:	e006      	b.n	800d552 <USBH_HandleControl+0x2de>
      break;
 800d544:	bf00      	nop
 800d546:	e004      	b.n	800d552 <USBH_HandleControl+0x2de>
      break;
 800d548:	bf00      	nop
 800d54a:	e002      	b.n	800d552 <USBH_HandleControl+0x2de>
      break;
 800d54c:	bf00      	nop
 800d54e:	e000      	b.n	800d552 <USBH_HandleControl+0x2de>
      break;
 800d550:	bf00      	nop
  }

  return status;
 800d552:	7bfb      	ldrb	r3, [r7, #15]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af04      	add	r7, sp, #16
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d56a:	79f9      	ldrb	r1, [r7, #7]
 800d56c:	2300      	movs	r3, #0
 800d56e:	9303      	str	r3, [sp, #12]
 800d570:	2308      	movs	r3, #8
 800d572:	9302      	str	r3, [sp, #8]
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2300      	movs	r3, #0
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2300      	movs	r3, #0
 800d57e:	2200      	movs	r2, #0
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f000 fba8 	bl	800dcd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af04      	add	r7, sp, #16
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4611      	mov	r1, r2
 800d59c:	461a      	mov	r2, r3
 800d59e:	460b      	mov	r3, r1
 800d5a0:	80fb      	strh	r3, [r7, #6]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d5b4:	7979      	ldrb	r1, [r7, #5]
 800d5b6:	7e3b      	ldrb	r3, [r7, #24]
 800d5b8:	9303      	str	r3, [sp, #12]
 800d5ba:	88fb      	ldrh	r3, [r7, #6]
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f000 fb83 	bl	800dcd6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b088      	sub	sp, #32
 800d5de:	af04      	add	r7, sp, #16
 800d5e0:	60f8      	str	r0, [r7, #12]
 800d5e2:	60b9      	str	r1, [r7, #8]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	80fb      	strh	r3, [r7, #6]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d5f0:	7979      	ldrb	r1, [r7, #5]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9303      	str	r3, [sp, #12]
 800d5f6:	88fb      	ldrh	r3, [r7, #6]
 800d5f8:	9302      	str	r3, [sp, #8]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	2301      	movs	r3, #1
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	2201      	movs	r2, #1
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f000 fb65 	bl	800dcd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d60c:	2300      	movs	r3, #0

}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b088      	sub	sp, #32
 800d61a:	af04      	add	r7, sp, #16
 800d61c:	60f8      	str	r0, [r7, #12]
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	4611      	mov	r1, r2
 800d622:	461a      	mov	r2, r3
 800d624:	460b      	mov	r3, r1
 800d626:	80fb      	strh	r3, [r7, #6]
 800d628:	4613      	mov	r3, r2
 800d62a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d636:	2300      	movs	r3, #0
 800d638:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d63a:	7979      	ldrb	r1, [r7, #5]
 800d63c:	7e3b      	ldrb	r3, [r7, #24]
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	2301      	movs	r3, #1
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	2302      	movs	r3, #2
 800d64e:	2200      	movs	r2, #0
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f000 fb40 	bl	800dcd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af04      	add	r7, sp, #16
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4611      	mov	r1, r2
 800d66c:	461a      	mov	r2, r3
 800d66e:	460b      	mov	r3, r1
 800d670:	80fb      	strh	r3, [r7, #6]
 800d672:	4613      	mov	r3, r2
 800d674:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d676:	7979      	ldrb	r1, [r7, #5]
 800d678:	2300      	movs	r3, #0
 800d67a:	9303      	str	r3, [sp, #12]
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	9302      	str	r3, [sp, #8]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	9301      	str	r3, [sp, #4]
 800d684:	2301      	movs	r3, #1
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2302      	movs	r3, #2
 800d68a:	2201      	movs	r2, #1
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f000 fb22 	bl	800dcd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af04      	add	r7, sp, #16
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	70fb      	strb	r3, [r7, #3]
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	70bb      	strb	r3, [r7, #2]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d6b6:	7878      	ldrb	r0, [r7, #1]
 800d6b8:	78ba      	ldrb	r2, [r7, #2]
 800d6ba:	78f9      	ldrb	r1, [r7, #3]
 800d6bc:	8b3b      	ldrh	r3, [r7, #24]
 800d6be:	9302      	str	r3, [sp, #8]
 800d6c0:	7d3b      	ldrb	r3, [r7, #20]
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	7c3b      	ldrb	r3, [r7, #16]
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fab5 	bl	800dc3a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b082      	sub	sp, #8
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d6e6:	78fb      	ldrb	r3, [r7, #3]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fad4 	bl	800dc98 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	460b      	mov	r3, r1
 800d704:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f836 	bl	800d778 <USBH_GetFreePipe>
 800d70c:	4603      	mov	r3, r0
 800d70e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d710:	89fb      	ldrh	r3, [r7, #14]
 800d712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d716:	4293      	cmp	r3, r2
 800d718:	d00a      	beq.n	800d730 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d71a:	78fa      	ldrb	r2, [r7, #3]
 800d71c:	89fb      	ldrh	r3, [r7, #14]
 800d71e:	f003 030f 	and.w	r3, r3, #15
 800d722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	33e0      	adds	r3, #224	; 0xe0
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	440b      	add	r3, r1
 800d72e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d730:	89fb      	ldrh	r3, [r7, #14]
 800d732:	b2db      	uxtb	r3, r3
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	460b      	mov	r3, r1
 800d746:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d748:	78fb      	ldrb	r3, [r7, #3]
 800d74a:	2b0f      	cmp	r3, #15
 800d74c:	d80d      	bhi.n	800d76a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d74e:	78fb      	ldrb	r3, [r7, #3]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	33e0      	adds	r3, #224	; 0xe0
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d760:	6879      	ldr	r1, [r7, #4]
 800d762:	33e0      	adds	r3, #224	; 0xe0
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	440b      	add	r3, r1
 800d768:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d784:	2300      	movs	r3, #0
 800d786:	73fb      	strb	r3, [r7, #15]
 800d788:	e00f      	b.n	800d7aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	33e0      	adds	r3, #224	; 0xe0
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d102      	bne.n	800d7a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	e007      	b.n	800d7b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	73fb      	strb	r3, [r7, #15]
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b0f      	cmp	r3, #15
 800d7ae:	d9ec      	bls.n	800d78a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d7b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7d6:	4b1f      	ldr	r3, [pc, #124]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d7d8:	7a5b      	ldrb	r3, [r3, #9]
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d131      	bne.n	800d844 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7e0:	4b1c      	ldr	r3, [pc, #112]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d7e2:	7a5b      	ldrb	r3, [r3, #9]
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7ee:	4b19      	ldr	r3, [pc, #100]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d7f0:	7a5b      	ldrb	r3, [r3, #9]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	4a17      	ldr	r2, [pc, #92]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7fe:	4b15      	ldr	r3, [pc, #84]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d800:	7a5b      	ldrb	r3, [r3, #9]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	461a      	mov	r2, r3
 800d806:	4b13      	ldr	r3, [pc, #76]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d808:	4413      	add	r3, r2
 800d80a:	79fa      	ldrb	r2, [r7, #7]
 800d80c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d80e:	4b11      	ldr	r3, [pc, #68]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d810:	7a5b      	ldrb	r3, [r3, #9]
 800d812:	b2db      	uxtb	r3, r3
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	b2d1      	uxtb	r1, r2
 800d818:	4a0e      	ldr	r2, [pc, #56]	; (800d854 <FATFS_LinkDriverEx+0x94>)
 800d81a:	7251      	strb	r1, [r2, #9]
 800d81c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d81e:	7dbb      	ldrb	r3, [r7, #22]
 800d820:	3330      	adds	r3, #48	; 0x30
 800d822:	b2da      	uxtb	r2, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	3301      	adds	r3, #1
 800d82c:	223a      	movs	r2, #58	; 0x3a
 800d82e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	3302      	adds	r3, #2
 800d834:	222f      	movs	r2, #47	; 0x2f
 800d836:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	3303      	adds	r3, #3
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d844:	7dfb      	ldrb	r3, [r7, #23]
}
 800d846:	4618      	mov	r0, r3
 800d848:	371c      	adds	r7, #28
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	2000051c 	.word	0x2000051c

0800d858 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d862:	2200      	movs	r2, #0
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ffaa 	bl	800d7c0 <FATFS_LinkDriverEx>
 800d86c:	4603      	mov	r3, r0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
	...

0800d878 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d87c:	2200      	movs	r2, #0
 800d87e:	490e      	ldr	r1, [pc, #56]	; (800d8b8 <MX_USB_HOST_Init+0x40>)
 800d880:	480e      	ldr	r0, [pc, #56]	; (800d8bc <MX_USB_HOST_Init+0x44>)
 800d882:	f7fe fb4b 	bl	800bf1c <USBH_Init>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d88c:	f7f4 f9f8 	bl	8001c80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800d890:	490b      	ldr	r1, [pc, #44]	; (800d8c0 <MX_USB_HOST_Init+0x48>)
 800d892:	480a      	ldr	r0, [pc, #40]	; (800d8bc <MX_USB_HOST_Init+0x44>)
 800d894:	f7fe fbd0 	bl	800c038 <USBH_RegisterClass>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d89e:	f7f4 f9ef 	bl	8001c80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d8a2:	4806      	ldr	r0, [pc, #24]	; (800d8bc <MX_USB_HOST_Init+0x44>)
 800d8a4:	f7fe fc54 	bl	800c150 <USBH_Start>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d8ae:	f7f4 f9e7 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d8b2:	bf00      	nop
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800d8d9 	.word	0x0800d8d9
 800d8bc:	20000528 	.word	0x20000528
 800d8c0:	2000000c 	.word	0x2000000c

0800d8c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d8c8:	4802      	ldr	r0, [pc, #8]	; (800d8d4 <MX_USB_HOST_Process+0x10>)
 800d8ca:	f7fe fc51 	bl	800c170 <USBH_Process>
}
 800d8ce:	bf00      	nop
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000528 	.word	0x20000528

0800d8d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	2b04      	cmp	r3, #4
 800d8ea:	d819      	bhi.n	800d920 <USBH_UserProcess+0x48>
 800d8ec:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <USBH_UserProcess+0x1c>)
 800d8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f2:	bf00      	nop
 800d8f4:	0800d921 	.word	0x0800d921
 800d8f8:	0800d911 	.word	0x0800d911
 800d8fc:	0800d921 	.word	0x0800d921
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d909 	.word	0x0800d909
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d908:	4b09      	ldr	r3, [pc, #36]	; (800d930 <USBH_UserProcess+0x58>)
 800d90a:	2203      	movs	r2, #3
 800d90c:	701a      	strb	r2, [r3, #0]
  break;
 800d90e:	e008      	b.n	800d922 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d910:	4b07      	ldr	r3, [pc, #28]	; (800d930 <USBH_UserProcess+0x58>)
 800d912:	2202      	movs	r2, #2
 800d914:	701a      	strb	r2, [r3, #0]
  break;
 800d916:	e004      	b.n	800d922 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d918:	4b05      	ldr	r3, [pc, #20]	; (800d930 <USBH_UserProcess+0x58>)
 800d91a:	2201      	movs	r2, #1
 800d91c:	701a      	strb	r2, [r3, #0]

  break;
 800d91e:	e000      	b.n	800d922 <USBH_UserProcess+0x4a>

  default:
  break;
 800d920:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d922:	bf00      	nop
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20000900 	.word	0x20000900

0800d934 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d93c:	f107 0314 	add.w	r3, r7, #20
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	605a      	str	r2, [r3, #4]
 800d946:	609a      	str	r2, [r3, #8]
 800d948:	60da      	str	r2, [r3, #12]
 800d94a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a24      	ldr	r2, [pc, #144]	; (800d9e4 <HAL_HCD_MspInit+0xb0>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d141      	bne.n	800d9da <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d956:	2300      	movs	r3, #0
 800d958:	613b      	str	r3, [r7, #16]
 800d95a:	4b23      	ldr	r3, [pc, #140]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	4a22      	ldr	r2, [pc, #136]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d960:	f043 0302 	orr.w	r3, r3, #2
 800d964:	6313      	str	r3, [r2, #48]	; 0x30
 800d966:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	613b      	str	r3, [r7, #16]
 800d970:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d972:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d978:	2302      	movs	r3, #2
 800d97a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d97c:	2300      	movs	r3, #0
 800d97e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d980:	2300      	movs	r3, #0
 800d982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d984:	230c      	movs	r3, #12
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	4619      	mov	r1, r3
 800d98e:	4817      	ldr	r0, [pc, #92]	; (800d9ec <HAL_HCD_MspInit+0xb8>)
 800d990:	f7f5 fbac 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d9a2:	f107 0314 	add.w	r3, r7, #20
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	4810      	ldr	r0, [pc, #64]	; (800d9ec <HAL_HCD_MspInit+0xb8>)
 800d9aa:	f7f5 fb9f 	bl	80030ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	4b0d      	ldr	r3, [pc, #52]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b6:	4a0c      	ldr	r2, [pc, #48]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d9b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d9be:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <HAL_HCD_MspInit+0xb4>)
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	204d      	movs	r0, #77	; 0x4d
 800d9d0:	f7f4 ffbd 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d9d4:	204d      	movs	r0, #77	; 0x4d
 800d9d6:	f7f4 ffd6 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d9da:	bf00      	nop
 800d9dc:	3728      	adds	r7, #40	; 0x28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	40040000 	.word	0x40040000
 800d9e8:	40023800 	.word	0x40023800
 800d9ec:	40020400 	.word	0x40020400

0800d9f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe ff95 	bl	800c92e <USBH_LL_IncTimer>
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe ffcd 	bl	800c9ba <USBH_LL_Connect>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da36:	4618      	mov	r0, r3
 800da38:	f7fe ffd6 	bl	800c9e8 <USBH_LL_Disconnect>
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	70fb      	strb	r3, [r7, #3]
 800da50:	4613      	mov	r3, r2
 800da52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe ff87 	bl	800c982 <USBH_LL_PortEnabled>
}
 800da74:	bf00      	nop
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fe ff87 	bl	800c99e <USBH_LL_PortDisabled>
}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d132      	bne.n	800db10 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800daaa:	4a1c      	ldr	r2, [pc, #112]	; (800db1c <USBH_LL_Init+0x84>)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a19      	ldr	r2, [pc, #100]	; (800db1c <USBH_LL_Init+0x84>)
 800dab6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800daba:	4b18      	ldr	r3, [pc, #96]	; (800db1c <USBH_LL_Init+0x84>)
 800dabc:	4a18      	ldr	r2, [pc, #96]	; (800db20 <USBH_LL_Init+0x88>)
 800dabe:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800dac0:	4b16      	ldr	r3, [pc, #88]	; (800db1c <USBH_LL_Init+0x84>)
 800dac2:	220c      	movs	r2, #12
 800dac4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800dac6:	4b15      	ldr	r3, [pc, #84]	; (800db1c <USBH_LL_Init+0x84>)
 800dac8:	2201      	movs	r2, #1
 800daca:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dacc:	4b13      	ldr	r3, [pc, #76]	; (800db1c <USBH_LL_Init+0x84>)
 800dace:	2200      	movs	r2, #0
 800dad0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dad2:	4b12      	ldr	r3, [pc, #72]	; (800db1c <USBH_LL_Init+0x84>)
 800dad4:	2202      	movs	r2, #2
 800dad6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dad8:	4b10      	ldr	r3, [pc, #64]	; (800db1c <USBH_LL_Init+0x84>)
 800dada:	2200      	movs	r2, #0
 800dadc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <USBH_LL_Init+0x84>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dae4:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <USBH_LL_Init+0x84>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <USBH_LL_Init+0x84>)
 800daec:	2200      	movs	r2, #0
 800daee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800daf0:	480a      	ldr	r0, [pc, #40]	; (800db1c <USBH_LL_Init+0x84>)
 800daf2:	f7f5 fcf1 	bl	80034d8 <HAL_HCD_Init>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800dafc:	f7f4 f8c0 	bl	8001c80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800db00:	4806      	ldr	r0, [pc, #24]	; (800db1c <USBH_LL_Init+0x84>)
 800db02:	f7f6 f8d4 	bl	8003cae <HAL_HCD_GetCurrentFrame>
 800db06:	4603      	mov	r3, r0
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7fe ff00 	bl	800c910 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20000904 	.word	0x20000904
 800db20:	40040000 	.word	0x40040000

0800db24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7f6 f841 	bl	8003bc2 <HAL_HCD_Start>
 800db40:	4603      	mov	r3, r0
 800db42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	4618      	mov	r0, r3
 800db48:	f000 f98c 	bl	800de64 <USBH_Get_USB_Status>
 800db4c:	4603      	mov	r3, r0
 800db4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db50:	7bbb      	ldrb	r3, [r7, #14]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db66:	2300      	movs	r3, #0
 800db68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db70:	4618      	mov	r0, r3
 800db72:	f7f6 f849 	bl	8003c08 <HAL_HCD_Stop>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 f971 	bl	800de64 <USBH_Get_USB_Status>
 800db82:	4603      	mov	r3, r0
 800db84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db86:	7bbb      	ldrb	r3, [r7, #14]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800db98:	2301      	movs	r3, #1
 800db9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f6 f891 	bl	8003cca <HAL_HCD_GetCurrentSpeed>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d00c      	beq.n	800dbc8 <USBH_LL_GetSpeed+0x38>
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d80d      	bhi.n	800dbce <USBH_LL_GetSpeed+0x3e>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d002      	beq.n	800dbbc <USBH_LL_GetSpeed+0x2c>
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d003      	beq.n	800dbc2 <USBH_LL_GetSpeed+0x32>
 800dbba:	e008      	b.n	800dbce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc0:	e008      	b.n	800dbd4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc6:	e005      	b.n	800dbd4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dbc8:	2302      	movs	r3, #2
 800dbca:	73fb      	strb	r3, [r7, #15]
    break;
 800dbcc:	e002      	b.n	800dbd4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800dbd2:	bf00      	nop
  }
  return  speed;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7f6 f824 	bl	8003c42 <HAL_HCD_ResetPort>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f92f 	bl	800de64 <USBH_Get_USB_Status>
 800dc06:	4603      	mov	r3, r0
 800dc08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3710      	adds	r7, #16
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc26:	78fa      	ldrb	r2, [r7, #3]
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f6 f82b 	bl	8003c86 <HAL_HCD_HC_GetXferCount>
 800dc30:	4603      	mov	r3, r0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dc3a:	b590      	push	{r4, r7, lr}
 800dc3c:	b089      	sub	sp, #36	; 0x24
 800dc3e:	af04      	add	r7, sp, #16
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	4608      	mov	r0, r1
 800dc44:	4611      	mov	r1, r2
 800dc46:	461a      	mov	r2, r3
 800dc48:	4603      	mov	r3, r0
 800dc4a:	70fb      	strb	r3, [r7, #3]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70bb      	strb	r3, [r7, #2]
 800dc50:	4613      	mov	r3, r2
 800dc52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc62:	787c      	ldrb	r4, [r7, #1]
 800dc64:	78ba      	ldrb	r2, [r7, #2]
 800dc66:	78f9      	ldrb	r1, [r7, #3]
 800dc68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc6a:	9302      	str	r3, [sp, #8]
 800dc6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4623      	mov	r3, r4
 800dc7a:	f7f5 fc8f 	bl	800359c <HAL_HCD_HC_Init>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 f8ed 	bl	800de64 <USBH_Get_USB_Status>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3714      	adds	r7, #20
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}

0800dc98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcb2:	78fa      	ldrb	r2, [r7, #3]
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7f5 fcff 	bl	80036ba <HAL_HCD_HC_Halt>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f8ce 	bl	800de64 <USBH_Get_USB_Status>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dcd6:	b590      	push	{r4, r7, lr}
 800dcd8:	b089      	sub	sp, #36	; 0x24
 800dcda:	af04      	add	r7, sp, #16
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	4608      	mov	r0, r1
 800dce0:	4611      	mov	r1, r2
 800dce2:	461a      	mov	r2, r3
 800dce4:	4603      	mov	r3, r0
 800dce6:	70fb      	strb	r3, [r7, #3]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70bb      	strb	r3, [r7, #2]
 800dcec:	4613      	mov	r3, r2
 800dcee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dcfe:	787c      	ldrb	r4, [r7, #1]
 800dd00:	78ba      	ldrb	r2, [r7, #2]
 800dd02:	78f9      	ldrb	r1, [r7, #3]
 800dd04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd08:	9303      	str	r3, [sp, #12]
 800dd0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd0c:	9302      	str	r3, [sp, #8]
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	4623      	mov	r3, r4
 800dd1a:	f7f5 fcf1 	bl	8003700 <HAL_HCD_HC_SubmitRequest>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 f89d 	bl	800de64 <USBH_Get_USB_Status>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd90      	pop	{r4, r7, pc}

0800dd38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd4a:	78fa      	ldrb	r2, [r7, #3]
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f5 ff85 	bl	8003c5e <HAL_HCD_HC_GetURBState>
 800dd54:	4603      	mov	r3, r0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b082      	sub	sp, #8
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	460b      	mov	r3, r1
 800dd68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d103      	bne.n	800dd7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 f8a0 	bl	800debc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dd7c:	20c8      	movs	r0, #200	; 0xc8
 800dd7e:	f7f4 fce7 	bl	8002750 <HAL_Delay>
  return USBH_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dda2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	212c      	movs	r1, #44	; 0x2c
 800ddaa:	fb01 f303 	mul.w	r3, r1, r3
 800ddae:	4413      	add	r3, r2
 800ddb0:	333b      	adds	r3, #59	; 0x3b
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d009      	beq.n	800ddcc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ddb8:	78fb      	ldrb	r3, [r7, #3]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	212c      	movs	r1, #44	; 0x2c
 800ddbe:	fb01 f303 	mul.w	r3, r1, r3
 800ddc2:	4413      	add	r3, r2
 800ddc4:	3354      	adds	r3, #84	; 0x54
 800ddc6:	78ba      	ldrb	r2, [r7, #2]
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	e008      	b.n	800ddde <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ddcc:	78fb      	ldrb	r3, [r7, #3]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	212c      	movs	r1, #44	; 0x2c
 800ddd2:	fb01 f303 	mul.w	r3, r1, r3
 800ddd6:	4413      	add	r3, r2
 800ddd8:	3355      	adds	r3, #85	; 0x55
 800ddda:	78ba      	ldrb	r2, [r7, #2]
 800dddc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de02:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800de04:	78fb      	ldrb	r3, [r7, #3]
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	212c      	movs	r1, #44	; 0x2c
 800de0a:	fb01 f303 	mul.w	r3, r1, r3
 800de0e:	4413      	add	r3, r2
 800de10:	333b      	adds	r3, #59	; 0x3b
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d009      	beq.n	800de2c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800de18:	78fb      	ldrb	r3, [r7, #3]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	212c      	movs	r1, #44	; 0x2c
 800de1e:	fb01 f303 	mul.w	r3, r1, r3
 800de22:	4413      	add	r3, r2
 800de24:	3354      	adds	r3, #84	; 0x54
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	73fb      	strb	r3, [r7, #15]
 800de2a:	e008      	b.n	800de3e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800de2c:	78fb      	ldrb	r3, [r7, #3]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	212c      	movs	r1, #44	; 0x2c
 800de32:	fb01 f303 	mul.w	r3, r1, r3
 800de36:	4413      	add	r3, r2
 800de38:	3355      	adds	r3, #85	; 0x55
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7f4 fc7b 	bl	8002750 <HAL_Delay>
}
 800de5a:	bf00      	nop
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
	...

0800de64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	2b03      	cmp	r3, #3
 800de76:	d817      	bhi.n	800dea8 <USBH_Get_USB_Status+0x44>
 800de78:	a201      	add	r2, pc, #4	; (adr r2, 800de80 <USBH_Get_USB_Status+0x1c>)
 800de7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7e:	bf00      	nop
 800de80:	0800de91 	.word	0x0800de91
 800de84:	0800de97 	.word	0x0800de97
 800de88:	0800de9d 	.word	0x0800de9d
 800de8c:	0800dea3 	.word	0x0800dea3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	73fb      	strb	r3, [r7, #15]
    break;
 800de94:	e00b      	b.n	800deae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800de96:	2302      	movs	r3, #2
 800de98:	73fb      	strb	r3, [r7, #15]
    break;
 800de9a:	e008      	b.n	800deae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dea0:	e005      	b.n	800deae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dea2:	2302      	movs	r3, #2
 800dea4:	73fb      	strb	r3, [r7, #15]
    break;
 800dea6:	e002      	b.n	800deae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dea8:	2302      	movs	r3, #2
 800deaa:	73fb      	strb	r3, [r7, #15]
    break;
 800deac:	bf00      	nop
  }
  return usb_status;
 800deae:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3714      	adds	r7, #20
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	4603      	mov	r3, r0
 800dec4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ded0:	2301      	movs	r3, #1
 800ded2:	73fb      	strb	r3, [r7, #15]
 800ded4:	e001      	b.n	800deda <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800deda:	7bfb      	ldrb	r3, [r7, #15]
 800dedc:	461a      	mov	r2, r3
 800dede:	2110      	movs	r1, #16
 800dee0:	4803      	ldr	r0, [pc, #12]	; (800def0 <MX_DriverVbusHS+0x34>)
 800dee2:	f7f5 fac7 	bl	8003474 <HAL_GPIO_WritePin>
}
 800dee6:	bf00      	nop
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	40020800 	.word	0x40020800

0800def4 <atoi>:
 800def4:	220a      	movs	r2, #10
 800def6:	2100      	movs	r1, #0
 800def8:	f000 baa0 	b.w	800e43c <strtol>

0800defc <__errno>:
 800defc:	4b01      	ldr	r3, [pc, #4]	; (800df04 <__errno+0x8>)
 800defe:	6818      	ldr	r0, [r3, #0]
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	2000002c 	.word	0x2000002c

0800df08 <__libc_init_array>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	4d0d      	ldr	r5, [pc, #52]	; (800df40 <__libc_init_array+0x38>)
 800df0c:	4c0d      	ldr	r4, [pc, #52]	; (800df44 <__libc_init_array+0x3c>)
 800df0e:	1b64      	subs	r4, r4, r5
 800df10:	10a4      	asrs	r4, r4, #2
 800df12:	2600      	movs	r6, #0
 800df14:	42a6      	cmp	r6, r4
 800df16:	d109      	bne.n	800df2c <__libc_init_array+0x24>
 800df18:	4d0b      	ldr	r5, [pc, #44]	; (800df48 <__libc_init_array+0x40>)
 800df1a:	4c0c      	ldr	r4, [pc, #48]	; (800df4c <__libc_init_array+0x44>)
 800df1c:	f001 f91e 	bl	800f15c <_init>
 800df20:	1b64      	subs	r4, r4, r5
 800df22:	10a4      	asrs	r4, r4, #2
 800df24:	2600      	movs	r6, #0
 800df26:	42a6      	cmp	r6, r4
 800df28:	d105      	bne.n	800df36 <__libc_init_array+0x2e>
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df30:	4798      	blx	r3
 800df32:	3601      	adds	r6, #1
 800df34:	e7ee      	b.n	800df14 <__libc_init_array+0xc>
 800df36:	f855 3b04 	ldr.w	r3, [r5], #4
 800df3a:	4798      	blx	r3
 800df3c:	3601      	adds	r6, #1
 800df3e:	e7f2      	b.n	800df26 <__libc_init_array+0x1e>
 800df40:	0800f5e0 	.word	0x0800f5e0
 800df44:	0800f5e0 	.word	0x0800f5e0
 800df48:	0800f5e0 	.word	0x0800f5e0
 800df4c:	0800f5e4 	.word	0x0800f5e4

0800df50 <malloc>:
 800df50:	4b02      	ldr	r3, [pc, #8]	; (800df5c <malloc+0xc>)
 800df52:	4601      	mov	r1, r0
 800df54:	6818      	ldr	r0, [r3, #0]
 800df56:	f000 b88d 	b.w	800e074 <_malloc_r>
 800df5a:	bf00      	nop
 800df5c:	2000002c 	.word	0x2000002c

0800df60 <free>:
 800df60:	4b02      	ldr	r3, [pc, #8]	; (800df6c <free+0xc>)
 800df62:	4601      	mov	r1, r0
 800df64:	6818      	ldr	r0, [r3, #0]
 800df66:	f000 b819 	b.w	800df9c <_free_r>
 800df6a:	bf00      	nop
 800df6c:	2000002c 	.word	0x2000002c

0800df70 <memcpy>:
 800df70:	440a      	add	r2, r1
 800df72:	4291      	cmp	r1, r2
 800df74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800df78:	d100      	bne.n	800df7c <memcpy+0xc>
 800df7a:	4770      	bx	lr
 800df7c:	b510      	push	{r4, lr}
 800df7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df86:	4291      	cmp	r1, r2
 800df88:	d1f9      	bne.n	800df7e <memcpy+0xe>
 800df8a:	bd10      	pop	{r4, pc}

0800df8c <memset>:
 800df8c:	4402      	add	r2, r0
 800df8e:	4603      	mov	r3, r0
 800df90:	4293      	cmp	r3, r2
 800df92:	d100      	bne.n	800df96 <memset+0xa>
 800df94:	4770      	bx	lr
 800df96:	f803 1b01 	strb.w	r1, [r3], #1
 800df9a:	e7f9      	b.n	800df90 <memset+0x4>

0800df9c <_free_r>:
 800df9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df9e:	2900      	cmp	r1, #0
 800dfa0:	d044      	beq.n	800e02c <_free_r+0x90>
 800dfa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa6:	9001      	str	r0, [sp, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f1a1 0404 	sub.w	r4, r1, #4
 800dfae:	bfb8      	it	lt
 800dfb0:	18e4      	addlt	r4, r4, r3
 800dfb2:	f000 fc6d 	bl	800e890 <__malloc_lock>
 800dfb6:	4a1e      	ldr	r2, [pc, #120]	; (800e030 <_free_r+0x94>)
 800dfb8:	9801      	ldr	r0, [sp, #4]
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	b933      	cbnz	r3, 800dfcc <_free_r+0x30>
 800dfbe:	6063      	str	r3, [r4, #4]
 800dfc0:	6014      	str	r4, [r2, #0]
 800dfc2:	b003      	add	sp, #12
 800dfc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfc8:	f000 bc68 	b.w	800e89c <__malloc_unlock>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d908      	bls.n	800dfe2 <_free_r+0x46>
 800dfd0:	6825      	ldr	r5, [r4, #0]
 800dfd2:	1961      	adds	r1, r4, r5
 800dfd4:	428b      	cmp	r3, r1
 800dfd6:	bf01      	itttt	eq
 800dfd8:	6819      	ldreq	r1, [r3, #0]
 800dfda:	685b      	ldreq	r3, [r3, #4]
 800dfdc:	1949      	addeq	r1, r1, r5
 800dfde:	6021      	streq	r1, [r4, #0]
 800dfe0:	e7ed      	b.n	800dfbe <_free_r+0x22>
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	b10b      	cbz	r3, 800dfec <_free_r+0x50>
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	d9fa      	bls.n	800dfe2 <_free_r+0x46>
 800dfec:	6811      	ldr	r1, [r2, #0]
 800dfee:	1855      	adds	r5, r2, r1
 800dff0:	42a5      	cmp	r5, r4
 800dff2:	d10b      	bne.n	800e00c <_free_r+0x70>
 800dff4:	6824      	ldr	r4, [r4, #0]
 800dff6:	4421      	add	r1, r4
 800dff8:	1854      	adds	r4, r2, r1
 800dffa:	42a3      	cmp	r3, r4
 800dffc:	6011      	str	r1, [r2, #0]
 800dffe:	d1e0      	bne.n	800dfc2 <_free_r+0x26>
 800e000:	681c      	ldr	r4, [r3, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	6053      	str	r3, [r2, #4]
 800e006:	4421      	add	r1, r4
 800e008:	6011      	str	r1, [r2, #0]
 800e00a:	e7da      	b.n	800dfc2 <_free_r+0x26>
 800e00c:	d902      	bls.n	800e014 <_free_r+0x78>
 800e00e:	230c      	movs	r3, #12
 800e010:	6003      	str	r3, [r0, #0]
 800e012:	e7d6      	b.n	800dfc2 <_free_r+0x26>
 800e014:	6825      	ldr	r5, [r4, #0]
 800e016:	1961      	adds	r1, r4, r5
 800e018:	428b      	cmp	r3, r1
 800e01a:	bf04      	itt	eq
 800e01c:	6819      	ldreq	r1, [r3, #0]
 800e01e:	685b      	ldreq	r3, [r3, #4]
 800e020:	6063      	str	r3, [r4, #4]
 800e022:	bf04      	itt	eq
 800e024:	1949      	addeq	r1, r1, r5
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	6054      	str	r4, [r2, #4]
 800e02a:	e7ca      	b.n	800dfc2 <_free_r+0x26>
 800e02c:	b003      	add	sp, #12
 800e02e:	bd30      	pop	{r4, r5, pc}
 800e030:	20000c08 	.word	0x20000c08

0800e034 <sbrk_aligned>:
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	4e0e      	ldr	r6, [pc, #56]	; (800e070 <sbrk_aligned+0x3c>)
 800e038:	460c      	mov	r4, r1
 800e03a:	6831      	ldr	r1, [r6, #0]
 800e03c:	4605      	mov	r5, r0
 800e03e:	b911      	cbnz	r1, 800e046 <sbrk_aligned+0x12>
 800e040:	f000 f8a4 	bl	800e18c <_sbrk_r>
 800e044:	6030      	str	r0, [r6, #0]
 800e046:	4621      	mov	r1, r4
 800e048:	4628      	mov	r0, r5
 800e04a:	f000 f89f 	bl	800e18c <_sbrk_r>
 800e04e:	1c43      	adds	r3, r0, #1
 800e050:	d00a      	beq.n	800e068 <sbrk_aligned+0x34>
 800e052:	1cc4      	adds	r4, r0, #3
 800e054:	f024 0403 	bic.w	r4, r4, #3
 800e058:	42a0      	cmp	r0, r4
 800e05a:	d007      	beq.n	800e06c <sbrk_aligned+0x38>
 800e05c:	1a21      	subs	r1, r4, r0
 800e05e:	4628      	mov	r0, r5
 800e060:	f000 f894 	bl	800e18c <_sbrk_r>
 800e064:	3001      	adds	r0, #1
 800e066:	d101      	bne.n	800e06c <sbrk_aligned+0x38>
 800e068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e06c:	4620      	mov	r0, r4
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	20000c0c 	.word	0x20000c0c

0800e074 <_malloc_r>:
 800e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e078:	1ccd      	adds	r5, r1, #3
 800e07a:	f025 0503 	bic.w	r5, r5, #3
 800e07e:	3508      	adds	r5, #8
 800e080:	2d0c      	cmp	r5, #12
 800e082:	bf38      	it	cc
 800e084:	250c      	movcc	r5, #12
 800e086:	2d00      	cmp	r5, #0
 800e088:	4607      	mov	r7, r0
 800e08a:	db01      	blt.n	800e090 <_malloc_r+0x1c>
 800e08c:	42a9      	cmp	r1, r5
 800e08e:	d905      	bls.n	800e09c <_malloc_r+0x28>
 800e090:	230c      	movs	r3, #12
 800e092:	603b      	str	r3, [r7, #0]
 800e094:	2600      	movs	r6, #0
 800e096:	4630      	mov	r0, r6
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	4e2e      	ldr	r6, [pc, #184]	; (800e158 <_malloc_r+0xe4>)
 800e09e:	f000 fbf7 	bl	800e890 <__malloc_lock>
 800e0a2:	6833      	ldr	r3, [r6, #0]
 800e0a4:	461c      	mov	r4, r3
 800e0a6:	bb34      	cbnz	r4, 800e0f6 <_malloc_r+0x82>
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f7ff ffc2 	bl	800e034 <sbrk_aligned>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	d14d      	bne.n	800e152 <_malloc_r+0xde>
 800e0b6:	6834      	ldr	r4, [r6, #0]
 800e0b8:	4626      	mov	r6, r4
 800e0ba:	2e00      	cmp	r6, #0
 800e0bc:	d140      	bne.n	800e140 <_malloc_r+0xcc>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	4631      	mov	r1, r6
 800e0c2:	4638      	mov	r0, r7
 800e0c4:	eb04 0803 	add.w	r8, r4, r3
 800e0c8:	f000 f860 	bl	800e18c <_sbrk_r>
 800e0cc:	4580      	cmp	r8, r0
 800e0ce:	d13a      	bne.n	800e146 <_malloc_r+0xd2>
 800e0d0:	6821      	ldr	r1, [r4, #0]
 800e0d2:	3503      	adds	r5, #3
 800e0d4:	1a6d      	subs	r5, r5, r1
 800e0d6:	f025 0503 	bic.w	r5, r5, #3
 800e0da:	3508      	adds	r5, #8
 800e0dc:	2d0c      	cmp	r5, #12
 800e0de:	bf38      	it	cc
 800e0e0:	250c      	movcc	r5, #12
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	4638      	mov	r0, r7
 800e0e6:	f7ff ffa5 	bl	800e034 <sbrk_aligned>
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	d02b      	beq.n	800e146 <_malloc_r+0xd2>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	442b      	add	r3, r5
 800e0f2:	6023      	str	r3, [r4, #0]
 800e0f4:	e00e      	b.n	800e114 <_malloc_r+0xa0>
 800e0f6:	6822      	ldr	r2, [r4, #0]
 800e0f8:	1b52      	subs	r2, r2, r5
 800e0fa:	d41e      	bmi.n	800e13a <_malloc_r+0xc6>
 800e0fc:	2a0b      	cmp	r2, #11
 800e0fe:	d916      	bls.n	800e12e <_malloc_r+0xba>
 800e100:	1961      	adds	r1, r4, r5
 800e102:	42a3      	cmp	r3, r4
 800e104:	6025      	str	r5, [r4, #0]
 800e106:	bf18      	it	ne
 800e108:	6059      	strne	r1, [r3, #4]
 800e10a:	6863      	ldr	r3, [r4, #4]
 800e10c:	bf08      	it	eq
 800e10e:	6031      	streq	r1, [r6, #0]
 800e110:	5162      	str	r2, [r4, r5]
 800e112:	604b      	str	r3, [r1, #4]
 800e114:	4638      	mov	r0, r7
 800e116:	f104 060b 	add.w	r6, r4, #11
 800e11a:	f000 fbbf 	bl	800e89c <__malloc_unlock>
 800e11e:	f026 0607 	bic.w	r6, r6, #7
 800e122:	1d23      	adds	r3, r4, #4
 800e124:	1af2      	subs	r2, r6, r3
 800e126:	d0b6      	beq.n	800e096 <_malloc_r+0x22>
 800e128:	1b9b      	subs	r3, r3, r6
 800e12a:	50a3      	str	r3, [r4, r2]
 800e12c:	e7b3      	b.n	800e096 <_malloc_r+0x22>
 800e12e:	6862      	ldr	r2, [r4, #4]
 800e130:	42a3      	cmp	r3, r4
 800e132:	bf0c      	ite	eq
 800e134:	6032      	streq	r2, [r6, #0]
 800e136:	605a      	strne	r2, [r3, #4]
 800e138:	e7ec      	b.n	800e114 <_malloc_r+0xa0>
 800e13a:	4623      	mov	r3, r4
 800e13c:	6864      	ldr	r4, [r4, #4]
 800e13e:	e7b2      	b.n	800e0a6 <_malloc_r+0x32>
 800e140:	4634      	mov	r4, r6
 800e142:	6876      	ldr	r6, [r6, #4]
 800e144:	e7b9      	b.n	800e0ba <_malloc_r+0x46>
 800e146:	230c      	movs	r3, #12
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	4638      	mov	r0, r7
 800e14c:	f000 fba6 	bl	800e89c <__malloc_unlock>
 800e150:	e7a1      	b.n	800e096 <_malloc_r+0x22>
 800e152:	6025      	str	r5, [r4, #0]
 800e154:	e7de      	b.n	800e114 <_malloc_r+0xa0>
 800e156:	bf00      	nop
 800e158:	20000c08 	.word	0x20000c08

0800e15c <iprintf>:
 800e15c:	b40f      	push	{r0, r1, r2, r3}
 800e15e:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <iprintf+0x2c>)
 800e160:	b513      	push	{r0, r1, r4, lr}
 800e162:	681c      	ldr	r4, [r3, #0]
 800e164:	b124      	cbz	r4, 800e170 <iprintf+0x14>
 800e166:	69a3      	ldr	r3, [r4, #24]
 800e168:	b913      	cbnz	r3, 800e170 <iprintf+0x14>
 800e16a:	4620      	mov	r0, r4
 800e16c:	f000 fa8a 	bl	800e684 <__sinit>
 800e170:	ab05      	add	r3, sp, #20
 800e172:	9a04      	ldr	r2, [sp, #16]
 800e174:	68a1      	ldr	r1, [r4, #8]
 800e176:	9301      	str	r3, [sp, #4]
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fbbf 	bl	800e8fc <_vfiprintf_r>
 800e17e:	b002      	add	sp, #8
 800e180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e184:	b004      	add	sp, #16
 800e186:	4770      	bx	lr
 800e188:	2000002c 	.word	0x2000002c

0800e18c <_sbrk_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d06      	ldr	r5, [pc, #24]	; (800e1a8 <_sbrk_r+0x1c>)
 800e190:	2300      	movs	r3, #0
 800e192:	4604      	mov	r4, r0
 800e194:	4608      	mov	r0, r1
 800e196:	602b      	str	r3, [r5, #0]
 800e198:	f7f4 f9f6 	bl	8002588 <_sbrk>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_sbrk_r+0x1a>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_sbrk_r+0x1a>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	20000c14 	.word	0x20000c14

0800e1ac <setvbuf>:
 800e1ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b0:	461d      	mov	r5, r3
 800e1b2:	4b5d      	ldr	r3, [pc, #372]	; (800e328 <setvbuf+0x17c>)
 800e1b4:	681f      	ldr	r7, [r3, #0]
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	460e      	mov	r6, r1
 800e1ba:	4690      	mov	r8, r2
 800e1bc:	b127      	cbz	r7, 800e1c8 <setvbuf+0x1c>
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	b913      	cbnz	r3, 800e1c8 <setvbuf+0x1c>
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	f000 fa5e 	bl	800e684 <__sinit>
 800e1c8:	4b58      	ldr	r3, [pc, #352]	; (800e32c <setvbuf+0x180>)
 800e1ca:	429c      	cmp	r4, r3
 800e1cc:	d167      	bne.n	800e29e <setvbuf+0xf2>
 800e1ce:	687c      	ldr	r4, [r7, #4]
 800e1d0:	f1b8 0f02 	cmp.w	r8, #2
 800e1d4:	d006      	beq.n	800e1e4 <setvbuf+0x38>
 800e1d6:	f1b8 0f01 	cmp.w	r8, #1
 800e1da:	f200 809f 	bhi.w	800e31c <setvbuf+0x170>
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	f2c0 809c 	blt.w	800e31c <setvbuf+0x170>
 800e1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e6:	07db      	lsls	r3, r3, #31
 800e1e8:	d405      	bmi.n	800e1f6 <setvbuf+0x4a>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	0598      	lsls	r0, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <setvbuf+0x4a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f000 fae5 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f000 f9af 	bl	800e55c <_fflush_r>
 800e1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e200:	b141      	cbz	r1, 800e214 <setvbuf+0x68>
 800e202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e206:	4299      	cmp	r1, r3
 800e208:	d002      	beq.n	800e210 <setvbuf+0x64>
 800e20a:	4638      	mov	r0, r7
 800e20c:	f7ff fec6 	bl	800df9c <_free_r>
 800e210:	2300      	movs	r3, #0
 800e212:	6363      	str	r3, [r4, #52]	; 0x34
 800e214:	2300      	movs	r3, #0
 800e216:	61a3      	str	r3, [r4, #24]
 800e218:	6063      	str	r3, [r4, #4]
 800e21a:	89a3      	ldrh	r3, [r4, #12]
 800e21c:	0619      	lsls	r1, r3, #24
 800e21e:	d503      	bpl.n	800e228 <setvbuf+0x7c>
 800e220:	6921      	ldr	r1, [r4, #16]
 800e222:	4638      	mov	r0, r7
 800e224:	f7ff feba 	bl	800df9c <_free_r>
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e22e:	f023 0303 	bic.w	r3, r3, #3
 800e232:	f1b8 0f02 	cmp.w	r8, #2
 800e236:	81a3      	strh	r3, [r4, #12]
 800e238:	d06c      	beq.n	800e314 <setvbuf+0x168>
 800e23a:	ab01      	add	r3, sp, #4
 800e23c:	466a      	mov	r2, sp
 800e23e:	4621      	mov	r1, r4
 800e240:	4638      	mov	r0, r7
 800e242:	f000 fabf 	bl	800e7c4 <__swhatbuf_r>
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	4318      	orrs	r0, r3
 800e24a:	81a0      	strh	r0, [r4, #12]
 800e24c:	2d00      	cmp	r5, #0
 800e24e:	d130      	bne.n	800e2b2 <setvbuf+0x106>
 800e250:	9d00      	ldr	r5, [sp, #0]
 800e252:	4628      	mov	r0, r5
 800e254:	f7ff fe7c 	bl	800df50 <malloc>
 800e258:	4606      	mov	r6, r0
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d155      	bne.n	800e30a <setvbuf+0x15e>
 800e25e:	f8dd 9000 	ldr.w	r9, [sp]
 800e262:	45a9      	cmp	r9, r5
 800e264:	d14a      	bne.n	800e2fc <setvbuf+0x150>
 800e266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e26a:	2200      	movs	r2, #0
 800e26c:	60a2      	str	r2, [r4, #8]
 800e26e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e272:	6022      	str	r2, [r4, #0]
 800e274:	6122      	str	r2, [r4, #16]
 800e276:	2201      	movs	r2, #1
 800e278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e27c:	6162      	str	r2, [r4, #20]
 800e27e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e280:	f043 0302 	orr.w	r3, r3, #2
 800e284:	07d2      	lsls	r2, r2, #31
 800e286:	81a3      	strh	r3, [r4, #12]
 800e288:	d405      	bmi.n	800e296 <setvbuf+0xea>
 800e28a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e28e:	d102      	bne.n	800e296 <setvbuf+0xea>
 800e290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e292:	f000 fa96 	bl	800e7c2 <__retarget_lock_release_recursive>
 800e296:	4628      	mov	r0, r5
 800e298:	b003      	add	sp, #12
 800e29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e29e:	4b24      	ldr	r3, [pc, #144]	; (800e330 <setvbuf+0x184>)
 800e2a0:	429c      	cmp	r4, r3
 800e2a2:	d101      	bne.n	800e2a8 <setvbuf+0xfc>
 800e2a4:	68bc      	ldr	r4, [r7, #8]
 800e2a6:	e793      	b.n	800e1d0 <setvbuf+0x24>
 800e2a8:	4b22      	ldr	r3, [pc, #136]	; (800e334 <setvbuf+0x188>)
 800e2aa:	429c      	cmp	r4, r3
 800e2ac:	bf08      	it	eq
 800e2ae:	68fc      	ldreq	r4, [r7, #12]
 800e2b0:	e78e      	b.n	800e1d0 <setvbuf+0x24>
 800e2b2:	2e00      	cmp	r6, #0
 800e2b4:	d0cd      	beq.n	800e252 <setvbuf+0xa6>
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	b913      	cbnz	r3, 800e2c0 <setvbuf+0x114>
 800e2ba:	4638      	mov	r0, r7
 800e2bc:	f000 f9e2 	bl	800e684 <__sinit>
 800e2c0:	f1b8 0f01 	cmp.w	r8, #1
 800e2c4:	bf08      	it	eq
 800e2c6:	89a3      	ldrheq	r3, [r4, #12]
 800e2c8:	6026      	str	r6, [r4, #0]
 800e2ca:	bf04      	itt	eq
 800e2cc:	f043 0301 	orreq.w	r3, r3, #1
 800e2d0:	81a3      	strheq	r3, [r4, #12]
 800e2d2:	89a2      	ldrh	r2, [r4, #12]
 800e2d4:	f012 0308 	ands.w	r3, r2, #8
 800e2d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e2dc:	d01c      	beq.n	800e318 <setvbuf+0x16c>
 800e2de:	07d3      	lsls	r3, r2, #31
 800e2e0:	bf41      	itttt	mi
 800e2e2:	2300      	movmi	r3, #0
 800e2e4:	426d      	negmi	r5, r5
 800e2e6:	60a3      	strmi	r3, [r4, #8]
 800e2e8:	61a5      	strmi	r5, [r4, #24]
 800e2ea:	bf58      	it	pl
 800e2ec:	60a5      	strpl	r5, [r4, #8]
 800e2ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e2f0:	f015 0501 	ands.w	r5, r5, #1
 800e2f4:	d115      	bne.n	800e322 <setvbuf+0x176>
 800e2f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e2fa:	e7c8      	b.n	800e28e <setvbuf+0xe2>
 800e2fc:	4648      	mov	r0, r9
 800e2fe:	f7ff fe27 	bl	800df50 <malloc>
 800e302:	4606      	mov	r6, r0
 800e304:	2800      	cmp	r0, #0
 800e306:	d0ae      	beq.n	800e266 <setvbuf+0xba>
 800e308:	464d      	mov	r5, r9
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e310:	81a3      	strh	r3, [r4, #12]
 800e312:	e7d0      	b.n	800e2b6 <setvbuf+0x10a>
 800e314:	2500      	movs	r5, #0
 800e316:	e7a8      	b.n	800e26a <setvbuf+0xbe>
 800e318:	60a3      	str	r3, [r4, #8]
 800e31a:	e7e8      	b.n	800e2ee <setvbuf+0x142>
 800e31c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e320:	e7b9      	b.n	800e296 <setvbuf+0xea>
 800e322:	2500      	movs	r5, #0
 800e324:	e7b7      	b.n	800e296 <setvbuf+0xea>
 800e326:	bf00      	nop
 800e328:	2000002c 	.word	0x2000002c
 800e32c:	0800f564 	.word	0x0800f564
 800e330:	0800f584 	.word	0x0800f584
 800e334:	0800f544 	.word	0x0800f544

0800e338 <_strtol_l.constprop.0>:
 800e338:	2b01      	cmp	r3, #1
 800e33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e33e:	d001      	beq.n	800e344 <_strtol_l.constprop.0+0xc>
 800e340:	2b24      	cmp	r3, #36	; 0x24
 800e342:	d906      	bls.n	800e352 <_strtol_l.constprop.0+0x1a>
 800e344:	f7ff fdda 	bl	800defc <__errno>
 800e348:	2316      	movs	r3, #22
 800e34a:	6003      	str	r3, [r0, #0]
 800e34c:	2000      	movs	r0, #0
 800e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e352:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e438 <_strtol_l.constprop.0+0x100>
 800e356:	460d      	mov	r5, r1
 800e358:	462e      	mov	r6, r5
 800e35a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e362:	f017 0708 	ands.w	r7, r7, #8
 800e366:	d1f7      	bne.n	800e358 <_strtol_l.constprop.0+0x20>
 800e368:	2c2d      	cmp	r4, #45	; 0x2d
 800e36a:	d132      	bne.n	800e3d2 <_strtol_l.constprop.0+0x9a>
 800e36c:	782c      	ldrb	r4, [r5, #0]
 800e36e:	2701      	movs	r7, #1
 800e370:	1cb5      	adds	r5, r6, #2
 800e372:	2b00      	cmp	r3, #0
 800e374:	d05b      	beq.n	800e42e <_strtol_l.constprop.0+0xf6>
 800e376:	2b10      	cmp	r3, #16
 800e378:	d109      	bne.n	800e38e <_strtol_l.constprop.0+0x56>
 800e37a:	2c30      	cmp	r4, #48	; 0x30
 800e37c:	d107      	bne.n	800e38e <_strtol_l.constprop.0+0x56>
 800e37e:	782c      	ldrb	r4, [r5, #0]
 800e380:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e384:	2c58      	cmp	r4, #88	; 0x58
 800e386:	d14d      	bne.n	800e424 <_strtol_l.constprop.0+0xec>
 800e388:	786c      	ldrb	r4, [r5, #1]
 800e38a:	2310      	movs	r3, #16
 800e38c:	3502      	adds	r5, #2
 800e38e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e392:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e396:	f04f 0c00 	mov.w	ip, #0
 800e39a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e39e:	4666      	mov	r6, ip
 800e3a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800e3a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e3a8:	f1be 0f09 	cmp.w	lr, #9
 800e3ac:	d816      	bhi.n	800e3dc <_strtol_l.constprop.0+0xa4>
 800e3ae:	4674      	mov	r4, lr
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	dd24      	ble.n	800e3fe <_strtol_l.constprop.0+0xc6>
 800e3b4:	f1bc 0f00 	cmp.w	ip, #0
 800e3b8:	db1e      	blt.n	800e3f8 <_strtol_l.constprop.0+0xc0>
 800e3ba:	45b1      	cmp	r9, r6
 800e3bc:	d31c      	bcc.n	800e3f8 <_strtol_l.constprop.0+0xc0>
 800e3be:	d101      	bne.n	800e3c4 <_strtol_l.constprop.0+0x8c>
 800e3c0:	45a2      	cmp	sl, r4
 800e3c2:	db19      	blt.n	800e3f8 <_strtol_l.constprop.0+0xc0>
 800e3c4:	fb06 4603 	mla	r6, r6, r3, r4
 800e3c8:	f04f 0c01 	mov.w	ip, #1
 800e3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3d0:	e7e8      	b.n	800e3a4 <_strtol_l.constprop.0+0x6c>
 800e3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800e3d4:	bf04      	itt	eq
 800e3d6:	782c      	ldrbeq	r4, [r5, #0]
 800e3d8:	1cb5      	addeq	r5, r6, #2
 800e3da:	e7ca      	b.n	800e372 <_strtol_l.constprop.0+0x3a>
 800e3dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e3e0:	f1be 0f19 	cmp.w	lr, #25
 800e3e4:	d801      	bhi.n	800e3ea <_strtol_l.constprop.0+0xb2>
 800e3e6:	3c37      	subs	r4, #55	; 0x37
 800e3e8:	e7e2      	b.n	800e3b0 <_strtol_l.constprop.0+0x78>
 800e3ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e3ee:	f1be 0f19 	cmp.w	lr, #25
 800e3f2:	d804      	bhi.n	800e3fe <_strtol_l.constprop.0+0xc6>
 800e3f4:	3c57      	subs	r4, #87	; 0x57
 800e3f6:	e7db      	b.n	800e3b0 <_strtol_l.constprop.0+0x78>
 800e3f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e3fc:	e7e6      	b.n	800e3cc <_strtol_l.constprop.0+0x94>
 800e3fe:	f1bc 0f00 	cmp.w	ip, #0
 800e402:	da05      	bge.n	800e410 <_strtol_l.constprop.0+0xd8>
 800e404:	2322      	movs	r3, #34	; 0x22
 800e406:	6003      	str	r3, [r0, #0]
 800e408:	4646      	mov	r6, r8
 800e40a:	b942      	cbnz	r2, 800e41e <_strtol_l.constprop.0+0xe6>
 800e40c:	4630      	mov	r0, r6
 800e40e:	e79e      	b.n	800e34e <_strtol_l.constprop.0+0x16>
 800e410:	b107      	cbz	r7, 800e414 <_strtol_l.constprop.0+0xdc>
 800e412:	4276      	negs	r6, r6
 800e414:	2a00      	cmp	r2, #0
 800e416:	d0f9      	beq.n	800e40c <_strtol_l.constprop.0+0xd4>
 800e418:	f1bc 0f00 	cmp.w	ip, #0
 800e41c:	d000      	beq.n	800e420 <_strtol_l.constprop.0+0xe8>
 800e41e:	1e69      	subs	r1, r5, #1
 800e420:	6011      	str	r1, [r2, #0]
 800e422:	e7f3      	b.n	800e40c <_strtol_l.constprop.0+0xd4>
 800e424:	2430      	movs	r4, #48	; 0x30
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1b1      	bne.n	800e38e <_strtol_l.constprop.0+0x56>
 800e42a:	2308      	movs	r3, #8
 800e42c:	e7af      	b.n	800e38e <_strtol_l.constprop.0+0x56>
 800e42e:	2c30      	cmp	r4, #48	; 0x30
 800e430:	d0a5      	beq.n	800e37e <_strtol_l.constprop.0+0x46>
 800e432:	230a      	movs	r3, #10
 800e434:	e7ab      	b.n	800e38e <_strtol_l.constprop.0+0x56>
 800e436:	bf00      	nop
 800e438:	0800f441 	.word	0x0800f441

0800e43c <strtol>:
 800e43c:	4613      	mov	r3, r2
 800e43e:	460a      	mov	r2, r1
 800e440:	4601      	mov	r1, r0
 800e442:	4802      	ldr	r0, [pc, #8]	; (800e44c <strtol+0x10>)
 800e444:	6800      	ldr	r0, [r0, #0]
 800e446:	f7ff bf77 	b.w	800e338 <_strtol_l.constprop.0>
 800e44a:	bf00      	nop
 800e44c:	2000002c 	.word	0x2000002c

0800e450 <__sflush_r>:
 800e450:	898a      	ldrh	r2, [r1, #12]
 800e452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e456:	4605      	mov	r5, r0
 800e458:	0710      	lsls	r0, r2, #28
 800e45a:	460c      	mov	r4, r1
 800e45c:	d458      	bmi.n	800e510 <__sflush_r+0xc0>
 800e45e:	684b      	ldr	r3, [r1, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	dc05      	bgt.n	800e470 <__sflush_r+0x20>
 800e464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	dc02      	bgt.n	800e470 <__sflush_r+0x20>
 800e46a:	2000      	movs	r0, #0
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e472:	2e00      	cmp	r6, #0
 800e474:	d0f9      	beq.n	800e46a <__sflush_r+0x1a>
 800e476:	2300      	movs	r3, #0
 800e478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e47c:	682f      	ldr	r7, [r5, #0]
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	d032      	beq.n	800e4e8 <__sflush_r+0x98>
 800e482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	075a      	lsls	r2, r3, #29
 800e488:	d505      	bpl.n	800e496 <__sflush_r+0x46>
 800e48a:	6863      	ldr	r3, [r4, #4]
 800e48c:	1ac0      	subs	r0, r0, r3
 800e48e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e490:	b10b      	cbz	r3, 800e496 <__sflush_r+0x46>
 800e492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	2300      	movs	r3, #0
 800e498:	4602      	mov	r2, r0
 800e49a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e49c:	6a21      	ldr	r1, [r4, #32]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b0      	blx	r6
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	d106      	bne.n	800e4b6 <__sflush_r+0x66>
 800e4a8:	6829      	ldr	r1, [r5, #0]
 800e4aa:	291d      	cmp	r1, #29
 800e4ac:	d82c      	bhi.n	800e508 <__sflush_r+0xb8>
 800e4ae:	4a2a      	ldr	r2, [pc, #168]	; (800e558 <__sflush_r+0x108>)
 800e4b0:	40ca      	lsrs	r2, r1
 800e4b2:	07d6      	lsls	r6, r2, #31
 800e4b4:	d528      	bpl.n	800e508 <__sflush_r+0xb8>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6062      	str	r2, [r4, #4]
 800e4ba:	04d9      	lsls	r1, r3, #19
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	d504      	bpl.n	800e4cc <__sflush_r+0x7c>
 800e4c2:	1c42      	adds	r2, r0, #1
 800e4c4:	d101      	bne.n	800e4ca <__sflush_r+0x7a>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b903      	cbnz	r3, 800e4cc <__sflush_r+0x7c>
 800e4ca:	6560      	str	r0, [r4, #84]	; 0x54
 800e4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4ce:	602f      	str	r7, [r5, #0]
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	d0ca      	beq.n	800e46a <__sflush_r+0x1a>
 800e4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4d8:	4299      	cmp	r1, r3
 800e4da:	d002      	beq.n	800e4e2 <__sflush_r+0x92>
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f7ff fd5d 	bl	800df9c <_free_r>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4e6:	e7c1      	b.n	800e46c <__sflush_r+0x1c>
 800e4e8:	6a21      	ldr	r1, [r4, #32]
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b0      	blx	r6
 800e4f0:	1c41      	adds	r1, r0, #1
 800e4f2:	d1c7      	bne.n	800e484 <__sflush_r+0x34>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d0c4      	beq.n	800e484 <__sflush_r+0x34>
 800e4fa:	2b1d      	cmp	r3, #29
 800e4fc:	d001      	beq.n	800e502 <__sflush_r+0xb2>
 800e4fe:	2b16      	cmp	r3, #22
 800e500:	d101      	bne.n	800e506 <__sflush_r+0xb6>
 800e502:	602f      	str	r7, [r5, #0]
 800e504:	e7b1      	b.n	800e46a <__sflush_r+0x1a>
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	e7ad      	b.n	800e46c <__sflush_r+0x1c>
 800e510:	690f      	ldr	r7, [r1, #16]
 800e512:	2f00      	cmp	r7, #0
 800e514:	d0a9      	beq.n	800e46a <__sflush_r+0x1a>
 800e516:	0793      	lsls	r3, r2, #30
 800e518:	680e      	ldr	r6, [r1, #0]
 800e51a:	bf08      	it	eq
 800e51c:	694b      	ldreq	r3, [r1, #20]
 800e51e:	600f      	str	r7, [r1, #0]
 800e520:	bf18      	it	ne
 800e522:	2300      	movne	r3, #0
 800e524:	eba6 0807 	sub.w	r8, r6, r7
 800e528:	608b      	str	r3, [r1, #8]
 800e52a:	f1b8 0f00 	cmp.w	r8, #0
 800e52e:	dd9c      	ble.n	800e46a <__sflush_r+0x1a>
 800e530:	6a21      	ldr	r1, [r4, #32]
 800e532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e534:	4643      	mov	r3, r8
 800e536:	463a      	mov	r2, r7
 800e538:	4628      	mov	r0, r5
 800e53a:	47b0      	blx	r6
 800e53c:	2800      	cmp	r0, #0
 800e53e:	dc06      	bgt.n	800e54e <__sflush_r+0xfe>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e54c:	e78e      	b.n	800e46c <__sflush_r+0x1c>
 800e54e:	4407      	add	r7, r0
 800e550:	eba8 0800 	sub.w	r8, r8, r0
 800e554:	e7e9      	b.n	800e52a <__sflush_r+0xda>
 800e556:	bf00      	nop
 800e558:	20400001 	.word	0x20400001

0800e55c <_fflush_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	690b      	ldr	r3, [r1, #16]
 800e560:	4605      	mov	r5, r0
 800e562:	460c      	mov	r4, r1
 800e564:	b913      	cbnz	r3, 800e56c <_fflush_r+0x10>
 800e566:	2500      	movs	r5, #0
 800e568:	4628      	mov	r0, r5
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	b118      	cbz	r0, 800e576 <_fflush_r+0x1a>
 800e56e:	6983      	ldr	r3, [r0, #24]
 800e570:	b90b      	cbnz	r3, 800e576 <_fflush_r+0x1a>
 800e572:	f000 f887 	bl	800e684 <__sinit>
 800e576:	4b14      	ldr	r3, [pc, #80]	; (800e5c8 <_fflush_r+0x6c>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	d11b      	bne.n	800e5b4 <_fflush_r+0x58>
 800e57c:	686c      	ldr	r4, [r5, #4]
 800e57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0ef      	beq.n	800e566 <_fflush_r+0xa>
 800e586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e588:	07d0      	lsls	r0, r2, #31
 800e58a:	d404      	bmi.n	800e596 <_fflush_r+0x3a>
 800e58c:	0599      	lsls	r1, r3, #22
 800e58e:	d402      	bmi.n	800e596 <_fflush_r+0x3a>
 800e590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e592:	f000 f915 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800e596:	4628      	mov	r0, r5
 800e598:	4621      	mov	r1, r4
 800e59a:	f7ff ff59 	bl	800e450 <__sflush_r>
 800e59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a0:	07da      	lsls	r2, r3, #31
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	d4e0      	bmi.n	800e568 <_fflush_r+0xc>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	059b      	lsls	r3, r3, #22
 800e5aa:	d4dd      	bmi.n	800e568 <_fflush_r+0xc>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f000 f908 	bl	800e7c2 <__retarget_lock_release_recursive>
 800e5b2:	e7d9      	b.n	800e568 <_fflush_r+0xc>
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <_fflush_r+0x70>)
 800e5b6:	429c      	cmp	r4, r3
 800e5b8:	d101      	bne.n	800e5be <_fflush_r+0x62>
 800e5ba:	68ac      	ldr	r4, [r5, #8]
 800e5bc:	e7df      	b.n	800e57e <_fflush_r+0x22>
 800e5be:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <_fflush_r+0x74>)
 800e5c0:	429c      	cmp	r4, r3
 800e5c2:	bf08      	it	eq
 800e5c4:	68ec      	ldreq	r4, [r5, #12]
 800e5c6:	e7da      	b.n	800e57e <_fflush_r+0x22>
 800e5c8:	0800f564 	.word	0x0800f564
 800e5cc:	0800f584 	.word	0x0800f584
 800e5d0:	0800f544 	.word	0x0800f544

0800e5d4 <std>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	4604      	mov	r4, r0
 800e5da:	e9c0 3300 	strd	r3, r3, [r0]
 800e5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5e2:	6083      	str	r3, [r0, #8]
 800e5e4:	8181      	strh	r1, [r0, #12]
 800e5e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5e8:	81c2      	strh	r2, [r0, #14]
 800e5ea:	6183      	str	r3, [r0, #24]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	2208      	movs	r2, #8
 800e5f0:	305c      	adds	r0, #92	; 0x5c
 800e5f2:	f7ff fccb 	bl	800df8c <memset>
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x38>)
 800e5f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <std+0x3c>)
 800e5fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5fe:	4b05      	ldr	r3, [pc, #20]	; (800e614 <std+0x40>)
 800e600:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <std+0x44>)
 800e604:	6224      	str	r4, [r4, #32]
 800e606:	6323      	str	r3, [r4, #48]	; 0x30
 800e608:	bd10      	pop	{r4, pc}
 800e60a:	bf00      	nop
 800e60c:	0800ee85 	.word	0x0800ee85
 800e610:	0800eea7 	.word	0x0800eea7
 800e614:	0800eedf 	.word	0x0800eedf
 800e618:	0800ef03 	.word	0x0800ef03

0800e61c <_cleanup_r>:
 800e61c:	4901      	ldr	r1, [pc, #4]	; (800e624 <_cleanup_r+0x8>)
 800e61e:	f000 b8af 	b.w	800e780 <_fwalk_reent>
 800e622:	bf00      	nop
 800e624:	0800e55d 	.word	0x0800e55d

0800e628 <__sfmoreglue>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	2268      	movs	r2, #104	; 0x68
 800e62c:	1e4d      	subs	r5, r1, #1
 800e62e:	4355      	muls	r5, r2
 800e630:	460e      	mov	r6, r1
 800e632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e636:	f7ff fd1d 	bl	800e074 <_malloc_r>
 800e63a:	4604      	mov	r4, r0
 800e63c:	b140      	cbz	r0, 800e650 <__sfmoreglue+0x28>
 800e63e:	2100      	movs	r1, #0
 800e640:	e9c0 1600 	strd	r1, r6, [r0]
 800e644:	300c      	adds	r0, #12
 800e646:	60a0      	str	r0, [r4, #8]
 800e648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e64c:	f7ff fc9e 	bl	800df8c <memset>
 800e650:	4620      	mov	r0, r4
 800e652:	bd70      	pop	{r4, r5, r6, pc}

0800e654 <__sfp_lock_acquire>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sfp_lock_acquire+0x8>)
 800e656:	f000 b8b3 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20000c11 	.word	0x20000c11

0800e660 <__sfp_lock_release>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sfp_lock_release+0x8>)
 800e662:	f000 b8ae 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20000c11 	.word	0x20000c11

0800e66c <__sinit_lock_acquire>:
 800e66c:	4801      	ldr	r0, [pc, #4]	; (800e674 <__sinit_lock_acquire+0x8>)
 800e66e:	f000 b8a7 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e672:	bf00      	nop
 800e674:	20000c12 	.word	0x20000c12

0800e678 <__sinit_lock_release>:
 800e678:	4801      	ldr	r0, [pc, #4]	; (800e680 <__sinit_lock_release+0x8>)
 800e67a:	f000 b8a2 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e67e:	bf00      	nop
 800e680:	20000c12 	.word	0x20000c12

0800e684 <__sinit>:
 800e684:	b510      	push	{r4, lr}
 800e686:	4604      	mov	r4, r0
 800e688:	f7ff fff0 	bl	800e66c <__sinit_lock_acquire>
 800e68c:	69a3      	ldr	r3, [r4, #24]
 800e68e:	b11b      	cbz	r3, 800e698 <__sinit+0x14>
 800e690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e694:	f7ff bff0 	b.w	800e678 <__sinit_lock_release>
 800e698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e69c:	6523      	str	r3, [r4, #80]	; 0x50
 800e69e:	4b13      	ldr	r3, [pc, #76]	; (800e6ec <__sinit+0x68>)
 800e6a0:	4a13      	ldr	r2, [pc, #76]	; (800e6f0 <__sinit+0x6c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	bf04      	itt	eq
 800e6aa:	2301      	moveq	r3, #1
 800e6ac:	61a3      	streq	r3, [r4, #24]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 f820 	bl	800e6f4 <__sfp>
 800e6b4:	6060      	str	r0, [r4, #4]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 f81c 	bl	800e6f4 <__sfp>
 800e6bc:	60a0      	str	r0, [r4, #8]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f818 	bl	800e6f4 <__sfp>
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	60e0      	str	r0, [r4, #12]
 800e6c8:	2104      	movs	r1, #4
 800e6ca:	6860      	ldr	r0, [r4, #4]
 800e6cc:	f7ff ff82 	bl	800e5d4 <std>
 800e6d0:	68a0      	ldr	r0, [r4, #8]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	2109      	movs	r1, #9
 800e6d6:	f7ff ff7d 	bl	800e5d4 <std>
 800e6da:	68e0      	ldr	r0, [r4, #12]
 800e6dc:	2202      	movs	r2, #2
 800e6de:	2112      	movs	r1, #18
 800e6e0:	f7ff ff78 	bl	800e5d4 <std>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	61a3      	str	r3, [r4, #24]
 800e6e8:	e7d2      	b.n	800e690 <__sinit+0xc>
 800e6ea:	bf00      	nop
 800e6ec:	0800f43c 	.word	0x0800f43c
 800e6f0:	0800e61d 	.word	0x0800e61d

0800e6f4 <__sfp>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f7ff ffac 	bl	800e654 <__sfp_lock_acquire>
 800e6fc:	4b1e      	ldr	r3, [pc, #120]	; (800e778 <__sfp+0x84>)
 800e6fe:	681e      	ldr	r6, [r3, #0]
 800e700:	69b3      	ldr	r3, [r6, #24]
 800e702:	b913      	cbnz	r3, 800e70a <__sfp+0x16>
 800e704:	4630      	mov	r0, r6
 800e706:	f7ff ffbd 	bl	800e684 <__sinit>
 800e70a:	3648      	adds	r6, #72	; 0x48
 800e70c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e710:	3b01      	subs	r3, #1
 800e712:	d503      	bpl.n	800e71c <__sfp+0x28>
 800e714:	6833      	ldr	r3, [r6, #0]
 800e716:	b30b      	cbz	r3, 800e75c <__sfp+0x68>
 800e718:	6836      	ldr	r6, [r6, #0]
 800e71a:	e7f7      	b.n	800e70c <__sfp+0x18>
 800e71c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e720:	b9d5      	cbnz	r5, 800e758 <__sfp+0x64>
 800e722:	4b16      	ldr	r3, [pc, #88]	; (800e77c <__sfp+0x88>)
 800e724:	60e3      	str	r3, [r4, #12]
 800e726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e72a:	6665      	str	r5, [r4, #100]	; 0x64
 800e72c:	f000 f847 	bl	800e7be <__retarget_lock_init_recursive>
 800e730:	f7ff ff96 	bl	800e660 <__sfp_lock_release>
 800e734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e73c:	6025      	str	r5, [r4, #0]
 800e73e:	61a5      	str	r5, [r4, #24]
 800e740:	2208      	movs	r2, #8
 800e742:	4629      	mov	r1, r5
 800e744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e748:	f7ff fc20 	bl	800df8c <memset>
 800e74c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e754:	4620      	mov	r0, r4
 800e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e758:	3468      	adds	r4, #104	; 0x68
 800e75a:	e7d9      	b.n	800e710 <__sfp+0x1c>
 800e75c:	2104      	movs	r1, #4
 800e75e:	4638      	mov	r0, r7
 800e760:	f7ff ff62 	bl	800e628 <__sfmoreglue>
 800e764:	4604      	mov	r4, r0
 800e766:	6030      	str	r0, [r6, #0]
 800e768:	2800      	cmp	r0, #0
 800e76a:	d1d5      	bne.n	800e718 <__sfp+0x24>
 800e76c:	f7ff ff78 	bl	800e660 <__sfp_lock_release>
 800e770:	230c      	movs	r3, #12
 800e772:	603b      	str	r3, [r7, #0]
 800e774:	e7ee      	b.n	800e754 <__sfp+0x60>
 800e776:	bf00      	nop
 800e778:	0800f43c 	.word	0x0800f43c
 800e77c:	ffff0001 	.word	0xffff0001

0800e780 <_fwalk_reent>:
 800e780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e784:	4606      	mov	r6, r0
 800e786:	4688      	mov	r8, r1
 800e788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e78c:	2700      	movs	r7, #0
 800e78e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e792:	f1b9 0901 	subs.w	r9, r9, #1
 800e796:	d505      	bpl.n	800e7a4 <_fwalk_reent+0x24>
 800e798:	6824      	ldr	r4, [r4, #0]
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	d1f7      	bne.n	800e78e <_fwalk_reent+0xe>
 800e79e:	4638      	mov	r0, r7
 800e7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a4:	89ab      	ldrh	r3, [r5, #12]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d907      	bls.n	800e7ba <_fwalk_reent+0x3a>
 800e7aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	d003      	beq.n	800e7ba <_fwalk_reent+0x3a>
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	47c0      	blx	r8
 800e7b8:	4307      	orrs	r7, r0
 800e7ba:	3568      	adds	r5, #104	; 0x68
 800e7bc:	e7e9      	b.n	800e792 <_fwalk_reent+0x12>

0800e7be <__retarget_lock_init_recursive>:
 800e7be:	4770      	bx	lr

0800e7c0 <__retarget_lock_acquire_recursive>:
 800e7c0:	4770      	bx	lr

0800e7c2 <__retarget_lock_release_recursive>:
 800e7c2:	4770      	bx	lr

0800e7c4 <__swhatbuf_r>:
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	460e      	mov	r6, r1
 800e7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	b096      	sub	sp, #88	; 0x58
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	461d      	mov	r5, r3
 800e7d4:	da08      	bge.n	800e7e8 <__swhatbuf_r+0x24>
 800e7d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	061a      	lsls	r2, r3, #24
 800e7e0:	d410      	bmi.n	800e804 <__swhatbuf_r+0x40>
 800e7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7e6:	e00e      	b.n	800e806 <__swhatbuf_r+0x42>
 800e7e8:	466a      	mov	r2, sp
 800e7ea:	f000 fc71 	bl	800f0d0 <_fstat_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dbf1      	blt.n	800e7d6 <__swhatbuf_r+0x12>
 800e7f2:	9a01      	ldr	r2, [sp, #4]
 800e7f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7fc:	425a      	negs	r2, r3
 800e7fe:	415a      	adcs	r2, r3
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	e7ee      	b.n	800e7e2 <__swhatbuf_r+0x1e>
 800e804:	2340      	movs	r3, #64	; 0x40
 800e806:	2000      	movs	r0, #0
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	b016      	add	sp, #88	; 0x58
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e810 <__smakebuf_r>:
 800e810:	898b      	ldrh	r3, [r1, #12]
 800e812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e814:	079d      	lsls	r5, r3, #30
 800e816:	4606      	mov	r6, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	d507      	bpl.n	800e82c <__smakebuf_r+0x1c>
 800e81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2301      	movs	r3, #1
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	b002      	add	sp, #8
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	ab01      	add	r3, sp, #4
 800e82e:	466a      	mov	r2, sp
 800e830:	f7ff ffc8 	bl	800e7c4 <__swhatbuf_r>
 800e834:	9900      	ldr	r1, [sp, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff fc1b 	bl	800e074 <_malloc_r>
 800e83e:	b948      	cbnz	r0, 800e854 <__smakebuf_r+0x44>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d4ef      	bmi.n	800e828 <__smakebuf_r+0x18>
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	e7e3      	b.n	800e81c <__smakebuf_r+0xc>
 800e854:	4b0d      	ldr	r3, [pc, #52]	; (800e88c <__smakebuf_r+0x7c>)
 800e856:	62b3      	str	r3, [r6, #40]	; 0x28
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	6020      	str	r0, [r4, #0]
 800e85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	6163      	str	r3, [r4, #20]
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	6120      	str	r0, [r4, #16]
 800e86a:	b15b      	cbz	r3, 800e884 <__smakebuf_r+0x74>
 800e86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e870:	4630      	mov	r0, r6
 800e872:	f000 fc3f 	bl	800f0f4 <_isatty_r>
 800e876:	b128      	cbz	r0, 800e884 <__smakebuf_r+0x74>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f023 0303 	bic.w	r3, r3, #3
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	89a0      	ldrh	r0, [r4, #12]
 800e886:	4305      	orrs	r5, r0
 800e888:	81a5      	strh	r5, [r4, #12]
 800e88a:	e7cd      	b.n	800e828 <__smakebuf_r+0x18>
 800e88c:	0800e61d 	.word	0x0800e61d

0800e890 <__malloc_lock>:
 800e890:	4801      	ldr	r0, [pc, #4]	; (800e898 <__malloc_lock+0x8>)
 800e892:	f7ff bf95 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e896:	bf00      	nop
 800e898:	20000c10 	.word	0x20000c10

0800e89c <__malloc_unlock>:
 800e89c:	4801      	ldr	r0, [pc, #4]	; (800e8a4 <__malloc_unlock+0x8>)
 800e89e:	f7ff bf90 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e8a2:	bf00      	nop
 800e8a4:	20000c10 	.word	0x20000c10

0800e8a8 <__sfputc_r>:
 800e8a8:	6893      	ldr	r3, [r2, #8]
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	b410      	push	{r4}
 800e8b0:	6093      	str	r3, [r2, #8]
 800e8b2:	da08      	bge.n	800e8c6 <__sfputc_r+0x1e>
 800e8b4:	6994      	ldr	r4, [r2, #24]
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	db01      	blt.n	800e8be <__sfputc_r+0x16>
 800e8ba:	290a      	cmp	r1, #10
 800e8bc:	d103      	bne.n	800e8c6 <__sfputc_r+0x1e>
 800e8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8c2:	f000 bb23 	b.w	800ef0c <__swbuf_r>
 800e8c6:	6813      	ldr	r3, [r2, #0]
 800e8c8:	1c58      	adds	r0, r3, #1
 800e8ca:	6010      	str	r0, [r2, #0]
 800e8cc:	7019      	strb	r1, [r3, #0]
 800e8ce:	4608      	mov	r0, r1
 800e8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <__sfputs_r>:
 800e8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d8:	4606      	mov	r6, r0
 800e8da:	460f      	mov	r7, r1
 800e8dc:	4614      	mov	r4, r2
 800e8de:	18d5      	adds	r5, r2, r3
 800e8e0:	42ac      	cmp	r4, r5
 800e8e2:	d101      	bne.n	800e8e8 <__sfputs_r+0x12>
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	e007      	b.n	800e8f8 <__sfputs_r+0x22>
 800e8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ec:	463a      	mov	r2, r7
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7ff ffda 	bl	800e8a8 <__sfputc_r>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d1f3      	bne.n	800e8e0 <__sfputs_r+0xa>
 800e8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8fc <_vfiprintf_r>:
 800e8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e900:	460d      	mov	r5, r1
 800e902:	b09d      	sub	sp, #116	; 0x74
 800e904:	4614      	mov	r4, r2
 800e906:	4698      	mov	r8, r3
 800e908:	4606      	mov	r6, r0
 800e90a:	b118      	cbz	r0, 800e914 <_vfiprintf_r+0x18>
 800e90c:	6983      	ldr	r3, [r0, #24]
 800e90e:	b90b      	cbnz	r3, 800e914 <_vfiprintf_r+0x18>
 800e910:	f7ff feb8 	bl	800e684 <__sinit>
 800e914:	4b89      	ldr	r3, [pc, #548]	; (800eb3c <_vfiprintf_r+0x240>)
 800e916:	429d      	cmp	r5, r3
 800e918:	d11b      	bne.n	800e952 <_vfiprintf_r+0x56>
 800e91a:	6875      	ldr	r5, [r6, #4]
 800e91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e91e:	07d9      	lsls	r1, r3, #31
 800e920:	d405      	bmi.n	800e92e <_vfiprintf_r+0x32>
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	059a      	lsls	r2, r3, #22
 800e926:	d402      	bmi.n	800e92e <_vfiprintf_r+0x32>
 800e928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e92a:	f7ff ff49 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800e92e:	89ab      	ldrh	r3, [r5, #12]
 800e930:	071b      	lsls	r3, r3, #28
 800e932:	d501      	bpl.n	800e938 <_vfiprintf_r+0x3c>
 800e934:	692b      	ldr	r3, [r5, #16]
 800e936:	b9eb      	cbnz	r3, 800e974 <_vfiprintf_r+0x78>
 800e938:	4629      	mov	r1, r5
 800e93a:	4630      	mov	r0, r6
 800e93c:	f000 fb4a 	bl	800efd4 <__swsetup_r>
 800e940:	b1c0      	cbz	r0, 800e974 <_vfiprintf_r+0x78>
 800e942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e944:	07dc      	lsls	r4, r3, #31
 800e946:	d50e      	bpl.n	800e966 <_vfiprintf_r+0x6a>
 800e948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e94c:	b01d      	add	sp, #116	; 0x74
 800e94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e952:	4b7b      	ldr	r3, [pc, #492]	; (800eb40 <_vfiprintf_r+0x244>)
 800e954:	429d      	cmp	r5, r3
 800e956:	d101      	bne.n	800e95c <_vfiprintf_r+0x60>
 800e958:	68b5      	ldr	r5, [r6, #8]
 800e95a:	e7df      	b.n	800e91c <_vfiprintf_r+0x20>
 800e95c:	4b79      	ldr	r3, [pc, #484]	; (800eb44 <_vfiprintf_r+0x248>)
 800e95e:	429d      	cmp	r5, r3
 800e960:	bf08      	it	eq
 800e962:	68f5      	ldreq	r5, [r6, #12]
 800e964:	e7da      	b.n	800e91c <_vfiprintf_r+0x20>
 800e966:	89ab      	ldrh	r3, [r5, #12]
 800e968:	0598      	lsls	r0, r3, #22
 800e96a:	d4ed      	bmi.n	800e948 <_vfiprintf_r+0x4c>
 800e96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e96e:	f7ff ff28 	bl	800e7c2 <__retarget_lock_release_recursive>
 800e972:	e7e9      	b.n	800e948 <_vfiprintf_r+0x4c>
 800e974:	2300      	movs	r3, #0
 800e976:	9309      	str	r3, [sp, #36]	; 0x24
 800e978:	2320      	movs	r3, #32
 800e97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e982:	2330      	movs	r3, #48	; 0x30
 800e984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb48 <_vfiprintf_r+0x24c>
 800e988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e98c:	f04f 0901 	mov.w	r9, #1
 800e990:	4623      	mov	r3, r4
 800e992:	469a      	mov	sl, r3
 800e994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e998:	b10a      	cbz	r2, 800e99e <_vfiprintf_r+0xa2>
 800e99a:	2a25      	cmp	r2, #37	; 0x25
 800e99c:	d1f9      	bne.n	800e992 <_vfiprintf_r+0x96>
 800e99e:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a2:	d00b      	beq.n	800e9bc <_vfiprintf_r+0xc0>
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7ff ff93 	bl	800e8d6 <__sfputs_r>
 800e9b0:	3001      	adds	r0, #1
 800e9b2:	f000 80aa 	beq.w	800eb0a <_vfiprintf_r+0x20e>
 800e9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b8:	445a      	add	r2, fp
 800e9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f000 80a2 	beq.w	800eb0a <_vfiprintf_r+0x20e>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9d0:	f10a 0a01 	add.w	sl, sl, #1
 800e9d4:	9304      	str	r3, [sp, #16]
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e9de:	4654      	mov	r4, sl
 800e9e0:	2205      	movs	r2, #5
 800e9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e6:	4858      	ldr	r0, [pc, #352]	; (800eb48 <_vfiprintf_r+0x24c>)
 800e9e8:	f7f1 fc02 	bl	80001f0 <memchr>
 800e9ec:	9a04      	ldr	r2, [sp, #16]
 800e9ee:	b9d8      	cbnz	r0, 800ea28 <_vfiprintf_r+0x12c>
 800e9f0:	06d1      	lsls	r1, r2, #27
 800e9f2:	bf44      	itt	mi
 800e9f4:	2320      	movmi	r3, #32
 800e9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9fa:	0713      	lsls	r3, r2, #28
 800e9fc:	bf44      	itt	mi
 800e9fe:	232b      	movmi	r3, #43	; 0x2b
 800ea00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea04:	f89a 3000 	ldrb.w	r3, [sl]
 800ea08:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0a:	d015      	beq.n	800ea38 <_vfiprintf_r+0x13c>
 800ea0c:	9a07      	ldr	r2, [sp, #28]
 800ea0e:	4654      	mov	r4, sl
 800ea10:	2000      	movs	r0, #0
 800ea12:	f04f 0c0a 	mov.w	ip, #10
 800ea16:	4621      	mov	r1, r4
 800ea18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1c:	3b30      	subs	r3, #48	; 0x30
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	d94e      	bls.n	800eac0 <_vfiprintf_r+0x1c4>
 800ea22:	b1b0      	cbz	r0, 800ea52 <_vfiprintf_r+0x156>
 800ea24:	9207      	str	r2, [sp, #28]
 800ea26:	e014      	b.n	800ea52 <_vfiprintf_r+0x156>
 800ea28:	eba0 0308 	sub.w	r3, r0, r8
 800ea2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	46a2      	mov	sl, r4
 800ea36:	e7d2      	b.n	800e9de <_vfiprintf_r+0xe2>
 800ea38:	9b03      	ldr	r3, [sp, #12]
 800ea3a:	1d19      	adds	r1, r3, #4
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	9103      	str	r1, [sp, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	bfbb      	ittet	lt
 800ea44:	425b      	neglt	r3, r3
 800ea46:	f042 0202 	orrlt.w	r2, r2, #2
 800ea4a:	9307      	strge	r3, [sp, #28]
 800ea4c:	9307      	strlt	r3, [sp, #28]
 800ea4e:	bfb8      	it	lt
 800ea50:	9204      	strlt	r2, [sp, #16]
 800ea52:	7823      	ldrb	r3, [r4, #0]
 800ea54:	2b2e      	cmp	r3, #46	; 0x2e
 800ea56:	d10c      	bne.n	800ea72 <_vfiprintf_r+0x176>
 800ea58:	7863      	ldrb	r3, [r4, #1]
 800ea5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5c:	d135      	bne.n	800eaca <_vfiprintf_r+0x1ce>
 800ea5e:	9b03      	ldr	r3, [sp, #12]
 800ea60:	1d1a      	adds	r2, r3, #4
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	9203      	str	r2, [sp, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	bfb8      	it	lt
 800ea6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea6e:	3402      	adds	r4, #2
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb58 <_vfiprintf_r+0x25c>
 800ea76:	7821      	ldrb	r1, [r4, #0]
 800ea78:	2203      	movs	r2, #3
 800ea7a:	4650      	mov	r0, sl
 800ea7c:	f7f1 fbb8 	bl	80001f0 <memchr>
 800ea80:	b140      	cbz	r0, 800ea94 <_vfiprintf_r+0x198>
 800ea82:	2340      	movs	r3, #64	; 0x40
 800ea84:	eba0 000a 	sub.w	r0, r0, sl
 800ea88:	fa03 f000 	lsl.w	r0, r3, r0
 800ea8c:	9b04      	ldr	r3, [sp, #16]
 800ea8e:	4303      	orrs	r3, r0
 800ea90:	3401      	adds	r4, #1
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea98:	482c      	ldr	r0, [pc, #176]	; (800eb4c <_vfiprintf_r+0x250>)
 800ea9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea9e:	2206      	movs	r2, #6
 800eaa0:	f7f1 fba6 	bl	80001f0 <memchr>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d03f      	beq.n	800eb28 <_vfiprintf_r+0x22c>
 800eaa8:	4b29      	ldr	r3, [pc, #164]	; (800eb50 <_vfiprintf_r+0x254>)
 800eaaa:	bb1b      	cbnz	r3, 800eaf4 <_vfiprintf_r+0x1f8>
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	3307      	adds	r3, #7
 800eab0:	f023 0307 	bic.w	r3, r3, #7
 800eab4:	3308      	adds	r3, #8
 800eab6:	9303      	str	r3, [sp, #12]
 800eab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaba:	443b      	add	r3, r7
 800eabc:	9309      	str	r3, [sp, #36]	; 0x24
 800eabe:	e767      	b.n	800e990 <_vfiprintf_r+0x94>
 800eac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac4:	460c      	mov	r4, r1
 800eac6:	2001      	movs	r0, #1
 800eac8:	e7a5      	b.n	800ea16 <_vfiprintf_r+0x11a>
 800eaca:	2300      	movs	r3, #0
 800eacc:	3401      	adds	r4, #1
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	4619      	mov	r1, r3
 800ead2:	f04f 0c0a 	mov.w	ip, #10
 800ead6:	4620      	mov	r0, r4
 800ead8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eadc:	3a30      	subs	r2, #48	; 0x30
 800eade:	2a09      	cmp	r2, #9
 800eae0:	d903      	bls.n	800eaea <_vfiprintf_r+0x1ee>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d0c5      	beq.n	800ea72 <_vfiprintf_r+0x176>
 800eae6:	9105      	str	r1, [sp, #20]
 800eae8:	e7c3      	b.n	800ea72 <_vfiprintf_r+0x176>
 800eaea:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaee:	4604      	mov	r4, r0
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e7f0      	b.n	800ead6 <_vfiprintf_r+0x1da>
 800eaf4:	ab03      	add	r3, sp, #12
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	462a      	mov	r2, r5
 800eafa:	4b16      	ldr	r3, [pc, #88]	; (800eb54 <_vfiprintf_r+0x258>)
 800eafc:	a904      	add	r1, sp, #16
 800eafe:	4630      	mov	r0, r6
 800eb00:	f3af 8000 	nop.w
 800eb04:	4607      	mov	r7, r0
 800eb06:	1c78      	adds	r0, r7, #1
 800eb08:	d1d6      	bne.n	800eab8 <_vfiprintf_r+0x1bc>
 800eb0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb0c:	07d9      	lsls	r1, r3, #31
 800eb0e:	d405      	bmi.n	800eb1c <_vfiprintf_r+0x220>
 800eb10:	89ab      	ldrh	r3, [r5, #12]
 800eb12:	059a      	lsls	r2, r3, #22
 800eb14:	d402      	bmi.n	800eb1c <_vfiprintf_r+0x220>
 800eb16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb18:	f7ff fe53 	bl	800e7c2 <__retarget_lock_release_recursive>
 800eb1c:	89ab      	ldrh	r3, [r5, #12]
 800eb1e:	065b      	lsls	r3, r3, #25
 800eb20:	f53f af12 	bmi.w	800e948 <_vfiprintf_r+0x4c>
 800eb24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb26:	e711      	b.n	800e94c <_vfiprintf_r+0x50>
 800eb28:	ab03      	add	r3, sp, #12
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	462a      	mov	r2, r5
 800eb2e:	4b09      	ldr	r3, [pc, #36]	; (800eb54 <_vfiprintf_r+0x258>)
 800eb30:	a904      	add	r1, sp, #16
 800eb32:	4630      	mov	r0, r6
 800eb34:	f000 f880 	bl	800ec38 <_printf_i>
 800eb38:	e7e4      	b.n	800eb04 <_vfiprintf_r+0x208>
 800eb3a:	bf00      	nop
 800eb3c:	0800f564 	.word	0x0800f564
 800eb40:	0800f584 	.word	0x0800f584
 800eb44:	0800f544 	.word	0x0800f544
 800eb48:	0800f5a4 	.word	0x0800f5a4
 800eb4c:	0800f5ae 	.word	0x0800f5ae
 800eb50:	00000000 	.word	0x00000000
 800eb54:	0800e8d7 	.word	0x0800e8d7
 800eb58:	0800f5aa 	.word	0x0800f5aa

0800eb5c <_printf_common>:
 800eb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb60:	4616      	mov	r6, r2
 800eb62:	4699      	mov	r9, r3
 800eb64:	688a      	ldr	r2, [r1, #8]
 800eb66:	690b      	ldr	r3, [r1, #16]
 800eb68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	bfb8      	it	lt
 800eb70:	4613      	movlt	r3, r2
 800eb72:	6033      	str	r3, [r6, #0]
 800eb74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb78:	4607      	mov	r7, r0
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	b10a      	cbz	r2, 800eb82 <_printf_common+0x26>
 800eb7e:	3301      	adds	r3, #1
 800eb80:	6033      	str	r3, [r6, #0]
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	0699      	lsls	r1, r3, #26
 800eb86:	bf42      	ittt	mi
 800eb88:	6833      	ldrmi	r3, [r6, #0]
 800eb8a:	3302      	addmi	r3, #2
 800eb8c:	6033      	strmi	r3, [r6, #0]
 800eb8e:	6825      	ldr	r5, [r4, #0]
 800eb90:	f015 0506 	ands.w	r5, r5, #6
 800eb94:	d106      	bne.n	800eba4 <_printf_common+0x48>
 800eb96:	f104 0a19 	add.w	sl, r4, #25
 800eb9a:	68e3      	ldr	r3, [r4, #12]
 800eb9c:	6832      	ldr	r2, [r6, #0]
 800eb9e:	1a9b      	subs	r3, r3, r2
 800eba0:	42ab      	cmp	r3, r5
 800eba2:	dc26      	bgt.n	800ebf2 <_printf_common+0x96>
 800eba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eba8:	1e13      	subs	r3, r2, #0
 800ebaa:	6822      	ldr	r2, [r4, #0]
 800ebac:	bf18      	it	ne
 800ebae:	2301      	movne	r3, #1
 800ebb0:	0692      	lsls	r2, r2, #26
 800ebb2:	d42b      	bmi.n	800ec0c <_printf_common+0xb0>
 800ebb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebb8:	4649      	mov	r1, r9
 800ebba:	4638      	mov	r0, r7
 800ebbc:	47c0      	blx	r8
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d01e      	beq.n	800ec00 <_printf_common+0xa4>
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	68e5      	ldr	r5, [r4, #12]
 800ebc6:	6832      	ldr	r2, [r6, #0]
 800ebc8:	f003 0306 	and.w	r3, r3, #6
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	bf08      	it	eq
 800ebd0:	1aad      	subeq	r5, r5, r2
 800ebd2:	68a3      	ldr	r3, [r4, #8]
 800ebd4:	6922      	ldr	r2, [r4, #16]
 800ebd6:	bf0c      	ite	eq
 800ebd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebdc:	2500      	movne	r5, #0
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	bfc4      	itt	gt
 800ebe2:	1a9b      	subgt	r3, r3, r2
 800ebe4:	18ed      	addgt	r5, r5, r3
 800ebe6:	2600      	movs	r6, #0
 800ebe8:	341a      	adds	r4, #26
 800ebea:	42b5      	cmp	r5, r6
 800ebec:	d11a      	bne.n	800ec24 <_printf_common+0xc8>
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e008      	b.n	800ec04 <_printf_common+0xa8>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4652      	mov	r2, sl
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	47c0      	blx	r8
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d103      	bne.n	800ec08 <_printf_common+0xac>
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec08:	3501      	adds	r5, #1
 800ec0a:	e7c6      	b.n	800eb9a <_printf_common+0x3e>
 800ec0c:	18e1      	adds	r1, r4, r3
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	2030      	movs	r0, #48	; 0x30
 800ec12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec16:	4422      	add	r2, r4
 800ec18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec20:	3302      	adds	r3, #2
 800ec22:	e7c7      	b.n	800ebb4 <_printf_common+0x58>
 800ec24:	2301      	movs	r3, #1
 800ec26:	4622      	mov	r2, r4
 800ec28:	4649      	mov	r1, r9
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	47c0      	blx	r8
 800ec2e:	3001      	adds	r0, #1
 800ec30:	d0e6      	beq.n	800ec00 <_printf_common+0xa4>
 800ec32:	3601      	adds	r6, #1
 800ec34:	e7d9      	b.n	800ebea <_printf_common+0x8e>
	...

0800ec38 <_printf_i>:
 800ec38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec3c:	7e0f      	ldrb	r7, [r1, #24]
 800ec3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec40:	2f78      	cmp	r7, #120	; 0x78
 800ec42:	4691      	mov	r9, r2
 800ec44:	4680      	mov	r8, r0
 800ec46:	460c      	mov	r4, r1
 800ec48:	469a      	mov	sl, r3
 800ec4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec4e:	d807      	bhi.n	800ec60 <_printf_i+0x28>
 800ec50:	2f62      	cmp	r7, #98	; 0x62
 800ec52:	d80a      	bhi.n	800ec6a <_printf_i+0x32>
 800ec54:	2f00      	cmp	r7, #0
 800ec56:	f000 80d8 	beq.w	800ee0a <_printf_i+0x1d2>
 800ec5a:	2f58      	cmp	r7, #88	; 0x58
 800ec5c:	f000 80a3 	beq.w	800eda6 <_printf_i+0x16e>
 800ec60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec68:	e03a      	b.n	800ece0 <_printf_i+0xa8>
 800ec6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec6e:	2b15      	cmp	r3, #21
 800ec70:	d8f6      	bhi.n	800ec60 <_printf_i+0x28>
 800ec72:	a101      	add	r1, pc, #4	; (adr r1, 800ec78 <_printf_i+0x40>)
 800ec74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec78:	0800ecd1 	.word	0x0800ecd1
 800ec7c:	0800ece5 	.word	0x0800ece5
 800ec80:	0800ec61 	.word	0x0800ec61
 800ec84:	0800ec61 	.word	0x0800ec61
 800ec88:	0800ec61 	.word	0x0800ec61
 800ec8c:	0800ec61 	.word	0x0800ec61
 800ec90:	0800ece5 	.word	0x0800ece5
 800ec94:	0800ec61 	.word	0x0800ec61
 800ec98:	0800ec61 	.word	0x0800ec61
 800ec9c:	0800ec61 	.word	0x0800ec61
 800eca0:	0800ec61 	.word	0x0800ec61
 800eca4:	0800edf1 	.word	0x0800edf1
 800eca8:	0800ed15 	.word	0x0800ed15
 800ecac:	0800edd3 	.word	0x0800edd3
 800ecb0:	0800ec61 	.word	0x0800ec61
 800ecb4:	0800ec61 	.word	0x0800ec61
 800ecb8:	0800ee13 	.word	0x0800ee13
 800ecbc:	0800ec61 	.word	0x0800ec61
 800ecc0:	0800ed15 	.word	0x0800ed15
 800ecc4:	0800ec61 	.word	0x0800ec61
 800ecc8:	0800ec61 	.word	0x0800ec61
 800eccc:	0800eddb 	.word	0x0800eddb
 800ecd0:	682b      	ldr	r3, [r5, #0]
 800ecd2:	1d1a      	adds	r2, r3, #4
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	602a      	str	r2, [r5, #0]
 800ecd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ece0:	2301      	movs	r3, #1
 800ece2:	e0a3      	b.n	800ee2c <_printf_i+0x1f4>
 800ece4:	6820      	ldr	r0, [r4, #0]
 800ece6:	6829      	ldr	r1, [r5, #0]
 800ece8:	0606      	lsls	r6, r0, #24
 800ecea:	f101 0304 	add.w	r3, r1, #4
 800ecee:	d50a      	bpl.n	800ed06 <_printf_i+0xce>
 800ecf0:	680e      	ldr	r6, [r1, #0]
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	da03      	bge.n	800ed00 <_printf_i+0xc8>
 800ecf8:	232d      	movs	r3, #45	; 0x2d
 800ecfa:	4276      	negs	r6, r6
 800ecfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed00:	485e      	ldr	r0, [pc, #376]	; (800ee7c <_printf_i+0x244>)
 800ed02:	230a      	movs	r3, #10
 800ed04:	e019      	b.n	800ed3a <_printf_i+0x102>
 800ed06:	680e      	ldr	r6, [r1, #0]
 800ed08:	602b      	str	r3, [r5, #0]
 800ed0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed0e:	bf18      	it	ne
 800ed10:	b236      	sxthne	r6, r6
 800ed12:	e7ef      	b.n	800ecf4 <_printf_i+0xbc>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	6820      	ldr	r0, [r4, #0]
 800ed18:	1d19      	adds	r1, r3, #4
 800ed1a:	6029      	str	r1, [r5, #0]
 800ed1c:	0601      	lsls	r1, r0, #24
 800ed1e:	d501      	bpl.n	800ed24 <_printf_i+0xec>
 800ed20:	681e      	ldr	r6, [r3, #0]
 800ed22:	e002      	b.n	800ed2a <_printf_i+0xf2>
 800ed24:	0646      	lsls	r6, r0, #25
 800ed26:	d5fb      	bpl.n	800ed20 <_printf_i+0xe8>
 800ed28:	881e      	ldrh	r6, [r3, #0]
 800ed2a:	4854      	ldr	r0, [pc, #336]	; (800ee7c <_printf_i+0x244>)
 800ed2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed2e:	bf0c      	ite	eq
 800ed30:	2308      	moveq	r3, #8
 800ed32:	230a      	movne	r3, #10
 800ed34:	2100      	movs	r1, #0
 800ed36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed3a:	6865      	ldr	r5, [r4, #4]
 800ed3c:	60a5      	str	r5, [r4, #8]
 800ed3e:	2d00      	cmp	r5, #0
 800ed40:	bfa2      	ittt	ge
 800ed42:	6821      	ldrge	r1, [r4, #0]
 800ed44:	f021 0104 	bicge.w	r1, r1, #4
 800ed48:	6021      	strge	r1, [r4, #0]
 800ed4a:	b90e      	cbnz	r6, 800ed50 <_printf_i+0x118>
 800ed4c:	2d00      	cmp	r5, #0
 800ed4e:	d04d      	beq.n	800edec <_printf_i+0x1b4>
 800ed50:	4615      	mov	r5, r2
 800ed52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed56:	fb03 6711 	mls	r7, r3, r1, r6
 800ed5a:	5dc7      	ldrb	r7, [r0, r7]
 800ed5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed60:	4637      	mov	r7, r6
 800ed62:	42bb      	cmp	r3, r7
 800ed64:	460e      	mov	r6, r1
 800ed66:	d9f4      	bls.n	800ed52 <_printf_i+0x11a>
 800ed68:	2b08      	cmp	r3, #8
 800ed6a:	d10b      	bne.n	800ed84 <_printf_i+0x14c>
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	07de      	lsls	r6, r3, #31
 800ed70:	d508      	bpl.n	800ed84 <_printf_i+0x14c>
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	6861      	ldr	r1, [r4, #4]
 800ed76:	4299      	cmp	r1, r3
 800ed78:	bfde      	ittt	le
 800ed7a:	2330      	movle	r3, #48	; 0x30
 800ed7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ed84:	1b52      	subs	r2, r2, r5
 800ed86:	6122      	str	r2, [r4, #16]
 800ed88:	f8cd a000 	str.w	sl, [sp]
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	aa03      	add	r2, sp, #12
 800ed90:	4621      	mov	r1, r4
 800ed92:	4640      	mov	r0, r8
 800ed94:	f7ff fee2 	bl	800eb5c <_printf_common>
 800ed98:	3001      	adds	r0, #1
 800ed9a:	d14c      	bne.n	800ee36 <_printf_i+0x1fe>
 800ed9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eda0:	b004      	add	sp, #16
 800eda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda6:	4835      	ldr	r0, [pc, #212]	; (800ee7c <_printf_i+0x244>)
 800eda8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edac:	6829      	ldr	r1, [r5, #0]
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800edb4:	6029      	str	r1, [r5, #0]
 800edb6:	061d      	lsls	r5, r3, #24
 800edb8:	d514      	bpl.n	800ede4 <_printf_i+0x1ac>
 800edba:	07df      	lsls	r7, r3, #31
 800edbc:	bf44      	itt	mi
 800edbe:	f043 0320 	orrmi.w	r3, r3, #32
 800edc2:	6023      	strmi	r3, [r4, #0]
 800edc4:	b91e      	cbnz	r6, 800edce <_printf_i+0x196>
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	f023 0320 	bic.w	r3, r3, #32
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	2310      	movs	r3, #16
 800edd0:	e7b0      	b.n	800ed34 <_printf_i+0xfc>
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	f043 0320 	orr.w	r3, r3, #32
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	2378      	movs	r3, #120	; 0x78
 800eddc:	4828      	ldr	r0, [pc, #160]	; (800ee80 <_printf_i+0x248>)
 800edde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ede2:	e7e3      	b.n	800edac <_printf_i+0x174>
 800ede4:	0659      	lsls	r1, r3, #25
 800ede6:	bf48      	it	mi
 800ede8:	b2b6      	uxthmi	r6, r6
 800edea:	e7e6      	b.n	800edba <_printf_i+0x182>
 800edec:	4615      	mov	r5, r2
 800edee:	e7bb      	b.n	800ed68 <_printf_i+0x130>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	6826      	ldr	r6, [r4, #0]
 800edf4:	6961      	ldr	r1, [r4, #20]
 800edf6:	1d18      	adds	r0, r3, #4
 800edf8:	6028      	str	r0, [r5, #0]
 800edfa:	0635      	lsls	r5, r6, #24
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	d501      	bpl.n	800ee04 <_printf_i+0x1cc>
 800ee00:	6019      	str	r1, [r3, #0]
 800ee02:	e002      	b.n	800ee0a <_printf_i+0x1d2>
 800ee04:	0670      	lsls	r0, r6, #25
 800ee06:	d5fb      	bpl.n	800ee00 <_printf_i+0x1c8>
 800ee08:	8019      	strh	r1, [r3, #0]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	4615      	mov	r5, r2
 800ee10:	e7ba      	b.n	800ed88 <_printf_i+0x150>
 800ee12:	682b      	ldr	r3, [r5, #0]
 800ee14:	1d1a      	adds	r2, r3, #4
 800ee16:	602a      	str	r2, [r5, #0]
 800ee18:	681d      	ldr	r5, [r3, #0]
 800ee1a:	6862      	ldr	r2, [r4, #4]
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f7f1 f9e6 	bl	80001f0 <memchr>
 800ee24:	b108      	cbz	r0, 800ee2a <_printf_i+0x1f2>
 800ee26:	1b40      	subs	r0, r0, r5
 800ee28:	6060      	str	r0, [r4, #4]
 800ee2a:	6863      	ldr	r3, [r4, #4]
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee34:	e7a8      	b.n	800ed88 <_printf_i+0x150>
 800ee36:	6923      	ldr	r3, [r4, #16]
 800ee38:	462a      	mov	r2, r5
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	47d0      	blx	sl
 800ee40:	3001      	adds	r0, #1
 800ee42:	d0ab      	beq.n	800ed9c <_printf_i+0x164>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	079b      	lsls	r3, r3, #30
 800ee48:	d413      	bmi.n	800ee72 <_printf_i+0x23a>
 800ee4a:	68e0      	ldr	r0, [r4, #12]
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	4298      	cmp	r0, r3
 800ee50:	bfb8      	it	lt
 800ee52:	4618      	movlt	r0, r3
 800ee54:	e7a4      	b.n	800eda0 <_printf_i+0x168>
 800ee56:	2301      	movs	r3, #1
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	47d0      	blx	sl
 800ee60:	3001      	adds	r0, #1
 800ee62:	d09b      	beq.n	800ed9c <_printf_i+0x164>
 800ee64:	3501      	adds	r5, #1
 800ee66:	68e3      	ldr	r3, [r4, #12]
 800ee68:	9903      	ldr	r1, [sp, #12]
 800ee6a:	1a5b      	subs	r3, r3, r1
 800ee6c:	42ab      	cmp	r3, r5
 800ee6e:	dcf2      	bgt.n	800ee56 <_printf_i+0x21e>
 800ee70:	e7eb      	b.n	800ee4a <_printf_i+0x212>
 800ee72:	2500      	movs	r5, #0
 800ee74:	f104 0619 	add.w	r6, r4, #25
 800ee78:	e7f5      	b.n	800ee66 <_printf_i+0x22e>
 800ee7a:	bf00      	nop
 800ee7c:	0800f5b5 	.word	0x0800f5b5
 800ee80:	0800f5c6 	.word	0x0800f5c6

0800ee84 <__sread>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	460c      	mov	r4, r1
 800ee88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee8c:	f000 f954 	bl	800f138 <_read_r>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	bfab      	itete	ge
 800ee94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee96:	89a3      	ldrhlt	r3, [r4, #12]
 800ee98:	181b      	addge	r3, r3, r0
 800ee9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee9e:	bfac      	ite	ge
 800eea0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eea2:	81a3      	strhlt	r3, [r4, #12]
 800eea4:	bd10      	pop	{r4, pc}

0800eea6 <__swrite>:
 800eea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeaa:	461f      	mov	r7, r3
 800eeac:	898b      	ldrh	r3, [r1, #12]
 800eeae:	05db      	lsls	r3, r3, #23
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	4616      	mov	r6, r2
 800eeb6:	d505      	bpl.n	800eec4 <__swrite+0x1e>
 800eeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eebc:	2302      	movs	r3, #2
 800eebe:	2200      	movs	r2, #0
 800eec0:	f000 f928 	bl	800f114 <_lseek_r>
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	4632      	mov	r2, r6
 800eed2:	463b      	mov	r3, r7
 800eed4:	4628      	mov	r0, r5
 800eed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeda:	f000 b869 	b.w	800efb0 <_write_r>

0800eede <__sseek>:
 800eede:	b510      	push	{r4, lr}
 800eee0:	460c      	mov	r4, r1
 800eee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee6:	f000 f915 	bl	800f114 <_lseek_r>
 800eeea:	1c43      	adds	r3, r0, #1
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	bf15      	itete	ne
 800eef0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eefa:	81a3      	strheq	r3, [r4, #12]
 800eefc:	bf18      	it	ne
 800eefe:	81a3      	strhne	r3, [r4, #12]
 800ef00:	bd10      	pop	{r4, pc}

0800ef02 <__sclose>:
 800ef02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef06:	f000 b8d3 	b.w	800f0b0 <_close_r>
	...

0800ef0c <__swbuf_r>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	460e      	mov	r6, r1
 800ef10:	4614      	mov	r4, r2
 800ef12:	4605      	mov	r5, r0
 800ef14:	b118      	cbz	r0, 800ef1e <__swbuf_r+0x12>
 800ef16:	6983      	ldr	r3, [r0, #24]
 800ef18:	b90b      	cbnz	r3, 800ef1e <__swbuf_r+0x12>
 800ef1a:	f7ff fbb3 	bl	800e684 <__sinit>
 800ef1e:	4b21      	ldr	r3, [pc, #132]	; (800efa4 <__swbuf_r+0x98>)
 800ef20:	429c      	cmp	r4, r3
 800ef22:	d12b      	bne.n	800ef7c <__swbuf_r+0x70>
 800ef24:	686c      	ldr	r4, [r5, #4]
 800ef26:	69a3      	ldr	r3, [r4, #24]
 800ef28:	60a3      	str	r3, [r4, #8]
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	071a      	lsls	r2, r3, #28
 800ef2e:	d52f      	bpl.n	800ef90 <__swbuf_r+0x84>
 800ef30:	6923      	ldr	r3, [r4, #16]
 800ef32:	b36b      	cbz	r3, 800ef90 <__swbuf_r+0x84>
 800ef34:	6923      	ldr	r3, [r4, #16]
 800ef36:	6820      	ldr	r0, [r4, #0]
 800ef38:	1ac0      	subs	r0, r0, r3
 800ef3a:	6963      	ldr	r3, [r4, #20]
 800ef3c:	b2f6      	uxtb	r6, r6
 800ef3e:	4283      	cmp	r3, r0
 800ef40:	4637      	mov	r7, r6
 800ef42:	dc04      	bgt.n	800ef4e <__swbuf_r+0x42>
 800ef44:	4621      	mov	r1, r4
 800ef46:	4628      	mov	r0, r5
 800ef48:	f7ff fb08 	bl	800e55c <_fflush_r>
 800ef4c:	bb30      	cbnz	r0, 800ef9c <__swbuf_r+0x90>
 800ef4e:	68a3      	ldr	r3, [r4, #8]
 800ef50:	3b01      	subs	r3, #1
 800ef52:	60a3      	str	r3, [r4, #8]
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	6022      	str	r2, [r4, #0]
 800ef5a:	701e      	strb	r6, [r3, #0]
 800ef5c:	6963      	ldr	r3, [r4, #20]
 800ef5e:	3001      	adds	r0, #1
 800ef60:	4283      	cmp	r3, r0
 800ef62:	d004      	beq.n	800ef6e <__swbuf_r+0x62>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	07db      	lsls	r3, r3, #31
 800ef68:	d506      	bpl.n	800ef78 <__swbuf_r+0x6c>
 800ef6a:	2e0a      	cmp	r6, #10
 800ef6c:	d104      	bne.n	800ef78 <__swbuf_r+0x6c>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff faf3 	bl	800e55c <_fflush_r>
 800ef76:	b988      	cbnz	r0, 800ef9c <__swbuf_r+0x90>
 800ef78:	4638      	mov	r0, r7
 800ef7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <__swbuf_r+0x9c>)
 800ef7e:	429c      	cmp	r4, r3
 800ef80:	d101      	bne.n	800ef86 <__swbuf_r+0x7a>
 800ef82:	68ac      	ldr	r4, [r5, #8]
 800ef84:	e7cf      	b.n	800ef26 <__swbuf_r+0x1a>
 800ef86:	4b09      	ldr	r3, [pc, #36]	; (800efac <__swbuf_r+0xa0>)
 800ef88:	429c      	cmp	r4, r3
 800ef8a:	bf08      	it	eq
 800ef8c:	68ec      	ldreq	r4, [r5, #12]
 800ef8e:	e7ca      	b.n	800ef26 <__swbuf_r+0x1a>
 800ef90:	4621      	mov	r1, r4
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 f81e 	bl	800efd4 <__swsetup_r>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d0cb      	beq.n	800ef34 <__swbuf_r+0x28>
 800ef9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800efa0:	e7ea      	b.n	800ef78 <__swbuf_r+0x6c>
 800efa2:	bf00      	nop
 800efa4:	0800f564 	.word	0x0800f564
 800efa8:	0800f584 	.word	0x0800f584
 800efac:	0800f544 	.word	0x0800f544

0800efb0 <_write_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4d07      	ldr	r5, [pc, #28]	; (800efd0 <_write_r+0x20>)
 800efb4:	4604      	mov	r4, r0
 800efb6:	4608      	mov	r0, r1
 800efb8:	4611      	mov	r1, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	602a      	str	r2, [r5, #0]
 800efbe:	461a      	mov	r2, r3
 800efc0:	f7f2 fe92 	bl	8001ce8 <_write>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d102      	bne.n	800efce <_write_r+0x1e>
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	b103      	cbz	r3, 800efce <_write_r+0x1e>
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	20000c14 	.word	0x20000c14

0800efd4 <__swsetup_r>:
 800efd4:	4b32      	ldr	r3, [pc, #200]	; (800f0a0 <__swsetup_r+0xcc>)
 800efd6:	b570      	push	{r4, r5, r6, lr}
 800efd8:	681d      	ldr	r5, [r3, #0]
 800efda:	4606      	mov	r6, r0
 800efdc:	460c      	mov	r4, r1
 800efde:	b125      	cbz	r5, 800efea <__swsetup_r+0x16>
 800efe0:	69ab      	ldr	r3, [r5, #24]
 800efe2:	b913      	cbnz	r3, 800efea <__swsetup_r+0x16>
 800efe4:	4628      	mov	r0, r5
 800efe6:	f7ff fb4d 	bl	800e684 <__sinit>
 800efea:	4b2e      	ldr	r3, [pc, #184]	; (800f0a4 <__swsetup_r+0xd0>)
 800efec:	429c      	cmp	r4, r3
 800efee:	d10f      	bne.n	800f010 <__swsetup_r+0x3c>
 800eff0:	686c      	ldr	r4, [r5, #4]
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eff8:	0719      	lsls	r1, r3, #28
 800effa:	d42c      	bmi.n	800f056 <__swsetup_r+0x82>
 800effc:	06dd      	lsls	r5, r3, #27
 800effe:	d411      	bmi.n	800f024 <__swsetup_r+0x50>
 800f000:	2309      	movs	r3, #9
 800f002:	6033      	str	r3, [r6, #0]
 800f004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f008:	81a3      	strh	r3, [r4, #12]
 800f00a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f00e:	e03e      	b.n	800f08e <__swsetup_r+0xba>
 800f010:	4b25      	ldr	r3, [pc, #148]	; (800f0a8 <__swsetup_r+0xd4>)
 800f012:	429c      	cmp	r4, r3
 800f014:	d101      	bne.n	800f01a <__swsetup_r+0x46>
 800f016:	68ac      	ldr	r4, [r5, #8]
 800f018:	e7eb      	b.n	800eff2 <__swsetup_r+0x1e>
 800f01a:	4b24      	ldr	r3, [pc, #144]	; (800f0ac <__swsetup_r+0xd8>)
 800f01c:	429c      	cmp	r4, r3
 800f01e:	bf08      	it	eq
 800f020:	68ec      	ldreq	r4, [r5, #12]
 800f022:	e7e6      	b.n	800eff2 <__swsetup_r+0x1e>
 800f024:	0758      	lsls	r0, r3, #29
 800f026:	d512      	bpl.n	800f04e <__swsetup_r+0x7a>
 800f028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f02a:	b141      	cbz	r1, 800f03e <__swsetup_r+0x6a>
 800f02c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f030:	4299      	cmp	r1, r3
 800f032:	d002      	beq.n	800f03a <__swsetup_r+0x66>
 800f034:	4630      	mov	r0, r6
 800f036:	f7fe ffb1 	bl	800df9c <_free_r>
 800f03a:	2300      	movs	r3, #0
 800f03c:	6363      	str	r3, [r4, #52]	; 0x34
 800f03e:	89a3      	ldrh	r3, [r4, #12]
 800f040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f044:	81a3      	strh	r3, [r4, #12]
 800f046:	2300      	movs	r3, #0
 800f048:	6063      	str	r3, [r4, #4]
 800f04a:	6923      	ldr	r3, [r4, #16]
 800f04c:	6023      	str	r3, [r4, #0]
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	f043 0308 	orr.w	r3, r3, #8
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	6923      	ldr	r3, [r4, #16]
 800f058:	b94b      	cbnz	r3, 800f06e <__swsetup_r+0x9a>
 800f05a:	89a3      	ldrh	r3, [r4, #12]
 800f05c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f064:	d003      	beq.n	800f06e <__swsetup_r+0x9a>
 800f066:	4621      	mov	r1, r4
 800f068:	4630      	mov	r0, r6
 800f06a:	f7ff fbd1 	bl	800e810 <__smakebuf_r>
 800f06e:	89a0      	ldrh	r0, [r4, #12]
 800f070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f074:	f010 0301 	ands.w	r3, r0, #1
 800f078:	d00a      	beq.n	800f090 <__swsetup_r+0xbc>
 800f07a:	2300      	movs	r3, #0
 800f07c:	60a3      	str	r3, [r4, #8]
 800f07e:	6963      	ldr	r3, [r4, #20]
 800f080:	425b      	negs	r3, r3
 800f082:	61a3      	str	r3, [r4, #24]
 800f084:	6923      	ldr	r3, [r4, #16]
 800f086:	b943      	cbnz	r3, 800f09a <__swsetup_r+0xc6>
 800f088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f08c:	d1ba      	bne.n	800f004 <__swsetup_r+0x30>
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	0781      	lsls	r1, r0, #30
 800f092:	bf58      	it	pl
 800f094:	6963      	ldrpl	r3, [r4, #20]
 800f096:	60a3      	str	r3, [r4, #8]
 800f098:	e7f4      	b.n	800f084 <__swsetup_r+0xb0>
 800f09a:	2000      	movs	r0, #0
 800f09c:	e7f7      	b.n	800f08e <__swsetup_r+0xba>
 800f09e:	bf00      	nop
 800f0a0:	2000002c 	.word	0x2000002c
 800f0a4:	0800f564 	.word	0x0800f564
 800f0a8:	0800f584 	.word	0x0800f584
 800f0ac:	0800f544 	.word	0x0800f544

0800f0b0 <_close_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d06      	ldr	r5, [pc, #24]	; (800f0cc <_close_r+0x1c>)
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	602b      	str	r3, [r5, #0]
 800f0bc:	f7f2 fe40 	bl	8001d40 <_close>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_close_r+0x1a>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_close_r+0x1a>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	20000c14 	.word	0x20000c14

0800f0d0 <_fstat_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d07      	ldr	r5, [pc, #28]	; (800f0f0 <_fstat_r+0x20>)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	4611      	mov	r1, r2
 800f0dc:	602b      	str	r3, [r5, #0]
 800f0de:	f7f2 fe7f 	bl	8001de0 <_fstat>
 800f0e2:	1c43      	adds	r3, r0, #1
 800f0e4:	d102      	bne.n	800f0ec <_fstat_r+0x1c>
 800f0e6:	682b      	ldr	r3, [r5, #0]
 800f0e8:	b103      	cbz	r3, 800f0ec <_fstat_r+0x1c>
 800f0ea:	6023      	str	r3, [r4, #0]
 800f0ec:	bd38      	pop	{r3, r4, r5, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20000c14 	.word	0x20000c14

0800f0f4 <_isatty_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d06      	ldr	r5, [pc, #24]	; (800f110 <_isatty_r+0x1c>)
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	602b      	str	r3, [r5, #0]
 800f100:	f7f2 fddc 	bl	8001cbc <_isatty>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_isatty_r+0x1a>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_isatty_r+0x1a>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	20000c14 	.word	0x20000c14

0800f114 <_lseek_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d07      	ldr	r5, [pc, #28]	; (800f134 <_lseek_r+0x20>)
 800f118:	4604      	mov	r4, r0
 800f11a:	4608      	mov	r0, r1
 800f11c:	4611      	mov	r1, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	602a      	str	r2, [r5, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	f7f2 fe23 	bl	8001d6e <_lseek>
 800f128:	1c43      	adds	r3, r0, #1
 800f12a:	d102      	bne.n	800f132 <_lseek_r+0x1e>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b103      	cbz	r3, 800f132 <_lseek_r+0x1e>
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	20000c14 	.word	0x20000c14

0800f138 <_read_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4d07      	ldr	r5, [pc, #28]	; (800f158 <_read_r+0x20>)
 800f13c:	4604      	mov	r4, r0
 800f13e:	4608      	mov	r0, r1
 800f140:	4611      	mov	r1, r2
 800f142:	2200      	movs	r2, #0
 800f144:	602a      	str	r2, [r5, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	f7f2 fe22 	bl	8001d90 <_read>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_read_r+0x1e>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_read_r+0x1e>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	20000c14 	.word	0x20000c14

0800f15c <_init>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	bf00      	nop
 800f160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f162:	bc08      	pop	{r3}
 800f164:	469e      	mov	lr, r3
 800f166:	4770      	bx	lr

0800f168 <_fini>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	bf00      	nop
 800f16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f16e:	bc08      	pop	{r3}
 800f170:	469e      	mov	lr, r3
 800f172:	4770      	bx	lr
