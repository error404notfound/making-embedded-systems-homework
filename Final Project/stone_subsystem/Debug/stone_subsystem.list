
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009394  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009564  08009564  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800956c  0800956c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000097c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a0c  20000a0c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002063d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000443a  00000000  00000000  000406fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00044b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001878  00000000  00000000  00046550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284d4  00000000  00000000  00047dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f95  00000000  00000000  0007029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a8f  00000000  00000000  00091231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179cc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007158  00000000  00000000  00179d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009528 	.word	0x08009528

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08009528 	.word	0x08009528

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 ffbc 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f818 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa68 	bl	80009d0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000500:	f000 f87e 	bl	8000600 <MX_CRC_Init>
  MX_FMC_Init();
 8000504:	f000 fa14 	bl	8000930 <MX_FMC_Init>
  MX_I2C3_Init();
 8000508:	f000 f88e 	bl	8000628 <MX_I2C3_Init>
  MX_SPI5_Init();
 800050c:	f000 f8cc 	bl	80006a8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000510:	f000 f900 	bl	8000714 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f9c2 	bl	800089c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000518:	f000 f9ea 	bl	80008f0 <MX_DMA_Init>
  MX_TIM2_Init();
 800051c:	f000 f94a 	bl	80007b4 <MX_TIM2_Init>
  MX_USB_HOST_Init();
 8000520:	f008 fbb4 	bl	8008c8c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000524:	f008 fbd8 	bl	8008cd8 <MX_USB_HOST_Process>
 8000528:	e7fc      	b.n	8000524 <main+0x34>
	...

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 feee 	bl	800931c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a4:	2348      	movs	r3, #72	; 0x48
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ac:	2303      	movs	r3, #3
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fb39 	bl	8003c2c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 fbb4 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fd9b 	bl	800411c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fb9e 	bl	8000d2c <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CRC_Init+0x20>)
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <MX_CRC_Init+0x24>)
 8000608:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CRC_Init+0x20>)
 800060c:	f001 f878 	bl	8001700 <HAL_CRC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000616:	f000 fb89 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000ac 	.word	0x200000ac
 8000624:	40023000 	.word	0x40023000

08000628 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C3_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C3_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C3_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_I2C3_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C3_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_I2C3_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C3_Init+0x74>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2C3_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C3_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2C3_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C3_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_I2C3_Init+0x74>)
 8000666:	f003 f921 	bl	80038ac <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 fb5c 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_I2C3_Init+0x74>)
 8000678:	f003 fa5c 	bl	8003b34 <HAL_I2CEx_ConfigAnalogFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000682:	f000 fb53 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_I2C3_Init+0x74>)
 800068a:	f003 fa8f 	bl	8003bac <HAL_I2CEx_ConfigDigitalFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 fb4a 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000b4 	.word	0x200000b4
 80006a0:	40005c00 	.word	0x40005c00
 80006a4:	000186a0 	.word	0x000186a0

080006a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI5_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI5_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI5_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI5_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI5_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI5_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI5_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI5_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI5_Init+0x64>)
 80006dc:	2218      	movs	r2, #24
 80006de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI5_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI5_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI5_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI5_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI5_Init+0x64>)
 80006fa:	f003 ff95 	bl	8004628 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 fb12 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000108 	.word	0x20000108
 8000710:	40015000 	.word	0x40015000

08000714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_TIM1_Init+0x98>)
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_TIM1_Init+0x9c>)
 8000734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM1_Init+0x98>)
 8000744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_TIM1_Init+0x98>)
 800075e:	f003 ffec 	bl	800473a <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 fae0 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM1_Init+0x98>)
 800077a:	f004 fac1 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fad2 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM1_Init+0x98>)
 8000796:	f004 fe8d 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 fac4 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000160 	.word	0x20000160
 80007b0:	40010000 	.word	0x40010000

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_TIM2_Init+0xe4>)
 80007fa:	223b      	movs	r2, #59	; 0x3b
 80007fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080a:	4823      	ldr	r0, [pc, #140]	; (8000898 <MX_TIM2_Init+0xe4>)
 800080c:	f003 ff95 	bl	800473a <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000816:	f000 fa89 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000824:	4619      	mov	r1, r3
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000828:	f004 fa6a 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000832:	f000 fa7b 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000838:	f004 f83e 	bl	80048b8 <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 fa73 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	4619      	mov	r1, r3
 8000854:	4810      	ldr	r0, [pc, #64]	; (8000898 <MX_TIM2_Init+0xe4>)
 8000856:	f004 fe2d 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000860:	f000 fa64 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM2_Init+0xe4>)
 800087c:	f004 f97e 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000886:	f000 fa51 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM2_Init+0xe4>)
 800088c:	f000 fbbe 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3738      	adds	r7, #56	; 0x38
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001a8 	.word	0x200001a8

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART1_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f004 fe7e 	bl	80055d4 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 fa25 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000250 	.word	0x20000250
 80008ec:	40011000 	.word	0x40011000

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <MX_DMA_Init+0x3c>)
 8000900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_DMA_Init+0x3c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200c      	movs	r0, #12
 8000918:	f000 fec8 	bl	80016ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800091c:	200c      	movs	r0, #12
 800091e:	f000 fee1 	bl	80016e4 <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_FMC_Init+0x98>)
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <MX_FMC_Init+0x9c>)
 800094c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_FMC_Init+0x98>)
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_FMC_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_FMC_Init+0x98>)
 800095c:	2204      	movs	r2, #4
 800095e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_FMC_Init+0x98>)
 8000962:	2210      	movs	r2, #16
 8000964:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_FMC_Init+0x98>)
 8000968:	2240      	movs	r2, #64	; 0x40
 800096a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_FMC_Init+0x98>)
 800096e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000972:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_FMC_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_FMC_Init+0x98>)
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_FMC_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_FMC_Init+0x98>)
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000994:	2307      	movs	r3, #7
 8000996:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800099c:	2307      	movs	r3, #7
 800099e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_FMC_Init+0x98>)
 80009b2:	f003 fe05 	bl	80045c0 <HAL_SDRAM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009bc:	f000 f9b6 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000294 	.word	0x20000294
 80009cc:	a0000140 	.word	0xa0000140

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	4bb2      	ldr	r3, [pc, #712]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4ab1      	ldr	r2, [pc, #708]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4baf      	ldr	r3, [pc, #700]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	4bab      	ldr	r3, [pc, #684]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4aaa      	ldr	r2, [pc, #680]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	4ba4      	ldr	r3, [pc, #656]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4aa3      	ldr	r2, [pc, #652]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4ba1      	ldr	r3, [pc, #644]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	4b9d      	ldr	r3, [pc, #628]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a9c      	ldr	r2, [pc, #624]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b9a      	ldr	r3, [pc, #616]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b96      	ldr	r3, [pc, #600]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a95      	ldr	r2, [pc, #596]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b93      	ldr	r3, [pc, #588]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b8f      	ldr	r3, [pc, #572]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a8e      	ldr	r2, [pc, #568]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b8c      	ldr	r3, [pc, #560]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b88      	ldr	r3, [pc, #544]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a87      	ldr	r2, [pc, #540]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b81      	ldr	r3, [pc, #516]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a80      	ldr	r2, [pc, #512]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <MX_GPIO_Init+0x2e4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2116      	movs	r1, #22
 8000aca:	487b      	ldr	r0, [pc, #492]	; (8000cb8 <MX_GPIO_Init+0x2e8>)
 8000acc:	f001 faca 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4879      	ldr	r0, [pc, #484]	; (8000cbc <MX_GPIO_Init+0x2ec>)
 8000ad6:	f001 fac5 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ae0:	4877      	ldr	r0, [pc, #476]	; (8000cc0 <MX_GPIO_Init+0x2f0>)
 8000ae2:	f001 fabf 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000aec:	4875      	ldr	r0, [pc, #468]	; (8000cc4 <MX_GPIO_Init+0x2f4>)
 8000aee:	f001 fab9 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b04:	230e      	movs	r3, #14
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	486e      	ldr	r0, [pc, #440]	; (8000cc8 <MX_GPIO_Init+0x2f8>)
 8000b10:	f001 f8fc 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b14:	2316      	movs	r3, #22
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4863      	ldr	r0, [pc, #396]	; (8000cb8 <MX_GPIO_Init+0x2e8>)
 8000b2c:	f001 f8ee 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b30:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	485d      	ldr	r0, [pc, #372]	; (8000cbc <MX_GPIO_Init+0x2ec>)
 8000b48:	f001 f8e0 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000b4c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4854      	ldr	r0, [pc, #336]	; (8000cbc <MX_GPIO_Init+0x2ec>)
 8000b6a:	f001 f8cf 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	484d      	ldr	r0, [pc, #308]	; (8000cbc <MX_GPIO_Init+0x2ec>)
 8000b86:	f001 f8c1 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <MX_GPIO_Init+0x2e8>)
 8000ba0:	f001 f8b4 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4843      	ldr	r0, [pc, #268]	; (8000ccc <MX_GPIO_Init+0x2fc>)
 8000bc0:	f001 f8a4 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	483d      	ldr	r0, [pc, #244]	; (8000ccc <MX_GPIO_Init+0x2fc>)
 8000bd8:	f001 f898 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000bdc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	230e      	movs	r3, #14
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4834      	ldr	r0, [pc, #208]	; (8000ccc <MX_GPIO_Init+0x2fc>)
 8000bfa:	f001 f887 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	482b      	ldr	r0, [pc, #172]	; (8000cc0 <MX_GPIO_Init+0x2f0>)
 8000c14:	f001 f87a 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <MX_GPIO_Init+0x2f0>)
 8000c32:	f001 f86b 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c36:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c48:	230e      	movs	r3, #14
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0x2f4>)
 8000c54:	f001 f85a 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000c58:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c6a:	230e      	movs	r3, #14
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x2e8>)
 8000c76:	f001 f849 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c7a:	2348      	movs	r3, #72	; 0x48
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c8a:	230e      	movs	r3, #14
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <MX_GPIO_Init+0x2f0>)
 8000c96:	f001 f839 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cac:	2309      	movs	r3, #9
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	e00e      	b.n	8000cd0 <MX_GPIO_Init+0x300>
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40021400 	.word	0x40021400
 8000ccc:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <MX_GPIO_Init+0x334>)
 8000cd8:	f001 f818 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <MX_GPIO_Init+0x334>)
 8000cf6:	f001 f809 	bl	8001d0c <HAL_GPIO_Init>

}
 8000cfa:	bf00      	nop
 8000cfc:	3738      	adds	r7, #56	; 0x38
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021800 	.word	0x40021800

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fbcb 	bl	80014b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001000 	.word	0x40001000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_CRC_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10d      	bne.n	8000db6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023000 	.word	0x40023000
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_I2C_MspInit+0xc4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d14b      	bne.n	8000e86 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4815      	ldr	r0, [pc, #84]	; (8000e98 <HAL_I2C_MspInit+0xcc>)
 8000e44:	f000 ff62 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <HAL_I2C_MspInit+0xd0>)
 8000e66:	f000 ff51 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40005c00 	.word	0x40005c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_SPI_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12c      	bne.n	8000f1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0320 	and.w	r3, r3, #32
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000efa:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_SPI_MspInit+0x8c>)
 8000f18:	f000 fef8 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40015000 	.word	0x40015000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40021400 	.word	0x40021400

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_TIM_Base_MspInit+0xcc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10e      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5e:	e048      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d143      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_TIM_Base_MspInit+0xd0>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f88:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <HAL_TIM_Base_MspInit+0xd8>)
 8000f8a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f8e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f92:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000faa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fcc:	f000 fbb4 	bl	8001738 <HAL_DMA_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8000fd6:	f7ff fea9 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fde:	621a      	str	r2, [r3, #32]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40023800 	.word	0x40023800
 8001004:	200001f0 	.word	0x200001f0
 8001008:	40026028 	.word	0x40026028

0800100c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102c:	d11d      	bne.n	800106a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104a:	2320      	movs	r3, #32
 800104c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001066:	f000 fe51 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_UART_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12c      	bne.n	80010f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e8:	2307      	movs	r3, #7
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_UART_MspInit+0x8c>)
 80010f4:	f000 fe0a 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40011000 	.word	0x40011000
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_FMC_MspInit+0x104>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d16f      	bne.n	8001208 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_FMC_MspInit+0x104>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6393      	str	r3, [r2, #56]	; 0x38
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800114a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800114e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800115c:	230c      	movs	r3, #12
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	482c      	ldr	r0, [pc, #176]	; (8001218 <HAL_FMC_MspInit+0x10c>)
 8001166:	f000 fdd1 	bl	8001d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800117a:	230c      	movs	r3, #12
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <HAL_FMC_MspInit+0x110>)
 8001184:	f000 fdc2 	bl	8001d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001188:	f248 1333 	movw	r3, #33075	; 0x8133
 800118c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800119a:	230c      	movs	r3, #12
 800119c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <HAL_FMC_MspInit+0x114>)
 80011a4:	f000 fdb2 	bl	8001d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011ac:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ba:	230c      	movs	r3, #12
 80011bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <HAL_FMC_MspInit+0x118>)
 80011c4:	f000 fda2 	bl	8001d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011cc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011da:	230c      	movs	r3, #12
 80011dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <HAL_FMC_MspInit+0x11c>)
 80011e4:	f000 fd92 	bl	8001d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f8:	230c      	movs	r3, #12
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <HAL_FMC_MspInit+0x120>)
 8001202:	f000 fd83 	bl	8001d0c <HAL_GPIO_Init>
 8001206:	e000      	b.n	800120a <HAL_FMC_MspInit+0xfe>
    return;
 8001208:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002c8 	.word	0x200002c8
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400
 800121c:	40020800 	.word	0x40020800
 8001220:	40021800 	.word	0x40021800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020400 	.word	0x40020400

08001230 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001238:	f7ff ff68 	bl	800110c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2036      	movs	r0, #54	; 0x36
 800125a:	f000 fa27 	bl	80016ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800125e:	2036      	movs	r0, #54	; 0x36
 8001260:	f000 fa40 	bl	80016e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_InitTick+0xa4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <HAL_InitTick+0xa4>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_InitTick+0xa4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001280:	f107 0210 	add.w	r2, r7, #16
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f966 	bl	800455c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001290:	f003 f93c 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8001294:	4603      	mov	r3, r0
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_InitTick+0xa8>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	3b01      	subs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_InitTick+0xac>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_InitTick+0xb0>)
 80012ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_InitTick+0xac>)
 80012b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_InitTick+0xac>)
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_InitTick+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_InitTick+0xac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <HAL_InitTick+0xac>)
 80012ca:	f003 fa36 	bl	800473a <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d104      	bne.n	80012de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <HAL_InitTick+0xac>)
 80012d6:	f003 fa7f 	bl	80047d8 <HAL_TIM_Base_Start_IT>
 80012da:	4603      	mov	r3, r0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	431bde83 	.word	0x431bde83
 80012f0:	200002cc 	.word	0x200002cc
 80012f4:	40001000 	.word	0x40001000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream1_IRQHandler+0x10>)
 8001356:	f000 fa9d 	bl	8001894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f0 	.word	0x200001f0

08001364 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM6_DAC_IRQHandler+0x10>)
 800136a:	f003 fafe 	bl	800496a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002cc 	.word	0x200002cc

08001378 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <OTG_HS_IRQHandler+0x10>)
 800137e:	f001 f8f5 	bl	800256c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200006f8 	.word	0x200006f8

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f007 ff74 	bl	80092a8 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20030000 	.word	0x20030000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000314 	.word	0x20000314
 80013f4:	20000a10 	.word	0x20000a10

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001422:	490e      	ldr	r1, [pc, #56]	; (800145c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001438:	4c0b      	ldr	r4, [pc, #44]	; (8001468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001446:	f7ff ffd7 	bl	80013f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f007 ff33 	bl	80092b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff f84f 	bl	80004f0 <main>
  bx  lr    
 8001452:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001454:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001460:	08009574 	.word	0x08009574
  ldr r2, =_sbss
 8001464:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001468:	20000a0c 	.word	0x20000a0c

0800146c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_Init+0x40>)
 800147a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_Init+0x40>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_Init+0x40>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f8fc 	bl	8001696 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f7ff fed0 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fc48 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000318 	.word	0x20000318

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000318 	.word	0x20000318

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff4c 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016be:	f7ff ff61 	bl	8001584 <__NVIC_GetPriorityGrouping>
 80016c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f7ff ffb1 	bl	8001630 <NVIC_EncodePriority>
 80016ce:	4602      	mov	r2, r0
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff80 	bl	80015dc <__NVIC_SetPriority>
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff54 	bl	80015a0 <__NVIC_EnableIRQ>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fb30 	bl	8000d88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff feca 	bl	80014dc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e099      	b.n	8001888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001774:	e00f      	b.n	8001796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001776:	f7ff feb1 	bl	80014dc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b05      	cmp	r3, #5
 8001782:	d908      	bls.n	8001796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e078      	b.n	8001888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e8      	bne.n	8001776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_DMA_Init+0x158>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4313      	orrs	r3, r2
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f023 0307 	bic.w	r3, r3, #7
 8001816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b04      	cmp	r3, #4
 8001828:	d117      	bne.n	800185a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f9e9 	bl	8001c14 <DMA_CheckFifoParam>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001856:	2301      	movs	r3, #1
 8001858:	e016      	b.n	8001888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f9a0 	bl	8001ba8 <DMA_CalcBaseAndBitshift>
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	223f      	movs	r2, #63	; 0x3f
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	f010803f 	.word	0xf010803f

08001894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018a0:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <HAL_DMA_IRQHandler+0x248>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a8e      	ldr	r2, [pc, #568]	; (8001ae0 <HAL_DMA_IRQHandler+0x24c>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01a      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2208      	movs	r2, #8
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	2201      	movs	r2, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2201      	movs	r2, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f043 0202 	orr.w	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2204      	movs	r2, #4
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2210      	movs	r2, #16
 8001972:	409a      	lsls	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d043      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03c      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2210      	movs	r2, #16
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
 80019c2:	e01f      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
 80019d4:	e016      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0208 	bic.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	2220      	movs	r2, #32
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 808f 	beq.w	8001b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8087 	beq.w	8001b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d136      	bne.n	8001aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0216 	bic.w	r2, r2, #22
 8001a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0208 	bic.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	223f      	movs	r2, #63	; 0x3f
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d07e      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
        }
        return;
 8001aaa:	e079      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d031      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e02c      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e01e      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0210 	bic.w	r2, r2, #16
 8001b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d032      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d022      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d307      	bcc.n	8001b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f2      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x2cc>
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ba0:	bf00      	nop
    }
  }
}
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3b10      	subs	r3, #16
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <DMA_CalcBaseAndBitshift+0x64>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <DMA_CalcBaseAndBitshift+0x68>)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d909      	bls.n	8001bea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
 8001be8:	e007      	b.n	8001bfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	aaaaaaab 	.word	0xaaaaaaab
 8001c10:	0800955c 	.word	0x0800955c

08001c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11f      	bne.n	8001c6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d856      	bhi.n	8001ce2 <DMA_CheckFifoParam+0xce>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <DMA_CheckFifoParam+0x28>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c5f 	.word	0x08001c5f
 8001c44:	08001c4d 	.word	0x08001c4d
 8001c48:	08001ce3 	.word	0x08001ce3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d046      	beq.n	8001ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c5c:	e043      	b.n	8001ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c66:	d140      	bne.n	8001cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6c:	e03d      	b.n	8001cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c76:	d121      	bne.n	8001cbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d837      	bhi.n	8001cee <DMA_CheckFifoParam+0xda>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <DMA_CheckFifoParam+0x70>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9b 	.word	0x08001c9b
 8001c8c:	08001c95 	.word	0x08001c95
 8001c90:	08001cad 	.word	0x08001cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      break;
 8001c98:	e030      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d025      	beq.n	8001cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001caa:	e022      	b.n	8001cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb4:	d11f      	bne.n	8001cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cba:	e01c      	b.n	8001cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d903      	bls.n	8001cca <DMA_CheckFifoParam+0xb6>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d003      	beq.n	8001cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc8:	e018      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cce:	e015      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00e      	beq.n	8001cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce0:	e00b      	b.n	8001cfa <DMA_CheckFifoParam+0xe6>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e00a      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e008      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e006      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e004      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e002      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cf6:	bf00      	nop
 8001cf8:	e000      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e177      	b.n	8002018 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8166 	bne.w	8002012 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80c0 	beq.w	8002012 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_GPIO_Init+0x324>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_GPIO_Init+0x324>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a61      	ldr	r2, [pc, #388]	; (8002034 <HAL_GPIO_Init+0x328>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_GPIO_Init+0x32c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d037      	beq.n	8001f4a <HAL_GPIO_Init+0x23e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_GPIO_Init+0x330>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_GPIO_Init+0x23a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x236>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a55      	ldr	r2, [pc, #340]	; (8002044 <HAL_GPIO_Init+0x338>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x232>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a54      	ldr	r2, [pc, #336]	; (8002048 <HAL_GPIO_Init+0x33c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x22e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a53      	ldr	r2, [pc, #332]	; (800204c <HAL_GPIO_Init+0x340>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x22a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x344>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x226>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_GPIO_Init+0x348>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x222>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a50      	ldr	r2, [pc, #320]	; (8002058 <HAL_GPIO_Init+0x34c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x21e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4f      	ldr	r2, [pc, #316]	; (800205c <HAL_GPIO_Init+0x350>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x21a>
 8001f22:	2309      	movs	r3, #9
 8001f24:	e012      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f26:	230a      	movs	r3, #10
 8001f28:	e010      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e00e      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e00c      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f32:	2306      	movs	r3, #6
 8001f34:	e00a      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f36:	2305      	movs	r3, #5
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x240>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f002 0203 	and.w	r2, r2, #3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4093      	lsls	r3, r2
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_GPIO_Init+0x328>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_GPIO_Init+0x354>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_GPIO_Init+0x354>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3301      	adds	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	f67f ae84 	bls.w	8001d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40013800 	.word	0x40013800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021000 	.word	0x40021000
 800204c:	40021400 	.word	0x40021400
 8002050:	40021800 	.word	0x40021800
 8002054:	40021c00 	.word	0x40021c00
 8002058:	40022000 	.word	0x40022000
 800205c:	40022400 	.word	0x40022400
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b08f      	sub	sp, #60	; 0x3c
 800209a:	af0a      	add	r7, sp, #40	; 0x28
 800209c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e054      	b.n	8002152 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f006 fe40 	bl	8008d48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fe6e 	bl	8005dc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	687e      	ldr	r6, [r7, #4]
 80020f4:	466d      	mov	r5, sp
 80020f6:	f106 0410 	add.w	r4, r6, #16
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002106:	e885 0003 	stmia.w	r5, {r0, r1}
 800210a:	1d33      	adds	r3, r6, #4
 800210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f003 fde8 	bl	8005ce4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fe65 	bl	8005dea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	687e      	ldr	r6, [r7, #4]
 8002128:	466d      	mov	r5, sp
 800212a:	f106 0410 	add.w	r4, r6, #16
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213a:	e885 0003 	stmia.w	r5, {r0, r1}
 800213e:	1d33      	adds	r3, r6, #4
 8002140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f003 ffee 	bl	8006124 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800215a:	b590      	push	{r4, r7, lr}
 800215c:	b089      	sub	sp, #36	; 0x24
 800215e:	af04      	add	r7, sp, #16
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	4608      	mov	r0, r1
 8002164:	4611      	mov	r1, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4603      	mov	r3, r0
 800216a:	70fb      	strb	r3, [r7, #3]
 800216c:	460b      	mov	r3, r1
 800216e:	70bb      	strb	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_HCD_HC_Init+0x28>
 800217e:	2302      	movs	r3, #2
 8002180:	e076      	b.n	8002270 <HAL_HCD_HC_Init+0x116>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	333d      	adds	r3, #61	; 0x3d
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3338      	adds	r3, #56	; 0x38
 80021aa:	787a      	ldrb	r2, [r7, #1]
 80021ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3340      	adds	r3, #64	; 0x40
 80021bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3339      	adds	r3, #57	; 0x39
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	333f      	adds	r3, #63	; 0x3f
 80021e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	78ba      	ldrb	r2, [r7, #2]
 80021ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ee:	b2d0      	uxtb	r0, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	333a      	adds	r3, #58	; 0x3a
 80021fc:	4602      	mov	r2, r0
 80021fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002200:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002204:	2b00      	cmp	r3, #0
 8002206:	da09      	bge.n	800221c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	333b      	adds	r3, #59	; 0x3b
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e008      	b.n	800222e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	333b      	adds	r3, #59	; 0x3b
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	333c      	adds	r3, #60	; 0x3c
 800223c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002240:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	787c      	ldrb	r4, [r7, #1]
 8002248:	78ba      	ldrb	r2, [r7, #2]
 800224a:	78f9      	ldrb	r1, [r7, #3]
 800224c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4623      	mov	r3, r4
 800225e:	f004 f8e7 	bl	8006430 <USB_HC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_HCD_HC_Halt+0x1e>
 8002292:	2302      	movs	r3, #2
 8002294:	e00f      	b.n	80022b6 <HAL_HCD_HC_Halt+0x3e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fb37 	bl	800691a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70bb      	strb	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333b      	adds	r3, #59	; 0x3b
 80022e8:	78ba      	ldrb	r2, [r7, #2]
 80022ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	333f      	adds	r3, #63	; 0x3f
 80022fa:	787a      	ldrb	r2, [r7, #1]
 80022fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022fe:	7c3b      	ldrb	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d112      	bne.n	800232a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	7f3a      	ldrb	r2, [r7, #28]
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e008      	b.n	800233c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3342      	adds	r3, #66	; 0x42
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b03      	cmp	r3, #3
 8002340:	f200 80c6 	bhi.w	80024d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	080024bd 	.word	0x080024bd
 8002354:	080023c1 	.word	0x080023c1
 8002358:	0800243f 	.word	0x0800243f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800235c:	7c3b      	ldrb	r3, [r7, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 80b8 	bne.w	80024d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002364:	78bb      	ldrb	r3, [r7, #2]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 80b4 	bne.w	80024d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800236c:	8b3b      	ldrh	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d108      	bne.n	8002384 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3355      	adds	r3, #85	; 0x55
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3355      	adds	r3, #85	; 0x55
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3342      	adds	r3, #66	; 0x42
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023aa:	e093      	b.n	80024d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3342      	adds	r3, #66	; 0x42
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
      break;
 80023be:	e089      	b.n	80024d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023c0:	78bb      	ldrb	r3, [r7, #2]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d11d      	bne.n	8002402 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3355      	adds	r3, #85	; 0x55
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3342      	adds	r3, #66	; 0x42
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023ec:	e073      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3342      	adds	r3, #66	; 0x42
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
      break;
 8002400:	e069      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3354      	adds	r3, #84	; 0x54
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
      break;
 8002428:	e055      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3342      	adds	r3, #66	; 0x42
 8002438:	2202      	movs	r2, #2
 800243a:	701a      	strb	r2, [r3, #0]
      break;
 800243c:	e04b      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800243e:	78bb      	ldrb	r3, [r7, #2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11d      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3355      	adds	r3, #85	; 0x55
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3342      	adds	r3, #66	; 0x42
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800246a:	e034      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3342      	adds	r3, #66	; 0x42
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
      break;
 800247e:	e02a      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3354      	adds	r3, #84	; 0x54
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3342      	adds	r3, #66	; 0x42
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
      break;
 80024a6:	e016      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3342      	adds	r3, #66	; 0x42
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
      break;
 80024ba:	e00c      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3342      	adds	r3, #66	; 0x42
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80024d0:	bf00      	nop
 80024d2:	e000      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80024d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3344      	adds	r3, #68	; 0x44
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	8b3a      	ldrh	r2, [r7, #24]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	202c      	movs	r0, #44	; 0x2c
 80024f0:	fb00 f303 	mul.w	r3, r0, r3
 80024f4:	440b      	add	r3, r1
 80024f6:	334c      	adds	r3, #76	; 0x4c
 80024f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3360      	adds	r3, #96	; 0x60
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3350      	adds	r3, #80	; 0x50
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3339      	adds	r3, #57	; 0x39
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3361      	adds	r3, #97	; 0x61
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	222c      	movs	r2, #44	; 0x2c
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	3338      	adds	r3, #56	; 0x38
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	18d1      	adds	r1, r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	f004 f88a 	bl	8006674 <USB_HC_StartXfer>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fd8b 	bl	800609e <USB_GetMode>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 80f6 	bne.w	800277c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fd6f 	bl	8006078 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80ec 	beq.w	800277a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fd66 	bl	8006078 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b6:	d104      	bne.n	80025c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fd56 	bl	8006078 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fd46 	bl	8006078 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f6:	d104      	bne.n	8002602 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fd36 	bl	8006078 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d103      	bne.n	800261e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fd28 	bl	8006078 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002632:	d11c      	bne.n	800266e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800263c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800264e:	2110      	movs	r1, #16
 8002650:	6938      	ldr	r0, [r7, #16]
 8002652:	f003 fc17 	bl	8005e84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002656:	6938      	ldr	r0, [r7, #16]
 8002658:	f003 fc48 	bl	8005eec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fe1e 	bl	80062a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f006 fbe7 	bl	8008e3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fd00 	bl	8006078 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002682:	d102      	bne.n	800268a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f89e 	bl	80037c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fcf2 	bl	8006078 <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d106      	bne.n	80026ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f006 fbb0 	bl	8008e04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fce1 	bl	8006078 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d101      	bne.n	80026c4 <HAL_HCD_IRQHandler+0x158>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_HCD_IRQHandler+0x15a>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0210 	bic.w	r2, r2, #16
 80026d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 ffa1 	bl	8003622 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0210 	orr.w	r2, r2, #16
 80026ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fcbf 	bl	8006078 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002704:	d13a      	bne.n	800277c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f8f4 	bl	80068f8 <USB_HC_ReadInterrupt>
 8002710:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e025      	b.n	8002764 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d018      	beq.n	800275e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002742:	d106      	bne.n	8002752 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8ab 	bl	80028a6 <HCD_HC_IN_IRQHandler>
 8002750:	e005      	b.n	800275e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fbf9 	bl	8002f50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3d4      	bcc.n	8002718 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	e000      	b.n	800277c <HAL_HCD_IRQHandler+0x210>
      return;
 800277a:	bf00      	nop
    }
  }
}
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_HCD_Start+0x16>
 8002794:	2302      	movs	r3, #2
 8002796:	e013      	b.n	80027c0 <HAL_HCD_Start+0x3e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fde0 	bl	800636c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 faf8 	bl	8005da6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_HCD_Stop+0x16>
 80027da:	2302      	movs	r3, #2
 80027dc:	e00d      	b.n	80027fa <HAL_HCD_Stop+0x32>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 f9ce 	bl	8006b8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fd82 	bl	8006318 <USB_ResetPort>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3360      	adds	r3, #96	; 0x60
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3350      	adds	r3, #80	; 0x50
 8002860:	681b      	ldr	r3, [r3, #0]
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fdc6 	bl	800640c <USB_GetCurrentFrame>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fda1 	bl	80063de <USB_GetHostSpeed>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d11a      	bne.n	800290c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	2304      	movs	r3, #4
 80028e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2206      	movs	r2, #6
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f004 f808 	bl	800691a <USB_HC_Halt>
 800290a:	e0af      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002922:	d11b      	bne.n	800295c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002936:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	2207      	movs	r2, #7
 8002948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f003 ffe0 	bl	800691a <USB_HC_Halt>
 800295a:	e087      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d109      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2320      	movs	r3, #32
 8002982:	6093      	str	r3, [r2, #8]
 8002984:	e072      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	d11a      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2308      	movs	r3, #8
 80029ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2205      	movs	r2, #5
 80029be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 ffa5 	bl	800691a <USB_HC_Halt>
 80029d0:	e04c      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d11b      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3361      	adds	r3, #97	; 0x61
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 ff7d 	bl	800691a <USB_HC_Halt>
 8002a20:	e024      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d119      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	461a      	mov	r2, r3
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3361      	adds	r3, #97	; 0x61
 8002a58:	2206      	movs	r2, #6
 8002a5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 ff57 	bl	800691a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a82:	d112      	bne.n	8002aaa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 ff43 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002aa8:	e24e      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80df 	bne.w	8002c80 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d019      	beq.n	8002afe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3348      	adds	r3, #72	; 0x48
 8002ad8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	0159      	lsls	r1, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	fb00 f303 	mul.w	r3, r0, r3
 8002af8:	440b      	add	r3, r1
 8002afa:	3350      	adds	r3, #80	; 0x50
 8002afc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3361      	adds	r3, #97	; 0x61
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2301      	movs	r3, #1
 8002b32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	333f      	adds	r3, #63	; 0x3f
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	333f      	adds	r3, #63	; 0x3f
 8002b56:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d111      	bne.n	8002b80 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fed7 	bl	800691a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	6093      	str	r3, [r2, #8]
 8002b7e:	e03a      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	333f      	adds	r3, #63	; 0x3f
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d009      	beq.n	8002ba8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	333f      	adds	r3, #63	; 0x3f
 8002ba2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d126      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	0151      	lsls	r1, r2, #5
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	440a      	add	r2, r1
 8002bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bc6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	202c      	movs	r0, #44	; 0x2c
 8002be4:	fb00 f303 	mul.w	r3, r0, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f006 f931 	bl	8008e58 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d12b      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3348      	adds	r3, #72	; 0x48
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f202 	mul.w	r2, r0, r2
 8002c18:	440a      	add	r2, r1
 8002c1a:	3240      	adds	r2, #64	; 0x40
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 818e 	beq.w	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3354      	adds	r3, #84	; 0x54
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2d8      	uxtb	r0, r3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3354      	adds	r3, #84	; 0x54
 8002c50:	4602      	mov	r2, r0
 8002c52:	701a      	strb	r2, [r3, #0]
}
 8002c54:	e178      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3354      	adds	r3, #84	; 0x54
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3354      	adds	r3, #84	; 0x54
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	701a      	strb	r2, [r3, #0]
}
 8002c7e:	e163      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	f040 80f6 	bne.w	8002e84 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d109      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e0c9      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3361      	adds	r3, #97	; 0x61
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d109      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e0b5      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d009      	beq.n	8002d10 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3361      	adds	r3, #97	; 0x61
 8002d0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d150      	bne.n	8002db2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	335c      	adds	r3, #92	; 0x5c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	202c      	movs	r0, #44	; 0x2c
 8002d28:	fb00 f303 	mul.w	r3, r0, r3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	335c      	adds	r3, #92	; 0x5c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d912      	bls.n	8002d6c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	2204      	movs	r2, #4
 8002d68:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d6a:	e073      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d94:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d9c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002db0:	e050      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3361      	adds	r3, #97	; 0x61
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d122      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e023      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3361      	adds	r3, #97	; 0x61
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	d119      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	335c      	adds	r3, #92	; 0x5c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	202c      	movs	r0, #44	; 0x2c
 8002e38:	fb00 f303 	mul.w	r3, r0, r3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3360      	adds	r3, #96	; 0x60
 8002e50:	2204      	movs	r2, #4
 8002e52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2302      	movs	r3, #2
 8002e64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	b2d9      	uxtb	r1, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	202c      	movs	r0, #44	; 0x2c
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3360      	adds	r3, #96	; 0x60
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f005 ffeb 	bl	8008e58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e82:	e061      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d156      	bne.n	8002f48 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333f      	adds	r3, #63	; 0x3f
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d111      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fd25 	bl	800691a <USB_HC_Halt>
 8002ed0:	e031      	b.n	8002f36 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	333f      	adds	r3, #63	; 0x3f
 8002ef4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d11d      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3361      	adds	r3, #97	; 0x61
 8002f22:	2203      	movs	r2, #3
 8002f24:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fcf2 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2310      	movs	r3, #16
 8002f46:	6093      	str	r3, [r2, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11a      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2304      	movs	r3, #4
 8002f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3361      	adds	r3, #97	; 0x61
 8002fa0:	2206      	movs	r2, #6
 8002fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fcb3 	bl	800691a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002fb4:	e331      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d12e      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2320      	movs	r3, #32
 8002fdc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	333d      	adds	r3, #61	; 0x3d
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	f040 8313 	bne.w	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	333d      	adds	r3, #61	; 0x3d
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fc79 	bl	800691a <USB_HC_Halt>
}
 8003028:	e2f7      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d112      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003054:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fc5a 	bl	800691a <USB_HC_Halt>
}
 8003066:	e2d8      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d140      	bne.n	8003100 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d111      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	333d      	adds	r3, #61	; 0x3d
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fc0e 	bl	800691a <USB_HC_Halt>
}
 80030fe:	e28c      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d12c      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3361      	adds	r3, #97	; 0x61
 8003124:	2204      	movs	r2, #4
 8003126:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	333d      	adds	r3, #61	; 0x3d
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fbdf 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	6093      	str	r3, [r2, #8]
}
 800316e:	e254      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11a      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	461a      	mov	r2, r3
 8003194:	2308      	movs	r3, #8
 8003196:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3361      	adds	r3, #97	; 0x61
 80031a6:	2205      	movs	r2, #5
 80031a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fbb0 	bl	800691a <USB_HC_Halt>
}
 80031ba:	e22e      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d140      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	335c      	adds	r3, #92	; 0x5c
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3361      	adds	r3, #97	; 0x61
 80031f2:	2203      	movs	r2, #3
 80031f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	333d      	adds	r3, #61	; 0x3d
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d112      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	333c      	adds	r3, #60	; 0x3c
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	333d      	adds	r3, #61	; 0x3d
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fb6d 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	2310      	movs	r3, #16
 8003250:	6093      	str	r3, [r2, #8]
}
 8003252:	e1e2      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d164      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d111      	bne.n	8003296 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3361      	adds	r3, #97	; 0x61
 8003280:	2206      	movs	r2, #6
 8003282:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fb43 	bl	800691a <USB_HC_Halt>
 8003294:	e044      	b.n	8003320 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	202c      	movs	r0, #44	; 0x2c
 80032ae:	fb00 f303 	mul.w	r3, r0, r3
 80032b2:	440b      	add	r3, r1
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	335c      	adds	r3, #92	; 0x5c
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d920      	bls.n	800330e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	335c      	adds	r3, #92	; 0x5c
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	2204      	movs	r2, #4
 80032ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	b2d9      	uxtb	r1, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	202c      	movs	r0, #44	; 0x2c
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3360      	adds	r3, #96	; 0x60
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fda6 	bl	8008e58 <HAL_HCD_HC_NotifyURBChange_Callback>
 800330c:	e008      	b.n	8003320 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3360      	adds	r3, #96	; 0x60
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e172      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d11b      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3361      	adds	r3, #97	; 0x61
 800335a:	2208      	movs	r2, #8
 800335c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fad6 	bl	800691a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	461a      	mov	r2, r3
 800337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003380:	6093      	str	r3, [r2, #8]
}
 8003382:	e14a      	b.n	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 813f 	bne.w	800361a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3361      	adds	r3, #97	; 0x61
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d17d      	bne.n	80034ac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	333f      	adds	r3, #63	; 0x3f
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d00a      	beq.n	80033ec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	333f      	adds	r3, #63	; 0x3f
 80033e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	f040 8100 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d113      	bne.n	800341c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	3355      	adds	r3, #85	; 0x55
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f083 0301 	eor.w	r3, r3, #1
 8003408:	b2d8      	uxtb	r0, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3355      	adds	r3, #85	; 0x55
 8003418:	4602      	mov	r2, r0
 800341a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 80e3 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	334c      	adds	r3, #76	; 0x4c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80d8 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	334c      	adds	r3, #76	; 0x4c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	202c      	movs	r0, #44	; 0x2c
 8003452:	fb00 f202 	mul.w	r2, r0, r2
 8003456:	440a      	add	r2, r1
 8003458:	3240      	adds	r2, #64	; 0x40
 800345a:	8812      	ldrh	r2, [r2, #0]
 800345c:	4413      	add	r3, r2
 800345e:	3b01      	subs	r3, #1
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	202c      	movs	r0, #44	; 0x2c
 8003466:	fb00 f202 	mul.w	r2, r0, r2
 800346a:	440a      	add	r2, r1
 800346c:	3240      	adds	r2, #64	; 0x40
 800346e:	8812      	ldrh	r2, [r2, #0]
 8003470:	fbb3 f3f2 	udiv	r3, r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80b5 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3355      	adds	r3, #85	; 0x55
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f083 0301 	eor.w	r3, r3, #1
 8003496:	b2d8      	uxtb	r0, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3355      	adds	r3, #85	; 0x55
 80034a6:	4602      	mov	r2, r0
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e09f      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3361      	adds	r3, #97	; 0x61
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d109      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e08b      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3361      	adds	r3, #97	; 0x61
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d109      	bne.n	80034fc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e077      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3361      	adds	r3, #97	; 0x61
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d109      	bne.n	8003524 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2205      	movs	r2, #5
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e063      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3361      	adds	r3, #97	; 0x61
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d009      	beq.n	800354c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3361      	adds	r3, #97	; 0x61
 8003546:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003548:	2b08      	cmp	r3, #8
 800354a:	d14f      	bne.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	335c      	adds	r3, #92	; 0x5c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	202c      	movs	r0, #44	; 0x2c
 8003564:	fb00 f303 	mul.w	r3, r0, r3
 8003568:	440b      	add	r3, r1
 800356a:	335c      	adds	r3, #92	; 0x5c
 800356c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d912      	bls.n	80035a8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	335c      	adds	r3, #92	; 0x5c
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	2204      	movs	r2, #4
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e021      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3360      	adds	r3, #96	; 0x60
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	461a      	mov	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2302      	movs	r3, #2
 80035fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	b2d9      	uxtb	r1, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	202c      	movs	r0, #44	; 0x2c
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	4413      	add	r3, r2
 800360e:	3360      	adds	r3, #96	; 0x60
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f005 fc1f 	bl	8008e58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	0c5b      	lsrs	r3, r3, #17
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003656:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d004      	beq.n	8003668 <HCD_RXQLVL_IRQHandler+0x46>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b05      	cmp	r3, #5
 8003662:	f000 80a9 	beq.w	80037b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003666:	e0aa      	b.n	80037be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a6 	beq.w	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3344      	adds	r3, #68	; 0x44
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 809b 	beq.w	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3350      	adds	r3, #80	; 0x50
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	441a      	add	r2, r3
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	202c      	movs	r0, #44	; 0x2c
 80036a0:	fb00 f303 	mul.w	r3, r0, r3
 80036a4:	440b      	add	r3, r1
 80036a6:	334c      	adds	r3, #76	; 0x4c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d87a      	bhi.n	80037a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3344      	adds	r3, #68	; 0x44
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	b292      	uxth	r2, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f002 fc7e 	bl	8005fc8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3344      	adds	r3, #68	; 0x44
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	441a      	add	r2, r3
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	202c      	movs	r0, #44	; 0x2c
 80036e6:	fb00 f303 	mul.w	r3, r0, r3
 80036ea:	440b      	add	r3, r1
 80036ec:	3344      	adds	r3, #68	; 0x44
 80036ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3350      	adds	r3, #80	; 0x50
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	441a      	add	r2, r3
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	202c      	movs	r0, #44	; 0x2c
 800370a:	fb00 f303 	mul.w	r3, r0, r3
 800370e:	440b      	add	r3, r1
 8003710:	3350      	adds	r3, #80	; 0x50
 8003712:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	0cdb      	lsrs	r3, r3, #19
 8003724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003728:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3340      	adds	r3, #64	; 0x40
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4293      	cmp	r3, r2
 8003740:	d13c      	bne.n	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d039      	beq.n	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800375e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003766:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	3354      	adds	r3, #84	; 0x54
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2d8      	uxtb	r0, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3354      	adds	r3, #84	; 0x54
 800379e:	4602      	mov	r2, r0
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	e00b      	b.n	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3360      	adds	r3, #96	; 0x60
 80037b2:	2204      	movs	r2, #4
 80037b4:	701a      	strb	r2, [r3, #0]
      break;
 80037b6:	e001      	b.n	80037bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037bc:	bf00      	nop
  }
}
 80037be:	bf00      	nop
 80037c0:	3728      	adds	r7, #40	; 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d10b      	bne.n	8003816 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f005 fb09 	bl	8008e20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b08      	cmp	r3, #8
 800381e:	d132      	bne.n	8003886 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f043 0308 	orr.w	r3, r3, #8
 8003826:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d126      	bne.n	8003880 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d113      	bne.n	8003862 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003844:	d106      	bne.n	8003854 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fd29 	bl	80062a4 <USB_InitFSLSPClkSel>
 8003852:	e011      	b.n	8003878 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f002 fd22 	bl	80062a4 <USB_InitFSLSPClkSel>
 8003860:	e00a      	b.n	8003878 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d106      	bne.n	8003878 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	461a      	mov	r2, r3
 8003872:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003876:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f005 fafb 	bl	8008e74 <HAL_HCD_PortEnabled_Callback>
 800387e:	e002      	b.n	8003886 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f005 fb05 	bl	8008e90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d103      	bne.n	8003898 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6013      	str	r3, [r2, #0]
}
 80038a4:	bf00      	nop
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e12b      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fa7a 	bl	8000dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800390e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003910:	f000 fdfc 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a81      	ldr	r2, [pc, #516]	; (8003b20 <HAL_I2C_Init+0x274>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d807      	bhi.n	8003930 <HAL_I2C_Init+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a80      	ldr	r2, [pc, #512]	; (8003b24 <HAL_I2C_Init+0x278>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e006      	b.n	800393e <HAL_I2C_Init+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a7d      	ldr	r2, [pc, #500]	; (8003b28 <HAL_I2C_Init+0x27c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0e7      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a78      	ldr	r2, [pc, #480]	; (8003b2c <HAL_I2C_Init+0x280>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a6a      	ldr	r2, [pc, #424]	; (8003b20 <HAL_I2C_Init+0x274>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <HAL_I2C_Init+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3301      	adds	r3, #1
 800397e:	e009      	b.n	8003994 <HAL_I2C_Init+0xe8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_I2C_Init+0x284>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	495c      	ldr	r1, [pc, #368]	; (8003b20 <HAL_I2C_Init+0x274>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d819      	bhi.n	80039e8 <HAL_I2C_Init+0x13c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e59      	subs	r1, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039c8:	400b      	ands	r3, r1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_I2C_Init+0x138>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e59      	subs	r1, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	e051      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e04f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HAL_I2C_Init+0x168>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_I2C_Init+0x18e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x196>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_I2C_Init+0x1bc>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e58      	subs	r0, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	440b      	add	r3, r1
 8003a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	6809      	ldr	r1, [r1, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6911      	ldr	r1, [r2, #16]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	000186a0 	.word	0x000186a0
 8003b24:	001e847f 	.word	0x001e847f
 8003b28:	003d08ff 	.word	0x003d08ff
 8003b2c:	431bde83 	.word	0x431bde83
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d129      	bne.n	8003b9e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2224      	movs	r2, #36	; 0x24
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0210 	bic.w	r2, r2, #16
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d12a      	bne.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2224      	movs	r2, #36	; 0x24
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003be6:	89fb      	ldrh	r3, [r7, #14]
 8003be8:	f023 030f 	bic.w	r3, r3, #15
 8003bec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	89fa      	ldrh	r2, [r7, #14]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e267      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d075      	beq.n	8003d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c56:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d112      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05b      	beq.n	8003d34 <HAL_RCC_OscConfig+0x108>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d157      	bne.n	8003d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e242      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x74>
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x98>
 8003caa:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6f      	ldr	r2, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6c      	ldr	r2, [pc, #432]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a68      	ldr	r2, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fbfa 	bl	80014dc <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd fbf6 	bl	80014dc <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e207      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xc0>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fbe6 	bl	80014dc <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd fbe2 	bl	80014dc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1f3      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0xe8>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d063      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d42:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1c7      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	e03a      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9c:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd fb9b 	bl	80014dc <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fd fb97 	bl	80014dc <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1a8      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4925      	ldr	r1, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	e015      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fb7a 	bl	80014dc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fd fb76 	bl	80014dc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e187      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d036      	beq.n	8003e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd fb5a 	bl	80014dc <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fd fb56 	bl	80014dc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e167      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x200>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fd fb43 	bl	80014dc <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	e00e      	b.n	8003e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7fd fb3f 	bl	80014dc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d907      	bls.n	8003e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e150      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	42470000 	.word	0x42470000
 8003e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ea      	bne.n	8003e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8097 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b81      	ldr	r3, [pc, #516]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a7c      	ldr	r2, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b74      	ldr	r3, [pc, #464]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a73      	ldr	r2, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fd faff 	bl	80014dc <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fd fafb 	bl	80014dc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e10c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2ea>
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a63      	ldr	r2, [pc, #396]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x30c>
 8003f1e:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f38:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b55      	ldr	r3, [pc, #340]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a54      	ldr	r2, [pc, #336]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd fac0 	bl	80014dc <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd fabc 	bl	80014dc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0cb      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ee      	beq.n	8003f60 <HAL_RCC_OscConfig+0x334>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7fd faaa 	bl	80014dc <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd faa6 	bl	80014dc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0b5      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a1 	beq.w	800410c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fca:	4b34      	ldr	r3, [pc, #208]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d05c      	beq.n	8004090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d141      	bne.n	8004062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fa7a 	bl	80014dc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd fa76 	bl	80014dc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e087      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fd fa4f 	bl	80014dc <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fd fa4b 	bl	80014dc <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e05c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x416>
 8004060:	e054      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd fa38 	bl	80014dc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fa34 	bl	80014dc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e045      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x444>
 800408e:	e03d      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e038      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
 80040a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x4ec>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d028      	beq.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d121      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d11a      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	3b01      	subs	r3, #1
 80040f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800

0800411c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cc      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d90c      	bls.n	8004158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b63      	ldr	r3, [pc, #396]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b8      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a52      	ldr	r2, [pc, #328]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	494d      	ldr	r1, [pc, #308]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d044      	beq.n	800423c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d119      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d003      	beq.n	80041da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e067      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4934      	ldr	r1, [pc, #208]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420c:	f7fd f966 	bl	80014dc <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fd f962 	bl	80014dc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e04f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d20c      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e032      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4916      	ldr	r1, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a2:	f000 f821 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a6:	4602      	mov	r2, r0
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	490a      	ldr	r1, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	5ccb      	ldrb	r3, [r1, r3]
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc ffbe 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023c00 	.word	0x40023c00
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08009544 	.word	0x08009544
 80042e0:	20000000 	.word	0x20000000
 80042e4:	20000004 	.word	0x20000004

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ec:	b094      	sub	sp, #80	; 0x50
 80042ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	2300      	movs	r3, #0
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	2300      	movs	r3, #0
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004300:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d00d      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x40>
 800430c:	2b08      	cmp	r3, #8
 800430e:	f200 80e1 	bhi.w	80044d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004316:	2b04      	cmp	r3, #4
 8004318:	d003      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x3a>
 800431a:	e0db      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800431c:	4b73      	ldr	r3, [pc, #460]	; (80044ec <HAL_RCC_GetSysClockFreq+0x204>)
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004320:	e0db      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004322:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004326:	e0d8      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d063      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	2200      	movs	r2, #0
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
 8004348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
 8004356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800435a:	4622      	mov	r2, r4
 800435c:	462b      	mov	r3, r5
 800435e:	f04f 0000 	mov.w	r0, #0
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	0159      	lsls	r1, r3, #5
 8004368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800436c:	0150      	lsls	r0, r2, #5
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4621      	mov	r1, r4
 8004374:	1a51      	subs	r1, r2, r1
 8004376:	6139      	str	r1, [r7, #16]
 8004378:	4629      	mov	r1, r5
 800437a:	eb63 0301 	sbc.w	r3, r3, r1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800438c:	4659      	mov	r1, fp
 800438e:	018b      	lsls	r3, r1, #6
 8004390:	4651      	mov	r1, sl
 8004392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004396:	4651      	mov	r1, sl
 8004398:	018a      	lsls	r2, r1, #6
 800439a:	4651      	mov	r1, sl
 800439c:	ebb2 0801 	subs.w	r8, r2, r1
 80043a0:	4659      	mov	r1, fp
 80043a2:	eb63 0901 	sbc.w	r9, r3, r1
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ba:	4690      	mov	r8, r2
 80043bc:	4699      	mov	r9, r3
 80043be:	4623      	mov	r3, r4
 80043c0:	eb18 0303 	adds.w	r3, r8, r3
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	462b      	mov	r3, r5
 80043c8:	eb49 0303 	adc.w	r3, r9, r3
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043da:	4629      	mov	r1, r5
 80043dc:	024b      	lsls	r3, r1, #9
 80043de:	4621      	mov	r1, r4
 80043e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e4:	4621      	mov	r1, r4
 80043e6:	024a      	lsls	r2, r1, #9
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ee:	2200      	movs	r2, #0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043f8:	f7fb fef8 	bl	80001ec <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4613      	mov	r3, r2
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	e058      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	2200      	movs	r2, #0
 800440e:	4618      	mov	r0, r3
 8004410:	4611      	mov	r1, r2
 8004412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
 800441c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	0159      	lsls	r1, r3, #5
 800442e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004432:	0150      	lsls	r0, r2, #5
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4641      	mov	r1, r8
 800443a:	ebb2 0a01 	subs.w	sl, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb63 0b01 	sbc.w	fp, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004458:	ebb2 040a 	subs.w	r4, r2, sl
 800445c:	eb63 050b 	sbc.w	r5, r3, fp
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	464b      	mov	r3, r9
 800447c:	eb45 0303 	adc.w	r3, r5, r3
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448e:	4629      	mov	r1, r5
 8004490:	028b      	lsls	r3, r1, #10
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004498:	4621      	mov	r1, r4
 800449a:	028a      	lsls	r2, r1, #10
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a2:	2200      	movs	r2, #0
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	61fa      	str	r2, [r7, #28]
 80044a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ac:	f7fb fe9e 	bl	80001ec <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	3301      	adds	r3, #1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d2:	e002      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetSysClockFreq+0x204>)
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3750      	adds	r7, #80	; 0x50
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a9b      	lsrs	r3, r3, #10
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	08009554 	.word	0x08009554

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004538:	f7ff ffdc 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0b5b      	lsrs	r3, r3, #13
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	08009554 	.word	0x08009554

0800455c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	220f      	movs	r2, #15
 800456a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0203 	and.w	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <HAL_RCC_GetClockConfig+0x60>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40023c00 	.word	0x40023c00

080045c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e025      	b.n	8004620 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc fe21 	bl	8001230 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f001 faa9 	bl	8005b58 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	461a      	mov	r2, r3
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	f001 fafe 	bl	8005c12 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07b      	b.n	8004732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fc10 	bl	8000ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0104 	and.w	r1, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0210 	and.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e041      	b.n	80047d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc fbe5 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f000 fbb1 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d001      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e04e      	b.n	800488e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a23      	ldr	r2, [pc, #140]	; (800489c <HAL_TIM_Base_Start_IT+0xc4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d01d      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x80>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d111      	bne.n	800487c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b06      	cmp	r3, #6
 8004868:	d010      	beq.n	800488c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e007      	b.n	800488c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40010400 	.word	0x40010400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40001800 	.word	0x40001800

080048b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e041      	b.n	800494e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f839 	bl	8004956 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f000 faf2 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d122      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d11b      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0202 	mvn.w	r2, #2
 8004996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fa78 	bl	8004ea2 <HAL_TIM_IC_CaptureCallback>
 80049b2:	e005      	b.n	80049c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa6a 	bl	8004e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa7b 	bl	8004eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d122      	bne.n	8004a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d11b      	bne.n	8004a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0204 	mvn.w	r2, #4
 80049ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa4e 	bl	8004ea2 <HAL_TIM_IC_CaptureCallback>
 8004a06:	e005      	b.n	8004a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa40 	bl	8004e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa51 	bl	8004eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d122      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d11b      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0208 	mvn.w	r2, #8
 8004a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2204      	movs	r2, #4
 8004a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fa24 	bl	8004ea2 <HAL_TIM_IC_CaptureCallback>
 8004a5a:	e005      	b.n	8004a68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa16 	bl	8004e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa27 	bl	8004eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d122      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d11b      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0210 	mvn.w	r2, #16
 8004a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2208      	movs	r2, #8
 8004a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f9fa 	bl	8004ea2 <HAL_TIM_IC_CaptureCallback>
 8004aae:	e005      	b.n	8004abc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f9ec 	bl	8004e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f9fd 	bl	8004eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10e      	bne.n	8004aee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0201 	mvn.w	r2, #1
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fc f90d 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d10e      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fd53 	bl	80055c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d10e      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d107      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9c2 	bl	8004eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d10e      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d107      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0220 	mvn.w	r2, #32
 8004b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fd1d 	bl	80055ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ae      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	f200 809f 	bhi.w	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004ce9 	.word	0x08004ce9
 8004bb8:	08004ce9 	.word	0x08004ce9
 8004bbc:	08004ce9 	.word	0x08004ce9
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004ce9 	.word	0x08004ce9
 8004bc8:	08004ce9 	.word	0x08004ce9
 8004bcc:	08004ce9 	.word	0x08004ce9
 8004bd0:	08004c67 	.word	0x08004c67
 8004bd4:	08004ce9 	.word	0x08004ce9
 8004bd8:	08004ce9 	.word	0x08004ce9
 8004bdc:	08004ce9 	.word	0x08004ce9
 8004be0:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa18 	bl	8005020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
      break;
 8004c22:	e064      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa68 	bl	8005100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]
      break;
 8004c64:	e043      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fabd 	bl	80051ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]
      break;
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb11 	bl	80052d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
      break;
 8004ce6:	e002      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
      break;
 8004cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0b4      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x186>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d54:	d03e      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	f200 8087 	bhi.w	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_TIM_ConfigClockSource+0x172>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d87f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d01a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xa6>
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d87b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d050      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x11a>
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d877      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d03c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xfa>
 8004d80:	2b50      	cmp	r3, #80	; 0x50
 8004d82:	d873      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d058      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x13a>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d86f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d064      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d867      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f000 fb5d 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e04f      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f000 fb46 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 faba 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	; 0x50
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb13 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 fad9 	bl	80053de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	; 0x60
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fb03 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 fa9a 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	; 0x40
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 faf3 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 faea 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3a      	ldr	r2, [pc, #232]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d02b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d027      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d023      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	; (8005008 <TIM_Base_SetConfig+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a25      	ldr	r2, [pc, #148]	; (8005014 <TIM_Base_SetConfig+0x134>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a24      	ldr	r2, [pc, #144]	; (8005018 <TIM_Base_SetConfig+0x138>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40010400 	.word	0x40010400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	40001800 	.word	0x40001800
 8005018:	40001c00 	.word	0x40001c00
 800501c:	40002000 	.word	0x40002000

08005020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC1_SetConfig+0x64>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0308 	bic.w	r3, r3, #8
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC1_SetConfig+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f023 0210 	bic.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC2_SetConfig+0x68>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x94>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d113      	bne.n	80051bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC3_SetConfig+0x66>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x92>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d113      	bne.n	80052a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <TIM_OC4_SetConfig+0xa4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC4_SetConfig+0x68>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <TIM_OC4_SetConfig+0xa8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	f043 0307 	orr.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e05a      	b.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d01d      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10c      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800555c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e03f      	b.n	8005666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fd3e 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f829 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800564c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005674:	b0c0      	sub	sp, #256	; 0x100
 8005676:	af00      	add	r7, sp, #0
 8005678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	ea40 0301 	orr.w	r3, r0, r1
 8005698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056c8:	f021 010c 	bic.w	r1, r1, #12
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056d6:	430b      	orrs	r3, r1
 80056d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ea:	6999      	ldr	r1, [r3, #24]
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	ea40 0301 	orr.w	r3, r0, r1
 80056f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b8f      	ldr	r3, [pc, #572]	; (800593c <UART_SetConfig+0x2cc>)
 8005700:	429a      	cmp	r2, r3
 8005702:	d005      	beq.n	8005710 <UART_SetConfig+0xa0>
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <UART_SetConfig+0x2d0>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d104      	bne.n	800571a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe ff10 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 8005714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005718:	e003      	b.n	8005722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800571a:	f7fe fef7 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800571e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572c:	f040 810c 	bne.w	8005948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800573a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800573e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	1891      	adds	r1, r2, r2
 8005748:	65b9      	str	r1, [r7, #88]	; 0x58
 800574a:	415b      	adcs	r3, r3
 800574c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005752:	4621      	mov	r1, r4
 8005754:	eb12 0801 	adds.w	r8, r2, r1
 8005758:	4629      	mov	r1, r5
 800575a:	eb43 0901 	adc.w	r9, r3, r1
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005772:	4690      	mov	r8, r2
 8005774:	4699      	mov	r9, r3
 8005776:	4623      	mov	r3, r4
 8005778:	eb18 0303 	adds.w	r3, r8, r3
 800577c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005780:	462b      	mov	r3, r5
 8005782:	eb49 0303 	adc.w	r3, r9, r3
 8005786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800579a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800579e:	460b      	mov	r3, r1
 80057a0:	18db      	adds	r3, r3, r3
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	4613      	mov	r3, r2
 80057a6:	eb42 0303 	adc.w	r3, r2, r3
 80057aa:	657b      	str	r3, [r7, #84]	; 0x54
 80057ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057b4:	f7fa fd1a 	bl	80001ec <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <UART_SetConfig+0x2d4>)
 80057be:	fba3 2302 	umull	r2, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	011c      	lsls	r4, r3, #4
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	1891      	adds	r1, r2, r2
 80057de:	64b9      	str	r1, [r7, #72]	; 0x48
 80057e0:	415b      	adcs	r3, r3
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057e8:	4641      	mov	r1, r8
 80057ea:	eb12 0a01 	adds.w	sl, r2, r1
 80057ee:	4649      	mov	r1, r9
 80057f0:	eb43 0b01 	adc.w	fp, r3, r1
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005808:	4692      	mov	sl, r2
 800580a:	469b      	mov	fp, r3
 800580c:	4643      	mov	r3, r8
 800580e:	eb1a 0303 	adds.w	r3, sl, r3
 8005812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005816:	464b      	mov	r3, r9
 8005818:	eb4b 0303 	adc.w	r3, fp, r3
 800581c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800582c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005834:	460b      	mov	r3, r1
 8005836:	18db      	adds	r3, r3, r3
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
 800583a:	4613      	mov	r3, r2
 800583c:	eb42 0303 	adc.w	r3, r2, r3
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
 8005842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800584a:	f7fa fccf 	bl	80001ec <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4611      	mov	r1, r2
 8005854:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <UART_SetConfig+0x2d4>)
 8005856:	fba3 2301 	umull	r2, r3, r3, r1
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2264      	movs	r2, #100	; 0x64
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <UART_SetConfig+0x2d4>)
 800586c:	fba3 2302 	umull	r2, r3, r3, r2
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005878:	441c      	add	r4, r3
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	63b9      	str	r1, [r7, #56]	; 0x38
 8005894:	415b      	adcs	r3, r3
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800589c:	4641      	mov	r1, r8
 800589e:	1851      	adds	r1, r2, r1
 80058a0:	6339      	str	r1, [r7, #48]	; 0x30
 80058a2:	4649      	mov	r1, r9
 80058a4:	414b      	adcs	r3, r1
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058b4:	4659      	mov	r1, fp
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4651      	mov	r1, sl
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4642      	mov	r2, r8
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058d0:	464b      	mov	r3, r9
 80058d2:	460a      	mov	r2, r1
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058f0:	460b      	mov	r3, r1
 80058f2:	18db      	adds	r3, r3, r3
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f6:	4613      	mov	r3, r2
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005906:	f7fa fc71 	bl	80001ec <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <UART_SetConfig+0x2d4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3332      	adds	r3, #50	; 0x32
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <UART_SetConfig+0x2d4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 0207 	and.w	r2, r3, #7
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4422      	add	r2, r4
 8005936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005938:	e105      	b.n	8005b46 <UART_SetConfig+0x4d6>
 800593a:	bf00      	nop
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	1891      	adds	r1, r2, r2
 8005960:	6239      	str	r1, [r7, #32]
 8005962:	415b      	adcs	r3, r3
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800596a:	4641      	mov	r1, r8
 800596c:	1854      	adds	r4, r2, r1
 800596e:	4649      	mov	r1, r9
 8005970:	eb43 0501 	adc.w	r5, r3, r1
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	00eb      	lsls	r3, r5, #3
 800597e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005982:	00e2      	lsls	r2, r4, #3
 8005984:	4614      	mov	r4, r2
 8005986:	461d      	mov	r5, r3
 8005988:	4643      	mov	r3, r8
 800598a:	18e3      	adds	r3, r4, r3
 800598c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005990:	464b      	mov	r3, r9
 8005992:	eb45 0303 	adc.w	r3, r5, r3
 8005996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059b6:	4629      	mov	r1, r5
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c0:	4621      	mov	r1, r4
 80059c2:	008a      	lsls	r2, r1, #2
 80059c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059c8:	f7fa fc10 	bl	80001ec <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <UART_SetConfig+0x4e4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	011c      	lsls	r4, r3, #4
 80059da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	61b9      	str	r1, [r7, #24]
 80059f4:	415b      	adcs	r3, r3
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059fc:	4641      	mov	r1, r8
 80059fe:	1851      	adds	r1, r2, r1
 8005a00:	6139      	str	r1, [r7, #16]
 8005a02:	4649      	mov	r1, r9
 8005a04:	414b      	adcs	r3, r1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a14:	4659      	mov	r1, fp
 8005a16:	00cb      	lsls	r3, r1, #3
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1e:	4651      	mov	r1, sl
 8005a20:	00ca      	lsls	r2, r1, #3
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a30:	464b      	mov	r3, r9
 8005a32:	460a      	mov	r2, r1
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a54:	4649      	mov	r1, r9
 8005a56:	008b      	lsls	r3, r1, #2
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5e:	4641      	mov	r1, r8
 8005a60:	008a      	lsls	r2, r1, #2
 8005a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a66:	f7fa fbc1 	bl	80001ec <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005a70:	fba3 1302 	umull	r1, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	2164      	movs	r1, #100	; 0x64
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	3332      	adds	r3, #50	; 0x32
 8005a82:	4a34      	ldr	r2, [pc, #208]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a8e:	441c      	add	r4, r3
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	673b      	str	r3, [r7, #112]	; 0x70
 8005a98:	677a      	str	r2, [r7, #116]	; 0x74
 8005a9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	1891      	adds	r1, r2, r2
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	415b      	adcs	r3, r3
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aae:	4641      	mov	r1, r8
 8005ab0:	1851      	adds	r1, r2, r1
 8005ab2:	6039      	str	r1, [r7, #0]
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	414b      	adcs	r3, r1
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	00cb      	lsls	r3, r1, #3
 8005aca:	4651      	mov	r1, sl
 8005acc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	00ca      	lsls	r2, r1, #3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4642      	mov	r2, r8
 8005adc:	189b      	adds	r3, r3, r2
 8005ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	663b      	str	r3, [r7, #96]	; 0x60
 8005af4:	667a      	str	r2, [r7, #100]	; 0x64
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b02:	4649      	mov	r1, r9
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4641      	mov	r1, r8
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b14:	f7fa fb6a 	bl	80001ec <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2164      	movs	r1, #100	; 0x64
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	; 0x32
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4422      	add	r2, r4
 8005b44:	609a      	str	r2, [r3, #8]
}
 8005b46:	bf00      	nop
 8005b48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b52:	bf00      	nop
 8005b54:	51eb851f 	.word	0x51eb851f

08005b58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d123      	bne.n	8005bb2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	6851      	ldr	r1, [r2, #4]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	68d2      	ldr	r2, [r2, #12]
 8005b84:	4311      	orrs	r1, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	6912      	ldr	r2, [r2, #16]
 8005b8a:	4311      	orrs	r1, r2
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	6952      	ldr	r2, [r2, #20]
 8005b90:	4311      	orrs	r1, r2
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	6992      	ldr	r2, [r2, #24]
 8005b96:	4311      	orrs	r1, r2
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	69d2      	ldr	r2, [r2, #28]
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	6a12      	ldr	r2, [r2, #32]
 8005ba2:	4311      	orrs	r1, r2
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e028      	b.n	8005c04 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	69d9      	ldr	r1, [r3, #28]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	4319      	orrs	r1, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	6851      	ldr	r1, [r2, #4]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	4311      	orrs	r1, r2
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	68d2      	ldr	r2, [r2, #12]
 8005bea:	4311      	orrs	r1, r2
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	6912      	ldr	r2, [r2, #16]
 8005bf0:	4311      	orrs	r1, r2
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	6952      	ldr	r2, [r2, #20]
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	6992      	ldr	r2, [r2, #24]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d128      	bne.n	8005c76 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	1e59      	subs	r1, r3, #1
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	4319      	orrs	r1, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	4319      	orrs	r1, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	4319      	orrs	r1, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	4319      	orrs	r1, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	051b      	lsls	r3, r3, #20
 8005c62:	4319      	orrs	r1, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	e02f      	b.n	8005cd6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	68d2      	ldr	r2, [r2, #12]
 8005c86:	3a01      	subs	r2, #1
 8005c88:	0311      	lsls	r1, r2, #12
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	6952      	ldr	r2, [r2, #20]
 8005c8e:	3a01      	subs	r2, #1
 8005c90:	0512      	lsls	r2, r2, #20
 8005c92:	430a      	orrs	r2, r1
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1e59      	subs	r1, r3, #1
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4319      	orrs	r1, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	4319      	orrs	r1, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	4319      	orrs	r1, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	f107 001c 	add.w	r0, r7, #28
 8005cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d122      	bne.n	8005d42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9c0 	bl	80060bc <USB_CoreReset>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e01a      	b.n	8005d78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9b4 	bl	80060bc <USB_CoreReset>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
 8005d6a:	e005      	b.n	8005d78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10b      	bne.n	8005d96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f043 0206 	orr.w	r2, r3, #6
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da2:	b004      	add	sp, #16
 8005da4:	4770      	bx	lr

08005da6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 0201 	bic.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d115      	bne.n	8005e38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7fb fb6b 	bl	80014f4 <HAL_Delay>
      ms++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f93a 	bl	800609e <USB_GetMode>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d01e      	beq.n	8005e6e <USB_SetCurrentMode+0x84>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b31      	cmp	r3, #49	; 0x31
 8005e34:	d9f0      	bls.n	8005e18 <USB_SetCurrentMode+0x2e>
 8005e36:	e01a      	b.n	8005e6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d115      	bne.n	8005e6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	f7fb fb52 	bl	80014f4 <HAL_Delay>
      ms++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f921 	bl	800609e <USB_GetMode>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <USB_SetCurrentMode+0x84>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b31      	cmp	r3, #49	; 0x31
 8005e66:	d9f0      	bls.n	8005e4a <USB_SetCurrentMode+0x60>
 8005e68:	e001      	b.n	8005e6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e005      	b.n	8005e7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b32      	cmp	r3, #50	; 0x32
 8005e72:	d101      	bne.n	8005e78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4a13      	ldr	r2, [pc, #76]	; (8005ee8 <USB_FlushTxFifo+0x64>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e01b      	b.n	8005edc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	daf2      	bge.n	8005e92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	019b      	lsls	r3, r3, #6
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <USB_FlushTxFifo+0x64>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e006      	b.n	8005edc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d0f0      	beq.n	8005ebc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	00030d40 	.word	0x00030d40

08005eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <USB_FlushRxFifo+0x5c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e018      	b.n	8005f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	daf2      	bge.n	8005ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <USB_FlushRxFifo+0x5c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e006      	b.n	8005f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b10      	cmp	r3, #16
 8005f38:	d0f0      	beq.n	8005f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	00030d40 	.word	0x00030d40

08005f4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	71fb      	strb	r3, [r7, #7]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d123      	bne.n	8005fba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f72:	88bb      	ldrh	r3, [r7, #4]
 8005f74:	3303      	adds	r3, #3
 8005f76:	089b      	lsrs	r3, r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e018      	b.n	8005fb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	031a      	lsls	r2, r3, #12
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d3e2      	bcc.n	8005f80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3724      	adds	r7, #36	; 0x24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b08b      	sub	sp, #44	; 0x2c
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	e014      	b.n	800601e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3301      	adds	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	3301      	adds	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	3301      	adds	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	3301      	adds	r3, #1
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	3301      	adds	r3, #1
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	429a      	cmp	r2, r3
 8006024:	d3e6      	bcc.n	8005ff4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01e      	beq.n	800606a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	461a      	mov	r2, r3
 8006038:	f107 0310 	add.w	r3, r7, #16
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	701a      	strb	r2, [r3, #0]
      i++;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	3301      	adds	r3, #1
 8006056:	623b      	str	r3, [r7, #32]
      pDest++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800605e:	8bfb      	ldrh	r3, [r7, #30]
 8006060:	3b01      	subs	r3, #1
 8006062:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006064:	8bfb      	ldrh	r3, [r7, #30]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ea      	bne.n	8006040 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800606c:	4618      	mov	r0, r3
 800606e:	372c      	adds	r7, #44	; 0x2c
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006090:	68fb      	ldr	r3, [r7, #12]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0301 	and.w	r3, r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_CoreReset+0x64>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01b      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <USB_CoreReset+0x64>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d0f0      	beq.n	80060f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	00030d40 	.word	0x00030d40

08006124 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006124:	b084      	sub	sp, #16
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10a      	bne.n	8006196 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e014      	b.n	80061c0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e009      	b.n	80061c0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c0:	2110      	movs	r1, #16
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe5e 	bl	8005e84 <USB_FlushTxFifo>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe8a 	bl	8005eec <USB_FlushRxFifo>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e015      	b.n	8006214 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	461a      	mov	r2, r3
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d3e5      	bcc.n	80061e8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006228:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <USB_HostInit+0x16c>)
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <USB_HostInit+0x170>)
 8006248:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800624c:	e009      	b.n	8006262 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <USB_HostInit+0x174>)
 8006258:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0f      	ldr	r2, [pc, #60]	; (800629c <USB_HostInit+0x178>)
 800625e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f043 0210 	orr.w	r2, r3, #16
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <USB_HostInit+0x17c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628c:	b004      	add	sp, #16
 800628e:	4770      	bx	lr
 8006290:	01000200 	.word	0x01000200
 8006294:	00e00300 	.word	0x00e00300
 8006298:	00600080 	.word	0x00600080
 800629c:	004000e0 	.word	0x004000e0
 80062a0:	a3200008 	.word	0xa3200008

080062a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062dc:	4313      	orrs	r3, r2
 80062de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ec:	461a      	mov	r2, r3
 80062ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062f2:	6053      	str	r3, [r2, #4]
 80062f4:	e009      	b.n	800630a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d106      	bne.n	800630a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006302:	461a      	mov	r2, r3
 8006304:	f241 7370 	movw	r3, #6000	; 0x1770
 8006308:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006338:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006346:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006348:	2064      	movs	r0, #100	; 0x64
 800634a:	f7fb f8d3 	bl	80014f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800635c:	200a      	movs	r0, #10
 800635e:	f7fb f8c9 	bl	80014f4 <HAL_Delay>

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006390:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <USB_DriveVbus+0x44>
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d109      	bne.n	80063d0 <USB_DriveVbus+0x64>
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0c5b      	lsrs	r3, r3, #17
 80063fc:	f003 0303 	and.w	r3, r3, #3
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	b29b      	uxth	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	461a      	mov	r2, r3
 800643e:	4603      	mov	r3, r0
 8006440:	70fb      	strb	r3, [r7, #3]
 8006442:	460b      	mov	r3, r1
 8006444:	70bb      	strb	r3, [r7, #2]
 8006446:	4613      	mov	r3, r2
 8006448:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	461a      	mov	r2, r3
 8006460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006464:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800646a:	2b03      	cmp	r3, #3
 800646c:	d87e      	bhi.n	800656c <USB_HC_Init+0x13c>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <USB_HC_Init+0x44>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	0800652f 	.word	0x0800652f
 800647c:	08006485 	.word	0x08006485
 8006480:	080064f1 	.word	0x080064f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	461a      	mov	r2, r3
 8006492:	f240 439d 	movw	r3, #1181	; 0x49d
 8006496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	da10      	bge.n	80064c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80064c0:	e057      	b.n	8006572 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d051      	beq.n	8006572 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064ec:	60d3      	str	r3, [r2, #12]
      break;
 80064ee:	e040      	b.n	8006572 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	461a      	mov	r2, r3
 80064fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006502:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006508:	2b00      	cmp	r3, #0
 800650a:	da34      	bge.n	8006576 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800652c:	e023      	b.n	8006576 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	f240 2325 	movw	r3, #549	; 0x225
 8006540:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006542:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da17      	bge.n	800657a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006568:	60d3      	str	r3, [r2, #12]
      }
      break;
 800656a:	e006      	b.n	800657a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	77fb      	strb	r3, [r7, #31]
      break;
 8006570:	e004      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <USB_HC_Init+0x14c>
      break;
 800657a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	2101      	movs	r1, #1
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	6939      	ldr	r1, [r7, #16]
 80065b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065b6:	4313      	orrs	r3, r2
 80065b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da03      	bge.n	80065d6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e001      	b.n	80065da <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff feff 	bl	80063de <USB_GetHostSpeed>
 80065e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80065e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d106      	bne.n	80065f8 <USB_HC_Init+0x1c8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d003      	beq.n	80065f8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e001      	b.n	80065fc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	059b      	lsls	r3, r3, #22
 8006600:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006604:	78bb      	ldrb	r3, [r7, #2]
 8006606:	02db      	lsls	r3, r3, #11
 8006608:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800660c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800660e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006612:	049b      	lsls	r3, r3, #18
 8006614:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006618:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800661a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800661c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006620:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	0159      	lsls	r1, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	440b      	add	r3, r1
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006638:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800663a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800663e:	2b03      	cmp	r3, #3
 8006640:	d003      	beq.n	800664a <USB_HC_Init+0x21a>
 8006642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10f      	bne.n	800666a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	440a      	add	r2, r1
 8006660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006668:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800666a:	7ffb      	ldrb	r3, [r7, #31]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800668c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006690:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02d      	beq.n	80066fa <USB_HC_StartXfer+0x86>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d129      	bne.n	80066fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d117      	bne.n	80066dc <USB_HC_StartXfer+0x68>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	79db      	ldrb	r3, [r3, #7]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <USB_HC_StartXfer+0x48>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	79db      	ldrb	r3, [r3, #7]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d10f      	bne.n	80066dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <USB_HC_StartXfer+0x86>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	795b      	ldrb	r3, [r3, #5]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa0f 	bl	8006b14 <USB_DoPing>
      return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e0f8      	b.n	80068ec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d018      	beq.n	8006734 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	8912      	ldrh	r2, [r2, #8]
 800670a:	4413      	add	r3, r2
 800670c:	3b01      	subs	r3, #1
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	8912      	ldrh	r2, [r2, #8]
 8006712:	fbb3 f3f2 	udiv	r3, r3, r2
 8006716:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800671a:	8b7b      	ldrh	r3, [r7, #26]
 800671c:	429a      	cmp	r2, r3
 800671e:	d90b      	bls.n	8006738 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006720:	8b7b      	ldrh	r3, [r7, #26]
 8006722:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	8912      	ldrh	r2, [r2, #8]
 800672a:	fb03 f202 	mul.w	r2, r3, r2
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	611a      	str	r2, [r3, #16]
 8006732:	e001      	b.n	8006738 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006734:	2301      	movs	r3, #1
 8006736:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	8912      	ldrh	r2, [r2, #8]
 8006746:	fb03 f202 	mul.w	r2, r3, r2
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	611a      	str	r2, [r3, #16]
 800674e:	e003      	b.n	8006758 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006762:	04d9      	lsls	r1, r3, #19
 8006764:	4b63      	ldr	r3, [pc, #396]	; (80068f4 <USB_HC_StartXfer+0x280>)
 8006766:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006768:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	7a9b      	ldrb	r3, [r3, #10]
 800676e:	075b      	lsls	r3, r3, #29
 8006770:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	0148      	lsls	r0, r1, #5
 8006778:	6a39      	ldr	r1, [r7, #32]
 800677a:	4401      	add	r1, r0
 800677c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006780:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006782:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	460a      	mov	r2, r1
 800679c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	7e7b      	ldrb	r3, [r7, #25]
 80067e6:	075b      	lsls	r3, r3, #29
 80067e8:	69f9      	ldr	r1, [r7, #28]
 80067ea:	0148      	lsls	r0, r1, #5
 80067ec:	6a39      	ldr	r1, [r7, #32]
 80067ee:	4401      	add	r1, r0
 80067f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800680e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	78db      	ldrb	r3, [r3, #3]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e003      	b.n	800682a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006828:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006830:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e04e      	b.n	80068ec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d149      	bne.n	80068ea <USB_HC_StartXfer+0x276>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d045      	beq.n	80068ea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	79db      	ldrb	r3, [r3, #7]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d830      	bhi.n	80068c8 <USB_HC_StartXfer+0x254>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <USB_HC_StartXfer+0x1f8>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	0800687d 	.word	0x0800687d
 8006870:	080068a1 	.word	0x080068a1
 8006874:	0800687d 	.word	0x0800687d
 8006878:	080068a1 	.word	0x080068a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	3303      	adds	r3, #3
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006886:	8afa      	ldrh	r2, [r7, #22]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	b29b      	uxth	r3, r3
 800688e:	429a      	cmp	r2, r3
 8006890:	d91c      	bls.n	80068cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	619a      	str	r2, [r3, #24]
        }
        break;
 800689e:	e015      	b.n	80068cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	3303      	adds	r3, #3
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068aa:	8afa      	ldrh	r2, [r7, #22]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d90a      	bls.n	80068d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80068c6:	e003      	b.n	80068d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80068c8:	bf00      	nop
 80068ca:	e002      	b.n	80068d2 <USB_HC_StartXfer+0x25e>
        break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <USB_HC_StartXfer+0x25e>
        break;
 80068d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68d9      	ldr	r1, [r3, #12]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785a      	ldrb	r2, [r3, #1]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2000      	movs	r0, #0
 80068e2:	9000      	str	r0, [sp, #0]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fb31 	bl	8005f4c <USB_WritePacket>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	1ff80000 	.word	0x1ff80000

080068f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	b29b      	uxth	r3, r3
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800691a:	b480      	push	{r7}
 800691c:	b089      	sub	sp, #36	; 0x24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	0c9b      	lsrs	r3, r3, #18
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0fdb      	lsrs	r3, r3, #31
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d104      	bne.n	8006974 <USB_HC_Halt+0x5a>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e0c8      	b.n	8006b06 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <USB_HC_Halt+0x66>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d163      	bne.n	8006a48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	440a      	add	r2, r1
 8006996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 80ab 	bne.w	8006b04 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d133      	bne.n	8006a22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d81d      	bhi.n	8006a44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d0ec      	beq.n	80069fa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a20:	e070      	b.n	8006b04 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a42:	e05f      	b.n	8006b04 <USB_HC_Halt+0x1ea>
            break;
 8006a44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a46:	e05d      	b.n	8006b04 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d133      	bne.n	8006ae0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac4:	d81d      	bhi.n	8006b02 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006adc:	d0ec      	beq.n	8006ab8 <USB_HC_Halt+0x19e>
 8006ade:	e011      	b.n	8006b04 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e000      	b.n	8006b04 <USB_HC_Halt+0x1ea>
          break;
 8006b02:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3724      	adds	r7, #36	; 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	04da      	lsls	r2, r3, #19
 8006b30:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <USB_DoPing+0x74>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	1ff80000 	.word	0x1ff80000

08006b8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff f911 	bl	8005dc8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ba6:	2110      	movs	r1, #16
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff f96b 	bl	8005e84 <USB_FlushTxFifo>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff f997 	bl	8005eec <USB_FlushRxFifo>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e01f      	b.n	8006c0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	461a      	mov	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b0f      	cmp	r3, #15
 8006c12:	d9dc      	bls.n	8006bce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	e034      	b.n	8006c84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	461a      	mov	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c60:	d80c      	bhi.n	8006c7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c78:	d0ec      	beq.n	8006c54 <USB_StopHost+0xc8>
 8006c7a:	e000      	b.n	8006c7e <USB_StopHost+0xf2>
        break;
 8006c7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3301      	adds	r3, #1
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d9c7      	bls.n	8006c1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff f880 	bl	8005da6 <USB_EnableGlobalInt>

  return ret;
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006cb8:	2301      	movs	r3, #1
 8006cba:	2202      	movs	r2, #2
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc66 	bl	8007590 <USBH_FindInterface>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d002      	beq.n	8006cd4 <USBH_CDC_InterfaceInit+0x24>
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d901      	bls.n	8006cd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e13d      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc3b 	bl	8007558 <USBH_SelectInterface>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006cec:	2302      	movs	r3, #2
 8006cee:	e131      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006cf6:	2050      	movs	r0, #80	; 0x50
 8006cf8:	f002 fb00 	bl	80092fc <malloc>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e11f      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d14:	2250      	movs	r2, #80	; 0x50
 8006d16:	2100      	movs	r1, #0
 8006d18:	68b8      	ldr	r0, [r7, #8]
 8006d1a:	f002 faff 	bl	800931c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	211a      	movs	r1, #26
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da15      	bge.n	8006d62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	211a      	movs	r1, #26
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	211a      	movs	r1, #26
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d5c:	881a      	ldrh	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 ff2c 	bl	8008bc6 <USBH_AllocPipe>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	7858      	ldrb	r0, [r3, #1]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	8952      	ldrh	r2, [r2, #10]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	2203      	movs	r2, #3
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4623      	mov	r3, r4
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fee4 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f002 f9f9 	bl	80091a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006dae:	2300      	movs	r3, #0
 8006db0:	2200      	movs	r2, #0
 8006db2:	210a      	movs	r1, #10
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fbeb 	bl	8007590 <USBH_FindInterface>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2bff      	cmp	r3, #255	; 0xff
 8006dc2:	d002      	beq.n	8006dca <USBH_CDC_InterfaceInit+0x11a>
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d901      	bls.n	8006dce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0c2      	b.n	8006f54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	211a      	movs	r1, #26
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da16      	bge.n	8006e14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	211a      	movs	r1, #26
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006df6:	781a      	ldrb	r2, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	211a      	movs	r1, #26
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e0c:	881a      	ldrh	r2, [r3, #0]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	835a      	strh	r2, [r3, #26]
 8006e12:	e015      	b.n	8006e40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	211a      	movs	r1, #26
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	4413      	add	r3, r2
 8006e20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	211a      	movs	r1, #26
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e3a:	881a      	ldrh	r2, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	211a      	movs	r1, #26
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b25b      	sxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da16      	bge.n	8006e86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	211a      	movs	r1, #26
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	211a      	movs	r1, #26
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	835a      	strh	r2, [r3, #26]
 8006e84:	e015      	b.n	8006eb2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	211a      	movs	r1, #26
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	211a      	movs	r1, #26
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eac:	881a      	ldrh	r2, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7b9b      	ldrb	r3, [r3, #14]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fe84 	bl	8008bc6 <USBH_AllocPipe>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	7bdb      	ldrb	r3, [r3, #15]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fe7a 	bl	8008bc6 <USBH_AllocPipe>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	7b59      	ldrb	r1, [r3, #13]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	7b98      	ldrb	r0, [r3, #14]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	8b12      	ldrh	r2, [r2, #24]
 8006ef2:	9202      	str	r2, [sp, #8]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	9201      	str	r2, [sp, #4]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	4623      	mov	r3, r4
 8006efc:	4602      	mov	r2, r0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fe32 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	7b19      	ldrb	r1, [r3, #12]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	7bd8      	ldrb	r0, [r3, #15]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	8b52      	ldrh	r2, [r2, #26]
 8006f1c:	9202      	str	r2, [sp, #8]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	9201      	str	r2, [sp, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4623      	mov	r3, r4
 8006f26:	4602      	mov	r2, r0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fe1d 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	7b5b      	ldrb	r3, [r3, #13]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 f92e 	bl	80091a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7b1b      	ldrb	r3, [r3, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 f927 	bl	80091a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd90      	pop	{r4, r7, pc}

08006f5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00e      	beq.n	8006f94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fe12 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fe3d 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7b1b      	ldrb	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7b1b      	ldrb	r3, [r3, #12]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fdff 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	7b1b      	ldrb	r3, [r3, #12]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fe2a 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	7b5b      	ldrb	r3, [r3, #13]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7b5b      	ldrb	r3, [r3, #13]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fdec 	bl	8008ba6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	7b5b      	ldrb	r3, [r3, #13]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fe17 	bl	8008c08 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 f989 	bl	800930c <free>
    phost->pActiveClass->pData = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007000:	2200      	movs	r2, #0
 8007002:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3340      	adds	r3, #64	; 0x40
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8b1 	bl	800718e <GetLineCoding>
 800702c:	4603      	mov	r3, r0
 800702e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800703c:	2102      	movs	r1, #2
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007042:	7afb      	ldrb	r3, [r7, #11]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800706c:	2b04      	cmp	r3, #4
 800706e:	d877      	bhi.n	8007160 <USBH_CDC_Process+0x114>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USBH_CDC_Process+0x2c>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800708d 	.word	0x0800708d
 800707c:	08007093 	.word	0x08007093
 8007080:	080070c3 	.word	0x080070c3
 8007084:	08007137 	.word	0x08007137
 8007088:	08007145 	.word	0x08007145
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e06d      	b.n	800716e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f897 	bl	80071cc <SetLineCoding>
 800709e:	4603      	mov	r3, r0
 80070a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070b0:	e058      	b.n	8007164 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d055      	beq.n	8007164 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2204      	movs	r2, #4
 80070bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070c0:	e050      	b.n	8007164 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3340      	adds	r3, #64	; 0x40
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f860 	bl	800718e <GetLineCoding>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d126      	bne.n	8007126 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d13b      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d133      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800710c:	429a      	cmp	r2, r3
 800710e:	d12b      	bne.n	8007168 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007118:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d124      	bne.n	8007168 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f958 	bl	80073d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007124:	e020      	b.n	8007168 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d01d      	beq.n	8007168 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2204      	movs	r2, #4
 8007130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007134:	e018      	b.n	8007168 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f867 	bl	800720a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f8da 	bl	80072f6 <CDC_ProcessReception>
      break;
 8007142:	e014      	b.n	800716e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 ffef 	bl	800812a <USBH_ClrFeature>
 800714c:	4603      	mov	r3, r0
 800714e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800715e:	e005      	b.n	800716c <USBH_CDC_Process+0x120>

    default:
      break;
 8007160:	bf00      	nop
 8007162:	e004      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 8007164:	bf00      	nop
 8007166:	e002      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 8007168:	bf00      	nop
 800716a:	e000      	b.n	800716e <USBH_CDC_Process+0x122>
      break;
 800716c:	bf00      	nop

  }

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22a1      	movs	r2, #161	; 0xa1
 800719c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2221      	movs	r2, #33	; 0x21
 80071a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2207      	movs	r2, #7
 80071b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2207      	movs	r2, #7
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fa81 	bl	80086c4 <USBH_CtlReq>
 80071c2:	4603      	mov	r3, r0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2221      	movs	r2, #33	; 0x21
 80071da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2207      	movs	r2, #7
 80071f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2207      	movs	r2, #7
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fa62 	bl	80086c4 <USBH_CtlReq>
 8007200:	4603      	mov	r3, r0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af02      	add	r7, sp, #8
 8007210:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800721c:	2300      	movs	r3, #0
 800721e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007226:	2b01      	cmp	r3, #1
 8007228:	d002      	beq.n	8007230 <CDC_ProcessTransmission+0x26>
 800722a:	2b02      	cmp	r3, #2
 800722c:	d023      	beq.n	8007276 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800722e:	e05e      	b.n	80072ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	8b12      	ldrh	r2, [r2, #24]
 8007238:	4293      	cmp	r3, r2
 800723a:	d90b      	bls.n	8007254 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8b1a      	ldrh	r2, [r3, #24]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	7b5b      	ldrb	r3, [r3, #13]
 8007248:	2001      	movs	r0, #1
 800724a:	9000      	str	r0, [sp, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fc48 	bl	8008ae2 <USBH_BulkSendData>
 8007252:	e00b      	b.n	800726c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7b5b      	ldrb	r3, [r3, #13]
 8007262:	2001      	movs	r0, #1
 8007264:	9000      	str	r0, [sp, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fc3b 	bl	8008ae2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007274:	e03b      	b.n	80072ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	7b5b      	ldrb	r3, [r3, #13]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 ff65 	bl	800914c <USBH_LL_GetURBState>
 8007282:	4603      	mov	r3, r0
 8007284:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d128      	bne.n	80072de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	8b12      	ldrh	r2, [r2, #24]
 8007294:	4293      	cmp	r3, r2
 8007296:	d90e      	bls.n	80072b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	8b12      	ldrh	r2, [r2, #24]
 80072a0:	1a9a      	subs	r2, r3, r2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	8b12      	ldrh	r2, [r2, #24]
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	61da      	str	r2, [r3, #28]
 80072b4:	e002      	b.n	80072bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072cc:	e00e      	b.n	80072ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f868 	bl	80073ac <USBH_CDC_TransmitCallback>
      break;
 80072dc:	e006      	b.n	80072ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d103      	bne.n	80072ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072ec:	bf00      	nop
  }
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007308:	2300      	movs	r3, #0
 800730a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007312:	2b03      	cmp	r3, #3
 8007314:	d002      	beq.n	800731c <CDC_ProcessReception+0x26>
 8007316:	2b04      	cmp	r3, #4
 8007318:	d00e      	beq.n	8007338 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800731a:	e043      	b.n	80073a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6a19      	ldr	r1, [r3, #32]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	8b5a      	ldrh	r2, [r3, #26]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	7b1b      	ldrb	r3, [r3, #12]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fbff 	bl	8008b2c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2204      	movs	r2, #4
 8007332:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007336:	e035      	b.n	80073a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	7b1b      	ldrb	r3, [r3, #12]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 ff04 	bl	800914c <USBH_LL_GetURBState>
 8007344:	4603      	mov	r3, r0
 8007346:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d129      	bne.n	80073a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fe67 	bl	8009028 <USBH_LL_GetLastXferSize>
 800735a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d016      	beq.n	8007394 <CDC_ProcessReception+0x9e>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	8b5b      	ldrh	r3, [r3, #26]
 800736a:	461a      	mov	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4293      	cmp	r3, r2
 8007370:	d910      	bls.n	8007394 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad2      	subs	r2, r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	441a      	add	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2203      	movs	r2, #3
 800738e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007392:	e006      	b.n	80073a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f80f 	bl	80073c0 <USBH_CDC_ReceiveCallback>
      break;
 80073a2:	bf00      	nop
  }
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e029      	b.n	8007454 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	79fa      	ldrb	r2, [r7, #7]
 8007404:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f81f 	bl	800745c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 fd2d 	bl	8008eac <USBH_LL_Init>

  return USBH_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e009      	b.n	8007482 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	33e0      	adds	r3, #224	; 0xe0
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	2200      	movs	r2, #0
 800747a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b0f      	cmp	r3, #15
 8007486:	d9f2      	bls.n	800746e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e009      	b.n	80074a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a8:	d3f1      	bcc.n	800748e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2240      	movs	r2, #64	; 0x40
 80074ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d016      	beq.n	8007546 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10e      	bne.n	8007540 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007528:	1c59      	adds	r1, r3, #1
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	33de      	adds	r3, #222	; 0xde
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	e004      	b.n	800754a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007540:	2302      	movs	r3, #2
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e001      	b.n	800754a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	429a      	cmp	r2, r3
 8007572:	d204      	bcs.n	800757e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800757c:	e001      	b.n	8007582 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	70fb      	strb	r3, [r7, #3]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70bb      	strb	r3, [r7, #2]
 80075a6:	4613      	mov	r3, r2
 80075a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075ba:	e025      	b.n	8007608 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	221a      	movs	r2, #26
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	3308      	adds	r3, #8
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	3302      	adds	r3, #2
 80075cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	795b      	ldrb	r3, [r3, #5]
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d002      	beq.n	80075de <USBH_FindInterface+0x4e>
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2bff      	cmp	r3, #255	; 0xff
 80075dc:	d111      	bne.n	8007602 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075e2:	78ba      	ldrb	r2, [r7, #2]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d002      	beq.n	80075ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075e8:	78bb      	ldrb	r3, [r7, #2]
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d109      	bne.n	8007602 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075f2:	787a      	ldrb	r2, [r7, #1]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d002      	beq.n	80075fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075f8:	787b      	ldrb	r3, [r7, #1]
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d101      	bne.n	8007602 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	e006      	b.n	8007610 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	3301      	adds	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d9d6      	bls.n	80075bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800760e:	23ff      	movs	r3, #255	; 0xff
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fc87 	bl	8008f38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800762a:	2101      	movs	r1, #1
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fda0 	bl	8009172 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af04      	add	r7, sp, #16
 8007642:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d102      	bne.n	800765e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b0b      	cmp	r3, #11
 8007666:	f200 81be 	bhi.w	80079e6 <USBH_Process+0x3aa>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <USBH_Process+0x34>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076d3 	.word	0x080076d3
 8007678:	0800773b 	.word	0x0800773b
 800767c:	08007981 	.word	0x08007981
 8007680:	080079e7 	.word	0x080079e7
 8007684:	080077df 	.word	0x080077df
 8007688:	08007927 	.word	0x08007927
 800768c:	08007815 	.word	0x08007815
 8007690:	08007835 	.word	0x08007835
 8007694:	08007855 	.word	0x08007855
 8007698:	08007899 	.word	0x08007899
 800769c:	08007969 	.word	0x08007969
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 819e 	beq.w	80079ea <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076b4:	20c8      	movs	r0, #200	; 0xc8
 80076b6:	f001 fda3 	bl	8009200 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fc99 	bl	8008ff2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076d0:	e18b      	b.n	80079ea <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d107      	bne.n	80076ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ea:	e18d      	b.n	8007a08 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076f6:	d914      	bls.n	8007722 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800770e:	2b03      	cmp	r3, #3
 8007710:	d903      	bls.n	800771a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220d      	movs	r2, #13
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e176      	b.n	8007a08 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
      break;
 8007720:	e172      	b.n	8007a08 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007728:	f103 020a 	add.w	r2, r3, #10
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007732:	200a      	movs	r0, #10
 8007734:	f001 fd64 	bl	8009200 <USBH_Delay>
      break;
 8007738:	e166      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774a:	2104      	movs	r1, #4
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007750:	2064      	movs	r0, #100	; 0x64
 8007752:	f001 fd55 	bl	8009200 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fc24 	bl	8008fa4 <USBH_LL_GetSpeed>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fa29 	bl	8008bc6 <USBH_AllocPipe>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fa21 	bl	8008bc6 <USBH_AllocPipe>
 8007784:	4603      	mov	r3, r0
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7919      	ldrb	r1, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077a0:	b292      	uxth	r2, r2
 80077a2:	9202      	str	r2, [sp, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	9201      	str	r2, [sp, #4]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4603      	mov	r3, r0
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 f9da 	bl	8008b68 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7959      	ldrb	r1, [r3, #5]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077c8:	b292      	uxth	r2, r2
 80077ca:	9202      	str	r2, [sp, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	9201      	str	r2, [sp, #4]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4603      	mov	r3, r0
 80077d4:	2200      	movs	r2, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f9c6 	bl	8008b68 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077dc:	e114      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f918 	bl	8007a14 <USBH_HandleEnum>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 80fe 	bne.w	80079ee <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007800:	2b01      	cmp	r3, #1
 8007802:	d103      	bne.n	800780c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2208      	movs	r2, #8
 8007808:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800780a:	e0f0      	b.n	80079ee <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2207      	movs	r2, #7
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e0ec      	b.n	80079ee <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80e9 	beq.w	80079f2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2208      	movs	r2, #8
 8007830:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007832:	e0de      	b.n	80079f2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800783a:	b29b      	uxth	r3, r3
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc2c 	bl	800809c <USBH_SetCfg>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 80d5 	bne.w	80079f6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2209      	movs	r2, #9
 8007850:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007852:	e0d0      	b.n	80079f6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007862:	2101      	movs	r1, #1
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc3c 	bl	80080e2 <USBH_SetFeature>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	220a      	movs	r2, #10
 800787a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800787c:	e0bd      	b.n	80079fa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 80b9 	bne.w	80079fa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220a      	movs	r2, #10
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e0b4      	b.n	80079fa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	220a      	movs	r2, #10
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e0b0      	b.n	80079fa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80ad 	beq.w	80079fe <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e016      	b.n	80078e0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078b2:	7bfa      	ldrb	r2, [r7, #15]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32de      	adds	r2, #222	; 0xde
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	791a      	ldrb	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d108      	bne.n	80078da <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80078c8:	7bfa      	ldrb	r2, [r7, #15]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32de      	adds	r2, #222	; 0xde
 80078ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80078d8:	e005      	b.n	80078e6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	3301      	adds	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0e5      	beq.n	80078b2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d016      	beq.n	800791e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2206      	movs	r2, #6
 8007906:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800790e:	2103      	movs	r1, #3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007914:	e073      	b.n	80079fe <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220d      	movs	r2, #13
 800791a:	701a      	strb	r2, [r3, #0]
      break;
 800791c:	e06f      	b.n	80079fe <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220d      	movs	r2, #13
 8007922:	701a      	strb	r2, [r3, #0]
      break;
 8007924:	e06b      	b.n	80079fe <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	220b      	movs	r2, #11
 800794c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800794e:	e058      	b.n	8007a02 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d154      	bne.n	8007a02 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220d      	movs	r2, #13
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e050      	b.n	8007a02 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220d      	movs	r2, #13
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e04c      	b.n	8007a02 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d049      	beq.n	8007a06 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
      }
      break;
 800797e:	e042      	b.n	8007a06 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fd67 	bl	800745c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079bc:	2105      	movs	r1, #5
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fe20 	bl	800761c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079dc:	e014      	b.n	8007a08 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 faaa 	bl	8008f38 <USBH_LL_Start>
      break;
 80079e4:	e010      	b.n	8007a08 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80079e6:	bf00      	nop
 80079e8:	e00e      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079ea:	bf00      	nop
 80079ec:	e00c      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079ee:	bf00      	nop
 80079f0:	e00a      	b.n	8007a08 <USBH_Process+0x3cc>
    break;
 80079f2:	bf00      	nop
 80079f4:	e008      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079f6:	bf00      	nop
 80079f8:	e006      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <USBH_Process+0x3cc>
      break;
 8007a06:	bf00      	nop
  }
  return USBH_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop

08007a14 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af04      	add	r7, sp, #16
 8007a1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	f200 81c1 	bhi.w	8007db0 <USBH_HandleEnum+0x39c>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBH_HandleEnum+0x20>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a55 	.word	0x08007a55
 8007a38:	08007b13 	.word	0x08007b13
 8007a3c:	08007b7d 	.word	0x08007b7d
 8007a40:	08007c0b 	.word	0x08007c0b
 8007a44:	08007c75 	.word	0x08007c75
 8007a48:	08007ce5 	.word	0x08007ce5
 8007a4c:	08007d2b 	.word	0x08007d2b
 8007a50:	08007d71 	.word	0x08007d71
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a54:	2108      	movs	r1, #8
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa50 	bl	8007efc <USBH_Get_DevDesc>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d130      	bne.n	8007ac8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7919      	ldrb	r1, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a8a:	b292      	uxth	r2, r2
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4603      	mov	r3, r0
 8007a96:	2280      	movs	r2, #128	; 0x80
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f865 	bl	8008b68 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	7959      	ldrb	r1, [r3, #5]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	9202      	str	r2, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	9201      	str	r2, [sp, #4]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4603      	mov	r3, r0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f851 	bl	8008b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ac6:	e175      	b.n	8007db4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	f040 8172 	bne.w	8007db4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d903      	bls.n	8007af2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	220d      	movs	r2, #13
 8007aee:	701a      	strb	r2, [r3, #0]
      break;
 8007af0:	e160      	b.n	8007db4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	795b      	ldrb	r3, [r3, #5]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f885 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	791b      	ldrb	r3, [r3, #4]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f87f 	bl	8008c08 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
      break;
 8007b10:	e150      	b.n	8007db4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b12:	2112      	movs	r1, #18
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9f1 	bl	8007efc <USBH_Get_DevDesc>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2a:	e145      	b.n	8007db8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f040 8142 	bne.w	8007db8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d903      	bls.n	8007b56 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220d      	movs	r2, #13
 8007b52:	701a      	strb	r2, [r3, #0]
      break;
 8007b54:	e130      	b.n	8007db8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f853 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f84d 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	e11d      	b.n	8007db8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa68 	bl	8008054 <USBH_SetAddress>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d132      	bne.n	8007bf4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b8e:	2002      	movs	r0, #2
 8007b90:	f001 fb36 	bl	8009200 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7919      	ldrb	r1, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	9202      	str	r2, [sp, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 ffcf 	bl	8008b68 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7959      	ldrb	r1, [r3, #5]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bde:	b292      	uxth	r2, r2
 8007be0:	9202      	str	r2, [sp, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	9201      	str	r2, [sp, #4]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4603      	mov	r3, r0
 8007bea:	2200      	movs	r2, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 ffbb 	bl	8008b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bf2:	e0e3      	b.n	8007dbc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	f040 80e0 	bne.w	8007dbc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220d      	movs	r2, #13
 8007c00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	705a      	strb	r2, [r3, #1]
      break;
 8007c08:	e0d8      	b.n	8007dbc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c0a:	2109      	movs	r1, #9
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f99d 	bl	8007f4c <USBH_Get_CfgDesc>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c22:	e0cd      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f040 80ca 	bne.w	8007dc0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d903      	bls.n	8007c4e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e0b8      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	795b      	ldrb	r3, [r3, #5]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 ffd7 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 ffd1 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
      break;
 8007c72:	e0a5      	b.n	8007dc0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f965 	bl	8007f4c <USBH_Get_CfgDesc>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c92:	e097      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 8094 	bne.w	8007dc4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d903      	bls.n	8007cbe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e082      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	795b      	ldrb	r3, [r3, #5]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 ff9f 	bl	8008c08 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 ff99 	bl	8008c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
      break;
 8007ce2:	e06f      	b.n	8007dc4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d019      	beq.n	8007d22 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cfa:	23ff      	movs	r3, #255	; 0xff
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f949 	bl	8007f94 <USBH_Get_StringDesc>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2206      	movs	r2, #6
 8007d10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d12:	e059      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d156      	bne.n	8007dc8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2206      	movs	r2, #6
 8007d1e:	705a      	strb	r2, [r3, #1]
      break;
 8007d20:	e052      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2206      	movs	r2, #6
 8007d26:	705a      	strb	r2, [r3, #1]
      break;
 8007d28:	e04e      	b.n	8007dc8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d019      	beq.n	8007d68 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d40:	23ff      	movs	r3, #255	; 0xff
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f926 	bl	8007f94 <USBH_Get_StringDesc>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2207      	movs	r2, #7
 8007d56:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d58:	e038      	b.n	8007dcc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d135      	bne.n	8007dcc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2207      	movs	r2, #7
 8007d64:	705a      	strb	r2, [r3, #1]
      break;
 8007d66:	e031      	b.n	8007dcc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	705a      	strb	r2, [r3, #1]
      break;
 8007d6e:	e02d      	b.n	8007dcc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d86:	23ff      	movs	r3, #255	; 0xff
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f903 	bl	8007f94 <USBH_Get_StringDesc>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d9c:	e018      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d115      	bne.n	8007dd0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	e012      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
      break;
 8007dae:	e00f      	b.n	8007dd0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007db0:	bf00      	nop
 8007db2:	e00e      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007db4:	bf00      	nop
 8007db6:	e00c      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007db8:	bf00      	nop
 8007dba:	e00a      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e008      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e006      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e004      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dc8:	bf00      	nop
 8007dca:	e002      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dcc:	bf00      	nop
 8007dce:	e000      	b.n	8007dd2 <USBH_HandleEnum+0x3be>
      break;
 8007dd0:	bf00      	nop
  }
  return Status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f804 	bl	8007e1e <USBH_HandleSof>
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d10a      	bne.n	8007e46 <USBH_HandleSof+0x28>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
  }
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e5e:	bf00      	nop
}
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e7a:	bf00      	nop
}
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f84a 	bl	8008f6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fe91 	bl	8008c08 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fe8b 	bl	8008c08 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4613      	mov	r3, r2
 8007f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f864 	bl	8007fea <USBH_GetDescriptor>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f000 f918 	bl	8008172 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	331c      	adds	r3, #28
 8007f5c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f5e:	887b      	ldrh	r3, [r7, #2]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f68:	2100      	movs	r1, #0
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f83d 	bl	8007fea <USBH_GetDescriptor>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f987 	bl	8008294 <USBH_ParseCfgDesc>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	72fb      	strb	r3, [r7, #11]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fb0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007fb8:	893b      	ldrh	r3, [r7, #8]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f812 	bl	8007fea <USBH_GetDescriptor>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d107      	bne.n	8007fe0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fd6:	893a      	ldrh	r2, [r7, #8]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fb24 	bl	8008628 <USBH_ParseStringDesc>
  }

  return status;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	72fb      	strb	r3, [r7, #11]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	789b      	ldrb	r3, [r3, #2]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11c      	bne.n	800803e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2206      	movs	r2, #6
 8008014:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	893a      	ldrh	r2, [r7, #8]
 800801a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008026:	d104      	bne.n	8008032 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f240 4209 	movw	r2, #1033	; 0x409
 800802e:	829a      	strh	r2, [r3, #20]
 8008030:	e002      	b.n	8008038 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8b3a      	ldrh	r2, [r7, #24]
 800803c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800803e:	8b3b      	ldrh	r3, [r7, #24]
 8008040:	461a      	mov	r2, r3
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb3d 	bl	80086c4 <USBH_CtlReq>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10f      	bne.n	8008088 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2205      	movs	r2, #5
 8008072:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fb19 	bl	80086c4 <USBH_CtlReq>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10e      	bne.n	80080ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2209      	movs	r2, #9
 80080ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	887a      	ldrh	r2, [r7, #2]
 80080c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 faf6 	bl	80086c4 <USBH_CtlReq>
 80080d8:	4603      	mov	r3, r0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	789b      	ldrb	r3, [r3, #2]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10f      	bne.n	8008116 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2203      	movs	r2, #3
 8008100:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fad2 	bl	80086c4 <USBH_CtlReq>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10f      	bne.n	800815e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 faae 	bl	80086c4 <USBH_CtlReq>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	785a      	ldrb	r2, [r3, #1]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	3302      	adds	r3, #2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b29a      	uxth	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3303      	adds	r3, #3
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	4313      	orrs	r3, r2
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	791a      	ldrb	r2, [r3, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	795a      	ldrb	r2, [r3, #5]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	799a      	ldrb	r2, [r3, #6]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	79da      	ldrb	r2, [r3, #7]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	79db      	ldrb	r3, [r3, #7]
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	dc11      	bgt.n	80081f8 <USBH_ParseDevDesc+0x86>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	db16      	blt.n	8008206 <USBH_ParseDevDesc+0x94>
 80081d8:	3b08      	subs	r3, #8
 80081da:	2201      	movs	r2, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80081e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf14      	ite	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	2300      	moveq	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <USBH_ParseDevDesc+0x8a>
 80081f6:	e006      	b.n	8008206 <USBH_ParseDevDesc+0x94>
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d104      	bne.n	8008206 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	79da      	ldrb	r2, [r3, #7]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	71da      	strb	r2, [r3, #7]
      break;
 8008204:	e003      	b.n	800820e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	71da      	strb	r2, [r3, #7]
      break;
 800820c:	bf00      	nop
  }

  if (length > 8U)
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d939      	bls.n	8008288 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3308      	adds	r3, #8
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29a      	uxth	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	3309      	adds	r3, #9
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	330a      	adds	r3, #10
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b29a      	uxth	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	330b      	adds	r3, #11
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b29b      	uxth	r3, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	330c      	adds	r3, #12
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	330d      	adds	r3, #13
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	7b9a      	ldrb	r2, [r3, #14]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7bda      	ldrb	r2, [r3, #15]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	7c1a      	ldrb	r2, [r3, #16]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	7c5a      	ldrb	r2, [r3, #17]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	745a      	strb	r2, [r3, #17]
  }
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	; 0x30
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	785a      	ldrb	r2, [r3, #1]
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3302      	adds	r3, #2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3303      	adds	r3, #3
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f0:	bf28      	it	cs
 80082f2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	791a      	ldrb	r2, [r3, #4]
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	795a      	ldrb	r2, [r3, #5]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	799a      	ldrb	r2, [r3, #6]
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	79da      	ldrb	r2, [r3, #7]
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7a1a      	ldrb	r2, [r3, #8]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b09      	cmp	r3, #9
 800832a:	d002      	beq.n	8008332 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2209      	movs	r2, #9
 8008330:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	2b09      	cmp	r3, #9
 8008336:	f240 809d 	bls.w	8008474 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800833a:	2309      	movs	r3, #9
 800833c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008342:	e081      	b.n	8008448 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008344:	f107 0316 	add.w	r3, r7, #22
 8008348:	4619      	mov	r1, r3
 800834a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834c:	f000 f99f 	bl	800868e <USBH_GetNextDesc>
 8008350:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	2b04      	cmp	r3, #4
 8008358:	d176      	bne.n	8008448 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b09      	cmp	r3, #9
 8008360:	d002      	beq.n	8008368 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	2209      	movs	r2, #9
 8008366:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836c:	221a      	movs	r2, #26
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	3308      	adds	r3, #8
 8008374:	6a3a      	ldr	r2, [r7, #32]
 8008376:	4413      	add	r3, r2
 8008378:	3302      	adds	r3, #2
 800837a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800837c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800837e:	69f8      	ldr	r0, [r7, #28]
 8008380:	f000 f87e 	bl	8008480 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800838e:	e043      	b.n	8008418 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008390:	f107 0316 	add.w	r3, r7, #22
 8008394:	4619      	mov	r1, r3
 8008396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008398:	f000 f979 	bl	800868e <USBH_GetNextDesc>
 800839c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d138      	bne.n	8008418 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d10f      	bne.n	80083ce <USBH_ParseCfgDesc+0x13a>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	799b      	ldrb	r3, [r3, #6]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d10b      	bne.n	80083ce <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	79db      	ldrb	r3, [r3, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10f      	bne.n	80083de <USBH_ParseCfgDesc+0x14a>
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d00b      	beq.n	80083de <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2209      	movs	r2, #9
 80083ca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083cc:	e007      	b.n	80083de <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b07      	cmp	r3, #7
 80083d4:	d004      	beq.n	80083e0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	2207      	movs	r2, #7
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e000      	b.n	80083e0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083de:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083e8:	3201      	adds	r2, #1
 80083ea:	00d2      	lsls	r2, r2, #3
 80083ec:	211a      	movs	r1, #26
 80083ee:	fb01 f303 	mul.w	r3, r1, r3
 80083f2:	4413      	add	r3, r2
 80083f4:	3308      	adds	r3, #8
 80083f6:	6a3a      	ldr	r2, [r7, #32]
 80083f8:	4413      	add	r3, r2
 80083fa:	3304      	adds	r3, #4
 80083fc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f86b 	bl	80084de <USBH_ParseEPDesc>
 8008408:	4603      	mov	r3, r0
 800840a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800840e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008412:	3301      	adds	r3, #1
 8008414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008420:	429a      	cmp	r2, r3
 8008422:	d204      	bcs.n	800842e <USBH_ParseCfgDesc+0x19a>
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	885a      	ldrh	r2, [r3, #2]
 8008428:	8afb      	ldrh	r3, [r7, #22]
 800842a:	429a      	cmp	r2, r3
 800842c:	d8b0      	bhi.n	8008390 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	791b      	ldrb	r3, [r3, #4]
 8008432:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008436:	429a      	cmp	r2, r3
 8008438:	d201      	bcs.n	800843e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800843a:	2303      	movs	r3, #3
 800843c:	e01c      	b.n	8008478 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800843e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008442:	3301      	adds	r3, #1
 8008444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800844c:	2b01      	cmp	r3, #1
 800844e:	d805      	bhi.n	800845c <USBH_ParseCfgDesc+0x1c8>
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	885a      	ldrh	r2, [r3, #2]
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	429a      	cmp	r2, r3
 8008458:	f63f af74 	bhi.w	8008344 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	791b      	ldrb	r3, [r3, #4]
 8008460:	2b02      	cmp	r3, #2
 8008462:	bf28      	it	cs
 8008464:	2302      	movcs	r3, #2
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800846c:	429a      	cmp	r2, r3
 800846e:	d201      	bcs.n	8008474 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008470:	2303      	movs	r3, #3
 8008472:	e001      	b.n	8008478 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	; 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781a      	ldrb	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785a      	ldrb	r2, [r3, #1]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	789a      	ldrb	r2, [r3, #2]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	78da      	ldrb	r2, [r3, #3]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	791a      	ldrb	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	795a      	ldrb	r2, [r3, #5]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	799a      	ldrb	r2, [r3, #6]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	79da      	ldrb	r2, [r3, #7]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	7a1a      	ldrb	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	721a      	strb	r2, [r3, #8]
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80084de:	b480      	push	{r7}
 80084e0:	b087      	sub	sp, #28
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	785a      	ldrb	r2, [r3, #1]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	789a      	ldrb	r2, [r3, #2]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	78da      	ldrb	r2, [r3, #3]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3305      	adds	r3, #5
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	4313      	orrs	r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	799a      	ldrb	r2, [r3, #6]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e033      	b.n	80085a8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	889b      	ldrh	r3, [r3, #4]
 8008544:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008548:	f023 0307 	bic.w	r3, r3, #7
 800854c:	b29a      	uxth	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b21a      	sxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b299      	uxth	r1, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3305      	adds	r3, #5
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b29b      	uxth	r3, r3
 800856c:	430b      	orrs	r3, r1
 800856e:	b29b      	uxth	r3, r3
 8008570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008574:	2b00      	cmp	r3, #0
 8008576:	d110      	bne.n	800859a <USBH_ParseEPDesc+0xbc>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b299      	uxth	r1, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3305      	adds	r3, #5
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	430b      	orrs	r3, r1
 800858e:	b29b      	uxth	r3, r3
 8008590:	b21b      	sxth	r3, r3
 8008592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008596:	b21b      	sxth	r3, r3
 8008598:	e001      	b.n	800859e <USBH_ParseEPDesc+0xc0>
 800859a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800859e:	4313      	orrs	r3, r2
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d116      	bne.n	80085e0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d005      	beq.n	80085ca <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	78db      	ldrb	r3, [r3, #3]
 80085c2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d127      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	799b      	ldrb	r3, [r3, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <USBH_ParseEPDesc+0xfc>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	799b      	ldrb	r3, [r3, #6]
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d91f      	bls.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	75fb      	strb	r3, [r7, #23]
 80085de:	e01c      	b.n	800861a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d10a      	bne.n	8008602 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	799b      	ldrb	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <USBH_ParseEPDesc+0x11e>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	799b      	ldrb	r3, [r3, #6]
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d90e      	bls.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
 8008600:	e00b      	b.n	800861a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d105      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
}
 800861c:	4618      	mov	r0, r3
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d120      	bne.n	8008682 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	1e9a      	subs	r2, r3, #2
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	4293      	cmp	r3, r2
 800864a:	bf28      	it	cs
 800864c:	4613      	movcs	r3, r2
 800864e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3302      	adds	r3, #2
 8008654:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008656:	2300      	movs	r3, #0
 8008658:	82fb      	strh	r3, [r7, #22]
 800865a:	e00b      	b.n	8008674 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800865c:	8afb      	ldrh	r3, [r7, #22]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3301      	adds	r3, #1
 800866c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800866e:	8afb      	ldrh	r3, [r7, #22]
 8008670:	3302      	adds	r3, #2
 8008672:	82fb      	strh	r3, [r7, #22]
 8008674:	8afa      	ldrh	r2, [r7, #22]
 8008676:	8abb      	ldrh	r3, [r7, #20]
 8008678:	429a      	cmp	r2, r3
 800867a:	d3ef      	bcc.n	800865c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
  }
}
 8008682:	bf00      	nop
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	789b      	ldrb	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d002      	beq.n	80086e4 <USBH_CtlReq+0x20>
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d00f      	beq.n	8008702 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086e2:	e027      	b.n	8008734 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2202      	movs	r2, #2
 80086fa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e018      	b.n	8008734 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f81c 	bl	8008740 <USBH_HandleControl>
 8008708:	4603      	mov	r3, r0
 800870a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <USBH_CtlReq+0x54>
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d106      	bne.n	8008726 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	761a      	strb	r2, [r3, #24]
      break;
 8008724:	e005      	b.n	8008732 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d102      	bne.n	8008732 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	709a      	strb	r2, [r3, #2]
      break;
 8008732:	bf00      	nop
  }
  return status;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af02      	add	r7, sp, #8
 8008746:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e1b      	ldrb	r3, [r3, #24]
 8008754:	3b01      	subs	r3, #1
 8008756:	2b0a      	cmp	r3, #10
 8008758:	f200 8156 	bhi.w	8008a08 <USBH_HandleControl+0x2c8>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBH_HandleControl+0x24>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008791 	.word	0x08008791
 8008768:	080087ab 	.word	0x080087ab
 800876c:	08008815 	.word	0x08008815
 8008770:	0800883b 	.word	0x0800883b
 8008774:	08008873 	.word	0x08008873
 8008778:	0800889d 	.word	0x0800889d
 800877c:	080088ef 	.word	0x080088ef
 8008780:	08008911 	.word	0x08008911
 8008784:	0800894d 	.word	0x0800894d
 8008788:	08008973 	.word	0x08008973
 800878c:	080089b1 	.word	0x080089b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f103 0110 	add.w	r1, r3, #16
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	795b      	ldrb	r3, [r3, #5]
 800879a:	461a      	mov	r2, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f943 	bl	8008a28 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	761a      	strb	r2, [r3, #24]
      break;
 80087a8:	e139      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	795b      	ldrb	r3, [r3, #5]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fccb 	bl	800914c <USBH_LL_GetURBState>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d11e      	bne.n	80087fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	7c1b      	ldrb	r3, [r3, #16]
 80087c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8adb      	ldrh	r3, [r3, #22]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087d2:	7b7b      	ldrb	r3, [r7, #13]
 80087d4:	2b80      	cmp	r3, #128	; 0x80
 80087d6:	d103      	bne.n	80087e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2203      	movs	r2, #3
 80087dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087de:	e115      	b.n	8008a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2205      	movs	r2, #5
 80087e4:	761a      	strb	r2, [r3, #24]
      break;
 80087e6:	e111      	b.n	8008a0c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80087e8:	7b7b      	ldrb	r3, [r7, #13]
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d103      	bne.n	80087f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e10a      	b.n	8008a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2207      	movs	r2, #7
 80087fa:	761a      	strb	r2, [r3, #24]
      break;
 80087fc:	e106      	b.n	8008a0c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b04      	cmp	r3, #4
 8008802:	d003      	beq.n	800880c <USBH_HandleControl+0xcc>
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b02      	cmp	r3, #2
 8008808:	f040 8100 	bne.w	8008a0c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	220b      	movs	r2, #11
 8008810:	761a      	strb	r2, [r3, #24]
      break;
 8008812:	e0fb      	b.n	8008a0c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6899      	ldr	r1, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	899a      	ldrh	r2, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	791b      	ldrb	r3, [r3, #4]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f93a 	bl	8008aa6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	761a      	strb	r2, [r3, #24]
      break;
 8008838:	e0f1      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc83 	bl	800914c <USBH_LL_GetURBState>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2209      	movs	r2, #9
 8008854:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b05      	cmp	r3, #5
 800885a:	d102      	bne.n	8008862 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008860:	e0d6      	b.n	8008a10 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b04      	cmp	r3, #4
 8008866:	f040 80d3 	bne.w	8008a10 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	220b      	movs	r2, #11
 800886e:	761a      	strb	r2, [r3, #24]
      break;
 8008870:	e0ce      	b.n	8008a10 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6899      	ldr	r1, [r3, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	899a      	ldrh	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	795b      	ldrb	r3, [r3, #5]
 800887e:	2001      	movs	r0, #1
 8008880:	9000      	str	r0, [sp, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8ea 	bl	8008a5c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2206      	movs	r2, #6
 8008898:	761a      	strb	r2, [r3, #24]
      break;
 800889a:	e0c0      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	795b      	ldrb	r3, [r3, #5]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fc52 	bl	800914c <USBH_LL_GetURBState>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d103      	bne.n	80088ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2207      	movs	r2, #7
 80088b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b8:	e0ac      	b.n	8008a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b05      	cmp	r3, #5
 80088be:	d105      	bne.n	80088cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	220c      	movs	r2, #12
 80088c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e0a3      	b.n	8008a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d103      	bne.n	80088da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2205      	movs	r2, #5
 80088d6:	761a      	strb	r2, [r3, #24]
      break;
 80088d8:	e09c      	b.n	8008a14 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	f040 8099 	bne.w	8008a14 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	220b      	movs	r2, #11
 80088e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088e8:	2302      	movs	r3, #2
 80088ea:	73fb      	strb	r3, [r7, #15]
      break;
 80088ec:	e092      	b.n	8008a14 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8d5 	bl	8008aa6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2208      	movs	r2, #8
 800890c:	761a      	strb	r2, [r3, #24]

      break;
 800890e:	e086      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	791b      	ldrb	r3, [r3, #4]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fc18 	bl	800914c <USBH_LL_GetURBState>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d105      	bne.n	8008932 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	220d      	movs	r2, #13
 800892a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008930:	e072      	b.n	8008a18 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d103      	bne.n	8008940 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	220b      	movs	r2, #11
 800893c:	761a      	strb	r2, [r3, #24]
      break;
 800893e:	e06b      	b.n	8008a18 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b05      	cmp	r3, #5
 8008944:	d168      	bne.n	8008a18 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
      break;
 800894a:	e065      	b.n	8008a18 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	795b      	ldrb	r3, [r3, #5]
 8008950:	2201      	movs	r2, #1
 8008952:	9200      	str	r2, [sp, #0]
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f87f 	bl	8008a5c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220a      	movs	r2, #10
 800896e:	761a      	strb	r2, [r3, #24]
      break;
 8008970:	e055      	b.n	8008a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	795b      	ldrb	r3, [r3, #5]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fbe7 	bl	800914c <USBH_LL_GetURBState>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d105      	bne.n	8008994 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	220d      	movs	r2, #13
 8008990:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008992:	e043      	b.n	8008a1c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d103      	bne.n	80089a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2209      	movs	r2, #9
 800899e:	761a      	strb	r2, [r3, #24]
      break;
 80089a0:	e03c      	b.n	8008a1c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d139      	bne.n	8008a1c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	220b      	movs	r2, #11
 80089ac:	761a      	strb	r2, [r3, #24]
      break;
 80089ae:	e035      	b.n	8008a1c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7e5b      	ldrb	r3, [r3, #25]
 80089b4:	3301      	adds	r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	765a      	strb	r2, [r3, #25]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7e5b      	ldrb	r3, [r3, #25]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d806      	bhi.n	80089d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089d0:	e025      	b.n	8008a1e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d8:	2106      	movs	r1, #6
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	795b      	ldrb	r3, [r3, #5]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f90c 	bl	8008c08 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	791b      	ldrb	r3, [r3, #4]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f906 	bl	8008c08 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	73fb      	strb	r3, [r7, #15]
      break;
 8008a06:	e00a      	b.n	8008a1e <USBH_HandleControl+0x2de>

    default:
      break;
 8008a08:	bf00      	nop
 8008a0a:	e008      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e006      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <USBH_HandleControl+0x2de>
      break;
 8008a1c:	bf00      	nop
  }

  return status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a36:	79f9      	ldrb	r1, [r7, #7]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fb4c 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	80fb      	strh	r3, [r7, #6]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a80:	7979      	ldrb	r1, [r7, #5]
 8008a82:	7e3b      	ldrb	r3, [r7, #24]
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	9302      	str	r3, [sp, #8]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fb27 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af04      	add	r7, sp, #16
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	80fb      	strh	r3, [r7, #6]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008abc:	7979      	ldrb	r1, [r7, #5]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	9302      	str	r3, [sp, #8]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	2301      	movs	r3, #1
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fb09 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ad8:	2300      	movs	r3, #0

}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af04      	add	r7, sp, #16
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	4611      	mov	r1, r2
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b06:	7979      	ldrb	r1, [r7, #5]
 8008b08:	7e3b      	ldrb	r3, [r7, #24]
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	2301      	movs	r3, #1
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	2302      	movs	r3, #2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fae4 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af04      	add	r7, sp, #16
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4611      	mov	r1, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b42:	7979      	ldrb	r1, [r7, #5]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2301      	movs	r3, #1
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2201      	movs	r2, #1
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fac6 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	4608      	mov	r0, r1
 8008b72:	4611      	mov	r1, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4603      	mov	r3, r0
 8008b78:	70fb      	strb	r3, [r7, #3]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70bb      	strb	r3, [r7, #2]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b82:	7878      	ldrb	r0, [r7, #1]
 8008b84:	78ba      	ldrb	r2, [r7, #2]
 8008b86:	78f9      	ldrb	r1, [r7, #3]
 8008b88:	8b3b      	ldrh	r3, [r7, #24]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	7d3b      	ldrb	r3, [r7, #20]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	7c3b      	ldrb	r3, [r7, #16]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4603      	mov	r3, r0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa59 	bl	800904e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa78 	bl	80090ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f836 	bl	8008c44 <USBH_GetFreePipe>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00a      	beq.n	8008bfc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	89fb      	ldrh	r3, [r7, #14]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	33e0      	adds	r3, #224	; 0xe0
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	b2db      	uxtb	r3, r3
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d80d      	bhi.n	8008c36 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	33e0      	adds	r3, #224	; 0xe0
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	33e0      	adds	r3, #224	; 0xe0
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
 8008c54:	e00f      	b.n	8008c76 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	33e0      	adds	r3, #224	; 0xe0
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	e007      	b.n	8008c80 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	3301      	adds	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b0f      	cmp	r3, #15
 8008c7a:	d9ec      	bls.n	8008c56 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8008c90:	2200      	movs	r2, #0
 8008c92:	490e      	ldr	r1, [pc, #56]	; (8008ccc <MX_USB_HOST_Init+0x40>)
 8008c94:	480e      	ldr	r0, [pc, #56]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008c96:	f7fe fba7 	bl	80073e8 <USBH_Init>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ca0:	f7f8 f844 	bl	8000d2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8008ca4:	490b      	ldr	r1, [pc, #44]	; (8008cd4 <MX_USB_HOST_Init+0x48>)
 8008ca6:	480a      	ldr	r0, [pc, #40]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008ca8:	f7fe fc2c 	bl	8007504 <USBH_RegisterClass>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cb2:	f7f8 f83b 	bl	8000d2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <MX_USB_HOST_Init+0x44>)
 8008cb8:	f7fe fcb0 	bl	800761c <USBH_Start>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cc2:	f7f8 f833 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	08008ced 	.word	0x08008ced
 8008cd0:	2000031c 	.word	0x2000031c
 8008cd4:	2000000c 	.word	0x2000000c

08008cd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8008cdc:	4802      	ldr	r0, [pc, #8]	; (8008ce8 <MX_USB_HOST_Process+0x10>)
 8008cde:	f7fe fcad 	bl	800763c <USBH_Process>
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000031c 	.word	0x2000031c

08008cec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d819      	bhi.n	8008d34 <USBH_UserProcess+0x48>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <USBH_UserProcess+0x1c>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d35 	.word	0x08008d35
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d1d 	.word	0x08008d1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d1c:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d1e:	2203      	movs	r2, #3
 8008d20:	701a      	strb	r2, [r3, #0]
  break;
 8008d22:	e008      	b.n	8008d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]
  break;
 8008d2a:	e004      	b.n	8008d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <USBH_UserProcess+0x58>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
  break;
 8008d32:	e000      	b.n	8008d36 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	200006f4 	.word	0x200006f4

08008d48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <HAL_HCD_MspInit+0xb0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d141      	bne.n	8008dee <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	4b23      	ldr	r3, [pc, #140]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008d74:	f043 0302 	orr.w	r3, r3, #2
 8008d78:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7a:	4b20      	ldr	r3, [pc, #128]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8008d86:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8008d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d94:	2300      	movs	r3, #0
 8008d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008d98:	230c      	movs	r3, #12
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	4619      	mov	r1, r3
 8008da2:	4817      	ldr	r0, [pc, #92]	; (8008e00 <HAL_HCD_MspInit+0xb8>)
 8008da4:	f7f8 ffb2 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8008da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4810      	ldr	r0, [pc, #64]	; (8008e00 <HAL_HCD_MspInit+0xb8>)
 8008dbe:	f7f8 ffa5 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <HAL_HCD_MspInit+0xb4>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	2100      	movs	r1, #0
 8008de2:	204d      	movs	r0, #77	; 0x4d
 8008de4:	f7f8 fc62 	bl	80016ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008de8:	204d      	movs	r0, #77	; 0x4d
 8008dea:	f7f8 fc7b 	bl	80016e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008dee:	bf00      	nop
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40040000 	.word	0x40040000
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40020400 	.word	0x40020400

08008e04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fff1 	bl	8007dfa <USBH_LL_IncTimer>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff f829 	bl	8007e86 <USBH_LL_Connect>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff f832 	bl	8007eb4 <USBH_LL_Disconnect>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
 8008e64:	4613      	mov	r3, r2
 8008e66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe ffe3 	bl	8007e4e <USBH_LL_PortEnabled>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe ffe3 	bl	8007e6a <USBH_LL_PortDisabled>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d132      	bne.n	8008f24 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8008ebe:	4a1c      	ldr	r2, [pc, #112]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a19      	ldr	r2, [pc, #100]	; (8008f30 <USBH_LL_Init+0x84>)
 8008eca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ed0:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <USBH_LL_Init+0x88>)
 8008ed2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8008ed4:	4b16      	ldr	r3, [pc, #88]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ed6:	220c      	movs	r2, #12
 8008ed8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8008eda:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <USBH_LL_Init+0x84>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008ee0:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ee8:	2202      	movs	r2, #2
 8008eea:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <USBH_LL_Init+0x84>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <USBH_LL_Init+0x84>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <USBH_LL_Init+0x84>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <USBH_LL_Init+0x84>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8008f04:	480a      	ldr	r0, [pc, #40]	; (8008f30 <USBH_LL_Init+0x84>)
 8008f06:	f7f9 f8c6 	bl	8002096 <HAL_HCD_Init>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8008f10:	f7f7 ff0c 	bl	8000d2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8008f14:	4806      	ldr	r0, [pc, #24]	; (8008f30 <USBH_LL_Init+0x84>)
 8008f16:	f7f9 fcaa 	bl	800286e <HAL_HCD_GetCurrentFrame>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fe ff5c 	bl	8007ddc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200006f8 	.word	0x200006f8
 8008f34:	40040000 	.word	0x40040000

08008f38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7f9 fc17 	bl	8002782 <HAL_HCD_Start>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f95c 	bl	8009218 <USBH_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f9 fc1f 	bl	80027c8 <HAL_HCD_Stop>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 f941 	bl	8009218 <USBH_Get_USB_Status>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f9 fc67 	bl	800288a <HAL_HCD_GetCurrentSpeed>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d00c      	beq.n	8008fdc <USBH_LL_GetSpeed+0x38>
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d80d      	bhi.n	8008fe2 <USBH_LL_GetSpeed+0x3e>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <USBH_LL_GetSpeed+0x2c>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d003      	beq.n	8008fd6 <USBH_LL_GetSpeed+0x32>
 8008fce:	e008      	b.n	8008fe2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	e008      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fda:	e005      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	e002      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe6:	bf00      	nop
  }
  return  speed;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009008:	4618      	mov	r0, r3
 800900a:	f7f9 fbfa 	bl	8002802 <HAL_HCD_ResetPort>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f8ff 	bl	8009218 <USBH_Get_USB_Status>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 fc01 	bl	8002846 <HAL_HCD_HC_GetXferCount>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800904e:	b590      	push	{r4, r7, lr}
 8009050:	b089      	sub	sp, #36	; 0x24
 8009052:	af04      	add	r7, sp, #16
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	461a      	mov	r2, r3
 800905c:	4603      	mov	r3, r0
 800905e:	70fb      	strb	r3, [r7, #3]
 8009060:	460b      	mov	r3, r1
 8009062:	70bb      	strb	r3, [r7, #2]
 8009064:	4613      	mov	r3, r2
 8009066:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009076:	787c      	ldrb	r4, [r7, #1]
 8009078:	78ba      	ldrb	r2, [r7, #2]
 800907a:	78f9      	ldrb	r1, [r7, #3]
 800907c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800907e:	9302      	str	r3, [sp, #8]
 8009080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4623      	mov	r3, r4
 800908e:	f7f9 f864 	bl	800215a <HAL_HCD_HC_Init>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f8bd 	bl	8009218 <USBH_Get_USB_Status>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd90      	pop	{r4, r7, pc}

080090ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 f8d4 	bl	8002278 <HAL_HCD_HC_Halt>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f89e 	bl	8009218 <USBH_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80090ea:	b590      	push	{r4, r7, lr}
 80090ec:	b089      	sub	sp, #36	; 0x24
 80090ee:	af04      	add	r7, sp, #16
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009112:	787c      	ldrb	r4, [r7, #1]
 8009114:	78ba      	ldrb	r2, [r7, #2]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	4623      	mov	r3, r4
 800912e:	f7f9 f8c7 	bl	80022c0 <HAL_HCD_HC_SubmitRequest>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f86d 	bl	8009218 <USBH_Get_USB_Status>
 800913e:	4603      	mov	r3, r0
 8009140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009142:	7bbb      	ldrb	r3, [r7, #14]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}

0800914c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7f9 fb5b 	bl	800281e <HAL_HCD_HC_GetURBState>
 8009168:	4603      	mov	r3, r0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f870 	bl	8009270 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009190:	20c8      	movs	r0, #200	; 0xc8
 8009192:	f7f8 f9af 	bl	80014f4 <HAL_Delay>
  return USBH_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
 80091ac:	4613      	mov	r3, r2
 80091ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	212c      	movs	r1, #44	; 0x2c
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	4413      	add	r3, r2
 80091c4:	333b      	adds	r3, #59	; 0x3b
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	212c      	movs	r1, #44	; 0x2c
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	3354      	adds	r3, #84	; 0x54
 80091da:	78ba      	ldrb	r2, [r7, #2]
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	e008      	b.n	80091f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	212c      	movs	r1, #44	; 0x2c
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	3355      	adds	r3, #85	; 0x55
 80091ee:	78ba      	ldrb	r2, [r7, #2]
 80091f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7f8 f973 	bl	80014f4 <HAL_Delay>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2b03      	cmp	r3, #3
 800922a:	d817      	bhi.n	800925c <USBH_Get_USB_Status+0x44>
 800922c:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <USBH_Get_USB_Status+0x1c>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	08009245 	.word	0x08009245
 8009238:	0800924b 	.word	0x0800924b
 800923c:	08009251 	.word	0x08009251
 8009240:	08009257 	.word	0x08009257
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e00b      	b.n	8009262 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800924a:	2302      	movs	r3, #2
 800924c:	73fb      	strb	r3, [r7, #15]
    break;
 800924e:	e008      	b.n	8009262 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009250:	2301      	movs	r3, #1
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	e005      	b.n	8009262 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009256:	2302      	movs	r3, #2
 8009258:	73fb      	strb	r3, [r7, #15]
    break;
 800925a:	e002      	b.n	8009262 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800925c:	2302      	movs	r3, #2
 800925e:	73fb      	strb	r3, [r7, #15]
    break;
 8009260:	bf00      	nop
  }
  return usb_status;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
 8009288:	e001      	b.n	800928e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	461a      	mov	r2, r3
 8009292:	2110      	movs	r1, #16
 8009294:	4803      	ldr	r0, [pc, #12]	; (80092a4 <MX_DriverVbusHS+0x34>)
 8009296:	f7f8 fee5 	bl	8002064 <HAL_GPIO_WritePin>
}
 800929a:	bf00      	nop
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	40020800 	.word	0x40020800

080092a8 <__errno>:
 80092a8:	4b01      	ldr	r3, [pc, #4]	; (80092b0 <__errno+0x8>)
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	2000002c 	.word	0x2000002c

080092b4 <__libc_init_array>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4d0d      	ldr	r5, [pc, #52]	; (80092ec <__libc_init_array+0x38>)
 80092b8:	4c0d      	ldr	r4, [pc, #52]	; (80092f0 <__libc_init_array+0x3c>)
 80092ba:	1b64      	subs	r4, r4, r5
 80092bc:	10a4      	asrs	r4, r4, #2
 80092be:	2600      	movs	r6, #0
 80092c0:	42a6      	cmp	r6, r4
 80092c2:	d109      	bne.n	80092d8 <__libc_init_array+0x24>
 80092c4:	4d0b      	ldr	r5, [pc, #44]	; (80092f4 <__libc_init_array+0x40>)
 80092c6:	4c0c      	ldr	r4, [pc, #48]	; (80092f8 <__libc_init_array+0x44>)
 80092c8:	f000 f92e 	bl	8009528 <_init>
 80092cc:	1b64      	subs	r4, r4, r5
 80092ce:	10a4      	asrs	r4, r4, #2
 80092d0:	2600      	movs	r6, #0
 80092d2:	42a6      	cmp	r6, r4
 80092d4:	d105      	bne.n	80092e2 <__libc_init_array+0x2e>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092dc:	4798      	blx	r3
 80092de:	3601      	adds	r6, #1
 80092e0:	e7ee      	b.n	80092c0 <__libc_init_array+0xc>
 80092e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e6:	4798      	blx	r3
 80092e8:	3601      	adds	r6, #1
 80092ea:	e7f2      	b.n	80092d2 <__libc_init_array+0x1e>
 80092ec:	0800956c 	.word	0x0800956c
 80092f0:	0800956c 	.word	0x0800956c
 80092f4:	0800956c 	.word	0x0800956c
 80092f8:	08009570 	.word	0x08009570

080092fc <malloc>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <malloc+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f000 b87f 	b.w	8009404 <_malloc_r>
 8009306:	bf00      	nop
 8009308:	2000002c 	.word	0x2000002c

0800930c <free>:
 800930c:	4b02      	ldr	r3, [pc, #8]	; (8009318 <free+0xc>)
 800930e:	4601      	mov	r1, r0
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	f000 b80b 	b.w	800932c <_free_r>
 8009316:	bf00      	nop
 8009318:	2000002c 	.word	0x2000002c

0800931c <memset>:
 800931c:	4402      	add	r2, r0
 800931e:	4603      	mov	r3, r0
 8009320:	4293      	cmp	r3, r2
 8009322:	d100      	bne.n	8009326 <memset+0xa>
 8009324:	4770      	bx	lr
 8009326:	f803 1b01 	strb.w	r1, [r3], #1
 800932a:	e7f9      	b.n	8009320 <memset+0x4>

0800932c <_free_r>:
 800932c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800932e:	2900      	cmp	r1, #0
 8009330:	d044      	beq.n	80093bc <_free_r+0x90>
 8009332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009336:	9001      	str	r0, [sp, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f1a1 0404 	sub.w	r4, r1, #4
 800933e:	bfb8      	it	lt
 8009340:	18e4      	addlt	r4, r4, r3
 8009342:	f000 f8e3 	bl	800950c <__malloc_lock>
 8009346:	4a1e      	ldr	r2, [pc, #120]	; (80093c0 <_free_r+0x94>)
 8009348:	9801      	ldr	r0, [sp, #4]
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	b933      	cbnz	r3, 800935c <_free_r+0x30>
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	6014      	str	r4, [r2, #0]
 8009352:	b003      	add	sp, #12
 8009354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009358:	f000 b8de 	b.w	8009518 <__malloc_unlock>
 800935c:	42a3      	cmp	r3, r4
 800935e:	d908      	bls.n	8009372 <_free_r+0x46>
 8009360:	6825      	ldr	r5, [r4, #0]
 8009362:	1961      	adds	r1, r4, r5
 8009364:	428b      	cmp	r3, r1
 8009366:	bf01      	itttt	eq
 8009368:	6819      	ldreq	r1, [r3, #0]
 800936a:	685b      	ldreq	r3, [r3, #4]
 800936c:	1949      	addeq	r1, r1, r5
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	e7ed      	b.n	800934e <_free_r+0x22>
 8009372:	461a      	mov	r2, r3
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b10b      	cbz	r3, 800937c <_free_r+0x50>
 8009378:	42a3      	cmp	r3, r4
 800937a:	d9fa      	bls.n	8009372 <_free_r+0x46>
 800937c:	6811      	ldr	r1, [r2, #0]
 800937e:	1855      	adds	r5, r2, r1
 8009380:	42a5      	cmp	r5, r4
 8009382:	d10b      	bne.n	800939c <_free_r+0x70>
 8009384:	6824      	ldr	r4, [r4, #0]
 8009386:	4421      	add	r1, r4
 8009388:	1854      	adds	r4, r2, r1
 800938a:	42a3      	cmp	r3, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	d1e0      	bne.n	8009352 <_free_r+0x26>
 8009390:	681c      	ldr	r4, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	6053      	str	r3, [r2, #4]
 8009396:	4421      	add	r1, r4
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	e7da      	b.n	8009352 <_free_r+0x26>
 800939c:	d902      	bls.n	80093a4 <_free_r+0x78>
 800939e:	230c      	movs	r3, #12
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	e7d6      	b.n	8009352 <_free_r+0x26>
 80093a4:	6825      	ldr	r5, [r4, #0]
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf04      	itt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	bf04      	itt	eq
 80093b4:	1949      	addeq	r1, r1, r5
 80093b6:	6021      	streq	r1, [r4, #0]
 80093b8:	6054      	str	r4, [r2, #4]
 80093ba:	e7ca      	b.n	8009352 <_free_r+0x26>
 80093bc:	b003      	add	sp, #12
 80093be:	bd30      	pop	{r4, r5, pc}
 80093c0:	200009fc 	.word	0x200009fc

080093c4 <sbrk_aligned>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0e      	ldr	r6, [pc, #56]	; (8009400 <sbrk_aligned+0x3c>)
 80093c8:	460c      	mov	r4, r1
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	4605      	mov	r5, r0
 80093ce:	b911      	cbnz	r1, 80093d6 <sbrk_aligned+0x12>
 80093d0:	f000 f88c 	bl	80094ec <_sbrk_r>
 80093d4:	6030      	str	r0, [r6, #0]
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f000 f887 	bl	80094ec <_sbrk_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d00a      	beq.n	80093f8 <sbrk_aligned+0x34>
 80093e2:	1cc4      	adds	r4, r0, #3
 80093e4:	f024 0403 	bic.w	r4, r4, #3
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d007      	beq.n	80093fc <sbrk_aligned+0x38>
 80093ec:	1a21      	subs	r1, r4, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f87c 	bl	80094ec <_sbrk_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d101      	bne.n	80093fc <sbrk_aligned+0x38>
 80093f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093fc:	4620      	mov	r0, r4
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	20000a00 	.word	0x20000a00

08009404 <_malloc_r>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	1ccd      	adds	r5, r1, #3
 800940a:	f025 0503 	bic.w	r5, r5, #3
 800940e:	3508      	adds	r5, #8
 8009410:	2d0c      	cmp	r5, #12
 8009412:	bf38      	it	cc
 8009414:	250c      	movcc	r5, #12
 8009416:	2d00      	cmp	r5, #0
 8009418:	4607      	mov	r7, r0
 800941a:	db01      	blt.n	8009420 <_malloc_r+0x1c>
 800941c:	42a9      	cmp	r1, r5
 800941e:	d905      	bls.n	800942c <_malloc_r+0x28>
 8009420:	230c      	movs	r3, #12
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	2600      	movs	r6, #0
 8009426:	4630      	mov	r0, r6
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	4e2e      	ldr	r6, [pc, #184]	; (80094e8 <_malloc_r+0xe4>)
 800942e:	f000 f86d 	bl	800950c <__malloc_lock>
 8009432:	6833      	ldr	r3, [r6, #0]
 8009434:	461c      	mov	r4, r3
 8009436:	bb34      	cbnz	r4, 8009486 <_malloc_r+0x82>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	f7ff ffc2 	bl	80093c4 <sbrk_aligned>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	4604      	mov	r4, r0
 8009444:	d14d      	bne.n	80094e2 <_malloc_r+0xde>
 8009446:	6834      	ldr	r4, [r6, #0]
 8009448:	4626      	mov	r6, r4
 800944a:	2e00      	cmp	r6, #0
 800944c:	d140      	bne.n	80094d0 <_malloc_r+0xcc>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	4631      	mov	r1, r6
 8009452:	4638      	mov	r0, r7
 8009454:	eb04 0803 	add.w	r8, r4, r3
 8009458:	f000 f848 	bl	80094ec <_sbrk_r>
 800945c:	4580      	cmp	r8, r0
 800945e:	d13a      	bne.n	80094d6 <_malloc_r+0xd2>
 8009460:	6821      	ldr	r1, [r4, #0]
 8009462:	3503      	adds	r5, #3
 8009464:	1a6d      	subs	r5, r5, r1
 8009466:	f025 0503 	bic.w	r5, r5, #3
 800946a:	3508      	adds	r5, #8
 800946c:	2d0c      	cmp	r5, #12
 800946e:	bf38      	it	cc
 8009470:	250c      	movcc	r5, #12
 8009472:	4629      	mov	r1, r5
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ffa5 	bl	80093c4 <sbrk_aligned>
 800947a:	3001      	adds	r0, #1
 800947c:	d02b      	beq.n	80094d6 <_malloc_r+0xd2>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	442b      	add	r3, r5
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	e00e      	b.n	80094a4 <_malloc_r+0xa0>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	1b52      	subs	r2, r2, r5
 800948a:	d41e      	bmi.n	80094ca <_malloc_r+0xc6>
 800948c:	2a0b      	cmp	r2, #11
 800948e:	d916      	bls.n	80094be <_malloc_r+0xba>
 8009490:	1961      	adds	r1, r4, r5
 8009492:	42a3      	cmp	r3, r4
 8009494:	6025      	str	r5, [r4, #0]
 8009496:	bf18      	it	ne
 8009498:	6059      	strne	r1, [r3, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	bf08      	it	eq
 800949e:	6031      	streq	r1, [r6, #0]
 80094a0:	5162      	str	r2, [r4, r5]
 80094a2:	604b      	str	r3, [r1, #4]
 80094a4:	4638      	mov	r0, r7
 80094a6:	f104 060b 	add.w	r6, r4, #11
 80094aa:	f000 f835 	bl	8009518 <__malloc_unlock>
 80094ae:	f026 0607 	bic.w	r6, r6, #7
 80094b2:	1d23      	adds	r3, r4, #4
 80094b4:	1af2      	subs	r2, r6, r3
 80094b6:	d0b6      	beq.n	8009426 <_malloc_r+0x22>
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	50a3      	str	r3, [r4, r2]
 80094bc:	e7b3      	b.n	8009426 <_malloc_r+0x22>
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	bf0c      	ite	eq
 80094c4:	6032      	streq	r2, [r6, #0]
 80094c6:	605a      	strne	r2, [r3, #4]
 80094c8:	e7ec      	b.n	80094a4 <_malloc_r+0xa0>
 80094ca:	4623      	mov	r3, r4
 80094cc:	6864      	ldr	r4, [r4, #4]
 80094ce:	e7b2      	b.n	8009436 <_malloc_r+0x32>
 80094d0:	4634      	mov	r4, r6
 80094d2:	6876      	ldr	r6, [r6, #4]
 80094d4:	e7b9      	b.n	800944a <_malloc_r+0x46>
 80094d6:	230c      	movs	r3, #12
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	4638      	mov	r0, r7
 80094dc:	f000 f81c 	bl	8009518 <__malloc_unlock>
 80094e0:	e7a1      	b.n	8009426 <_malloc_r+0x22>
 80094e2:	6025      	str	r5, [r4, #0]
 80094e4:	e7de      	b.n	80094a4 <_malloc_r+0xa0>
 80094e6:	bf00      	nop
 80094e8:	200009fc 	.word	0x200009fc

080094ec <_sbrk_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	; (8009508 <_sbrk_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f7 ff48 	bl	800138c <_sbrk>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_sbrk_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_sbrk_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000a04 	.word	0x20000a04

0800950c <__malloc_lock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_lock+0x8>)
 800950e:	f000 b809 	b.w	8009524 <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	20000a08 	.word	0x20000a08

08009518 <__malloc_unlock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_unlock+0x8>)
 800951a:	f000 b804 	b.w	8009526 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	20000a08 	.word	0x20000a08

08009524 <__retarget_lock_acquire_recursive>:
 8009524:	4770      	bx	lr

08009526 <__retarget_lock_release_recursive>:
 8009526:	4770      	bx	lr

08009528 <_init>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	bf00      	nop
 800952c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952e:	bc08      	pop	{r3}
 8009530:	469e      	mov	lr, r3
 8009532:	4770      	bx	lr

08009534 <_fini>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr
