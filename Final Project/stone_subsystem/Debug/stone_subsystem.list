
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c130  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800c2e0  0800c2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c830  0800c830  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c830  0800c830  0001c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c838  0800c838  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000aec  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b7c  20000b7c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024dbd  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050d4  00000000  00000000  00044e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c40  00000000  00000000  00049f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a40  00000000  00000000  0004bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002adc6  00000000  00000000  0004d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025934  00000000  00000000  0007839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb033  00000000  00000000  0009dcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00188d05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fac  00000000  00000000  00188d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c2c8 	.word	0x0800c2c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800c2c8 	.word	0x0800c2c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800c2e0 	.word	0x0800c2e0
 8000738:	0800c328 	.word	0x0800c328
 800073c:	0800c32c 	.word	0x0800c32c
 8000740:	200001ac 	.word	0x200001ac
 8000744:	200000ac 	.word	0x200000ac

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001ac 	.word	0x200001ac
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	200001b0 	.word	0x200001b0
 80008ac:	0800c330 	.word	0x0800c330
 80008b0:	0800c338 	.word	0x0800c338
 80008b4:	0800c328 	.word	0x0800c328
 80008b8:	0800c340 	.word	0x0800c340
 80008bc:	0800c32c 	.word	0x0800c32c

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00a fb58 	bl	800b07c <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800c3ec 	.word	0x0800c3ec
 8000d0c:	0800c39c 	.word	0x0800c39c
 8000d10:	0800c3a0 	.word	0x0800c3a0

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800c3a4 	.word	0x0800c3a4
 8000dc0:	0800c3b4 	.word	0x0800c3b4
 8000dc4:	0800c3bc 	.word	0x0800c3bc
 8000dc8:	0800c3a0 	.word	0x0800c3a0

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800c3c0 	.word	0x0800c3c0
 8000e10:	0800c3a0 	.word	0x0800c3a0

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800c3d0 	.word	0x0800c3d0
 8000e3c:	0800c3a0 	.word	0x0800c3a0

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800c3ec 	.word	0x0800c3ec

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	200001b8 	.word	0x200001b8

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fdb3 	bl	80069fa <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	200001ca 	.word	0x200001ca

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00a f9e8 	bl	800b2c8 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001b8 	.word	0x200001b8
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200001bc 	.word	0x200001bc
 8000f1c:	0800c3e4 	.word	0x0800c3e4

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00a f9cc 	bl	800b2c8 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800c3e4 	.word	0x0800c3e4

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fd40 	bl	80069fa <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001bc 	.word	0x200001bc
 8000f88:	200001ca 	.word	0x200001ca
 8000f8c:	200001c0 	.word	0x200001c0
 8000f90:	200001b8 	.word	0x200001b8
 8000f94:	200001b4 	.word	0x200001b4

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4849      	ldr	r0, [pc, #292]	; (80010c8 <I3G450D_Init+0x130>)
 8000fa2:	f002 f8c7 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 fa7a 	bl	80024a0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4845      	ldr	r0, [pc, #276]	; (80010c8 <I3G450D_Init+0x130>)
 8000fb2:	f002 f8bf 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f001 fa72 	bl	80024a0 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <I3G450D_Init+0x134>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <I3G450D_Init+0x134>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	493f      	ldr	r1, [pc, #252]	; (80010cc <I3G450D_Init+0x134>)
 8000fce:	4840      	ldr	r0, [pc, #256]	; (80010d0 <I3G450D_Init+0x138>)
 8000fd0:	f004 fc1b 	bl	800580a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	483b      	ldr	r0, [pc, #236]	; (80010c8 <I3G450D_Init+0x130>)
 8000fda:	f002 f8ab 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 fa5e 	bl	80024a0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4837      	ldr	r0, [pc, #220]	; (80010c8 <I3G450D_Init+0x130>)
 8000fea:	f002 f8a3 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 fa56 	bl	80024a0 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <I3G450D_Init+0x134>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <I3G450D_Init+0x134>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	4931      	ldr	r1, [pc, #196]	; (80010cc <I3G450D_Init+0x134>)
 8001006:	4832      	ldr	r0, [pc, #200]	; (80010d0 <I3G450D_Init+0x138>)
 8001008:	f004 fbff 	bl	800580a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	482d      	ldr	r0, [pc, #180]	; (80010c8 <I3G450D_Init+0x130>)
 8001012:	f002 f88f 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 fa42 	bl	80024a0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4829      	ldr	r0, [pc, #164]	; (80010c8 <I3G450D_Init+0x130>)
 8001022:	f002 f887 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 fa3a 	bl	80024a0 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <I3G450D_Init+0x134>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <I3G450D_Init+0x134>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4923      	ldr	r1, [pc, #140]	; (80010cc <I3G450D_Init+0x134>)
 800103e:	4824      	ldr	r0, [pc, #144]	; (80010d0 <I3G450D_Init+0x138>)
 8001040:	f004 fbe3 	bl	800580a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <I3G450D_Init+0x130>)
 800104a:	f002 f873 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 fa26 	bl	80024a0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	481b      	ldr	r0, [pc, #108]	; (80010c8 <I3G450D_Init+0x130>)
 800105a:	f002 f86b 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 fa1e 	bl	80024a0 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <I3G450D_Init+0x134>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <I3G450D_Init+0x134>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4915      	ldr	r1, [pc, #84]	; (80010cc <I3G450D_Init+0x134>)
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <I3G450D_Init+0x138>)
 8001078:	f004 fbc7 	bl	800580a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	4811      	ldr	r0, [pc, #68]	; (80010c8 <I3G450D_Init+0x130>)
 8001082:	f002 f857 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 fa0a 	bl	80024a0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <I3G450D_Init+0x130>)
 8001092:	f002 f84f 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 fa02 	bl	80024a0 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <I3G450D_Init+0x134>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <I3G450D_Init+0x134>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <I3G450D_Init+0x134>)
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <I3G450D_Init+0x138>)
 80010b0:	f004 fbab 	bl	800580a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <I3G450D_Init+0x130>)
 80010ba:	f002 f83b 	bl	8003134 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 f9ee 	bl	80024a0 <HAL_Delay>

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020800 	.word	0x40020800
 80010cc:	200001cc 	.word	0x200001cc
 80010d0:	2000022c 	.word	0x2000022c

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f001 f99f 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f84b 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 fa07 	bl	80014f4 <MX_GPIO_Init>
  MX_CRC_Init();
 80010e6:	f000 f8b1 	bl	800124c <MX_CRC_Init>
  MX_FMC_Init();
 80010ea:	f000 f9b3 	bl	8001454 <MX_FMC_Init>
  MX_I2C3_Init();
 80010ee:	f000 f8c1 	bl	8001274 <MX_I2C3_Init>
  MX_SPI5_Init();
 80010f2:	f000 f8ff 	bl	80012f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80010f6:	f000 f933 	bl	8001360 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 f981 	bl	8001400 <MX_USART1_UART_Init>
 // MX_DMA_Init();
  MX_USB_HOST_Init();
 80010fe:	f009 fcaf 	bl	800aa60 <MX_USB_HOST_Init>
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 8001102:	f7ff ff49 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 8001106:	481b      	ldr	r0, [pc, #108]	; (8001174 <main+0xa0>)
 8001108:	f000 fc6e 	bl	80019e8 <RetargetInit>
  ConsoleInit(&huart1);
 800110c:	4819      	ldr	r0, [pc, #100]	; (8001174 <main+0xa0>)
 800110e:	f7ff faeb 	bl	80006e8 <ConsoleInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8001116:	230b      	movs	r3, #11
 8001118:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800111a:	f009 fcc7 	bl	800aaac <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	e01b      	b.n	800115c <main+0x88>
	  			// Calculate color
	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	797b      	ldrb	r3, [r7, #5]
 8001128:	fb12 f303 	smulbb	r3, r2, r3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4413      	add	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	227f      	movs	r2, #127	; 0x7f
 8001136:	21ff      	movs	r1, #255	; 0xff
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fb77 	bl	800182c <hsl_to_rgb>
 800113e:	6038      	str	r0, [r7, #0]
	  			// Set color
	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	0c1b      	lsrs	r3, r3, #16
 8001144:	b2d9      	uxtb	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b2da      	uxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	79b8      	ldrb	r0, [r7, #6]
 8001152:	f000 fd23 	bl	8001b9c <led_set_RGB>
	  for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	3301      	adds	r3, #1
 800115a:	71bb      	strb	r3, [r7, #6]
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b07      	cmp	r3, #7
 8001160:	d9e0      	bls.n	8001124 <main+0x50>
	  		}
	  		// Write to LED
	    	++angle;
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	3301      	adds	r3, #1
 8001166:	71fb      	strb	r3, [r7, #7]
	  		//led_render();
	  		// Some delay
	  		ConsoleProcess();
 8001168:	f7ff faee 	bl	8000748 <ConsoleProcess>
	  		//I3G450D_loop();
	  		HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f001 f997 	bl	80024a0 <HAL_Delay>
    MX_USB_HOST_Process();
 8001172:	e7d2      	b.n	800111a <main+0x46>
 8001174:	20000374 	.word	0x20000374

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f009 ffb6 	bl	800b0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <SystemClock_Config+0xcc>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c4:	4a20      	ldr	r2, [pc, #128]	; (8001248 <SystemClock_Config+0xd0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011f0:	2348      	movs	r3, #72	; 0x48
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fd7b 	bl	8004cfc <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800120c:	f000 fbe6 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2102      	movs	r1, #2
 800122c:	4618      	mov	r0, r3
 800122e:	f003 ffdd 	bl	80051ec <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001238:	f000 fbd0 	bl	80019dc <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	3750      	adds	r7, #80	; 0x50
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CRC_Init+0x20>)
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <MX_CRC_Init+0x24>)
 8001254:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_CRC_Init+0x20>)
 8001258:	f001 fa28 	bl	80026ac <HAL_CRC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001262:	f000 fbbb 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001d0 	.word	0x200001d0
 8001270:	40023000 	.word	0x40023000

08001274 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_I2C3_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_I2C3_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_I2C3_Init+0x74>)
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <MX_I2C3_Init+0x7c>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_I2C3_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_I2C3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_I2C3_Init+0x74>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_I2C3_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012b2:	f003 fb63 	bl	800497c <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 fb8e 	bl	80019dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c0:	2100      	movs	r1, #0
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012c4:	f003 fc9e 	bl	8004c04 <HAL_I2CEx_ConfigAnalogFilter>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f000 fb85 	bl	80019dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_I2C3_Init+0x74>)
 80012d6:	f003 fcd1 	bl	8004c7c <HAL_I2CEx_ConfigDigitalFilter>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80012e0:	f000 fb7c 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001d8 	.word	0x200001d8
 80012ec:	40005c00 	.word	0x40005c00
 80012f0:	000186a0 	.word	0x000186a0

080012f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_SPI5_Init+0x64>)
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <MX_SPI5_Init+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI5_Init+0x64>)
 8001300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001304:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI5_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI5_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI5_Init+0x64>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI5_Init+0x64>)
 8001328:	2218      	movs	r2, #24
 800132a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_SPI5_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI5_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_SPI5_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI5_Init+0x64>)
 8001340:	220a      	movs	r2, #10
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_SPI5_Init+0x64>)
 8001346:	f004 f9d7 	bl	80056f8 <HAL_SPI_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001350:	f000 fb44 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000022c 	.word	0x2000022c
 800135c:	40015000 	.word	0x40015000

08001360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_TIM1_Init+0x98>)
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <MX_TIM1_Init+0x9c>)
 8001380:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_TIM1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_TIM1_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_TIM1_Init+0x98>)
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_TIM1_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_TIM1_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_TIM1_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <MX_TIM1_Init+0x98>)
 80013aa:	f004 fc35 	bl	8005c18 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fb12 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_TIM1_Init+0x98>)
 80013c6:	f004 fec1 	bl	800614c <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013d0:	f000 fb04 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_TIM1_Init+0x98>)
 80013e2:	f005 f8f9 	bl	80065d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013ec:	f000 faf6 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000284 	.word	0x20000284
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART1_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001438:	f005 f95e 	bl	80066f8 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 facb 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000374 	.word	0x20000374
 8001450:	40011000 	.word	0x40011000

08001454 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_FMC_Init+0x98>)
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <MX_FMC_Init+0x9c>)
 8001470:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_FMC_Init+0x98>)
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_FMC_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_FMC_Init+0x98>)
 8001480:	2204      	movs	r2, #4
 8001482:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_FMC_Init+0x98>)
 8001486:	2210      	movs	r2, #16
 8001488:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_FMC_Init+0x98>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_FMC_Init+0x98>)
 8001492:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001496:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_FMC_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_FMC_Init+0x98>)
 80014a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_FMC_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_FMC_Init+0x98>)
 80014ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014b8:	2307      	movs	r3, #7
 80014ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80014c0:	2307      	movs	r3, #7
 80014c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_FMC_Init+0x98>)
 80014d6:	f004 f8db 	bl	8005690 <HAL_SDRAM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80014e0:	f000 fa7c 	bl	80019dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200003b8 	.word	0x200003b8
 80014f0:	a0000140 	.word	0xa0000140

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
 800150e:	4bb2      	ldr	r3, [pc, #712]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4ab1      	ldr	r2, [pc, #708]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4baf      	ldr	r3, [pc, #700]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	4bab      	ldr	r3, [pc, #684]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4aaa      	ldr	r2, [pc, #680]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4ba8      	ldr	r3, [pc, #672]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	4ba4      	ldr	r3, [pc, #656]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4aa3      	ldr	r2, [pc, #652]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b9d      	ldr	r3, [pc, #628]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a9c      	ldr	r2, [pc, #624]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a95      	ldr	r2, [pc, #596]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b93      	ldr	r3, [pc, #588]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b8f      	ldr	r3, [pc, #572]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a8e      	ldr	r2, [pc, #568]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a87      	ldr	r2, [pc, #540]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <MX_GPIO_Init+0x2e4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2116      	movs	r1, #22
 80015ee:	487b      	ldr	r0, [pc, #492]	; (80017dc <MX_GPIO_Init+0x2e8>)
 80015f0:	f001 fda0 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	4879      	ldr	r0, [pc, #484]	; (80017e0 <MX_GPIO_Init+0x2ec>)
 80015fa:	f001 fd9b 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001604:	4877      	ldr	r0, [pc, #476]	; (80017e4 <MX_GPIO_Init+0x2f0>)
 8001606:	f001 fd95 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001610:	4875      	ldr	r0, [pc, #468]	; (80017e8 <MX_GPIO_Init+0x2f4>)
 8001612:	f001 fd8f 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001628:	230e      	movs	r3, #14
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	486e      	ldr	r0, [pc, #440]	; (80017ec <MX_GPIO_Init+0x2f8>)
 8001634:	f001 fbd2 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001638:	2316      	movs	r3, #22
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4863      	ldr	r0, [pc, #396]	; (80017dc <MX_GPIO_Init+0x2e8>)
 8001650:	f001 fbc4 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001654:	f248 0307 	movw	r3, #32775	; 0x8007
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800165a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	485d      	ldr	r0, [pc, #372]	; (80017e0 <MX_GPIO_Init+0x2ec>)
 800166c:	f001 fbb6 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001670:	f641 0358 	movw	r3, #6232	; 0x1858
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001682:	230e      	movs	r3, #14
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4854      	ldr	r0, [pc, #336]	; (80017e0 <MX_GPIO_Init+0x2ec>)
 800168e:	f001 fba5 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	484d      	ldr	r0, [pc, #308]	; (80017e0 <MX_GPIO_Init+0x2ec>)
 80016aa:	f001 fb97 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80016ae:	2320      	movs	r3, #32
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4846      	ldr	r0, [pc, #280]	; (80017dc <MX_GPIO_Init+0x2e8>)
 80016c4:	f001 fb8a 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80016c8:	2303      	movs	r3, #3
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016d8:	2309      	movs	r3, #9
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4843      	ldr	r0, [pc, #268]	; (80017f0 <MX_GPIO_Init+0x2fc>)
 80016e4:	f001 fb7a 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016e8:	2304      	movs	r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	483d      	ldr	r0, [pc, #244]	; (80017f0 <MX_GPIO_Init+0x2fc>)
 80016fc:	f001 fb6e 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001700:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001712:	230e      	movs	r3, #14
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	4834      	ldr	r0, [pc, #208]	; (80017f0 <MX_GPIO_Init+0x2fc>)
 800171e:	f001 fb5d 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	482b      	ldr	r0, [pc, #172]	; (80017e4 <MX_GPIO_Init+0x2f0>)
 8001738:	f001 fb50 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800173c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4823      	ldr	r0, [pc, #140]	; (80017e4 <MX_GPIO_Init+0x2f0>)
 8001756:	f001 fb41 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800175a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800176c:	230e      	movs	r3, #14
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_GPIO_Init+0x2f4>)
 8001778:	f001 fb30 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800177c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800178e:	230e      	movs	r3, #14
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <MX_GPIO_Init+0x2e8>)
 800179a:	f001 fb1f 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800179e:	2348      	movs	r3, #72	; 0x48
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ae:	230e      	movs	r3, #14
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <MX_GPIO_Init+0x2f0>)
 80017ba:	f001 fb0f 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017d0:	2309      	movs	r3, #9
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
 80017d4:	e00e      	b.n	80017f4 <MX_GPIO_Init+0x300>
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021800 	.word	0x40021800
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <MX_GPIO_Init+0x334>)
 80017fc:	f001 faee 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001800:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_GPIO_Init+0x334>)
 800181a:	f001 fadf 	bl	8002ddc <HAL_GPIO_Init>

}
 800181e:	bf00      	nop
 8001820:	3738      	adds	r7, #56	; 0x38
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40021800 	.word	0x40021800

0800182c <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	460b      	mov	r3, r1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800183e:	797b      	ldrb	r3, [r7, #5]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <hsl_to_rgb+0x1c>
 8001844:	2300      	movs	r3, #0
 8001846:	e0b1      	b.n	80019ac <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001852:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db09      	blt.n	800186e <hsl_to_rgb+0x42>
 800185a:	89bb      	ldrh	r3, [r7, #12]
 800185c:	b29b      	uxth	r3, r3
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	79ba      	ldrb	r2, [r7, #6]
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	121b      	asrs	r3, r3, #8
 8001868:	b2db      	uxtb	r3, r3
 800186a:	74fb      	strb	r3, [r7, #19]
 800186c:	e00a      	b.n	8001884 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800186e:	89bb      	ldrh	r3, [r7, #12]
 8001870:	b29b      	uxth	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001878:	79ba      	ldrb	r2, [r7, #6]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	121b      	asrs	r3, r3, #8
 8001880:	b2db      	uxtb	r3, r3
 8001882:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	4413      	add	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80018a8:	897b      	ldrh	r3, [r7, #10]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <hsl_to_rgb+0x9c>
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	7cfa      	ldrb	r2, [r7, #19]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	121b      	asrs	r3, r3, #8
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	74bb      	strb	r3, [r7, #18]
 80018c6:	e00a      	b.n	80018de <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80018d0:	7cfa      	ldrb	r2, [r7, #19]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	121b      	asrs	r3, r3, #8
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	797a      	ldrb	r2, [r7, #5]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d839      	bhi.n	800196e <hsl_to_rgb+0x142>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <hsl_to_rgb+0xd4>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001915 	.word	0x08001915
 8001904:	08001927 	.word	0x08001927
 8001908:	08001939 	.word	0x08001939
 800190c:	0800194b 	.word	0x0800194b
 8001910:	0800195d 	.word	0x0800195d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	75fb      	strb	r3, [r7, #23]
 800191a:	7cbb      	ldrb	r3, [r7, #18]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	75bb      	strb	r3, [r7, #22]
 8001920:	2300      	movs	r3, #0
 8001922:	757b      	strb	r3, [r7, #21]
 8001924:	e02c      	b.n	8001980 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001926:	7cbb      	ldrb	r3, [r7, #18]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	7cfb      	ldrb	r3, [r7, #19]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	75bb      	strb	r3, [r7, #22]
 8001932:	2300      	movs	r3, #0
 8001934:	757b      	strb	r3, [r7, #21]
 8001936:	e023      	b.n	8001980 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	75bb      	strb	r3, [r7, #22]
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	757b      	strb	r3, [r7, #21]
 8001948:	e01a      	b.n	8001980 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
 800194e:	7cbb      	ldrb	r3, [r7, #18]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	75bb      	strb	r3, [r7, #22]
 8001954:	7cfb      	ldrb	r3, [r7, #19]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	757b      	strb	r3, [r7, #21]
 800195a:	e011      	b.n	8001980 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800195c:	7cbb      	ldrb	r3, [r7, #18]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	75fb      	strb	r3, [r7, #23]
 8001962:	2300      	movs	r3, #0
 8001964:	75bb      	strb	r3, [r7, #22]
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	757b      	strb	r3, [r7, #21]
 800196c:	e008      	b.n	8001980 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	75fb      	strb	r3, [r7, #23]
 8001974:	2300      	movs	r3, #0
 8001976:	75bb      	strb	r3, [r7, #22]
 8001978:	7cbb      	ldrb	r3, [r7, #18]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	757b      	strb	r3, [r7, #21]
 800197e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	7c7b      	ldrb	r3, [r7, #17]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	7dbb      	ldrb	r3, [r7, #22]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	7c7b      	ldrb	r3, [r7, #17]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	440b      	add	r3, r1
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	431a      	orrs	r2, r3
 800199e:	7d7b      	ldrb	r3, [r7, #21]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	7c7b      	ldrb	r3, [r7, #17]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	440b      	add	r3, r1
 80019aa:	4313      	orrs	r3, r2
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f000 fd49 	bl	8002460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40001000 	.word	0x40001000

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <RetargetInit+0x28>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <RetargetInit+0x2c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	2300      	movs	r3, #0
 80019fe:	2202      	movs	r2, #2
 8001a00:	2100      	movs	r1, #0
 8001a02:	f009 fc89 	bl	800b318 <setvbuf>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200003ec 	.word	0x200003ec
 8001a14:	2000002c 	.word	0x2000002c

08001a18 <_isatty>:

int _isatty(int fd) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db04      	blt.n	8001a30 <_isatty+0x18>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	dc01      	bgt.n	8001a30 <_isatty+0x18>
    return 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e005      	b.n	8001a3c <_isatty+0x24>

  errno = EBADF;
 8001a30:	f009 fb28 	bl	800b084 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2209      	movs	r2, #9
 8001a38:	601a      	str	r2, [r3, #0]
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_write>:

int _write(int fd, char* ptr, int len) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d002      	beq.n	8001a5c <_write+0x18>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d111      	bne.n	8001a80 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <_write+0x54>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	f004 fe92 	bl	8006792 <HAL_UART_Transmit>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <_write+0x38>
      return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	e008      	b.n	8001a8e <_write+0x4a>
    else
      return EIO;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	e006      	b.n	8001a8e <_write+0x4a>
  }
  errno = EBADF;
 8001a80:	f009 fb00 	bl	800b084 <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2209      	movs	r2, #9
 8001a88:	601a      	str	r2, [r3, #0]
  return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200003ec 	.word	0x200003ec

08001a9c <_close>:

int _close(int fd) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db04      	blt.n	8001ab4 <_close+0x18>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	dc01      	bgt.n	8001ab4 <_close+0x18>
    return 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e006      	b.n	8001ac2 <_close+0x26>

  errno = EBADF;
 8001ab4:	f009 fae6 	bl	800b084 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2209      	movs	r2, #9
 8001abc:	601a      	str	r2, [r3, #0]
  return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001ad6:	f009 fad5 	bl	800b084 <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2209      	movs	r2, #9
 8001ade:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_read>:

int _read(int fd, char* ptr, int len) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d110      	bne.n	8001b20 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <_read+0x4c>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b06:	2201      	movs	r2, #1
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	f004 fed4 	bl	80068b6 <HAL_UART_Receive>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <_read+0x30>
      return 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e008      	b.n	8001b2e <_read+0x42>
    else
      return EIO;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	e006      	b.n	8001b2e <_read+0x42>
  }
  errno = EBADF;
 8001b20:	f009 fab0 	bl	800b084 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2209      	movs	r2, #9
 8001b28:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200003ec 	.word	0x200003ec

08001b3c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db08      	blt.n	8001b5e <_fstat+0x22>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	dc05      	bgt.n	8001b5e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b58:	605a      	str	r2, [r3, #4]
    return 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e005      	b.n	8001b6a <_fstat+0x2e>
  }

  errno = EBADF;
 8001b5e:	f009 fa91 	bl	800b084 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2209      	movs	r2, #9
 8001b66:	601a      	str	r2, [r3, #0]
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	79ba      	ldrb	r2, [r7, #6]
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	121b      	asrs	r3, r3, #8
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	717b      	strb	r3, [r7, #5]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001bba:	79fa      	ldrb	r2, [r7, #7]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	189c      	adds	r4, r3, r2
 8001bc2:	797b      	ldrb	r3, [r7, #5]
 8001bc4:	21b0      	movs	r1, #176	; 0xb0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffd3 	bl	8001b72 <scale8>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <led_set_RGB+0x6c>)
 8001bd2:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	490a      	ldr	r1, [pc, #40]	; (8001c08 <led_set_RGB+0x6c>)
 8001be0:	79ba      	ldrb	r2, [r7, #6]
 8001be2:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	1c9c      	adds	r4, r3, #2
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	21f0      	movs	r1, #240	; 0xf0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffbd 	bl	8001b72 <scale8>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <led_set_RGB+0x6c>)
 8001bfe:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	200003f0 	.word	0x200003f0

08001c0c <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d852      	bhi.n	8001cc2 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e046      	b.n	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dd01      	ble.n	8001c44 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001c40:	2126      	movs	r1, #38	; 0x26
 8001c42:	e000      	b.n	8001c46 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001c44:	2113      	movs	r1, #19
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3318      	adds	r3, #24
 8001c4a:	4a31      	ldr	r2, [pc, #196]	; (8001d10 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001c4c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	dd01      	ble.n	8001c72 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001c6e:	2126      	movs	r1, #38	; 0x26
 8001c70:	e000      	b.n	8001c74 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001c72:	2113      	movs	r1, #19
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3320      	adds	r3, #32
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001c7a:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3302      	adds	r3, #2
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dd01      	ble.n	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001c9c:	2126      	movs	r1, #38	; 0x26
 8001c9e:	e000      	b.n	8001ca2 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001ca0:	2113      	movs	r1, #19
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3328      	adds	r3, #40	; 0x28
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001ca8:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	d9b5      	bls.n	8001c22 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001cbe:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8001cc0:	e01d      	b.n	8001cfe <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d812      	bhi.n	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001cca:	2318      	movs	r3, #24
 8001ccc:	72fb      	strb	r3, [r7, #11]
 8001cce:	e006      	b.n	8001cde <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	54d1      	strb	r1, [r2, r3]
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	72fb      	strb	r3, [r7, #11]
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce2:	d9f5      	bls.n	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	e006      	b.n	8001cfe <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001cfa:	f004 f84d 	bl	8005d98 <HAL_TIM_PWM_Stop_DMA>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000434 	.word	0x20000434
 8001d0c:	200003f0 	.word	0x200003f0
 8001d10:	20000404 	.word	0x20000404
 8001d14:	200002cc 	.word	0x200002cc

08001d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10d      	bne.n	8001d96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_CRC_MspInit+0x40>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_CRC_MspInit+0x40>)
 8001d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_CRC_MspInit+0x40>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023000 	.word	0x40023000
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <HAL_I2C_MspInit+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d14b      	bne.n	8001e66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0c:	2312      	movs	r3, #18
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <HAL_I2C_MspInit+0xcc>)
 8001e24:	f000 ffda 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_I2C_MspInit+0xd0>)
 8001e46:	f000 ffc9 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_I2C_MspInit+0xc8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40005c00 	.word	0x40005c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_SPI_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12c      	bne.n	8001efc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001eda:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001eec:	2305      	movs	r3, #5
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_SPI_MspInit+0x8c>)
 8001ef8:	f000 ff70 	bl	8002ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40015000 	.word	0x40015000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40021400 	.word	0x40021400

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f3e:	e04b      	b.n	8001fd8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d146      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_TIM_Base_MspInit+0xdc>)
 8001f6a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f72:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f86:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f8e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f96:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001fae:	f000 fb99 	bl	80026e4 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 8001fb8:	f7ff fd10 	bl	80019dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_TIM_Base_MspInit+0xd8>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f000 fb43 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f000 fb5c 	bl	8002690 <HAL_NVIC_EnableIRQ>
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	20000314 	.word	0x20000314
 8001fec:	40026088 	.word	0x40026088

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_UART_MspInit+0x94>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d134      	bne.n	800207c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_UART_MspInit+0x98>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_UART_MspInit+0x98>)
 800201c:	f043 0310 	orr.w	r3, r3, #16
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_UART_MspInit+0x98>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x98>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_UART_MspInit+0x98>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_MspInit+0x98>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800204a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800205c:	2307      	movs	r3, #7
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4809      	ldr	r0, [pc, #36]	; (800208c <HAL_UART_MspInit+0x9c>)
 8002068:	f000 feb8 	bl	8002ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2025      	movs	r0, #37	; 0x25
 8002072:	f000 faf1 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002076:	2025      	movs	r0, #37	; 0x25
 8002078:	f000 fb0a 	bl	8002690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40011000 	.word	0x40011000
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80020a4:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_FMC_MspInit+0x104>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d16f      	bne.n	800218c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_FMC_MspInit+0x104>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_FMC_MspInit+0x108>)
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	4a37      	ldr	r2, [pc, #220]	; (8002198 <HAL_FMC_MspInit+0x108>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6393      	str	r3, [r2, #56]	; 0x38
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_FMC_MspInit+0x108>)
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80020ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80020d2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e0:	230c      	movs	r3, #12
 80020e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	482c      	ldr	r0, [pc, #176]	; (800219c <HAL_FMC_MspInit+0x10c>)
 80020ea:	f000 fe77 	bl	8002ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80020ee:	2301      	movs	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020fe:	230c      	movs	r3, #12
 8002100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4826      	ldr	r0, [pc, #152]	; (80021a0 <HAL_FMC_MspInit+0x110>)
 8002108:	f000 fe68 	bl	8002ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800210c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002110:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800211e:	230c      	movs	r3, #12
 8002120:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	481f      	ldr	r0, [pc, #124]	; (80021a4 <HAL_FMC_MspInit+0x114>)
 8002128:	f000 fe58 	bl	8002ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800212c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002130:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800213e:	230c      	movs	r3, #12
 8002140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4818      	ldr	r0, [pc, #96]	; (80021a8 <HAL_FMC_MspInit+0x118>)
 8002148:	f000 fe48 	bl	8002ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800214c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002150:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800215e:	230c      	movs	r3, #12
 8002160:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4811      	ldr	r0, [pc, #68]	; (80021ac <HAL_FMC_MspInit+0x11c>)
 8002168:	f000 fe38 	bl	8002ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800216c:	2360      	movs	r3, #96	; 0x60
 800216e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800217c:	230c      	movs	r3, #12
 800217e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	480a      	ldr	r0, [pc, #40]	; (80021b0 <HAL_FMC_MspInit+0x120>)
 8002186:	f000 fe29 	bl	8002ddc <HAL_GPIO_Init>
 800218a:	e000      	b.n	800218e <HAL_FMC_MspInit+0xfe>
    return;
 800218c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000438 	.word	0x20000438
 8002198:	40023800 	.word	0x40023800
 800219c:	40021400 	.word	0x40021400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021bc:	f7ff ff68 	bl	8002090 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2036      	movs	r0, #54	; 0x36
 80021de:	f000 fa3b 	bl	8002658 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021e2:	2036      	movs	r0, #54	; 0x36
 80021e4:	f000 fa54 	bl	8002690 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_InitTick+0xa4>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_InitTick+0xa4>)
 80021f2:	f043 0310 	orr.w	r3, r3, #16
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_InitTick+0xa4>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002204:	f107 0210 	add.w	r2, r7, #16
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fa0c 	bl	800562c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002214:	f003 f9e2 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8002218:	4603      	mov	r3, r0
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_InitTick+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3b01      	subs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_InitTick+0xac>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <HAL_InitTick+0xb0>)
 8002230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_InitTick+0xac>)
 8002234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002238:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_InitTick+0xac>)
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_InitTick+0xac>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_InitTick+0xac>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <HAL_InitTick+0xac>)
 800224e:	f003 fce3 	bl	8005c18 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <HAL_InitTick+0xac>)
 800225a:	f003 fd2d 	bl	8005cb8 <HAL_TIM_Base_Start_IT>
 800225e:	4603      	mov	r3, r0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	431bde83 	.word	0x431bde83
 8002274:	2000043c 	.word	0x2000043c
 8002278:	40001000 	.word	0x40001000

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA1_Stream5_IRQHandler+0x10>)
 80022da:	f000 fb43 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000314 	.word	0x20000314

080022e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM2_IRQHandler+0x10>)
 80022ee:	f003 fe25 	bl	8005f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200002cc 	.word	0x200002cc

080022fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <USART1_IRQHandler+0x10>)
 8002302:	f004 fbab 	bl	8006a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000374 	.word	0x20000374

08002310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM6_DAC_IRQHandler+0x10>)
 8002316:	f003 fe11 	bl	8005f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000043c 	.word	0x2000043c

08002324 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <OTG_HS_IRQHandler+0x10>)
 800232a:	f001 f987 	bl	800363c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000868 	.word	0x20000868

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f008 fe8c 	bl	800b084 <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20030000 	.word	0x20030000
 8002398:	00000400 	.word	0x00000400
 800239c:	20000484 	.word	0x20000484
 80023a0:	20000b80 	.word	0x20000b80

080023a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <SystemInit+0x20>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <SystemInit+0x20>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023cc:	480d      	ldr	r0, [pc, #52]	; (8002404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ce:	490e      	ldr	r1, [pc, #56]	; (8002408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e4:	4c0b      	ldr	r4, [pc, #44]	; (8002414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f2:	f7ff ffd7 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f008 fe4b 	bl	800b090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7fe fe6b 	bl	80010d4 <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002400:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800240c:	0800c840 	.word	0x0800c840
  ldr r2, =_sbss
 8002410:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002414:	20000b7c 	.word	0x20000b7c

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_Init+0x40>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_Init+0x40>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_Init+0x40>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 f8fc 	bl	8002642 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	200f      	movs	r0, #15
 800244c:	f7ff febc 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002450:	f7ff fc62 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008
 8002484:	20000488 	.word	0x20000488

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000488 	.word	0x20000488

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff4c 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266a:	f7ff ff61 	bl	8002530 <__NVIC_GetPriorityGrouping>
 800266e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	6978      	ldr	r0, [r7, #20]
 8002676:	f7ff ffb1 	bl	80025dc <NVIC_EncodePriority>
 800267a:	4602      	mov	r2, r0
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff80 	bl	8002588 <__NVIC_SetPriority>
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff54 	bl	800254c <__NVIC_EnableIRQ>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	795b      	ldrb	r3, [r3, #5]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fb4a 	bl	8001d68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff feca 	bl	8002488 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e099      	b.n	8002834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	e00f      	b.n	8002742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002722:	f7ff feb1 	bl	8002488 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b05      	cmp	r3, #5
 800272e:	d908      	bls.n	8002742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e078      	b.n	8002834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e8      	bne.n	8002722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_DMA_Init+0x158>)
 800275c:	4013      	ands	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d117      	bne.n	8002806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fa7b 	bl	8002ce4 <DMA_CheckFifoParam>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002802:	2301      	movs	r3, #1
 8002804:	e016      	b.n	8002834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa32 	bl	8002c78 <DMA_CalcBaseAndBitshift>
 8002814:	4603      	mov	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	223f      	movs	r2, #63	; 0x3f
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f010803f 	.word	0xf010803f

08002840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800284e:	f7ff fe1b 	bl	8002488 <HAL_GetTick>
 8002852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d008      	beq.n	8002872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e052      	b.n	8002918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0216 	bic.w	r2, r2, #22
 8002880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <HAL_DMA_Abort+0x62>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0208 	bic.w	r2, r2, #8
 80028b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c2:	e013      	b.n	80028ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c4:	f7ff fde0 	bl	8002488 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d90c      	bls.n	80028ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2203      	movs	r2, #3
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e015      	b.n	8002918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e4      	bne.n	80028c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	223f      	movs	r2, #63	; 0x3f
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00c      	b.n	8002958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002970:	4b8e      	ldr	r3, [pc, #568]	; (8002bac <HAL_DMA_IRQHandler+0x248>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8e      	ldr	r2, [pc, #568]	; (8002bb0 <HAL_DMA_IRQHandler+0x24c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2210      	movs	r2, #16
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d043      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03c      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2210      	movs	r2, #16
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d024      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e01f      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2220      	movs	r2, #32
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808f 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8087 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2220      	movs	r2, #32
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d136      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x1da>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07e      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
        }
        return;
 8002b7a:	e079      	b.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e02c      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
 8002baa:	bf00      	nop
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e01e      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0210 	bic.w	r2, r2, #16
 8002be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d032      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d307      	bcc.n	8002c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f2      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x2cc>
 8002c4a:	e000      	b.n	8002c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c70:	bf00      	nop
    }
  }
}
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3b10      	subs	r3, #16
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <DMA_CalcBaseAndBitshift+0x64>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d909      	bls.n	8002cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	1d1a      	adds	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb8:	e007      	b.n	8002cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	aaaaaaab 	.word	0xaaaaaaab
 8002ce0:	0800c68c 	.word	0x0800c68c

08002ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11f      	bne.n	8002d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d856      	bhi.n	8002db2 <DMA_CheckFifoParam+0xce>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x28>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d2f 	.word	0x08002d2f
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002db3 	.word	0x08002db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d046      	beq.n	8002db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e043      	b.n	8002db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d36:	d140      	bne.n	8002dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3c:	e03d      	b.n	8002dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	d121      	bne.n	8002d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d837      	bhi.n	8002dbe <DMA_CheckFifoParam+0xda>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <DMA_CheckFifoParam+0x70>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d6b 	.word	0x08002d6b
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002d7d 	.word	0x08002d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e030      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d025      	beq.n	8002dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7a:	e022      	b.n	8002dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d84:	d11f      	bne.n	8002dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d8a:	e01c      	b.n	8002dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d903      	bls.n	8002d9a <DMA_CheckFifoParam+0xb6>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d003      	beq.n	8002da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d98:	e018      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9e:	e015      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e00b      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002db2:	bf00      	nop
 8002db4:	e00a      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e008      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e006      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e004      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
    }
  } 
  
  return status; 
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e177      	b.n	80030e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f040 8166 	bne.w	80030e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d017      	beq.n	8002ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d123      	bne.n	8002f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	69b9      	ldr	r1, [r7, #24]
 8002f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80c0 	beq.w	80030e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_GPIO_Init+0x328>)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3302      	adds	r3, #2
 8002f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_GPIO_Init+0x32c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d037      	beq.n	800301a <HAL_GPIO_Init+0x23e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_GPIO_Init+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_GPIO_Init+0x23a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_GPIO_Init+0x334>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_GPIO_Init+0x236>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_GPIO_Init+0x338>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d025      	beq.n	800300e <HAL_GPIO_Init+0x232>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_GPIO_Init+0x33c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <HAL_GPIO_Init+0x22e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_GPIO_Init+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d019      	beq.n	8003006 <HAL_GPIO_Init+0x22a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_GPIO_Init+0x344>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0x226>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_GPIO_Init+0x348>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_GPIO_Init+0x222>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_GPIO_Init+0x34c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <HAL_GPIO_Init+0x21e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4f      	ldr	r2, [pc, #316]	; (800312c <HAL_GPIO_Init+0x350>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_GPIO_Init+0x21a>
 8002ff2:	2309      	movs	r3, #9
 8002ff4:	e012      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	e010      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	e00e      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e00c      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003002:	2306      	movs	r3, #6
 8003004:	e00a      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003006:	2305      	movs	r3, #5
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300a:	2304      	movs	r3, #4
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x240>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	; (8003104 <HAL_GPIO_Init+0x328>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_GPIO_Init+0x354>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_GPIO_Init+0x354>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f ae84 	bls.w	8002df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40021c00 	.word	0x40021c00
 8003128:	40022000 	.word	0x40022000
 800312c:	40022400 	.word	0x40022400
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003168:	b08f      	sub	sp, #60	; 0x3c
 800316a:	af0a      	add	r7, sp, #40	; 0x28
 800316c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e054      	b.n	8003222 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f007 fcc2 	bl	800ab1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2203      	movs	r2, #3
 800319c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fcf0 	bl	8007b9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	687e      	ldr	r6, [r7, #4]
 80031c4:	466d      	mov	r5, sp
 80031c6:	f106 0410 	add.w	r4, r6, #16
 80031ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031da:	1d33      	adds	r3, r6, #4
 80031dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031de:	6838      	ldr	r0, [r7, #0]
 80031e0:	f004 fc6a 	bl	8007ab8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fce7 	bl	8007bbe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	687e      	ldr	r6, [r7, #4]
 80031f8:	466d      	mov	r5, sp
 80031fa:	f106 0410 	add.w	r4, r6, #16
 80031fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320a:	e885 0003 	stmia.w	r5, {r0, r1}
 800320e:	1d33      	adds	r3, r6, #4
 8003210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	f004 fe70 	bl	8007ef8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800322a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800322a:	b590      	push	{r4, r7, lr}
 800322c:	b089      	sub	sp, #36	; 0x24
 800322e:	af04      	add	r7, sp, #16
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	4608      	mov	r0, r1
 8003234:	4611      	mov	r1, r2
 8003236:	461a      	mov	r2, r3
 8003238:	4603      	mov	r3, r0
 800323a:	70fb      	strb	r3, [r7, #3]
 800323c:	460b      	mov	r3, r1
 800323e:	70bb      	strb	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_HCD_HC_Init+0x28>
 800324e:	2302      	movs	r3, #2
 8003250:	e076      	b.n	8003340 <HAL_HCD_HC_Init+0x116>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	333d      	adds	r3, #61	; 0x3d
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3338      	adds	r3, #56	; 0x38
 800327a:	787a      	ldrb	r2, [r7, #1]
 800327c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3340      	adds	r3, #64	; 0x40
 800328c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800328e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3339      	adds	r3, #57	; 0x39
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	333f      	adds	r3, #63	; 0x3f
 80032b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	78ba      	ldrb	r2, [r7, #2]
 80032ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032be:	b2d0      	uxtb	r0, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	333a      	adds	r3, #58	; 0x3a
 80032cc:	4602      	mov	r2, r0
 80032ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da09      	bge.n	80032ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	333b      	adds	r3, #59	; 0x3b
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e008      	b.n	80032fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333b      	adds	r3, #59	; 0x3b
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	333c      	adds	r3, #60	; 0x3c
 800330c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003310:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	787c      	ldrb	r4, [r7, #1]
 8003318:	78ba      	ldrb	r2, [r7, #2]
 800331a:	78f9      	ldrb	r1, [r7, #3]
 800331c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4623      	mov	r3, r4
 800332e:	f004 ff69 	bl	8008204 <USB_HC_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_HCD_HC_Halt+0x1e>
 8003362:	2302      	movs	r3, #2
 8003364:	e00f      	b.n	8003386 <HAL_HCD_HC_Halt+0x3e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f005 f9b9 	bl	80086ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	70fb      	strb	r3, [r7, #3]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70bb      	strb	r3, [r7, #2]
 80033a6:	4613      	mov	r3, r2
 80033a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	333b      	adds	r3, #59	; 0x3b
 80033b8:	78ba      	ldrb	r2, [r7, #2]
 80033ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	333f      	adds	r3, #63	; 0x3f
 80033ca:	787a      	ldrb	r2, [r7, #1]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033ce:	7c3b      	ldrb	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d112      	bne.n	80033fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3342      	adds	r3, #66	; 0x42
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	333d      	adds	r3, #61	; 0x3d
 80033f4:	7f3a      	ldrb	r2, [r7, #28]
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e008      	b.n	800340c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3342      	adds	r3, #66	; 0x42
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b03      	cmp	r3, #3
 8003410:	f200 80c6 	bhi.w	80035a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	0800342d 	.word	0x0800342d
 8003420:	0800358d 	.word	0x0800358d
 8003424:	08003491 	.word	0x08003491
 8003428:	0800350f 	.word	0x0800350f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800342c:	7c3b      	ldrb	r3, [r7, #16]
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 80b8 	bne.w	80035a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003434:	78bb      	ldrb	r3, [r7, #2]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 80b4 	bne.w	80035a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800343c:	8b3b      	ldrh	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3355      	adds	r3, #85	; 0x55
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3355      	adds	r3, #85	; 0x55
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3342      	adds	r3, #66	; 0x42
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800347a:	e093      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3342      	adds	r3, #66	; 0x42
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	e089      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003490:	78bb      	ldrb	r3, [r7, #2]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11d      	bne.n	80034d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3355      	adds	r3, #85	; 0x55
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3342      	adds	r3, #66	; 0x42
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034bc:	e073      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3342      	adds	r3, #66	; 0x42
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
      break;
 80034d0:	e069      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	3354      	adds	r3, #84	; 0x54
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3342      	adds	r3, #66	; 0x42
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
      break;
 80034f8:	e055      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3342      	adds	r3, #66	; 0x42
 8003508:	2202      	movs	r2, #2
 800350a:	701a      	strb	r2, [r3, #0]
      break;
 800350c:	e04b      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11d      	bne.n	8003550 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3355      	adds	r3, #85	; 0x55
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3342      	adds	r3, #66	; 0x42
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800353a:	e034      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3342      	adds	r3, #66	; 0x42
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
      break;
 800354e:	e02a      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3354      	adds	r3, #84	; 0x54
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3342      	adds	r3, #66	; 0x42
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
      break;
 8003576:	e016      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3342      	adds	r3, #66	; 0x42
 8003586:	2202      	movs	r2, #2
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	e00c      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3342      	adds	r3, #66	; 0x42
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
      break;
 800359e:	e002      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80035a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3344      	adds	r3, #68	; 0x44
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	8b3a      	ldrh	r2, [r7, #24]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	202c      	movs	r0, #44	; 0x2c
 80035c0:	fb00 f303 	mul.w	r3, r0, r3
 80035c4:	440b      	add	r3, r1
 80035c6:	334c      	adds	r3, #76	; 0x4c
 80035c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3360      	adds	r3, #96	; 0x60
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3350      	adds	r3, #80	; 0x50
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3339      	adds	r3, #57	; 0x39
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	222c      	movs	r2, #44	; 0x2c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	3338      	adds	r3, #56	; 0x38
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	18d1      	adds	r1, r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	f004 ff0c 	bl	8008448 <USB_HC_StartXfer>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fc0d 	bl	8007e72 <USB_GetMode>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 80f6 	bne.w	800384c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f004 fbf1 	bl	8007e4c <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ec 	beq.w	800384a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fbe8 	bl	8007e4c <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003686:	d104      	bne.n	8003692 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fbd8 	bl	8007e4c <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a6:	d104      	bne.n	80036b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fbc8 	bl	8007e4c <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c6:	d104      	bne.n	80036d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fbb8 	bl	8007e4c <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d103      	bne.n	80036ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2202      	movs	r2, #2
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 fbaa 	bl	8007e4c <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003702:	d11c      	bne.n	800373e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800370c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800371e:	2110      	movs	r1, #16
 8003720:	6938      	ldr	r0, [r7, #16]
 8003722:	f004 fa99 	bl	8007c58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003726:	6938      	ldr	r0, [r7, #16]
 8003728:	f004 faca 	bl	8007cc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f004 fca0 	bl	8008078 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f007 fa69 	bl	800ac10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fb82 	bl	8007e4c <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003752:	d102      	bne.n	800375a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f001 f89e 	bl	8004896 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fb74 	bl	8007e4c <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d106      	bne.n	800377c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f007 fa32 	bl	800abd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fb63 	bl	8007e4c <USB_ReadInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d101      	bne.n	8003794 <HAL_HCD_IRQHandler+0x158>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_HCD_IRQHandler+0x15a>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0210 	bic.w	r2, r2, #16
 80037a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 ffa1 	bl	80046f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0210 	orr.w	r2, r2, #16
 80037be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fb41 	bl	8007e4c <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d4:	d13a      	bne.n	800384c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 ff76 	bl	80086cc <USB_HC_ReadInterrupt>
 80037e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e025      	b.n	8003834 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d018      	beq.n	800382e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003812:	d106      	bne.n	8003822 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8ab 	bl	8003976 <HCD_HC_IN_IRQHandler>
 8003820:	e005      	b.n	800382e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fbf9 	bl	8004020 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	429a      	cmp	r2, r3
 800383c:	d3d4      	bcc.n	80037e8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	e000      	b.n	800384c <HAL_HCD_IRQHandler+0x210>
      return;
 800384a:	bf00      	nop
    }
  }
}
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_HCD_Start+0x16>
 8003864:	2302      	movs	r3, #2
 8003866:	e013      	b.n	8003890 <HAL_HCD_Start+0x3e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fc62 	bl	8008140 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f004 f97a 	bl	8007b7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_HCD_Stop+0x16>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e00d      	b.n	80038ca <HAL_HCD_Stop+0x32>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f005 f850 	bl	8008960 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fc04 	bl	80080ec <USB_ResetPort>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3360      	adds	r3, #96	; 0x60
 8003908:	781b      	ldrb	r3, [r3, #0]
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3350      	adds	r3, #80	; 0x50
 8003930:	681b      	ldr	r3, [r3, #0]
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fc48 	bl	80081e0 <USB_GetCurrentFrame>
 8003950:	4603      	mov	r3, r0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f004 fc23 	bl	80081b2 <USB_GetHostSpeed>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d11a      	bne.n	80039dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	461a      	mov	r2, r3
 80039b4:	2304      	movs	r3, #4
 80039b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3361      	adds	r3, #97	; 0x61
 80039c6:	2206      	movs	r2, #6
 80039c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fe8a 	bl	80086ee <USB_HC_Halt>
 80039da:	e0af      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f2:	d11b      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	461a      	mov	r2, r3
 8003a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3361      	adds	r3, #97	; 0x61
 8003a16:	2207      	movs	r2, #7
 8003a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fe62 	bl	80086ee <USB_HC_Halt>
 8003a2a:	e087      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d109      	bne.n	8003a56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2320      	movs	r3, #32
 8003a52:	6093      	str	r3, [r2, #8]
 8003a54:	e072      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d11a      	bne.n	8003aa2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3361      	adds	r3, #97	; 0x61
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 fe27 	bl	80086ee <USB_HC_Halt>
 8003aa0:	e04c      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d11b      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003acc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3361      	adds	r3, #97	; 0x61
 8003adc:	2208      	movs	r2, #8
 8003ade:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 fdff 	bl	80086ee <USB_HC_Halt>
 8003af0:	e024      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d119      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3361      	adds	r3, #97	; 0x61
 8003b28:	2206      	movs	r2, #6
 8003b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fdd9 	bl	80086ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b52:	d112      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fdc5 	bl	80086ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b76:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b78:	e24e      	b.n	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	f040 80df 	bne.w	8003d50 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d019      	beq.n	8003bce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3348      	adds	r3, #72	; 0x48
 8003ba8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0159      	lsls	r1, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	440b      	add	r3, r1
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bbc:	1ad2      	subs	r2, r2, r3
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	202c      	movs	r0, #44	; 0x2c
 8003bc4:	fb00 f303 	mul.w	r3, r0, r3
 8003bc8:	440b      	add	r3, r1
 8003bca:	3350      	adds	r3, #80	; 0x50
 8003bcc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	212c      	movs	r1, #44	; 0x2c
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	3361      	adds	r3, #97	; 0x61
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	335c      	adds	r3, #92	; 0x5c
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2301      	movs	r3, #1
 8003c02:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	333f      	adds	r3, #63	; 0x3f
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	333f      	adds	r3, #63	; 0x3f
 8003c26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d111      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 fd59 	bl	80086ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	e03a      	b.n	8003cc6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	333f      	adds	r3, #63	; 0x3f
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d009      	beq.n	8003c78 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	333f      	adds	r3, #63	; 0x3f
 8003c72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d126      	bne.n	8003cc6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3360      	adds	r3, #96	; 0x60
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	b2d9      	uxtb	r1, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	202c      	movs	r0, #44	; 0x2c
 8003cb4:	fb00 f303 	mul.w	r3, r0, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3360      	adds	r3, #96	; 0x60
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f006 ffb3 	bl	800ac2c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d12b      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3348      	adds	r3, #72	; 0x48
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	202c      	movs	r0, #44	; 0x2c
 8003ce4:	fb00 f202 	mul.w	r2, r0, r2
 8003ce8:	440a      	add	r2, r1
 8003cea:	3240      	adds	r2, #64	; 0x40
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 818e 	beq.w	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3354      	adds	r3, #84	; 0x54
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2d8      	uxtb	r0, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3354      	adds	r3, #84	; 0x54
 8003d20:	4602      	mov	r2, r0
 8003d22:	701a      	strb	r2, [r3, #0]
}
 8003d24:	e178      	b.n	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3354      	adds	r3, #84	; 0x54
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2d8      	uxtb	r0, r3
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	701a      	strb	r2, [r3, #0]
}
 8003d4e:	e163      	b.n	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	f040 80f6 	bne.w	8003f54 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3361      	adds	r3, #97	; 0x61
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3360      	adds	r3, #96	; 0x60
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e0c9      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3361      	adds	r3, #97	; 0x61
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d109      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3360      	adds	r3, #96	; 0x60
 8003db2:	2205      	movs	r2, #5
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e0b5      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3361      	adds	r3, #97	; 0x61
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d009      	beq.n	8003de0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	212c      	movs	r1, #44	; 0x2c
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3361      	adds	r3, #97	; 0x61
 8003dda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d150      	bne.n	8003e82 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	335c      	adds	r3, #92	; 0x5c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	202c      	movs	r0, #44	; 0x2c
 8003df8:	fb00 f303 	mul.w	r3, r0, r3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	335c      	adds	r3, #92	; 0x5c
 8003e00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	335c      	adds	r3, #92	; 0x5c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d912      	bls.n	8003e3c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	335c      	adds	r3, #92	; 0x5c
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3360      	adds	r3, #96	; 0x60
 8003e36:	2204      	movs	r2, #4
 8003e38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e3a:	e073      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3360      	adds	r3, #96	; 0x60
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e64:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e6c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e80:	e050      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3361      	adds	r3, #97	; 0x61
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d122      	bne.n	8003edc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3360      	adds	r3, #96	; 0x60
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ebe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ec6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e023      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3361      	adds	r3, #97	; 0x61
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b07      	cmp	r3, #7
 8003eee:	d119      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	335c      	adds	r3, #92	; 0x5c
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	202c      	movs	r0, #44	; 0x2c
 8003f08:	fb00 f303 	mul.w	r3, r0, r3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3360      	adds	r3, #96	; 0x60
 8003f20:	2204      	movs	r2, #4
 8003f22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2302      	movs	r3, #2
 8003f34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	b2d9      	uxtb	r1, r3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	202c      	movs	r0, #44	; 0x2c
 8003f40:	fb00 f303 	mul.w	r3, r0, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3360      	adds	r3, #96	; 0x60
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f006 fe6d 	bl	800ac2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f52:	e061      	b.n	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d156      	bne.n	8004018 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	333f      	adds	r3, #63	; 0x3f
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d111      	bne.n	8003fa2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	335c      	adds	r3, #92	; 0x5c
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 fba7 	bl	80086ee <USB_HC_Halt>
 8003fa0:	e031      	b.n	8004006 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	333f      	adds	r3, #63	; 0x3f
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	333f      	adds	r3, #63	; 0x3f
 8003fc4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d11d      	bne.n	8004006 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	335c      	adds	r3, #92	; 0x5c
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d110      	bne.n	8004006 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3361      	adds	r3, #97	; 0x61
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f004 fb74 	bl	80086ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	461a      	mov	r2, r3
 8004014:	2310      	movs	r3, #16
 8004016:	6093      	str	r3, [r2, #8]
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d11a      	bne.n	8004086 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	461a      	mov	r2, r3
 800405e:	2304      	movs	r3, #4
 8004060:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	3361      	adds	r3, #97	; 0x61
 8004070:	2206      	movs	r2, #6
 8004072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f004 fb35 	bl	80086ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004084:	e331      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d12e      	bne.n	80040fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	461a      	mov	r2, r3
 80040aa:	2320      	movs	r3, #32
 80040ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	333d      	adds	r3, #61	; 0x3d
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	f040 8313 	bne.w	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	333d      	adds	r3, #61	; 0x3d
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3360      	adds	r3, #96	; 0x60
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 fafb 	bl	80086ee <USB_HC_Halt>
}
 80040f8:	e2f7      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d112      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	461a      	mov	r2, r3
 8004120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004124:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fadc 	bl	80086ee <USB_HC_Halt>
}
 8004136:	e2d8      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d140      	bne.n	80041d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	335c      	adds	r3, #92	; 0x5c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d111      	bne.n	800419a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	333d      	adds	r3, #61	; 0x3d
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004194:	461a      	mov	r2, r3
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3361      	adds	r3, #97	; 0x61
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f004 fa90 	bl	80086ee <USB_HC_Halt>
}
 80041ce:	e28c      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d12c      	bne.n	8004240 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3361      	adds	r3, #97	; 0x61
 80041f4:	2204      	movs	r2, #4
 80041f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	333d      	adds	r3, #61	; 0x3d
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f004 fa61 	bl	80086ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	461a      	mov	r2, r3
 800423a:	2340      	movs	r3, #64	; 0x40
 800423c:	6093      	str	r3, [r2, #8]
}
 800423e:	e254      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d11a      	bne.n	800428c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	461a      	mov	r2, r3
 8004264:	2308      	movs	r3, #8
 8004266:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	3361      	adds	r3, #97	; 0x61
 8004276:	2205      	movs	r2, #5
 8004278:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f004 fa32 	bl	80086ee <USB_HC_Halt>
}
 800428a:	e22e      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d140      	bne.n	8004324 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	335c      	adds	r3, #92	; 0x5c
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	212c      	movs	r1, #44	; 0x2c
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	4413      	add	r3, r2
 80042c0:	3361      	adds	r3, #97	; 0x61
 80042c2:	2203      	movs	r2, #3
 80042c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	333d      	adds	r3, #61	; 0x3d
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d112      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	333c      	adds	r3, #60	; 0x3c
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	333d      	adds	r3, #61	; 0x3d
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f004 f9ef 	bl	80086ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	2310      	movs	r3, #16
 8004320:	6093      	str	r3, [r2, #8]
}
 8004322:	e1e2      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d164      	bne.n	8004404 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d111      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3361      	adds	r3, #97	; 0x61
 8004350:	2206      	movs	r2, #6
 8004352:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f004 f9c5 	bl	80086ee <USB_HC_Halt>
 8004364:	e044      	b.n	80043f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	335c      	adds	r3, #92	; 0x5c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	202c      	movs	r0, #44	; 0x2c
 800437e:	fb00 f303 	mul.w	r3, r0, r3
 8004382:	440b      	add	r3, r1
 8004384:	335c      	adds	r3, #92	; 0x5c
 8004386:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	335c      	adds	r3, #92	; 0x5c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d920      	bls.n	80043de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	335c      	adds	r3, #92	; 0x5c
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	3360      	adds	r3, #96	; 0x60
 80043bc:	2204      	movs	r2, #4
 80043be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	b2d9      	uxtb	r1, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	202c      	movs	r0, #44	; 0x2c
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3360      	adds	r3, #96	; 0x60
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f006 fc28 	bl	800ac2c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043dc:	e008      	b.n	80043f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3360      	adds	r3, #96	; 0x60
 80043ec:	2202      	movs	r2, #2
 80043ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	6093      	str	r3, [r2, #8]
}
 8004402:	e172      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d11b      	bne.n	8004454 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3361      	adds	r3, #97	; 0x61
 800442a:	2208      	movs	r2, #8
 800442c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f004 f958 	bl	80086ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	461a      	mov	r2, r3
 800444c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004450:	6093      	str	r3, [r2, #8]
}
 8004452:	e14a      	b.n	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	f040 813f 	bne.w	80046ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3361      	adds	r3, #97	; 0x61
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d17d      	bne.n	800457c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3360      	adds	r3, #96	; 0x60
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	333f      	adds	r3, #63	; 0x3f
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d00a      	beq.n	80044bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	333f      	adds	r3, #63	; 0x3f
 80044b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f040 8100 	bne.w	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d113      	bne.n	80044ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3355      	adds	r3, #85	; 0x55
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f083 0301 	eor.w	r3, r3, #1
 80044d8:	b2d8      	uxtb	r0, r3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3355      	adds	r3, #85	; 0x55
 80044e8:	4602      	mov	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f040 80e3 	bne.w	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	212c      	movs	r1, #44	; 0x2c
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	334c      	adds	r3, #76	; 0x4c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80d8 	beq.w	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	212c      	movs	r1, #44	; 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	334c      	adds	r3, #76	; 0x4c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	202c      	movs	r0, #44	; 0x2c
 8004522:	fb00 f202 	mul.w	r2, r0, r2
 8004526:	440a      	add	r2, r1
 8004528:	3240      	adds	r2, #64	; 0x40
 800452a:	8812      	ldrh	r2, [r2, #0]
 800452c:	4413      	add	r3, r2
 800452e:	3b01      	subs	r3, #1
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	202c      	movs	r0, #44	; 0x2c
 8004536:	fb00 f202 	mul.w	r2, r0, r2
 800453a:	440a      	add	r2, r1
 800453c:	3240      	adds	r2, #64	; 0x40
 800453e:	8812      	ldrh	r2, [r2, #0]
 8004540:	fbb3 f3f2 	udiv	r3, r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80b5 	beq.w	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3355      	adds	r3, #85	; 0x55
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	f083 0301 	eor.w	r3, r3, #1
 8004566:	b2d8      	uxtb	r0, r3
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3355      	adds	r3, #85	; 0x55
 8004576:	4602      	mov	r2, r0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e09f      	b.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3361      	adds	r3, #97	; 0x61
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d109      	bne.n	80045a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3360      	adds	r3, #96	; 0x60
 800459e:	2202      	movs	r2, #2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e08b      	b.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3361      	adds	r3, #97	; 0x61
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d109      	bne.n	80045cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3360      	adds	r3, #96	; 0x60
 80045c6:	2202      	movs	r2, #2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e077      	b.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	3361      	adds	r3, #97	; 0x61
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d109      	bne.n	80045f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3360      	adds	r3, #96	; 0x60
 80045ee:	2205      	movs	r2, #5
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e063      	b.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3361      	adds	r3, #97	; 0x61
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b06      	cmp	r3, #6
 8004606:	d009      	beq.n	800461c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3361      	adds	r3, #97	; 0x61
 8004616:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004618:	2b08      	cmp	r3, #8
 800461a:	d14f      	bne.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	335c      	adds	r3, #92	; 0x5c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	202c      	movs	r0, #44	; 0x2c
 8004634:	fb00 f303 	mul.w	r3, r0, r3
 8004638:	440b      	add	r3, r1
 800463a:	335c      	adds	r3, #92	; 0x5c
 800463c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	212c      	movs	r1, #44	; 0x2c
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	335c      	adds	r3, #92	; 0x5c
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d912      	bls.n	8004678 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	335c      	adds	r3, #92	; 0x5c
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3360      	adds	r3, #96	; 0x60
 8004672:	2204      	movs	r2, #4
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e021      	b.n	80046bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3360      	adds	r3, #96	; 0x60
 8004686:	2202      	movs	r2, #2
 8004688:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	461a      	mov	r2, r3
 80046ca:	2302      	movs	r3, #2
 80046cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	b2d9      	uxtb	r1, r3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	202c      	movs	r0, #44	; 0x2c
 80046d8:	fb00 f303 	mul.w	r3, r0, r3
 80046dc:	4413      	add	r3, r2
 80046de:	3360      	adds	r3, #96	; 0x60
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f006 faa1 	bl	800ac2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046ea:	bf00      	nop
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b08a      	sub	sp, #40	; 0x28
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	0c5b      	lsrs	r3, r3, #17
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004726:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d004      	beq.n	8004738 <HCD_RXQLVL_IRQHandler+0x46>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b05      	cmp	r3, #5
 8004732:	f000 80a9 	beq.w	8004888 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004736:	e0aa      	b.n	800488e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80a6 	beq.w	800488c <HCD_RXQLVL_IRQHandler+0x19a>
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	3344      	adds	r3, #68	; 0x44
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 809b 	beq.w	800488c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3350      	adds	r3, #80	; 0x50
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	441a      	add	r2, r3
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	202c      	movs	r0, #44	; 0x2c
 8004770:	fb00 f303 	mul.w	r3, r0, r3
 8004774:	440b      	add	r3, r1
 8004776:	334c      	adds	r3, #76	; 0x4c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d87a      	bhi.n	8004874 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3344      	adds	r3, #68	; 0x44
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	b292      	uxth	r2, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f003 fb00 	bl	8007d9c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3344      	adds	r3, #68	; 0x44
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	441a      	add	r2, r3
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	202c      	movs	r0, #44	; 0x2c
 80047b6:	fb00 f303 	mul.w	r3, r0, r3
 80047ba:	440b      	add	r3, r1
 80047bc:	3344      	adds	r3, #68	; 0x44
 80047be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	3350      	adds	r3, #80	; 0x50
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	441a      	add	r2, r3
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	202c      	movs	r0, #44	; 0x2c
 80047da:	fb00 f303 	mul.w	r3, r0, r3
 80047de:	440b      	add	r3, r1
 80047e0:	3350      	adds	r3, #80	; 0x50
 80047e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	0cdb      	lsrs	r3, r3, #19
 80047f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3340      	adds	r3, #64	; 0x40
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4293      	cmp	r3, r2
 8004810:	d13c      	bne.n	800488c <HCD_RXQLVL_IRQHandler+0x19a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d039      	beq.n	800488c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004836:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3354      	adds	r3, #84	; 0x54
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f083 0301 	eor.w	r3, r3, #1
 800485e:	b2d8      	uxtb	r0, r3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3354      	adds	r3, #84	; 0x54
 800486e:	4602      	mov	r2, r0
 8004870:	701a      	strb	r2, [r3, #0]
      break;
 8004872:	e00b      	b.n	800488c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3360      	adds	r3, #96	; 0x60
 8004882:	2204      	movs	r2, #4
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	e001      	b.n	800488c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800488c:	bf00      	nop
  }
}
 800488e:	bf00      	nop
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d10b      	bne.n	80048e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d102      	bne.n	80048de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f006 f98b 	bl	800abf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d132      	bne.n	8004956 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f043 0308 	orr.w	r3, r3, #8
 80048f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d126      	bne.n	8004950 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d113      	bne.n	8004932 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004914:	d106      	bne.n	8004924 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fbab 	bl	8008078 <USB_InitFSLSPClkSel>
 8004922:	e011      	b.n	8004948 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f003 fba4 	bl	8008078 <USB_InitFSLSPClkSel>
 8004930:	e00a      	b.n	8004948 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d106      	bne.n	8004948 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004940:	461a      	mov	r2, r3
 8004942:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004946:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f006 f97d 	bl	800ac48 <HAL_HCD_PortEnabled_Callback>
 800494e:	e002      	b.n	8004956 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f006 f987 	bl	800ac64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d103      	bne.n	8004968 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f043 0320 	orr.w	r3, r3, #32
 8004966:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800496e:	461a      	mov	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6013      	str	r3, [r2, #0]
}
 8004974:	bf00      	nop
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e12b      	b.n	8004be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd fa02 	bl	8001dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049e0:	f000 fdfc 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80049e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4a81      	ldr	r2, [pc, #516]	; (8004bf0 <HAL_I2C_Init+0x274>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d807      	bhi.n	8004a00 <HAL_I2C_Init+0x84>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a80      	ldr	r2, [pc, #512]	; (8004bf4 <HAL_I2C_Init+0x278>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf94      	ite	ls
 80049f8:	2301      	movls	r3, #1
 80049fa:	2300      	movhi	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e006      	b.n	8004a0e <HAL_I2C_Init+0x92>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a7d      	ldr	r2, [pc, #500]	; (8004bf8 <HAL_I2C_Init+0x27c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	bf94      	ite	ls
 8004a08:	2301      	movls	r3, #1
 8004a0a:	2300      	movhi	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0e7      	b.n	8004be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a78      	ldr	r2, [pc, #480]	; (8004bfc <HAL_I2C_Init+0x280>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0c9b      	lsrs	r3, r3, #18
 8004a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a6a      	ldr	r2, [pc, #424]	; (8004bf0 <HAL_I2C_Init+0x274>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d802      	bhi.n	8004a50 <HAL_I2C_Init+0xd4>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	e009      	b.n	8004a64 <HAL_I2C_Init+0xe8>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <HAL_I2C_Init+0x284>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	3301      	adds	r3, #1
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	495c      	ldr	r1, [pc, #368]	; (8004bf0 <HAL_I2C_Init+0x274>)
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d819      	bhi.n	8004ab8 <HAL_I2C_Init+0x13c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e59      	subs	r1, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a98:	400b      	ands	r3, r1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_I2C_Init+0x138>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e59      	subs	r1, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	e051      	b.n	8004b58 <HAL_I2C_Init+0x1dc>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	e04f      	b.n	8004b58 <HAL_I2C_Init+0x1dc>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d111      	bne.n	8004ae4 <HAL_I2C_Init+0x168>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	440b      	add	r3, r1
 8004ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e012      	b.n	8004b0a <HAL_I2C_Init+0x18e>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e58      	subs	r0, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	0099      	lsls	r1, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afa:	3301      	adds	r3, #1
 8004afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Init+0x196>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e022      	b.n	8004b58 <HAL_I2C_Init+0x1dc>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10e      	bne.n	8004b38 <HAL_I2C_Init+0x1bc>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1e58      	subs	r0, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	440b      	add	r3, r1
 8004b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b36:	e00f      	b.n	8004b58 <HAL_I2C_Init+0x1dc>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e58      	subs	r0, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	0099      	lsls	r1, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	6809      	ldr	r1, [r1, #0]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6911      	ldr	r1, [r2, #16]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	000186a0 	.word	0x000186a0
 8004bf4:	001e847f 	.word	0x001e847f
 8004bf8:	003d08ff 	.word	0x003d08ff
 8004bfc:	431bde83 	.word	0x431bde83
 8004c00:	10624dd3 	.word	0x10624dd3

08004c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d129      	bne.n	8004c6e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2224      	movs	r2, #36	; 0x24
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0210 	bic.w	r2, r2, #16
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e000      	b.n	8004c70 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d12a      	bne.n	8004cec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	89fb      	ldrh	r3, [r7, #14]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	89fa      	ldrh	r2, [r7, #14]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e267      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d075      	beq.n	8004e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d1a:	4b88      	ldr	r3, [pc, #544]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d00c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d26:	4b85      	ldr	r3, [pc, #532]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d112      	bne.n	8004d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d32:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3e:	d10b      	bne.n	8004d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	4b7e      	ldr	r3, [pc, #504]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d05b      	beq.n	8004e04 <HAL_RCC_OscConfig+0x108>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d157      	bne.n	8004e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e242      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d106      	bne.n	8004d70 <HAL_RCC_OscConfig+0x74>
 8004d62:	4b76      	ldr	r3, [pc, #472]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a75      	ldr	r2, [pc, #468]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e01d      	b.n	8004dac <HAL_RCC_OscConfig+0xb0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x98>
 8004d7a:	4b70      	ldr	r3, [pc, #448]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a6f      	ldr	r2, [pc, #444]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b6d      	ldr	r3, [pc, #436]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6c      	ldr	r2, [pc, #432]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e00b      	b.n	8004dac <HAL_RCC_OscConfig+0xb0>
 8004d94:	4b69      	ldr	r3, [pc, #420]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a68      	ldr	r2, [pc, #416]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a65      	ldr	r2, [pc, #404]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d013      	beq.n	8004ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db4:	f7fd fb68 	bl	8002488 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fd fb64 	bl	8002488 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e207      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	4b5b      	ldr	r3, [pc, #364]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0xc0>
 8004dda:	e014      	b.n	8004e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fb54 	bl	8002488 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de4:	f7fd fb50 	bl	8002488 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e1f3      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0xe8>
 8004e02:	e000      	b.n	8004e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d063      	beq.n	8004eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e1e:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d11c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2a:	4b44      	ldr	r3, [pc, #272]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d116      	bne.n	8004e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e36:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_RCC_OscConfig+0x152>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d001      	beq.n	8004e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e1c7      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4937      	ldr	r1, [pc, #220]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e62:	e03a      	b.n	8004eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6c:	4b34      	ldr	r3, [pc, #208]	; (8004f40 <HAL_RCC_OscConfig+0x244>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fd fb09 	bl	8002488 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7a:	f7fd fb05 	bl	8002488 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1a8      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e98:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4925      	ldr	r1, [pc, #148]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]
 8004eac:	e015      	b.n	8004eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <HAL_RCC_OscConfig+0x244>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fae8 	bl	8002488 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fd fae4 	bl	8002488 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e187      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d036      	beq.n	8004f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_RCC_OscConfig+0x248>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fd fac8 	bl	8002488 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fd fac4 	bl	8002488 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e167      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_OscConfig+0x240>)
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x200>
 8004f1a:	e01b      	b.n	8004f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_OscConfig+0x248>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f22:	f7fd fab1 	bl	8002488 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f28:	e00e      	b.n	8004f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2a:	f7fd faad 	bl	8002488 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d907      	bls.n	8004f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e150      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	42470000 	.word	0x42470000
 8004f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ea      	bne.n	8004f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8097 	beq.w	8005090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f66:	4b81      	ldr	r3, [pc, #516]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	4b7d      	ldr	r3, [pc, #500]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6413      	str	r3, [r2, #64]	; 0x40
 8004f82:	4b7a      	ldr	r3, [pc, #488]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f92:	4b77      	ldr	r3, [pc, #476]	; (8005170 <HAL_RCC_OscConfig+0x474>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d118      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f9e:	4b74      	ldr	r3, [pc, #464]	; (8005170 <HAL_RCC_OscConfig+0x474>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a73      	ldr	r2, [pc, #460]	; (8005170 <HAL_RCC_OscConfig+0x474>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004faa:	f7fd fa6d 	bl	8002488 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb2:	f7fd fa69 	bl	8002488 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e10c      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <HAL_RCC_OscConfig+0x474>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x2ea>
 8004fd8:	4b64      	ldr	r3, [pc, #400]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a63      	ldr	r2, [pc, #396]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	e01c      	b.n	8005020 <HAL_RCC_OscConfig+0x324>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d10c      	bne.n	8005008 <HAL_RCC_OscConfig+0x30c>
 8004fee:	4b5f      	ldr	r3, [pc, #380]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	4a5e      	ldr	r2, [pc, #376]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffa:	4b5c      	ldr	r3, [pc, #368]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a5b      	ldr	r2, [pc, #364]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0x324>
 8005008:	4b58      	ldr	r3, [pc, #352]	; (800516c <HAL_RCC_OscConfig+0x470>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	4a57      	ldr	r2, [pc, #348]	; (800516c <HAL_RCC_OscConfig+0x470>)
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	4b55      	ldr	r3, [pc, #340]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a54      	ldr	r2, [pc, #336]	; (800516c <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 0304 	bic.w	r3, r3, #4
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d015      	beq.n	8005054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fa2e 	bl	8002488 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fd fa2a 	bl	8002488 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e0cb      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	4b49      	ldr	r3, [pc, #292]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ee      	beq.n	8005030 <HAL_RCC_OscConfig+0x334>
 8005052:	e014      	b.n	800507e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005054:	f7fd fa18 	bl	8002488 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505a:	e00a      	b.n	8005072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505c:	f7fd fa14 	bl	8002488 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	; 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e0b5      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1ee      	bne.n	800505c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005084:	4b39      	ldr	r3, [pc, #228]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	4a38      	ldr	r2, [pc, #224]	; (800516c <HAL_RCC_OscConfig+0x470>)
 800508a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80a1 	beq.w	80051dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800509a:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCC_OscConfig+0x470>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d05c      	beq.n	8005160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d141      	bne.n	8005132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <HAL_RCC_OscConfig+0x478>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd f9e8 	bl	8002488 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fd f9e4 	bl	8002488 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e087      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_RCC_OscConfig+0x470>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	3b01      	subs	r3, #1
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	491b      	ldr	r1, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x478>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fd f9bd 	bl	8002488 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005112:	f7fd f9b9 	bl	8002488 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e05c      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x416>
 8005130:	e054      	b.n	80051dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_RCC_OscConfig+0x478>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fd f9a6 	bl	8002488 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005140:	f7fd f9a2 	bl	8002488 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e045      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_RCC_OscConfig+0x470>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x444>
 800515e:	e03d      	b.n	80051dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d107      	bne.n	8005178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e038      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
 800516c:	40023800 	.word	0x40023800
 8005170:	40007000 	.word	0x40007000
 8005174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005178:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <HAL_RCC_OscConfig+0x4ec>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d028      	beq.n	80051d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d121      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d11a      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d111      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	3b01      	subs	r3, #1
 80051c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800

080051ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0cc      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005200:	4b68      	ldr	r3, [pc, #416]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d90c      	bls.n	8005228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b63      	ldr	r3, [pc, #396]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0b8      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d020      	beq.n	8005276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005240:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	4a58      	ldr	r2, [pc, #352]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800524a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005258:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4a52      	ldr	r2, [pc, #328]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005264:	4b50      	ldr	r3, [pc, #320]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	494d      	ldr	r1, [pc, #308]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d044      	beq.n	800530c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d107      	bne.n	800529a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528a:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d119      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e07f      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d003      	beq.n	80052aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e06f      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b3b      	ldr	r3, [pc, #236]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e067      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ca:	4b37      	ldr	r3, [pc, #220]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4934      	ldr	r1, [pc, #208]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fd f8d4 	bl	8002488 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e4:	f7fd f8d0 	bl	8002488 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e04f      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 020c 	and.w	r2, r3, #12
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1eb      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d20c      	bcs.n	8005334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e032      	b.n	800539a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4916      	ldr	r1, [pc, #88]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	490e      	ldr	r1, [pc, #56]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005372:	f000 f821 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8005376:	4602      	mov	r2, r0
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	490a      	ldr	r1, [pc, #40]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	5ccb      	ldrb	r3, [r1, r3]
 8005386:	fa22 f303 	lsr.w	r3, r2, r3
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7fc ff18 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40023c00 	.word	0x40023c00
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800c674 	.word	0x0800c674
 80053b0:	20000000 	.word	0x20000000
 80053b4:	20000004 	.word	0x20000004

080053b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053bc:	b094      	sub	sp, #80	; 0x50
 80053be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
 80053c4:	2300      	movs	r3, #0
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	2300      	movs	r3, #0
 80053ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d0:	4b79      	ldr	r3, [pc, #484]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d00d      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x40>
 80053dc:	2b08      	cmp	r3, #8
 80053de:	f200 80e1 	bhi.w	80055a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x34>
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d003      	beq.n	80053f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ea:	e0db      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_GetSysClockFreq+0x204>)
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80053f0:	e0db      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053f2:	4b73      	ldr	r3, [pc, #460]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f6:	e0d8      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053f8:	4b6f      	ldr	r3, [pc, #444]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005402:	4b6d      	ldr	r3, [pc, #436]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d063      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540e:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	099b      	lsrs	r3, r3, #6
 8005414:	2200      	movs	r2, #0
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
 8005418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
 8005422:	2300      	movs	r3, #0
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
 8005426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800542a:	4622      	mov	r2, r4
 800542c:	462b      	mov	r3, r5
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	0159      	lsls	r1, r3, #5
 8005438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800543c:	0150      	lsls	r0, r2, #5
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4621      	mov	r1, r4
 8005444:	1a51      	subs	r1, r2, r1
 8005446:	6139      	str	r1, [r7, #16]
 8005448:	4629      	mov	r1, r5
 800544a:	eb63 0301 	sbc.w	r3, r3, r1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800545c:	4659      	mov	r1, fp
 800545e:	018b      	lsls	r3, r1, #6
 8005460:	4651      	mov	r1, sl
 8005462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005466:	4651      	mov	r1, sl
 8005468:	018a      	lsls	r2, r1, #6
 800546a:	4651      	mov	r1, sl
 800546c:	ebb2 0801 	subs.w	r8, r2, r1
 8005470:	4659      	mov	r1, fp
 8005472:	eb63 0901 	sbc.w	r9, r3, r1
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548a:	4690      	mov	r8, r2
 800548c:	4699      	mov	r9, r3
 800548e:	4623      	mov	r3, r4
 8005490:	eb18 0303 	adds.w	r3, r8, r3
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	462b      	mov	r3, r5
 8005498:	eb49 0303 	adc.w	r3, r9, r3
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054aa:	4629      	mov	r1, r5
 80054ac:	024b      	lsls	r3, r1, #9
 80054ae:	4621      	mov	r1, r4
 80054b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054b4:	4621      	mov	r1, r4
 80054b6:	024a      	lsls	r2, r1, #9
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054be:	2200      	movs	r2, #0
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c8:	f7fa fee2 	bl	8000290 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d4:	e058      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d6:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	099b      	lsrs	r3, r3, #6
 80054dc:	2200      	movs	r2, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	4611      	mov	r1, r2
 80054e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	2300      	movs	r3, #0
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
 80054ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	f04f 0000 	mov.w	r0, #0
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	0159      	lsls	r1, r3, #5
 80054fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005502:	0150      	lsls	r0, r2, #5
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4641      	mov	r1, r8
 800550a:	ebb2 0a01 	subs.w	sl, r2, r1
 800550e:	4649      	mov	r1, r9
 8005510:	eb63 0b01 	sbc.w	fp, r3, r1
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005528:	ebb2 040a 	subs.w	r4, r2, sl
 800552c:	eb63 050b 	sbc.w	r5, r3, fp
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	00eb      	lsls	r3, r5, #3
 800553a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553e:	00e2      	lsls	r2, r4, #3
 8005540:	4614      	mov	r4, r2
 8005542:	461d      	mov	r5, r3
 8005544:	4643      	mov	r3, r8
 8005546:	18e3      	adds	r3, r4, r3
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	464b      	mov	r3, r9
 800554c:	eb45 0303 	adc.w	r3, r5, r3
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800555e:	4629      	mov	r1, r5
 8005560:	028b      	lsls	r3, r1, #10
 8005562:	4621      	mov	r1, r4
 8005564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005568:	4621      	mov	r1, r4
 800556a:	028a      	lsls	r2, r1, #10
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005572:	2200      	movs	r2, #0
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	61fa      	str	r2, [r7, #28]
 8005578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800557c:	f7fa fe88 	bl	8000290 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4613      	mov	r3, r2
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	3301      	adds	r3, #1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055a2:	e002      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetSysClockFreq+0x204>)
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3750      	adds	r7, #80	; 0x50
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800
 80055bc:	00f42400 	.word	0x00f42400
 80055c0:	007a1200 	.word	0x007a1200

080055c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055e0:	f7ff fff0 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	0a9b      	lsrs	r3, r3, #10
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4903      	ldr	r1, [pc, #12]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40023800 	.word	0x40023800
 8005600:	0800c684 	.word	0x0800c684

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005608:	f7ff ffdc 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	0b5b      	lsrs	r3, r3, #13
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40023800 	.word	0x40023800
 8005628:	0800c684 	.word	0x0800c684

0800562c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	220f      	movs	r2, #15
 800563a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800563c:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_RCC_GetClockConfig+0x5c>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0203 	and.w	r2, r3, #3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <HAL_RCC_GetClockConfig+0x5c>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_RCC_GetClockConfig+0x5c>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_GetClockConfig+0x5c>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	08db      	lsrs	r3, r3, #3
 8005666:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800566e:	4b07      	ldr	r3, [pc, #28]	; (800568c <HAL_RCC_GetClockConfig+0x60>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	40023c00 	.word	0x40023c00

08005690 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e025      	b.n	80056f0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fc fd7b 	bl	80021b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f002 f92b 	bl	800792c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	f002 f980 	bl	80079e6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e07b      	b.n	8005802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d108      	bne.n	8005724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571a:	d009      	beq.n	8005730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	61da      	str	r2, [r3, #28]
 8005722:	e005      	b.n	8005730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fc fb98 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0104 	and.w	r1, r3, #4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0210 	and.w	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_SPI_Transmit+0x22>
 8005828:	2302      	movs	r3, #2
 800582a:	e126      	b.n	8005a7a <HAL_SPI_Transmit+0x270>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005834:	f7fc fe28 	bl	8002488 <HAL_GetTick>
 8005838:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800584e:	e10b      	b.n	8005a68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x52>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005860:	e102      	b.n	8005a68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2203      	movs	r2, #3
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a8:	d10f      	bne.n	80058ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d007      	beq.n	80058e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f0:	d14b      	bne.n	800598a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Transmit+0xf6>
 80058fa:	8afb      	ldrh	r3, [r7, #22]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d13e      	bne.n	800597e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	1c9a      	adds	r2, r3, #2
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005924:	e02b      	b.n	800597e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d112      	bne.n	800595a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	; 0x36
 8005958:	e011      	b.n	800597e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595a:	f7fc fd95 	bl	8002488 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d803      	bhi.n	8005972 <HAL_SPI_Transmit+0x168>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d102      	bne.n	8005978 <HAL_SPI_Transmit+0x16e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800597c:	e074      	b.n	8005a68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ce      	bne.n	8005926 <HAL_SPI_Transmit+0x11c>
 8005988:	e04c      	b.n	8005a24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Transmit+0x18e>
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d140      	bne.n	8005a1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059be:	e02c      	b.n	8005a1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d113      	bne.n	80059f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80059f4:	e011      	b.n	8005a1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f6:	f7fc fd47 	bl	8002488 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d803      	bhi.n	8005a0e <HAL_SPI_Transmit+0x204>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a0c:	d102      	bne.n	8005a14 <HAL_SPI_Transmit+0x20a>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a18:	e026      	b.n	8005a68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1cd      	bne.n	80059c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f8b3 	bl	8005b94 <SPI_EndRxTxTransaction>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e000      	b.n	8005a68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3720      	adds	r7, #32
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a94:	f7fc fcf8 	bl	8002488 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aa4:	f7fc fcf0 	bl	8002488 <HAL_GetTick>
 8005aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	015b      	lsls	r3, r3, #5
 8005ab0:	0d1b      	lsrs	r3, r3, #20
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aba:	e054      	b.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac2:	d050      	beq.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac4:	f7fc fce0 	bl	8002488 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d902      	bls.n	8005ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d13d      	bne.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af2:	d111      	bne.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afc:	d004      	beq.n	8005b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b06:	d107      	bne.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b20:	d10f      	bne.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e017      	b.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d19b      	bne.n	8005abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000000 	.word	0x20000000

08005b94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <SPI_EndRxTxTransaction+0x7c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <SPI_EndRxTxTransaction+0x80>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	0d5b      	lsrs	r3, r3, #21
 8005bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bbe:	d112      	bne.n	8005be6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff5a 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f043 0220 	orr.w	r2, r3, #32
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e00f      	b.n	8005c06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d0f2      	beq.n	8005be6 <SPI_EndRxTxTransaction+0x52>
 8005c00:	e000      	b.n	8005c04 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c02:	bf00      	nop
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000000 	.word	0x20000000
 8005c14:	165e9f81 	.word	0x165e9f81

08005c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e041      	b.n	8005cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fc f966 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fb5e 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04e      	b.n	8005d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d01d      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d111      	bne.n	8005d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d010      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	e007      	b.n	8005d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800

08005d98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d855      	bhi.n	8005e58 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005e59 	.word	0x08005e59
 8005dbc:	08005e59 	.word	0x08005e59
 8005dc0:	08005e59 	.word	0x08005e59
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e59 	.word	0x08005e59
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e59 	.word	0x08005e59
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e59 	.word	0x08005e59
 8005de0:	08005e59 	.word	0x08005e59
 8005de4:	08005e3d 	.word	0x08005e3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005df6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fd8f 	bl	8002920 <HAL_DMA_Abort_IT>
      break;
 8005e02:	e02c      	b.n	8005e5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fc fd81 	bl	8002920 <HAL_DMA_Abort_IT>
      break;
 8005e1e:	e01e      	b.n	8005e5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fc fd73 	bl	8002920 <HAL_DMA_Abort_IT>
      break;
 8005e3a:	e010      	b.n	8005e5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fc fd65 	bl	8002920 <HAL_DMA_Abort_IT>
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d161      	bne.n	8005f28 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fb8d 	bl	800658c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2f      	ldr	r2, [pc, #188]	; (8005f34 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIM_PWM_Stop_DMA+0xee>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d017      	beq.n	8005ec0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a1a      	ldr	r2, [r3, #32]
 8005ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efe:	e013      	b.n	8005f28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d104      	bne.n	8005f10 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0e:	e00b      	b.n	8005f28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d104      	bne.n	8005f20 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1e:	e003      	b.n	8005f28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0202 	mvn.w	r2, #2
 8005f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9b5 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9a7 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb fe3d 	bl	8001c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0204 	mvn.w	r2, #4
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f98b 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f97d 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fb fe13 	bl	8001c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0208 	mvn.w	r2, #8
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2204      	movs	r2, #4
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f961 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f953 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fb fde9 	bl	8001c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0210 	mvn.w	r2, #16
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2208      	movs	r2, #8
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f937 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f929 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fb fdbf 	bl	8001c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0201 	mvn.w	r2, #1
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fb fc7c 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fafc 	bl	80066e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006104:	2b40      	cmp	r3, #64	; 0x40
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8f5 	bl	8006302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b20      	cmp	r3, #32
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b20      	cmp	r3, #32
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0220 	mvn.w	r2, #32
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fac6 	bl	80066d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIM_ConfigClockSource+0x1c>
 8006164:	2302      	movs	r3, #2
 8006166:	e0b4      	b.n	80062d2 <HAL_TIM_ConfigClockSource+0x186>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a0:	d03e      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0xd4>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	f200 8087 	bhi.w	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	f000 8086 	beq.w	80062be <HAL_TIM_ConfigClockSource+0x172>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d87f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d01a      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0xa6>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d87b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061c0:	2b60      	cmp	r3, #96	; 0x60
 80061c2:	d050      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x11a>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d877      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061c8:	2b50      	cmp	r3, #80	; 0x50
 80061ca:	d03c      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xfa>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d873      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d058      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x13a>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d86f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061d8:	2b30      	cmp	r3, #48	; 0x30
 80061da:	d064      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15a>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d86b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d060      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15a>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d867      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15a>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d05a      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15a>
 80061f0:	e062      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f000 f9a3 	bl	800654c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	609a      	str	r2, [r3, #8]
      break;
 800621e:	e04f      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6899      	ldr	r1, [r3, #8]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f000 f98c 	bl	800654c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006242:	609a      	str	r2, [r3, #8]
      break;
 8006244:	e03c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6859      	ldr	r1, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	461a      	mov	r2, r3
 8006254:	f000 f900 	bl	8006458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2150      	movs	r1, #80	; 0x50
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f959 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8006264:	e02c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	f000 f91f 	bl	80064b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2160      	movs	r1, #96	; 0x60
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f949 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8006284:	e01c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	461a      	mov	r2, r3
 8006294:	f000 f8e0 	bl	8006458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f939 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 80062a4:	e00c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f000 f930 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 80062b6:	e003      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      break;
 80062bc:	e000      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <TIM_Base_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_Base_SetConfig+0x128>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <TIM_Base_SetConfig+0x114>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40001800 	.word	0x40001800
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40002000 	.word	0x40002000

08006458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 030a 	bic.w	r3, r3, #10
 8006494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0210 	bic.w	r2, r3, #16
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	f043 0307 	orr.w	r3, r3, #7
 8006538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	431a      	orrs	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2201      	movs	r2, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	401a      	ands	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e05a      	b.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d01d      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1b      	ldr	r2, [pc, #108]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1a      	ldr	r2, [pc, #104]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10c      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40010400 	.word	0x40010400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40001800 	.word	0x40001800

080066d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e03f      	b.n	800678a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb fc66 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	; 0x24
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fe81 	bl	8007444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b08a      	sub	sp, #40	; 0x28
 8006796:	af02      	add	r7, sp, #8
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d17c      	bne.n	80068ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_UART_Transmit+0x2c>
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e075      	b.n	80068ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit+0x3e>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e06e      	b.n	80068ae <HAL_UART_Transmit+0x11c>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2221      	movs	r2, #33	; 0x21
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067e6:	f7fb fe4f 	bl	8002488 <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006800:	d108      	bne.n	8006814 <HAL_UART_Transmit+0x82>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e003      	b.n	800681c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006824:	e02a      	b.n	800687c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fbc1 	bl	8006fb8 <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e036      	b.n	80068ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	3302      	adds	r3, #2
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e007      	b.n	800686e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1cf      	bne.n	8006826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2200      	movs	r2, #0
 800688e:	2140      	movs	r1, #64	; 0x40
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fb91 	bl	8006fb8 <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08a      	sub	sp, #40	; 0x28
 80068ba:	af02      	add	r7, sp, #8
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	f040 808c 	bne.w	80069f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Receive+0x2e>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e084      	b.n	80069f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Receive+0x40>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e07d      	b.n	80069f2 <HAL_UART_Receive+0x13c>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2222      	movs	r2, #34	; 0x22
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006912:	f7fb fdb9 	bl	8002488 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d108      	bne.n	8006940 <HAL_UART_Receive+0x8a>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e003      	b.n	8006948 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006950:	e043      	b.n	80069da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2200      	movs	r2, #0
 800695a:	2120      	movs	r1, #32
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fb2b 	bl	8006fb8 <UART_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e042      	b.n	80069f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10c      	bne.n	800698c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	b29a      	uxth	r2, r3
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	3302      	adds	r3, #2
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e01f      	b.n	80069cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d007      	beq.n	80069a6 <HAL_UART_Receive+0xf0>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <HAL_UART_Receive+0xfe>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e008      	b.n	80069c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1b6      	bne.n	8006952 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d11d      	bne.n	8006a50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Receive_IT+0x26>
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e016      	b.n	8006a52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_UART_Receive_IT+0x38>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e00f      	b.n	8006a52 <HAL_UART_Receive_IT+0x58>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	461a      	mov	r2, r3
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fb24 	bl	8007094 <UART_Start_Receive_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b0ba      	sub	sp, #232	; 0xe8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x66>
 8006aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fc07 	bl	80072ce <UART_Receive_IT>
      return;
 8006ac0:	e256      	b.n	8006f70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80de 	beq.w	8006c88 <HAL_UART_IRQHandler+0x22c>
 8006acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80d1 	beq.w	8006c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_UART_IRQHandler+0xae>
 8006af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f043 0201 	orr.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <HAL_UART_IRQHandler+0xd2>
 8006b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f043 0202 	orr.w	r2, r3, #2
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_UART_IRQHandler+0xf6>
 8006b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f043 0204 	orr.w	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d011      	beq.n	8006b82 <HAL_UART_IRQHandler+0x126>
 8006b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f043 0208 	orr.w	r2, r3, #8
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 81ed 	beq.w	8006f66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_UART_IRQHandler+0x14e>
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fb92 	bl	80072ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2301      	moveq	r3, #1
 8006bba:	2300      	movne	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d103      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x17a>
 8006bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d04f      	beq.n	8006c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa9a 	bl	8007110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d141      	bne.n	8006c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3314      	adds	r3, #20
 8006bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1d9      	bne.n	8006bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d013      	beq.n	8006c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	4a7d      	ldr	r2, [pc, #500]	; (8006e38 <HAL_UART_IRQHandler+0x3dc>)
 8006c44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fb fe68 	bl	8002920 <HAL_DMA_Abort_IT>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e00e      	b.n	8006c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f990 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e00a      	b.n	8006c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f98c 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e006      	b.n	8006c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f988 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c82:	e170      	b.n	8006f66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	bf00      	nop
    return;
 8006c86:	e16e      	b.n	8006f66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f040 814a 	bne.w	8006f26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8143 	beq.w	8006f26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 813c 	beq.w	8006f26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	f040 80b4 	bne.w	8006e3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8140 	beq.w	8006f6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	f080 8139 	bcs.w	8006f6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	f000 8088 	beq.w	8006e1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1d9      	bne.n	8006d0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3314      	adds	r3, #20
 8006d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e1      	bne.n	8006d5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3314      	adds	r3, #20
 8006db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e3      	bne.n	8006d96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dee:	f023 0310 	bic.w	r3, r3, #16
 8006df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e00:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e3      	bne.n	8006ddc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fb fd11 	bl	8002840 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f8b6 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e34:	e099      	b.n	8006f6a <HAL_UART_IRQHandler+0x50e>
 8006e36:	bf00      	nop
 8006e38:	080071d7 	.word	0x080071d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 808b 	beq.w	8006f6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8086 	beq.w	8006f6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e86:	647a      	str	r2, [r7, #68]	; 0x44
 8006e88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e3      	bne.n	8006e62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3314      	adds	r3, #20
 8006eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	69b9      	ldr	r1, [r7, #24]
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	617b      	str	r3, [r7, #20]
   return(result);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e3      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f83e 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f24:	e023      	b.n	8006f6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <HAL_UART_IRQHandler+0x4ea>
 8006f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f95d 	bl	80071fe <UART_Transmit_IT>
    return;
 8006f44:	e014      	b.n	8006f70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00e      	beq.n	8006f70 <HAL_UART_IRQHandler+0x514>
 8006f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f99d 	bl	800729e <UART_EndTransmit_IT>
    return;
 8006f64:	e004      	b.n	8006f70 <HAL_UART_IRQHandler+0x514>
    return;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <HAL_UART_IRQHandler+0x514>
      return;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <HAL_UART_IRQHandler+0x514>
      return;
 8006f6e:	bf00      	nop
  }
}
 8006f70:	37e8      	adds	r7, #232	; 0xe8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop

08006f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b090      	sub	sp, #64	; 0x40
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc8:	e050      	b.n	800706c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd0:	d04c      	beq.n	800706c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fd8:	f7fb fa56 	bl	8002488 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d241      	bcs.n	800706c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007008:	637a      	str	r2, [r7, #52]	; 0x34
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800700e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e5      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703c:	623a      	str	r2, [r7, #32]
 800703e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69f9      	ldr	r1, [r7, #28]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	61bb      	str	r3, [r7, #24]
   return(result);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e5      	bne.n	800701c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e00f      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	429a      	cmp	r2, r3
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	429a      	cmp	r2, r3
 8007088:	d09f      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3740      	adds	r7, #64	; 0x40
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2222      	movs	r2, #34	; 0x22
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0220 	orr.w	r2, r2, #32
 8007100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b095      	sub	sp, #84	; 0x54
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007138:	643a      	str	r2, [r7, #64]	; 0x40
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	61fb      	str	r3, [r7, #28]
   return(result);
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3314      	adds	r3, #20
 800716a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	2b01      	cmp	r3, #1
 8007186:	d119      	bne.n	80071bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	60bb      	str	r3, [r7, #8]
   return(result);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0310 	bic.w	r3, r3, #16
 800719e:	647b      	str	r3, [r7, #68]	; 0x44
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	330c      	adds	r3, #12
 80071a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a8:	61ba      	str	r2, [r7, #24]
 80071aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6979      	ldr	r1, [r7, #20]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	613b      	str	r3, [r7, #16]
   return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e5      	bne.n	8007188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071ca:	bf00      	nop
 80071cc:	3754      	adds	r7, #84	; 0x54
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff fecb 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b21      	cmp	r3, #33	; 0x21
 8007210:	d13e      	bne.n	8007290 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	d114      	bne.n	8007246 <UART_Transmit_IT+0x48>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d110      	bne.n	8007246 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007238:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	1c9a      	adds	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	621a      	str	r2, [r3, #32]
 8007244:	e008      	b.n	8007258 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	1c59      	adds	r1, r3, #1
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6211      	str	r1, [r2, #32]
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29b      	uxth	r3, r3
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4619      	mov	r1, r3
 8007266:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10f      	bne.n	800728c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800727a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800728a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e000      	b.n	8007292 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007290:	2302      	movs	r3, #2
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fe5a 	bl	8006f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b08c      	sub	sp, #48	; 0x30
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b22      	cmp	r3, #34	; 0x22
 80072e0:	f040 80ab 	bne.w	800743a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ec:	d117      	bne.n	800731e <UART_Receive_IT+0x50>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d113      	bne.n	800731e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730c:	b29a      	uxth	r2, r3
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	629a      	str	r2, [r3, #40]	; 0x28
 800731c:	e026      	b.n	800736c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007330:	d007      	beq.n	8007342 <UART_Receive_IT+0x74>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <UART_Receive_IT+0x82>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	e008      	b.n	8007362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735c:	b2da      	uxtb	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4619      	mov	r1, r3
 800737a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800737c:	2b00      	cmp	r3, #0
 800737e:	d15a      	bne.n	8007436 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0220 	bic.w	r2, r2, #32
 800738e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800739e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695a      	ldr	r2, [r3, #20]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d135      	bne.n	800742c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f023 0310 	bic.w	r3, r3, #16
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	623a      	str	r2, [r7, #32]
 80073e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d10a      	bne.n	800741e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fdbb 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
 800742a:	e002      	b.n	8007432 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7f9 fd87 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	e002      	b.n	800743c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007448:	b0c0      	sub	sp, #256	; 0x100
 800744a:	af00      	add	r7, sp, #0
 800744c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	68d9      	ldr	r1, [r3, #12]
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	ea40 0301 	orr.w	r3, r0, r1
 800746c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	431a      	orrs	r2, r3
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	431a      	orrs	r2, r3
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800749c:	f021 010c 	bic.w	r1, r1, #12
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074aa:	430b      	orrs	r3, r1
 80074ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	6999      	ldr	r1, [r3, #24]
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	ea40 0301 	orr.w	r3, r0, r1
 80074ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b8f      	ldr	r3, [pc, #572]	; (8007710 <UART_SetConfig+0x2cc>)
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d005      	beq.n	80074e4 <UART_SetConfig+0xa0>
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b8d      	ldr	r3, [pc, #564]	; (8007714 <UART_SetConfig+0x2d0>)
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d104      	bne.n	80074ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074e4:	f7fe f88e 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 80074e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074ec:	e003      	b.n	80074f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ee:	f7fe f875 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80074f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007500:	f040 810c 	bne.w	800771c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007508:	2200      	movs	r2, #0
 800750a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800750e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	1891      	adds	r1, r2, r2
 800751c:	65b9      	str	r1, [r7, #88]	; 0x58
 800751e:	415b      	adcs	r3, r3
 8007520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007526:	4621      	mov	r1, r4
 8007528:	eb12 0801 	adds.w	r8, r2, r1
 800752c:	4629      	mov	r1, r5
 800752e:	eb43 0901 	adc.w	r9, r3, r1
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800753e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007546:	4690      	mov	r8, r2
 8007548:	4699      	mov	r9, r3
 800754a:	4623      	mov	r3, r4
 800754c:	eb18 0303 	adds.w	r3, r8, r3
 8007550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007554:	462b      	mov	r3, r5
 8007556:	eb49 0303 	adc.w	r3, r9, r3
 800755a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800756a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800756e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007572:	460b      	mov	r3, r1
 8007574:	18db      	adds	r3, r3, r3
 8007576:	653b      	str	r3, [r7, #80]	; 0x50
 8007578:	4613      	mov	r3, r2
 800757a:	eb42 0303 	adc.w	r3, r2, r3
 800757e:	657b      	str	r3, [r7, #84]	; 0x54
 8007580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007588:	f7f8 fe82 	bl	8000290 <__aeabi_uldivmod>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <UART_SetConfig+0x2d4>)
 8007592:	fba3 2302 	umull	r2, r3, r3, r2
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	011c      	lsls	r4, r3, #4
 800759a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075ac:	4642      	mov	r2, r8
 80075ae:	464b      	mov	r3, r9
 80075b0:	1891      	adds	r1, r2, r2
 80075b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80075b4:	415b      	adcs	r3, r3
 80075b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075bc:	4641      	mov	r1, r8
 80075be:	eb12 0a01 	adds.w	sl, r2, r1
 80075c2:	4649      	mov	r1, r9
 80075c4:	eb43 0b01 	adc.w	fp, r3, r1
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075dc:	4692      	mov	sl, r2
 80075de:	469b      	mov	fp, r3
 80075e0:	4643      	mov	r3, r8
 80075e2:	eb1a 0303 	adds.w	r3, sl, r3
 80075e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075ea:	464b      	mov	r3, r9
 80075ec:	eb4b 0303 	adc.w	r3, fp, r3
 80075f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007600:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007608:	460b      	mov	r3, r1
 800760a:	18db      	adds	r3, r3, r3
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	4613      	mov	r3, r2
 8007610:	eb42 0303 	adc.w	r3, r2, r3
 8007614:	647b      	str	r3, [r7, #68]	; 0x44
 8007616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800761a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800761e:	f7f8 fe37 	bl	8000290 <__aeabi_uldivmod>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4611      	mov	r1, r2
 8007628:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <UART_SetConfig+0x2d4>)
 800762a:	fba3 2301 	umull	r2, r3, r3, r1
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2264      	movs	r2, #100	; 0x64
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	1acb      	subs	r3, r1, r3
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <UART_SetConfig+0x2d4>)
 8007640:	fba3 2302 	umull	r2, r3, r3, r2
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800764c:	441c      	add	r4, r3
 800764e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007652:	2200      	movs	r2, #0
 8007654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800765c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	1891      	adds	r1, r2, r2
 8007666:	63b9      	str	r1, [r7, #56]	; 0x38
 8007668:	415b      	adcs	r3, r3
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800766c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007670:	4641      	mov	r1, r8
 8007672:	1851      	adds	r1, r2, r1
 8007674:	6339      	str	r1, [r7, #48]	; 0x30
 8007676:	4649      	mov	r1, r9
 8007678:	414b      	adcs	r3, r1
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007688:	4659      	mov	r1, fp
 800768a:	00cb      	lsls	r3, r1, #3
 800768c:	4651      	mov	r1, sl
 800768e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007692:	4651      	mov	r1, sl
 8007694:	00ca      	lsls	r2, r1, #3
 8007696:	4610      	mov	r0, r2
 8007698:	4619      	mov	r1, r3
 800769a:	4603      	mov	r3, r0
 800769c:	4642      	mov	r2, r8
 800769e:	189b      	adds	r3, r3, r2
 80076a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a4:	464b      	mov	r3, r9
 80076a6:	460a      	mov	r2, r1
 80076a8:	eb42 0303 	adc.w	r3, r2, r3
 80076ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076c4:	460b      	mov	r3, r1
 80076c6:	18db      	adds	r3, r3, r3
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ca:	4613      	mov	r3, r2
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076da:	f7f8 fdd9 	bl	8000290 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <UART_SetConfig+0x2d4>)
 80076e4:	fba3 1302 	umull	r1, r3, r3, r2
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	2164      	movs	r1, #100	; 0x64
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	3332      	adds	r3, #50	; 0x32
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <UART_SetConfig+0x2d4>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	f003 0207 	and.w	r2, r3, #7
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4422      	add	r2, r4
 800770a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800770c:	e105      	b.n	800791a <UART_SetConfig+0x4d6>
 800770e:	bf00      	nop
 8007710:	40011000 	.word	0x40011000
 8007714:	40011400 	.word	0x40011400
 8007718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800771c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007720:	2200      	movs	r2, #0
 8007722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007726:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800772a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800772e:	4642      	mov	r2, r8
 8007730:	464b      	mov	r3, r9
 8007732:	1891      	adds	r1, r2, r2
 8007734:	6239      	str	r1, [r7, #32]
 8007736:	415b      	adcs	r3, r3
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800773e:	4641      	mov	r1, r8
 8007740:	1854      	adds	r4, r2, r1
 8007742:	4649      	mov	r1, r9
 8007744:	eb43 0501 	adc.w	r5, r3, r1
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	00eb      	lsls	r3, r5, #3
 8007752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007756:	00e2      	lsls	r2, r4, #3
 8007758:	4614      	mov	r4, r2
 800775a:	461d      	mov	r5, r3
 800775c:	4643      	mov	r3, r8
 800775e:	18e3      	adds	r3, r4, r3
 8007760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007764:	464b      	mov	r3, r9
 8007766:	eb45 0303 	adc.w	r3, r5, r3
 800776a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800777a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800778a:	4629      	mov	r1, r5
 800778c:	008b      	lsls	r3, r1, #2
 800778e:	4621      	mov	r1, r4
 8007790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007794:	4621      	mov	r1, r4
 8007796:	008a      	lsls	r2, r1, #2
 8007798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800779c:	f7f8 fd78 	bl	8000290 <__aeabi_uldivmod>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4b60      	ldr	r3, [pc, #384]	; (8007928 <UART_SetConfig+0x4e4>)
 80077a6:	fba3 2302 	umull	r2, r3, r3, r2
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	011c      	lsls	r4, r3, #4
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077c0:	4642      	mov	r2, r8
 80077c2:	464b      	mov	r3, r9
 80077c4:	1891      	adds	r1, r2, r2
 80077c6:	61b9      	str	r1, [r7, #24]
 80077c8:	415b      	adcs	r3, r3
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077d0:	4641      	mov	r1, r8
 80077d2:	1851      	adds	r1, r2, r1
 80077d4:	6139      	str	r1, [r7, #16]
 80077d6:	4649      	mov	r1, r9
 80077d8:	414b      	adcs	r3, r1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077e8:	4659      	mov	r1, fp
 80077ea:	00cb      	lsls	r3, r1, #3
 80077ec:	4651      	mov	r1, sl
 80077ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077f2:	4651      	mov	r1, sl
 80077f4:	00ca      	lsls	r2, r1, #3
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	4642      	mov	r2, r8
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007804:	464b      	mov	r3, r9
 8007806:	460a      	mov	r2, r1
 8007808:	eb42 0303 	adc.w	r3, r2, r3
 800780c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	67bb      	str	r3, [r7, #120]	; 0x78
 800781a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007828:	4649      	mov	r1, r9
 800782a:	008b      	lsls	r3, r1, #2
 800782c:	4641      	mov	r1, r8
 800782e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007832:	4641      	mov	r1, r8
 8007834:	008a      	lsls	r2, r1, #2
 8007836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800783a:	f7f8 fd29 	bl	8000290 <__aeabi_uldivmod>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4b39      	ldr	r3, [pc, #228]	; (8007928 <UART_SetConfig+0x4e4>)
 8007844:	fba3 1302 	umull	r1, r3, r3, r2
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	3332      	adds	r3, #50	; 0x32
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <UART_SetConfig+0x4e4>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007862:	441c      	add	r4, r3
 8007864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007868:	2200      	movs	r2, #0
 800786a:	673b      	str	r3, [r7, #112]	; 0x70
 800786c:	677a      	str	r2, [r7, #116]	; 0x74
 800786e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007872:	4642      	mov	r2, r8
 8007874:	464b      	mov	r3, r9
 8007876:	1891      	adds	r1, r2, r2
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	415b      	adcs	r3, r3
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007882:	4641      	mov	r1, r8
 8007884:	1851      	adds	r1, r2, r1
 8007886:	6039      	str	r1, [r7, #0]
 8007888:	4649      	mov	r1, r9
 800788a:	414b      	adcs	r3, r1
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800789a:	4659      	mov	r1, fp
 800789c:	00cb      	lsls	r3, r1, #3
 800789e:	4651      	mov	r1, sl
 80078a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078a4:	4651      	mov	r1, sl
 80078a6:	00ca      	lsls	r2, r1, #3
 80078a8:	4610      	mov	r0, r2
 80078aa:	4619      	mov	r1, r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	4642      	mov	r2, r8
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078b4:	464b      	mov	r3, r9
 80078b6:	460a      	mov	r2, r1
 80078b8:	eb42 0303 	adc.w	r3, r2, r3
 80078bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	663b      	str	r3, [r7, #96]	; 0x60
 80078c8:	667a      	str	r2, [r7, #100]	; 0x64
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078d6:	4649      	mov	r1, r9
 80078d8:	008b      	lsls	r3, r1, #2
 80078da:	4641      	mov	r1, r8
 80078dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e0:	4641      	mov	r1, r8
 80078e2:	008a      	lsls	r2, r1, #2
 80078e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078e8:	f7f8 fcd2 	bl	8000290 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <UART_SetConfig+0x4e4>)
 80078f2:	fba3 1302 	umull	r1, r3, r3, r2
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	2164      	movs	r1, #100	; 0x64
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	3332      	adds	r3, #50	; 0x32
 8007904:	4a08      	ldr	r2, [pc, #32]	; (8007928 <UART_SetConfig+0x4e4>)
 8007906:	fba2 2303 	umull	r2, r3, r2, r3
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4422      	add	r2, r4
 8007918:	609a      	str	r2, [r3, #8]
}
 800791a:	bf00      	nop
 800791c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007920:	46bd      	mov	sp, r7
 8007922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007926:	bf00      	nop
 8007928:	51eb851f 	.word	0x51eb851f

0800792c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d123      	bne.n	8007986 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007946:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	6851      	ldr	r1, [r2, #4]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	6892      	ldr	r2, [r2, #8]
 8007952:	4311      	orrs	r1, r2
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	68d2      	ldr	r2, [r2, #12]
 8007958:	4311      	orrs	r1, r2
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	6912      	ldr	r2, [r2, #16]
 800795e:	4311      	orrs	r1, r2
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	6952      	ldr	r2, [r2, #20]
 8007964:	4311      	orrs	r1, r2
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	6992      	ldr	r2, [r2, #24]
 800796a:	4311      	orrs	r1, r2
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	69d2      	ldr	r2, [r2, #28]
 8007970:	4311      	orrs	r1, r2
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	6a12      	ldr	r2, [r2, #32]
 8007976:	4311      	orrs	r1, r2
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800797c:	430a      	orrs	r2, r1
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e028      	b.n	80079d8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	69d9      	ldr	r1, [r3, #28]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	4319      	orrs	r1, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	430b      	orrs	r3, r1
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	6851      	ldr	r1, [r2, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	6892      	ldr	r2, [r2, #8]
 80079b8:	4311      	orrs	r1, r2
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	68d2      	ldr	r2, [r2, #12]
 80079be:	4311      	orrs	r1, r2
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	6912      	ldr	r2, [r2, #16]
 80079c4:	4311      	orrs	r1, r2
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	6952      	ldr	r2, [r2, #20]
 80079ca:	4311      	orrs	r1, r2
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	6992      	ldr	r2, [r2, #24]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d128      	bne.n	8007a4a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	1e59      	subs	r1, r3, #1
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	4319      	orrs	r1, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	4319      	orrs	r1, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	031b      	lsls	r3, r3, #12
 8007a22:	4319      	orrs	r1, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	4319      	orrs	r1, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	051b      	lsls	r3, r3, #20
 8007a36:	4319      	orrs	r1, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	430b      	orrs	r3, r1
 8007a42:	431a      	orrs	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]
 8007a48:	e02f      	b.n	8007aaa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	68d2      	ldr	r2, [r2, #12]
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	0311      	lsls	r1, r2, #12
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	6952      	ldr	r2, [r2, #20]
 8007a62:	3a01      	subs	r2, #1
 8007a64:	0512      	lsls	r2, r2, #20
 8007a66:	430a      	orrs	r2, r1
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	1e59      	subs	r1, r3, #1
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	4319      	orrs	r1, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	4319      	orrs	r1, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	4319      	orrs	r1, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	061b      	lsls	r3, r3, #24
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ab8:	b084      	sub	sp, #16
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	f107 001c 	add.w	r0, r7, #28
 8007ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d122      	bne.n	8007b16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d105      	bne.n	8007b0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9c0 	bl	8007e90 <USB_CoreReset>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
 8007b14:	e01a      	b.n	8007b4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9b4 	bl	8007e90 <USB_CoreReset>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b3e:	e005      	b.n	8007b4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10b      	bne.n	8007b6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f043 0206 	orr.w	r2, r3, #6
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b76:	b004      	add	sp, #16
 8007b78:	4770      	bx	lr

08007b7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f043 0201 	orr.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 0201 	bic.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d115      	bne.n	8007c0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bec:	2001      	movs	r0, #1
 8007bee:	f7fa fc57 	bl	80024a0 <HAL_Delay>
      ms++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f93a 	bl	8007e72 <USB_GetMode>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d01e      	beq.n	8007c42 <USB_SetCurrentMode+0x84>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b31      	cmp	r3, #49	; 0x31
 8007c08:	d9f0      	bls.n	8007bec <USB_SetCurrentMode+0x2e>
 8007c0a:	e01a      	b.n	8007c42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d115      	bne.n	8007c3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f7fa fc3e 	bl	80024a0 <HAL_Delay>
      ms++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f921 	bl	8007e72 <USB_GetMode>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <USB_SetCurrentMode+0x84>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b31      	cmp	r3, #49	; 0x31
 8007c3a:	d9f0      	bls.n	8007c1e <USB_SetCurrentMode+0x60>
 8007c3c:	e001      	b.n	8007c42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e005      	b.n	8007c4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b32      	cmp	r3, #50	; 0x32
 8007c46:	d101      	bne.n	8007c4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a13      	ldr	r2, [pc, #76]	; (8007cbc <USB_FlushTxFifo+0x64>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e01b      	b.n	8007cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	daf2      	bge.n	8007c66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	019b      	lsls	r3, r3, #6
 8007c88:	f043 0220 	orr.w	r2, r3, #32
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <USB_FlushTxFifo+0x64>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d901      	bls.n	8007ca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e006      	b.n	8007cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d0f0      	beq.n	8007c90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	00030d40 	.word	0x00030d40

08007cc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <USB_FlushRxFifo+0x5c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d901      	bls.n	8007cde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e018      	b.n	8007d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	daf2      	bge.n	8007ccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2210      	movs	r2, #16
 8007cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a08      	ldr	r2, [pc, #32]	; (8007d1c <USB_FlushRxFifo+0x5c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d901      	bls.n	8007d02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e006      	b.n	8007d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0310 	and.w	r3, r3, #16
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d0f0      	beq.n	8007cf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	00030d40 	.word	0x00030d40

08007d20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	460b      	mov	r3, r1
 8007d30:	71fb      	strb	r3, [r7, #7]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d123      	bne.n	8007d8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d46:	88bb      	ldrh	r3, [r7, #4]
 8007d48:	3303      	adds	r3, #3
 8007d4a:	089b      	lsrs	r3, r3, #2
 8007d4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e018      	b.n	8007d86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	031a      	lsls	r2, r3, #12
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d60:	461a      	mov	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3301      	adds	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d3e2      	bcc.n	8007d54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3724      	adds	r7, #36	; 0x24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b08b      	sub	sp, #44	; 0x2c
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	089b      	lsrs	r3, r3, #2
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	e014      	b.n	8007df2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	3301      	adds	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	3301      	adds	r3, #1
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	3301      	adds	r3, #1
 8007df0:	623b      	str	r3, [r7, #32]
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d3e6      	bcc.n	8007dc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dfa:	8bfb      	ldrh	r3, [r7, #30]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f107 0310 	add.w	r3, r7, #16
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	701a      	strb	r2, [r3, #0]
      i++;
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	3301      	adds	r3, #1
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e32:	8bfb      	ldrh	r3, [r7, #30]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e38:	8bfb      	ldrh	r3, [r7, #30]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ea      	bne.n	8007e14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	372c      	adds	r7, #44	; 0x2c
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4013      	ands	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e64:	68fb      	ldr	r3, [r7, #12]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <USB_CoreReset+0x64>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d901      	bls.n	8007eae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e01b      	b.n	8007ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	daf2      	bge.n	8007e9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f043 0201 	orr.w	r2, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <USB_CoreReset+0x64>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d901      	bls.n	8007ed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e006      	b.n	8007ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d0f0      	beq.n	8007ec6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	00030d40 	.word	0x00030d40

08007ef8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef8:	b084      	sub	sp, #16
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b086      	sub	sp, #24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d018      	beq.n	8007f80 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d10a      	bne.n	8007f6a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f62:	f043 0304 	orr.w	r3, r3, #4
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e014      	b.n	8007f94 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f78:	f023 0304 	bic.w	r3, r3, #4
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	e009      	b.n	8007f94 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f8e:	f023 0304 	bic.w	r3, r3, #4
 8007f92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f94:	2110      	movs	r1, #16
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fe5e 	bl	8007c58 <USB_FlushTxFifo>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff fe8a 	bl	8007cc0 <USB_FlushRxFifo>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	e015      	b.n	8007fe8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fdc:	461a      	mov	r2, r3
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	613b      	str	r3, [r7, #16]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d3e5      	bcc.n	8007fbc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ffc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008010:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <USB_HostInit+0x16c>)
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a13      	ldr	r2, [pc, #76]	; (8008068 <USB_HostInit+0x170>)
 800801c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008020:	e009      	b.n	8008036 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2280      	movs	r2, #128	; 0x80
 8008026:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a10      	ldr	r2, [pc, #64]	; (800806c <USB_HostInit+0x174>)
 800802c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <USB_HostInit+0x178>)
 8008032:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f043 0210 	orr.w	r2, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	4b09      	ldr	r3, [pc, #36]	; (8008074 <USB_HostInit+0x17c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008060:	b004      	add	sp, #16
 8008062:	4770      	bx	lr
 8008064:	01000200 	.word	0x01000200
 8008068:	00e00300 	.word	0x00e00300
 800806c:	00600080 	.word	0x00600080
 8008070:	004000e0 	.word	0x004000e0
 8008074:	a3200008 	.word	0xa3200008

08008078 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080b0:	4313      	orrs	r3, r2
 80080b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d107      	bne.n	80080ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c0:	461a      	mov	r2, r3
 80080c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080c6:	6053      	str	r3, [r2, #4]
 80080c8:	e009      	b.n	80080de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d106      	bne.n	80080de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080d6:	461a      	mov	r2, r3
 80080d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80080dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800810c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800811c:	2064      	movs	r0, #100	; 0x64
 800811e:	f7fa f9bf 	bl	80024a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800812a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800812e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008130:	200a      	movs	r0, #10
 8008132:	f7fa f9b5 	bl	80024a0 <HAL_Delay>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008164:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <USB_DriveVbus+0x44>
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d106      	bne.n	8008184 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800817e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008182:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818e:	d109      	bne.n	80081a4 <USB_DriveVbus+0x64>
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800819e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	0c5b      	lsrs	r3, r3, #17
 80081d0:	f003 0303 	and.w	r3, r3, #3
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	b29b      	uxth	r3, r3
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	461a      	mov	r2, r3
 8008212:	4603      	mov	r3, r0
 8008214:	70fb      	strb	r3, [r7, #3]
 8008216:	460b      	mov	r3, r1
 8008218:	70bb      	strb	r3, [r7, #2]
 800821a:	4613      	mov	r3, r2
 800821c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	461a      	mov	r2, r3
 8008234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008238:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800823a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800823e:	2b03      	cmp	r3, #3
 8008240:	d87e      	bhi.n	8008340 <USB_HC_Init+0x13c>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <USB_HC_Init+0x44>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008259 	.word	0x08008259
 800824c:	08008303 	.word	0x08008303
 8008250:	08008259 	.word	0x08008259
 8008254:	080082c5 	.word	0x080082c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	461a      	mov	r2, r3
 8008266:	f240 439d 	movw	r3, #1181	; 0x49d
 800826a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800826c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008270:	2b00      	cmp	r3, #0
 8008272:	da10      	bge.n	8008296 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	440a      	add	r2, r1
 800828a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008292:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008294:	e057      	b.n	8008346 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d051      	beq.n	8008346 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082c0:	60d3      	str	r3, [r2, #12]
      break;
 80082c2:	e040      	b.n	8008346 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d0:	461a      	mov	r2, r3
 80082d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80082d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	da34      	bge.n	800834a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008300:	e023      	b.n	800834a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	4413      	add	r3, r2
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	461a      	mov	r2, r3
 8008310:	f240 2325 	movw	r3, #549	; 0x225
 8008314:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008316:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da17      	bge.n	800834e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	78fa      	ldrb	r2, [r7, #3]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	440a      	add	r2, r1
 8008334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008338:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800833c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800833e:	e006      	b.n	800834e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
      break;
 8008344:	e004      	b.n	8008350 <USB_HC_Init+0x14c>
      break;
 8008346:	bf00      	nop
 8008348:	e002      	b.n	8008350 <USB_HC_Init+0x14c>
      break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <USB_HC_Init+0x14c>
      break;
 800834e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	440a      	add	r2, r1
 8008366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800836a:	f043 0302 	orr.w	r3, r3, #2
 800836e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	f003 030f 	and.w	r3, r3, #15
 800837e:	2101      	movs	r1, #1
 8008380:	fa01 f303 	lsl.w	r3, r1, r3
 8008384:	6939      	ldr	r1, [r7, #16]
 8008386:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800838a:	4313      	orrs	r3, r2
 800838c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800839a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da03      	bge.n	80083aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80083a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	e001      	b.n	80083ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff feff 	bl	80081b2 <USB_GetHostSpeed>
 80083b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80083b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d106      	bne.n	80083cc <USB_HC_Init+0x1c8>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d003      	beq.n	80083cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80083c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	e001      	b.n	80083d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083d0:	787b      	ldrb	r3, [r7, #1]
 80083d2:	059b      	lsls	r3, r3, #22
 80083d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083d8:	78bb      	ldrb	r3, [r7, #2]
 80083da:	02db      	lsls	r3, r3, #11
 80083dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083e6:	049b      	lsls	r3, r3, #18
 80083e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	0159      	lsls	r1, r3, #5
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	440b      	add	r3, r1
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800840c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800840e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008412:	2b03      	cmp	r3, #3
 8008414:	d003      	beq.n	800841e <USB_HC_Init+0x21a>
 8008416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10f      	bne.n	800843e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4413      	add	r3, r2
 8008426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	440a      	add	r2, r1
 8008434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800843c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800843e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	; 0x30
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008464:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846e:	2b00      	cmp	r3, #0
 8008470:	d02d      	beq.n	80084ce <USB_HC_StartXfer+0x86>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	791b      	ldrb	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d129      	bne.n	80084ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d117      	bne.n	80084b0 <USB_HC_StartXfer+0x68>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	79db      	ldrb	r3, [r3, #7]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <USB_HC_StartXfer+0x48>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	79db      	ldrb	r3, [r3, #7]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d10f      	bne.n	80084b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <USB_HC_StartXfer+0x86>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d107      	bne.n	80084ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fa0f 	bl	80088e8 <USB_DoPing>
      return HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e0f8      	b.n	80086c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d018      	beq.n	8008508 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	8912      	ldrh	r2, [r2, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	3b01      	subs	r3, #1
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	8912      	ldrh	r2, [r2, #8]
 80084e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084ee:	8b7b      	ldrh	r3, [r7, #26]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d90b      	bls.n	800850c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084f4:	8b7b      	ldrh	r3, [r7, #26]
 80084f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	8912      	ldrh	r2, [r2, #8]
 80084fe:	fb03 f202 	mul.w	r2, r3, r2
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	611a      	str	r2, [r3, #16]
 8008506:	e001      	b.n	800850c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008508:	2301      	movs	r3, #1
 800850a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	78db      	ldrb	r3, [r3, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d007      	beq.n	8008524 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	8912      	ldrh	r2, [r2, #8]
 800851a:	fb03 f202 	mul.w	r2, r3, r2
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	611a      	str	r2, [r3, #16]
 8008522:	e003      	b.n	800852c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008536:	04d9      	lsls	r1, r3, #19
 8008538:	4b63      	ldr	r3, [pc, #396]	; (80086c8 <USB_HC_StartXfer+0x280>)
 800853a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800853c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7a9b      	ldrb	r3, [r3, #10]
 8008542:	075b      	lsls	r3, r3, #29
 8008544:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008548:	69f9      	ldr	r1, [r7, #28]
 800854a:	0148      	lsls	r0, r1, #5
 800854c:	6a39      	ldr	r1, [r7, #32]
 800854e:	4401      	add	r1, r0
 8008550:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008554:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008556:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d009      	beq.n	8008572 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	68d9      	ldr	r1, [r3, #12]
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	460a      	mov	r2, r1
 8008570:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf0c      	ite	eq
 8008582:	2301      	moveq	r3, #1
 8008584:	2300      	movne	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	6a3a      	ldr	r2, [r7, #32]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	7e7b      	ldrb	r3, [r7, #25]
 80085ba:	075b      	lsls	r3, r3, #29
 80085bc:	69f9      	ldr	r1, [r7, #28]
 80085be:	0148      	lsls	r0, r1, #5
 80085c0:	6a39      	ldr	r1, [r7, #32]
 80085c2:	4401      	add	r1, r0
 80085c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80085c8:	4313      	orrs	r3, r2
 80085ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	78db      	ldrb	r3, [r3, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	e003      	b.n	80085fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008604:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	4413      	add	r3, r2
 800860e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008612:	461a      	mov	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e04e      	b.n	80086c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d149      	bne.n	80086be <USB_HC_StartXfer+0x276>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d045      	beq.n	80086be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	79db      	ldrb	r3, [r3, #7]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d830      	bhi.n	800869c <USB_HC_StartXfer+0x254>
 800863a:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <USB_HC_StartXfer+0x1f8>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008651 	.word	0x08008651
 8008644:	08008675 	.word	0x08008675
 8008648:	08008651 	.word	0x08008651
 800864c:	08008675 	.word	0x08008675
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	3303      	adds	r3, #3
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800865a:	8afa      	ldrh	r2, [r7, #22]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	b29b      	uxth	r3, r3
 8008662:	429a      	cmp	r2, r3
 8008664:	d91c      	bls.n	80086a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	619a      	str	r2, [r3, #24]
        }
        break;
 8008672:	e015      	b.n	80086a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	3303      	adds	r3, #3
 800867a:	089b      	lsrs	r3, r3, #2
 800867c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800867e:	8afa      	ldrh	r2, [r7, #22]
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	b29b      	uxth	r3, r3
 800868a:	429a      	cmp	r2, r3
 800868c:	d90a      	bls.n	80086a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	619a      	str	r2, [r3, #24]
        }
        break;
 800869a:	e003      	b.n	80086a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800869c:	bf00      	nop
 800869e:	e002      	b.n	80086a6 <USB_HC_StartXfer+0x25e>
        break;
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <USB_HC_StartXfer+0x25e>
        break;
 80086a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	68d9      	ldr	r1, [r3, #12]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	785a      	ldrb	r2, [r3, #1]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2000      	movs	r0, #0
 80086b6:	9000      	str	r0, [sp, #0]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff fb31 	bl	8007d20 <USB_WritePacket>
  }

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3728      	adds	r7, #40	; 0x28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	1ff80000 	.word	0x1ff80000

080086cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	b29b      	uxth	r3, r3
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b089      	sub	sp, #36	; 0x24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	0c9b      	lsrs	r3, r3, #18
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	0fdb      	lsrs	r3, r3, #31
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b20      	cmp	r3, #32
 800873c:	d104      	bne.n	8008748 <USB_HC_Halt+0x5a>
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	e0c8      	b.n	80088da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <USB_HC_Halt+0x66>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d163      	bne.n	800881c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	440a      	add	r2, r1
 800876a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008772:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 80ab 	bne.w	80088d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d133      	bne.n	80087f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087da:	d81d      	bhi.n	8008818 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f2:	d0ec      	beq.n	80087ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087f4:	e070      	b.n	80088d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008814:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008816:	e05f      	b.n	80088d8 <USB_HC_Halt+0x1ea>
            break;
 8008818:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800881a:	e05d      	b.n	80088d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d133      	bne.n	80088b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800886a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	440a      	add	r2, r1
 8008882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800888a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008898:	d81d      	bhi.n	80088d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b0:	d0ec      	beq.n	800888c <USB_HC_Halt+0x19e>
 80088b2:	e011      	b.n	80088d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	e000      	b.n	80088d8 <USB_HC_Halt+0x1ea>
          break;
 80088d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3724      	adds	r7, #36	; 0x24
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088fc:	2301      	movs	r3, #1
 80088fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	04da      	lsls	r2, r3, #19
 8008904:	4b15      	ldr	r3, [pc, #84]	; (800895c <USB_DoPing+0x74>)
 8008906:	4013      	ands	r3, r2
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	440a      	add	r2, r1
 8008910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008918:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008930:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008938:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	461a      	mov	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	1ff80000 	.word	0x1ff80000

08008960 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff f911 	bl	8007b9c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800897a:	2110      	movs	r1, #16
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff f96b 	bl	8007c58 <USB_FlushTxFifo>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff f997 	bl	8007cc0 <USB_FlushRxFifo>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	e01f      	b.n	80089e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d6:	461a      	mov	r2, r3
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	3301      	adds	r3, #1
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b0f      	cmp	r3, #15
 80089e6:	d9dc      	bls.n	80089a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	e034      	b.n	8008a58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a22:	461a      	mov	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a34:	d80c      	bhi.n	8008a50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a4c:	d0ec      	beq.n	8008a28 <USB_StopHost+0xc8>
 8008a4e:	e000      	b.n	8008a52 <USB_StopHost+0xf2>
        break;
 8008a50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	3301      	adds	r3, #1
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b0f      	cmp	r3, #15
 8008a5c:	d9c7      	bls.n	80089ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a64:	461a      	mov	r2, r3
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff f880 	bl	8007b7a <USB_EnableGlobalInt>

  return ret;
 8008a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b089      	sub	sp, #36	; 0x24
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	2202      	movs	r2, #2
 8008a90:	2102      	movs	r1, #2
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fc66 	bl	8009364 <USBH_FindInterface>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2bff      	cmp	r3, #255	; 0xff
 8008aa0:	d002      	beq.n	8008aa8 <USBH_CDC_InterfaceInit+0x24>
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d901      	bls.n	8008aac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e13d      	b.n	8008d28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fc3b 	bl	800932c <USBH_SelectInterface>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e131      	b.n	8008d28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008aca:	2050      	movs	r0, #80	; 0x50
 8008acc:	f002 fb04 	bl	800b0d8 <malloc>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e11f      	b.n	8008d28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ae8:	2250      	movs	r2, #80	; 0x50
 8008aea:	2100      	movs	r1, #0
 8008aec:	68b8      	ldr	r0, [r7, #8]
 8008aee:	f002 fb03 	bl	800b0f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	211a      	movs	r1, #26
 8008af8:	fb01 f303 	mul.w	r3, r1, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da15      	bge.n	8008b36 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	211a      	movs	r1, #26
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	211a      	movs	r1, #26
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b30:	881a      	ldrh	r2, [r3, #0]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 ff2c 	bl	800a99a <USBH_AllocPipe>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	7819      	ldrb	r1, [r3, #0]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	7858      	ldrb	r0, [r3, #1]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	8952      	ldrh	r2, [r2, #10]
 8008b62:	9202      	str	r2, [sp, #8]
 8008b64:	2203      	movs	r2, #3
 8008b66:	9201      	str	r2, [sp, #4]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fee4 	bl	800a93c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f002 f9f9 	bl	800af74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	210a      	movs	r1, #10
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fbeb 	bl	8009364 <USBH_FindInterface>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2bff      	cmp	r3, #255	; 0xff
 8008b96:	d002      	beq.n	8008b9e <USBH_CDC_InterfaceInit+0x11a>
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d901      	bls.n	8008ba2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e0c2      	b.n	8008d28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	211a      	movs	r1, #26
 8008ba8:	fb01 f303 	mul.w	r3, r1, r3
 8008bac:	4413      	add	r3, r2
 8008bae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da16      	bge.n	8008be8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	211a      	movs	r1, #26
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	211a      	movs	r1, #26
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008be0:	881a      	ldrh	r2, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	835a      	strh	r2, [r3, #26]
 8008be6:	e015      	b.n	8008c14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	211a      	movs	r1, #26
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	211a      	movs	r1, #26
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c0e:	881a      	ldrh	r2, [r3, #0]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	211a      	movs	r1, #26
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	b25b      	sxtb	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	da16      	bge.n	8008c5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	211a      	movs	r1, #26
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	4413      	add	r3, r2
 8008c38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	211a      	movs	r1, #26
 8008c48:	fb01 f303 	mul.w	r3, r1, r3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c52:	881a      	ldrh	r2, [r3, #0]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	835a      	strh	r2, [r3, #26]
 8008c58:	e015      	b.n	8008c86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	211a      	movs	r1, #26
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c6a:	781a      	ldrb	r2, [r3, #0]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	211a      	movs	r1, #26
 8008c76:	fb01 f303 	mul.w	r3, r1, r3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c80:	881a      	ldrh	r2, [r3, #0]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	7b9b      	ldrb	r3, [r3, #14]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 fe84 	bl	800a99a <USBH_AllocPipe>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	7bdb      	ldrb	r3, [r3, #15]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fe7a 	bl	800a99a <USBH_AllocPipe>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	461a      	mov	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	7b59      	ldrb	r1, [r3, #13]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	7b98      	ldrb	r0, [r3, #14]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	8b12      	ldrh	r2, [r2, #24]
 8008cc6:	9202      	str	r2, [sp, #8]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	9201      	str	r2, [sp, #4]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	4623      	mov	r3, r4
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 fe32 	bl	800a93c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	7b19      	ldrb	r1, [r3, #12]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	7bd8      	ldrb	r0, [r3, #15]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	8b52      	ldrh	r2, [r2, #26]
 8008cf0:	9202      	str	r2, [sp, #8]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	9201      	str	r2, [sp, #4]
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fe1d 	bl	800a93c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7b5b      	ldrb	r3, [r3, #13]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f002 f92e 	bl	800af74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7b1b      	ldrb	r3, [r3, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f002 f927 	bl	800af74 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd90      	pop	{r4, r7, pc}

08008d30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00e      	beq.n	8008d68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fe12 	bl	800a97a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 fe3d 	bl	800a9dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	7b1b      	ldrb	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00e      	beq.n	8008d8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	7b1b      	ldrb	r3, [r3, #12]
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 fdff 	bl	800a97a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	7b1b      	ldrb	r3, [r3, #12]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fe2a 	bl	800a9dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	7b5b      	ldrb	r3, [r3, #13]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7b5b      	ldrb	r3, [r3, #13]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fdec 	bl	800a97a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	7b5b      	ldrb	r3, [r3, #13]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 fe17 	bl	800a9dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f002 f98d 	bl	800b0e8 <free>
    phost->pActiveClass->pData = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3340      	adds	r3, #64	; 0x40
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f8b1 	bl	8008f62 <GetLineCoding>
 8008e00:	4603      	mov	r3, r0
 8008e02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e10:	2102      	movs	r1, #2
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008e16:	7afb      	ldrb	r3, [r7, #11]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d877      	bhi.n	8008f34 <USBH_CDC_Process+0x114>
 8008e44:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBH_CDC_Process+0x2c>)
 8008e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4a:	bf00      	nop
 8008e4c:	08008e61 	.word	0x08008e61
 8008e50:	08008e67 	.word	0x08008e67
 8008e54:	08008e97 	.word	0x08008e97
 8008e58:	08008f0b 	.word	0x08008f0b
 8008e5c:	08008f19 	.word	0x08008f19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
      break;
 8008e64:	e06d      	b.n	8008f42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f897 	bl	8008fa0 <SetLineCoding>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e84:	e058      	b.n	8008f38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d055      	beq.n	8008f38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e94:	e050      	b.n	8008f38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	3340      	adds	r3, #64	; 0x40
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f860 	bl	8008f62 <GetLineCoding>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d126      	bne.n	8008efa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebe:	791b      	ldrb	r3, [r3, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d13b      	bne.n	8008f3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ece:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d133      	bne.n	8008f3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ede:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d12b      	bne.n	8008f3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d124      	bne.n	8008f3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f958 	bl	80091a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ef8:	e020      	b.n	8008f3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d01d      	beq.n	8008f3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2204      	movs	r2, #4
 8008f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008f08:	e018      	b.n	8008f3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f867 	bl	8008fde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f8da 	bl	80090ca <CDC_ProcessReception>
      break;
 8008f16:	e014      	b.n	8008f42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 ffef 	bl	8009efe <USBH_ClrFeature>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008f32:	e005      	b.n	8008f40 <USBH_CDC_Process+0x120>

    default:
      break;
 8008f34:	bf00      	nop
 8008f36:	e004      	b.n	8008f42 <USBH_CDC_Process+0x122>
      break;
 8008f38:	bf00      	nop
 8008f3a:	e002      	b.n	8008f42 <USBH_CDC_Process+0x122>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e000      	b.n	8008f42 <USBH_CDC_Process+0x122>
      break;
 8008f40:	bf00      	nop

  }

  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	22a1      	movs	r2, #161	; 0xa1
 8008f70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2221      	movs	r2, #33	; 0x21
 8008f76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2207      	movs	r2, #7
 8008f88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fa81 	bl	800a498 <USBH_CtlReq>
 8008f96:	4603      	mov	r3, r0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2221      	movs	r2, #33	; 0x21
 8008fae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2207      	movs	r2, #7
 8008fc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2207      	movs	r2, #7
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f001 fa62 	bl	800a498 <USBH_CtlReq>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af02      	add	r7, sp, #8
 8008fe4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d002      	beq.n	8009004 <CDC_ProcessTransmission+0x26>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d023      	beq.n	800904a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009002:	e05e      	b.n	80090c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	8b12      	ldrh	r2, [r2, #24]
 800900c:	4293      	cmp	r3, r2
 800900e:	d90b      	bls.n	8009028 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	69d9      	ldr	r1, [r3, #28]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8b1a      	ldrh	r2, [r3, #24]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	7b5b      	ldrb	r3, [r3, #13]
 800901c:	2001      	movs	r0, #1
 800901e:	9000      	str	r0, [sp, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fc48 	bl	800a8b6 <USBH_BulkSendData>
 8009026:	e00b      	b.n	8009040 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	7b5b      	ldrb	r3, [r3, #13]
 8009036:	2001      	movs	r0, #1
 8009038:	9000      	str	r0, [sp, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fc3b 	bl	800a8b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009048:	e03b      	b.n	80090c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	7b5b      	ldrb	r3, [r3, #13]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 ff65 	bl	800af20 <USBH_LL_GetURBState>
 8009056:	4603      	mov	r3, r0
 8009058:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d128      	bne.n	80090b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	8b12      	ldrh	r2, [r2, #24]
 8009068:	4293      	cmp	r3, r2
 800906a:	d90e      	bls.n	800908a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	8b12      	ldrh	r2, [r2, #24]
 8009074:	1a9a      	subs	r2, r3, r2
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	8b12      	ldrh	r2, [r2, #24]
 8009082:	441a      	add	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	61da      	str	r2, [r3, #28]
 8009088:	e002      	b.n	8009090 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80090a0:	e00e      	b.n	80090c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f868 	bl	8009180 <USBH_CDC_TransmitCallback>
      break;
 80090b0:	e006      	b.n	80090c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d103      	bne.n	80090c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80090c0:	bf00      	nop
  }
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b086      	sub	sp, #24
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090dc:	2300      	movs	r3, #0
 80090de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d002      	beq.n	80090f0 <CDC_ProcessReception+0x26>
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d00e      	beq.n	800910c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80090ee:	e043      	b.n	8009178 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	6a19      	ldr	r1, [r3, #32]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	8b5a      	ldrh	r2, [r3, #26]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	7b1b      	ldrb	r3, [r3, #12]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fbff 	bl	800a900 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2204      	movs	r2, #4
 8009106:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800910a:	e035      	b.n	8009178 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	7b1b      	ldrb	r3, [r3, #12]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 ff04 	bl	800af20 <USBH_LL_GetURBState>
 8009118:	4603      	mov	r3, r0
 800911a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800911c:	7cfb      	ldrb	r3, [r7, #19]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d129      	bne.n	8009176 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	7b1b      	ldrb	r3, [r3, #12]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 fe67 	bl	800adfc <USBH_LL_GetLastXferSize>
 800912e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	429a      	cmp	r2, r3
 8009138:	d016      	beq.n	8009168 <CDC_ProcessReception+0x9e>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	8b5b      	ldrh	r3, [r3, #26]
 800913e:	461a      	mov	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4293      	cmp	r3, r2
 8009144:	d910      	bls.n	8009168 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1ad2      	subs	r2, r2, r3
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	6a1a      	ldr	r2, [r3, #32]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	441a      	add	r2, r3
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2203      	movs	r2, #3
 8009162:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009166:	e006      	b.n	8009176 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f80f 	bl	8009194 <USBH_CDC_ReceiveCallback>
      break;
 8009176:	bf00      	nop
  }
}
 8009178:	bf00      	nop
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091d0:	2302      	movs	r3, #2
 80091d2:	e029      	b.n	8009228 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	79fa      	ldrb	r2, [r7, #7]
 80091d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f81f 	bl	8009230 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f001 fd2d 	bl	800ac80 <USBH_LL_Init>

  return USBH_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	e009      	b.n	8009256 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	33e0      	adds	r3, #224	; 0xe0
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	2200      	movs	r2, #0
 800924e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b0f      	cmp	r3, #15
 800925a:	d9f2      	bls.n	8009242 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	e009      	b.n	8009276 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3301      	adds	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d3f1      	bcc.n	8009262 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2240      	movs	r2, #64	; 0x40
 80092a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d016      	beq.n	800931a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10e      	bne.n	8009314 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092fc:	1c59      	adds	r1, r3, #1
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	33de      	adds	r3, #222	; 0xde
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
 8009312:	e004      	b.n	800931e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009314:	2302      	movs	r3, #2
 8009316:	73fb      	strb	r3, [r7, #15]
 8009318:	e001      	b.n	800931e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800931a:	2302      	movs	r3, #2
 800931c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	429a      	cmp	r2, r3
 8009346:	d204      	bcs.n	8009352 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009350:	e001      	b.n	8009356 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009352:	2302      	movs	r3, #2
 8009354:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	461a      	mov	r2, r3
 8009372:	4603      	mov	r3, r0
 8009374:	70fb      	strb	r3, [r7, #3]
 8009376:	460b      	mov	r3, r1
 8009378:	70bb      	strb	r3, [r7, #2]
 800937a:	4613      	mov	r3, r2
 800937c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800938c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800938e:	e025      	b.n	80093dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	221a      	movs	r2, #26
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	3308      	adds	r3, #8
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	3302      	adds	r3, #2
 80093a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	795b      	ldrb	r3, [r3, #5]
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d002      	beq.n	80093b2 <USBH_FindInterface+0x4e>
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2bff      	cmp	r3, #255	; 0xff
 80093b0:	d111      	bne.n	80093d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80093b6:	78ba      	ldrb	r2, [r7, #2]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d002      	beq.n	80093c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093bc:	78bb      	ldrb	r3, [r7, #2]
 80093be:	2bff      	cmp	r3, #255	; 0xff
 80093c0:	d109      	bne.n	80093d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093c6:	787a      	ldrb	r2, [r7, #1]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d002      	beq.n	80093d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093cc:	787b      	ldrb	r3, [r7, #1]
 80093ce:	2bff      	cmp	r3, #255	; 0xff
 80093d0:	d101      	bne.n	80093d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	e006      	b.n	80093e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d9d6      	bls.n	8009390 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093e2:	23ff      	movs	r3, #255	; 0xff
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 fc87 	bl	800ad0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80093fe:	2101      	movs	r1, #1
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fda0 	bl	800af46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af04      	add	r7, sp, #16
 8009416:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009418:	2302      	movs	r3, #2
 800941a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b01      	cmp	r3, #1
 800942a:	d102      	bne.n	8009432 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2203      	movs	r2, #3
 8009430:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b0b      	cmp	r3, #11
 800943a:	f200 81be 	bhi.w	80097ba <USBH_Process+0x3aa>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBH_Process+0x34>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009475 	.word	0x08009475
 8009448:	080094a7 	.word	0x080094a7
 800944c:	0800950f 	.word	0x0800950f
 8009450:	08009755 	.word	0x08009755
 8009454:	080097bb 	.word	0x080097bb
 8009458:	080095b3 	.word	0x080095b3
 800945c:	080096fb 	.word	0x080096fb
 8009460:	080095e9 	.word	0x080095e9
 8009464:	08009609 	.word	0x08009609
 8009468:	08009629 	.word	0x08009629
 800946c:	0800966d 	.word	0x0800966d
 8009470:	0800973d 	.word	0x0800973d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 819e 	beq.w	80097be <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009488:	20c8      	movs	r0, #200	; 0xc8
 800948a:	f001 fda3 	bl	800afd4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fc99 	bl	800adc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094a4:	e18b      	b.n	80097be <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d107      	bne.n	80094c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094be:	e18d      	b.n	80097dc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ca:	d914      	bls.n	80094f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094d2:	3301      	adds	r3, #1
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d903      	bls.n	80094ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220d      	movs	r2, #13
 80094ea:	701a      	strb	r2, [r3, #0]
      break;
 80094ec:	e176      	b.n	80097dc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e172      	b.n	80097dc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094fc:	f103 020a 	add.w	r2, r3, #10
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009506:	200a      	movs	r0, #10
 8009508:	f001 fd64 	bl	800afd4 <USBH_Delay>
      break;
 800950c:	e166      	b.n	80097dc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800951e:	2104      	movs	r1, #4
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009524:	2064      	movs	r0, #100	; 0x64
 8009526:	f001 fd55 	bl	800afd4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fc24 	bl	800ad78 <USBH_LL_GetSpeed>
 8009530:	4603      	mov	r3, r0
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2205      	movs	r2, #5
 800953e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fa29 	bl	800a99a <USBH_AllocPipe>
 8009548:	4603      	mov	r3, r0
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fa21 	bl	800a99a <USBH_AllocPipe>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7919      	ldrb	r1, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009574:	b292      	uxth	r2, r2
 8009576:	9202      	str	r2, [sp, #8]
 8009578:	2200      	movs	r2, #0
 800957a:	9201      	str	r2, [sp, #4]
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	4603      	mov	r3, r0
 8009580:	2280      	movs	r2, #128	; 0x80
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 f9da 	bl	800a93c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7959      	ldrb	r1, [r3, #5]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800959c:	b292      	uxth	r2, r2
 800959e:	9202      	str	r2, [sp, #8]
 80095a0:	2200      	movs	r2, #0
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	4603      	mov	r3, r0
 80095a8:	2200      	movs	r2, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f9c6 	bl	800a93c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095b0:	e114      	b.n	80097dc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f918 	bl	80097e8 <USBH_HandleEnum>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 80fe 	bne.w	80097c2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d103      	bne.n	80095e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2208      	movs	r2, #8
 80095dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095de:	e0f0      	b.n	80097c2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2207      	movs	r2, #7
 80095e4:	701a      	strb	r2, [r3, #0]
      break;
 80095e6:	e0ec      	b.n	80097c2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80e9 	beq.w	80097c6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095fa:	2101      	movs	r1, #1
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2208      	movs	r2, #8
 8009604:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009606:	e0de      	b.n	80097c6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800960e:	b29b      	uxth	r3, r3
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fc2c 	bl	8009e70 <USBH_SetCfg>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 80d5 	bne.w	80097ca <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2209      	movs	r2, #9
 8009624:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009626:	e0d0      	b.n	80097ca <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d016      	beq.n	8009664 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009636:	2101      	movs	r1, #1
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fc3c 	bl	8009eb6 <USBH_SetFeature>
 800963e:	4603      	mov	r3, r0
 8009640:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d103      	bne.n	8009652 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	220a      	movs	r2, #10
 800964e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009650:	e0bd      	b.n	80097ce <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b03      	cmp	r3, #3
 8009658:	f040 80b9 	bne.w	80097ce <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	220a      	movs	r2, #10
 8009660:	701a      	strb	r2, [r3, #0]
      break;
 8009662:	e0b4      	b.n	80097ce <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	220a      	movs	r2, #10
 8009668:	701a      	strb	r2, [r3, #0]
      break;
 800966a:	e0b0      	b.n	80097ce <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80ad 	beq.w	80097d2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]
 8009684:	e016      	b.n	80096b4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009686:	7bfa      	ldrb	r2, [r7, #15]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	32de      	adds	r2, #222	; 0xde
 800968c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009690:	791a      	ldrb	r2, [r3, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009698:	429a      	cmp	r2, r3
 800969a:	d108      	bne.n	80096ae <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800969c:	7bfa      	ldrb	r2, [r7, #15]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	32de      	adds	r2, #222	; 0xde
 80096a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80096ac:	e005      	b.n	80096ba <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	3301      	adds	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0e5      	beq.n	8009686 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d016      	beq.n	80096f2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d109      	bne.n	80096ea <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2206      	movs	r2, #6
 80096da:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096e2:	2103      	movs	r1, #3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096e8:	e073      	b.n	80097d2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	220d      	movs	r2, #13
 80096ee:	701a      	strb	r2, [r3, #0]
      break;
 80096f0:	e06f      	b.n	80097d2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	220d      	movs	r2, #13
 80096f6:	701a      	strb	r2, [r3, #0]
      break;
 80096f8:	e06b      	b.n	80097d2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d017      	beq.n	8009734 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
 8009710:	4603      	mov	r3, r0
 8009712:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	220b      	movs	r2, #11
 8009720:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009722:	e058      	b.n	80097d6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b02      	cmp	r3, #2
 800972a:	d154      	bne.n	80097d6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	220d      	movs	r2, #13
 8009730:	701a      	strb	r2, [r3, #0]
      break;
 8009732:	e050      	b.n	80097d6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	220d      	movs	r2, #13
 8009738:	701a      	strb	r2, [r3, #0]
      break;
 800973a:	e04c      	b.n	80097d6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d049      	beq.n	80097da <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
      }
      break;
 8009752:	e042      	b.n	80097da <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff fd67 	bl	8009230 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009790:	2105      	movs	r1, #5
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d107      	bne.n	80097b2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fe20 	bl	80093f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097b0:	e014      	b.n	80097dc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 faaa 	bl	800ad0c <USBH_LL_Start>
      break;
 80097b8:	e010      	b.n	80097dc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80097ba:	bf00      	nop
 80097bc:	e00e      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097be:	bf00      	nop
 80097c0:	e00c      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097c2:	bf00      	nop
 80097c4:	e00a      	b.n	80097dc <USBH_Process+0x3cc>
    break;
 80097c6:	bf00      	nop
 80097c8:	e008      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097ca:	bf00      	nop
 80097cc:	e006      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097ce:	bf00      	nop
 80097d0:	e004      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097d2:	bf00      	nop
 80097d4:	e002      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <USBH_Process+0x3cc>
      break;
 80097da:	bf00      	nop
  }
  return USBH_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097f4:	2301      	movs	r3, #1
 80097f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	2b07      	cmp	r3, #7
 80097fe:	f200 81c1 	bhi.w	8009b84 <USBH_HandleEnum+0x39c>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <USBH_HandleEnum+0x20>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009829 	.word	0x08009829
 800980c:	080098e7 	.word	0x080098e7
 8009810:	08009951 	.word	0x08009951
 8009814:	080099df 	.word	0x080099df
 8009818:	08009a49 	.word	0x08009a49
 800981c:	08009ab9 	.word	0x08009ab9
 8009820:	08009aff 	.word	0x08009aff
 8009824:	08009b45 	.word	0x08009b45
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009828:	2108      	movs	r1, #8
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa50 	bl	8009cd0 <USBH_Get_DevDesc>
 8009830:	4603      	mov	r3, r0
 8009832:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d130      	bne.n	800989c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7919      	ldrb	r1, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800985e:	b292      	uxth	r2, r2
 8009860:	9202      	str	r2, [sp, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	9201      	str	r2, [sp, #4]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	2280      	movs	r2, #128	; 0x80
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 f865 	bl	800a93c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7959      	ldrb	r1, [r3, #5]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009886:	b292      	uxth	r2, r2
 8009888:	9202      	str	r2, [sp, #8]
 800988a:	2200      	movs	r2, #0
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	4603      	mov	r3, r0
 8009892:	2200      	movs	r2, #0
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 f851 	bl	800a93c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800989a:	e175      	b.n	8009b88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	f040 8172 	bne.w	8009b88 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098aa:	3301      	adds	r3, #1
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d903      	bls.n	80098c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	220d      	movs	r2, #13
 80098c2:	701a      	strb	r2, [r3, #0]
      break;
 80098c4:	e160      	b.n	8009b88 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	795b      	ldrb	r3, [r3, #5]
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 f885 	bl	800a9dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	791b      	ldrb	r3, [r3, #4]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f87f 	bl	800a9dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
      break;
 80098e4:	e150      	b.n	8009b88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098e6:	2112      	movs	r1, #18
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f9f1 	bl	8009cd0 <USBH_Get_DevDesc>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098fe:	e145      	b.n	8009b8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b03      	cmp	r3, #3
 8009904:	f040 8142 	bne.w	8009b8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800990e:	3301      	adds	r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800991e:	2b03      	cmp	r3, #3
 8009920:	d903      	bls.n	800992a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	220d      	movs	r2, #13
 8009926:	701a      	strb	r2, [r3, #0]
      break;
 8009928:	e130      	b.n	8009b8c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	795b      	ldrb	r3, [r3, #5]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 f853 	bl	800a9dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	791b      	ldrb	r3, [r3, #4]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f84d 	bl	800a9dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	701a      	strb	r2, [r3, #0]
      break;
 800994e:	e11d      	b.n	8009b8c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009950:	2101      	movs	r1, #1
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa68 	bl	8009e28 <USBH_SetAddress>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d132      	bne.n	80099c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009962:	2002      	movs	r0, #2
 8009964:	f001 fb36 	bl	800afd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2203      	movs	r2, #3
 8009974:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7919      	ldrb	r1, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800998a:	b292      	uxth	r2, r2
 800998c:	9202      	str	r2, [sp, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	9201      	str	r2, [sp, #4]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	4603      	mov	r3, r0
 8009996:	2280      	movs	r2, #128	; 0x80
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 ffcf 	bl	800a93c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7959      	ldrb	r1, [r3, #5]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099b2:	b292      	uxth	r2, r2
 80099b4:	9202      	str	r2, [sp, #8]
 80099b6:	2200      	movs	r2, #0
 80099b8:	9201      	str	r2, [sp, #4]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4603      	mov	r3, r0
 80099be:	2200      	movs	r2, #0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 ffbb 	bl	800a93c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099c6:	e0e3      	b.n	8009b90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	f040 80e0 	bne.w	8009b90 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	220d      	movs	r2, #13
 80099d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	705a      	strb	r2, [r3, #1]
      break;
 80099dc:	e0d8      	b.n	8009b90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099de:	2109      	movs	r1, #9
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f99d 	bl	8009d20 <USBH_Get_CfgDesc>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2204      	movs	r2, #4
 80099f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099f6:	e0cd      	b.n	8009b94 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	f040 80ca 	bne.w	8009b94 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a06:	3301      	adds	r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d903      	bls.n	8009a22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	220d      	movs	r2, #13
 8009a1e:	701a      	strb	r2, [r3, #0]
      break;
 8009a20:	e0b8      	b.n	8009b94 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	795b      	ldrb	r3, [r3, #5]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 ffd7 	bl	800a9dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 ffd1 	bl	800a9dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
      break;
 8009a46:	e0a5      	b.n	8009b94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f965 	bl	8009d20 <USBH_Get_CfgDesc>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2205      	movs	r2, #5
 8009a64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a66:	e097      	b.n	8009b98 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	f040 8094 	bne.w	8009b98 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a76:	3301      	adds	r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d903      	bls.n	8009a92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	220d      	movs	r2, #13
 8009a8e:	701a      	strb	r2, [r3, #0]
      break;
 8009a90:	e082      	b.n	8009b98 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	795b      	ldrb	r3, [r3, #5]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 ff9f 	bl	800a9dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	791b      	ldrb	r3, [r3, #4]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 ff99 	bl	800a9dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
      break;
 8009ab6:	e06f      	b.n	8009b98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d019      	beq.n	8009af6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ace:	23ff      	movs	r3, #255	; 0xff
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f949 	bl	8009d68 <USBH_Get_StringDesc>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d103      	bne.n	8009ae8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2206      	movs	r2, #6
 8009ae4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ae6:	e059      	b.n	8009b9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d156      	bne.n	8009b9c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2206      	movs	r2, #6
 8009af2:	705a      	strb	r2, [r3, #1]
      break;
 8009af4:	e052      	b.n	8009b9c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2206      	movs	r2, #6
 8009afa:	705a      	strb	r2, [r3, #1]
      break;
 8009afc:	e04e      	b.n	8009b9c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d019      	beq.n	8009b3c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b14:	23ff      	movs	r3, #255	; 0xff
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f926 	bl	8009d68 <USBH_Get_StringDesc>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d103      	bne.n	8009b2e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2207      	movs	r2, #7
 8009b2a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b2c:	e038      	b.n	8009ba0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d135      	bne.n	8009ba0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2207      	movs	r2, #7
 8009b38:	705a      	strb	r2, [r3, #1]
      break;
 8009b3a:	e031      	b.n	8009ba0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2207      	movs	r2, #7
 8009b40:	705a      	strb	r2, [r3, #1]
      break;
 8009b42:	e02d      	b.n	8009ba0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d017      	beq.n	8009b7e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b5a:	23ff      	movs	r3, #255	; 0xff
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f903 	bl	8009d68 <USBH_Get_StringDesc>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b70:	e018      	b.n	8009ba4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d115      	bne.n	8009ba4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7c:	e012      	b.n	8009ba4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]
      break;
 8009b82:	e00f      	b.n	8009ba4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b84:	bf00      	nop
 8009b86:	e00e      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e00c      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e00a      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b90:	bf00      	nop
 8009b92:	e008      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b94:	bf00      	nop
 8009b96:	e006      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b98:	bf00      	nop
 8009b9a:	e004      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009b9c:	bf00      	nop
 8009b9e:	e002      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009ba0:	bf00      	nop
 8009ba2:	e000      	b.n	8009ba6 <USBH_HandleEnum+0x3be>
      break;
 8009ba4:	bf00      	nop
  }
  return Status;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f804 	bl	8009bf2 <USBH_HandleSof>
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b0b      	cmp	r3, #11
 8009c02:	d10a      	bne.n	8009c1a <USBH_HandleSof+0x28>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009c32:	bf00      	nop
}
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c4e:	bf00      	nop
}
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f84a 	bl	800ad42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fe91 	bl	800a9dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	795b      	ldrb	r3, [r3, #5]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fe8b 	bl	800a9dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cee:	2100      	movs	r1, #0
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f864 	bl	8009dbe <USBH_GetDescriptor>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d0c:	78fa      	ldrb	r2, [r7, #3]
 8009d0e:	b292      	uxth	r2, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	f000 f918 	bl	8009f46 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	331c      	adds	r3, #28
 8009d30:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d32:	887b      	ldrh	r3, [r7, #2]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f83d 	bl	8009dbe <USBH_GetDescriptor>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009d4e:	887b      	ldrh	r3, [r7, #2]
 8009d50:	461a      	mov	r2, r3
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f987 	bl	800a068 <USBH_ParseCfgDesc>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	461a      	mov	r2, r3
 8009d74:	460b      	mov	r3, r1
 8009d76:	72fb      	strb	r3, [r7, #11]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009d7c:	7afb      	ldrb	r3, [r7, #11]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d84:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d8c:	893b      	ldrh	r3, [r7, #8]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	460b      	mov	r3, r1
 8009d92:	2100      	movs	r1, #0
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f812 	bl	8009dbe <USBH_GetDescriptor>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d107      	bne.n	8009db4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009daa:	893a      	ldrh	r2, [r7, #8]
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fb24 	bl	800a3fc <USBH_ParseStringDesc>
  }

  return status;
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	607b      	str	r3, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	72fb      	strb	r3, [r7, #11]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	789b      	ldrb	r3, [r3, #2]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d11c      	bne.n	8009e12 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2206      	movs	r2, #6
 8009de8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	893a      	ldrh	r2, [r7, #8]
 8009dee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009df0:	893b      	ldrh	r3, [r7, #8]
 8009df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dfa:	d104      	bne.n	8009e06 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f240 4209 	movw	r2, #1033	; 0x409
 8009e02:	829a      	strh	r2, [r3, #20]
 8009e04:	e002      	b.n	8009e0c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8b3a      	ldrh	r2, [r7, #24]
 8009e10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e12:	8b3b      	ldrh	r3, [r7, #24]
 8009e14:	461a      	mov	r2, r3
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 fb3d 	bl	800a498 <USBH_CtlReq>
 8009e1e:	4603      	mov	r3, r0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	789b      	ldrb	r3, [r3, #2]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d10f      	bne.n	8009e5c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2205      	movs	r2, #5
 8009e46:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2100      	movs	r1, #0
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fb19 	bl	800a498 <USBH_CtlReq>
 8009e66:	4603      	mov	r3, r0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	789b      	ldrb	r3, [r3, #2]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d10e      	bne.n	8009ea2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2209      	movs	r2, #9
 8009e8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	887a      	ldrh	r2, [r7, #2]
 8009e94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 faf6 	bl	800a498 <USBH_CtlReq>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	789b      	ldrb	r3, [r3, #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d10f      	bne.n	8009eea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009eea:	2200      	movs	r2, #0
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fad2 	bl	800a498 <USBH_CtlReq>
 8009ef4:	4603      	mov	r3, r0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	789b      	ldrb	r3, [r3, #2]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d10f      	bne.n	8009f32 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 faae 	bl	800a498 <USBH_CtlReq>
 8009f3c:	4603      	mov	r3, r0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	4613      	mov	r3, r2
 8009f52:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	785a      	ldrb	r2, [r3, #1]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	3302      	adds	r3, #2
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3303      	adds	r3, #3
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	791a      	ldrb	r2, [r3, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	795a      	ldrb	r2, [r3, #5]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	799a      	ldrb	r2, [r3, #6]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	79da      	ldrb	r2, [r3, #7]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	79db      	ldrb	r3, [r3, #7]
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	dc11      	bgt.n	8009fcc <USBH_ParseDevDesc+0x86>
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	db16      	blt.n	8009fda <USBH_ParseDevDesc+0x94>
 8009fac:	3b08      	subs	r3, #8
 8009fae:	2201      	movs	r2, #1
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf14      	ite	ne
 8009fc0:	2301      	movne	r3, #1
 8009fc2:	2300      	moveq	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <USBH_ParseDevDesc+0x8a>
 8009fca:	e006      	b.n	8009fda <USBH_ParseDevDesc+0x94>
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d104      	bne.n	8009fda <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	79da      	ldrb	r2, [r3, #7]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	71da      	strb	r2, [r3, #7]
      break;
 8009fd8:	e003      	b.n	8009fe2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2240      	movs	r2, #64	; 0x40
 8009fde:	71da      	strb	r2, [r3, #7]
      break;
 8009fe0:	bf00      	nop
  }

  if (length > 8U)
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d939      	bls.n	800a05c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3308      	adds	r3, #8
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	3309      	adds	r3, #9
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	330a      	adds	r3, #10
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	330b      	adds	r3, #11
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	b29b      	uxth	r3, r3
 800a018:	4313      	orrs	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	330c      	adds	r3, #12
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	330d      	adds	r3, #13
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	b29b      	uxth	r3, r3
 800a034:	4313      	orrs	r3, r2
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	7b9a      	ldrb	r2, [r3, #14]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	7bda      	ldrb	r2, [r3, #15]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	7c1a      	ldrb	r2, [r3, #16]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	7c5a      	ldrb	r2, [r3, #17]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	745a      	strb	r2, [r3, #17]
  }
}
 800a05c:	bf00      	nop
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	; 0x30
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a07c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	785a      	ldrb	r2, [r3, #1]
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	3302      	adds	r3, #2
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3303      	adds	r3, #3
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c4:	bf28      	it	cs
 800a0c6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	791a      	ldrb	r2, [r3, #4]
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	795a      	ldrb	r2, [r3, #5]
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	799a      	ldrb	r2, [r3, #6]
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	79da      	ldrb	r2, [r3, #7]
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	7a1a      	ldrb	r2, [r3, #8]
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d002      	beq.n	800a106 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	2209      	movs	r2, #9
 800a104:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a106:	88fb      	ldrh	r3, [r7, #6]
 800a108:	2b09      	cmp	r3, #9
 800a10a:	f240 809d 	bls.w	800a248 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a10e:	2309      	movs	r3, #9
 800a110:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a116:	e081      	b.n	800a21c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a118:	f107 0316 	add.w	r3, r7, #22
 800a11c:	4619      	mov	r1, r3
 800a11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a120:	f000 f99f 	bl	800a462 <USBH_GetNextDesc>
 800a124:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d176      	bne.n	800a21c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b09      	cmp	r3, #9
 800a134:	d002      	beq.n	800a13c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	2209      	movs	r2, #9
 800a13a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a140:	221a      	movs	r2, #26
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	3308      	adds	r3, #8
 800a148:	6a3a      	ldr	r2, [r7, #32]
 800a14a:	4413      	add	r3, r2
 800a14c:	3302      	adds	r3, #2
 800a14e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a152:	69f8      	ldr	r0, [r7, #28]
 800a154:	f000 f87e 	bl	800a254 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a162:	e043      	b.n	800a1ec <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a164:	f107 0316 	add.w	r3, r7, #22
 800a168:	4619      	mov	r1, r3
 800a16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16c:	f000 f979 	bl	800a462 <USBH_GetNextDesc>
 800a170:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	785b      	ldrb	r3, [r3, #1]
 800a176:	2b05      	cmp	r3, #5
 800a178:	d138      	bne.n	800a1ec <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	795b      	ldrb	r3, [r3, #5]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d10f      	bne.n	800a1a2 <USBH_ParseCfgDesc+0x13a>
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	799b      	ldrb	r3, [r3, #6]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d10b      	bne.n	800a1a2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	79db      	ldrb	r3, [r3, #7]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10f      	bne.n	800a1b2 <USBH_ParseCfgDesc+0x14a>
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b09      	cmp	r3, #9
 800a198:	d00b      	beq.n	800a1b2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	2209      	movs	r2, #9
 800a19e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a1a0:	e007      	b.n	800a1b2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b07      	cmp	r3, #7
 800a1a8:	d004      	beq.n	800a1b4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2207      	movs	r2, #7
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e000      	b.n	800a1b4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a1b2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1bc:	3201      	adds	r2, #1
 800a1be:	00d2      	lsls	r2, r2, #3
 800a1c0:	211a      	movs	r1, #26
 800a1c2:	fb01 f303 	mul.w	r3, r1, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	6a3a      	ldr	r2, [r7, #32]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d4:	69b9      	ldr	r1, [r7, #24]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f86b 	bl	800a2b2 <USBH_ParseEPDesc>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a1e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	791b      	ldrb	r3, [r3, #4]
 800a1f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d204      	bcs.n	800a202 <USBH_ParseCfgDesc+0x19a>
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	885a      	ldrh	r2, [r3, #2]
 800a1fc:	8afb      	ldrh	r3, [r7, #22]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d8b0      	bhi.n	800a164 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	791b      	ldrb	r3, [r3, #4]
 800a206:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d201      	bcs.n	800a212 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a20e:	2303      	movs	r3, #3
 800a210:	e01c      	b.n	800a24c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a216:	3301      	adds	r3, #1
 800a218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a220:	2b01      	cmp	r3, #1
 800a222:	d805      	bhi.n	800a230 <USBH_ParseCfgDesc+0x1c8>
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	885a      	ldrh	r2, [r3, #2]
 800a228:	8afb      	ldrh	r3, [r7, #22]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	f63f af74 	bhi.w	800a118 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	791b      	ldrb	r3, [r3, #4]
 800a234:	2b02      	cmp	r3, #2
 800a236:	bf28      	it	cs
 800a238:	2302      	movcs	r3, #2
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a240:	429a      	cmp	r2, r3
 800a242:	d201      	bcs.n	800a248 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a244:	2303      	movs	r3, #3
 800a246:	e001      	b.n	800a24c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3730      	adds	r7, #48	; 0x30
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	785a      	ldrb	r2, [r3, #1]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	789a      	ldrb	r2, [r3, #2]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	78da      	ldrb	r2, [r3, #3]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	791a      	ldrb	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	795a      	ldrb	r2, [r3, #5]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	799a      	ldrb	r2, [r3, #6]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	79da      	ldrb	r2, [r3, #7]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	7a1a      	ldrb	r2, [r3, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	721a      	strb	r2, [r3, #8]
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b087      	sub	sp, #28
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	60b9      	str	r1, [r7, #8]
 800a2bc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	785a      	ldrb	r2, [r3, #1]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	789a      	ldrb	r2, [r3, #2]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	78da      	ldrb	r2, [r3, #3]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3305      	adds	r3, #5
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	799a      	ldrb	r2, [r3, #6]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	889b      	ldrh	r3, [r3, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a30e:	2303      	movs	r3, #3
 800a310:	75fb      	strb	r3, [r7, #23]
 800a312:	e033      	b.n	800a37c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	889b      	ldrh	r3, [r3, #4]
 800a318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	b29a      	uxth	r2, r3
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	889b      	ldrh	r3, [r3, #4]
 800a32a:	b21a      	sxth	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b299      	uxth	r1, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3305      	adds	r3, #5
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	b29b      	uxth	r3, r3
 800a340:	430b      	orrs	r3, r1
 800a342:	b29b      	uxth	r3, r3
 800a344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d110      	bne.n	800a36e <USBH_ParseEPDesc+0xbc>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b299      	uxth	r1, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3305      	adds	r3, #5
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	b29b      	uxth	r3, r3
 800a360:	430b      	orrs	r3, r1
 800a362:	b29b      	uxth	r3, r3
 800a364:	b21b      	sxth	r3, r3
 800a366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a36a:	b21b      	sxth	r3, r3
 800a36c:	e001      	b.n	800a372 <USBH_ParseEPDesc+0xc0>
 800a36e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a372:	4313      	orrs	r3, r2
 800a374:	b21b      	sxth	r3, r3
 800a376:	b29a      	uxth	r2, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a382:	2b00      	cmp	r3, #0
 800a384:	d116      	bne.n	800a3b4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	78db      	ldrb	r3, [r3, #3]
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d005      	beq.n	800a39e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	78db      	ldrb	r3, [r3, #3]
 800a396:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d127      	bne.n	800a3ee <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	799b      	ldrb	r3, [r3, #6]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <USBH_ParseEPDesc+0xfc>
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	799b      	ldrb	r3, [r3, #6]
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d91f      	bls.n	800a3ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	75fb      	strb	r3, [r7, #23]
 800a3b2:	e01c      	b.n	800a3ee <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	78db      	ldrb	r3, [r3, #3]
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10a      	bne.n	800a3d6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	799b      	ldrb	r3, [r3, #6]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <USBH_ParseEPDesc+0x11e>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	799b      	ldrb	r3, [r3, #6]
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d90e      	bls.n	800a3ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	75fb      	strb	r3, [r7, #23]
 800a3d4:	e00b      	b.n	800a3ee <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	78db      	ldrb	r3, [r3, #3]
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d105      	bne.n	800a3ee <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	799b      	ldrb	r3, [r3, #6]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b03      	cmp	r3, #3
 800a412:	d120      	bne.n	800a456 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	1e9a      	subs	r2, r3, #2
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bf28      	it	cs
 800a420:	4613      	movcs	r3, r2
 800a422:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3302      	adds	r3, #2
 800a428:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a42a:	2300      	movs	r3, #0
 800a42c:	82fb      	strh	r3, [r7, #22]
 800a42e:	e00b      	b.n	800a448 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a430:	8afb      	ldrh	r3, [r7, #22]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	781a      	ldrb	r2, [r3, #0]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3301      	adds	r3, #1
 800a440:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a442:	8afb      	ldrh	r3, [r7, #22]
 800a444:	3302      	adds	r3, #2
 800a446:	82fb      	strh	r3, [r7, #22]
 800a448:	8afa      	ldrh	r2, [r7, #22]
 800a44a:	8abb      	ldrh	r3, [r7, #20]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d3ef      	bcc.n	800a430 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2200      	movs	r2, #0
 800a454:	701a      	strb	r2, [r3, #0]
  }
}
 800a456:	bf00      	nop
 800a458:	371c      	adds	r7, #28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	881a      	ldrh	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	b29b      	uxth	r3, r3
 800a476:	4413      	add	r3, r2
 800a478:	b29a      	uxth	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a48a:	68fb      	ldr	r3, [r7, #12]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	789b      	ldrb	r3, [r3, #2]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d002      	beq.n	800a4b8 <USBH_CtlReq+0x20>
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d00f      	beq.n	800a4d6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a4b6:	e027      	b.n	800a508 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d4:	e018      	b.n	800a508 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f81c 	bl	800a514 <USBH_HandleControl>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <USBH_CtlReq+0x54>
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d106      	bne.n	800a4fa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	761a      	strb	r2, [r3, #24]
      break;
 800a4f8:	e005      	b.n	800a506 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a4fa:	7dfb      	ldrb	r3, [r7, #23]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d102      	bne.n	800a506 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	709a      	strb	r2, [r3, #2]
      break;
 800a506:	bf00      	nop
  }
  return status;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af02      	add	r7, sp, #8
 800a51a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a520:	2300      	movs	r3, #0
 800a522:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	7e1b      	ldrb	r3, [r3, #24]
 800a528:	3b01      	subs	r3, #1
 800a52a:	2b0a      	cmp	r3, #10
 800a52c:	f200 8156 	bhi.w	800a7dc <USBH_HandleControl+0x2c8>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <USBH_HandleControl+0x24>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	0800a57f 	.word	0x0800a57f
 800a540:	0800a5e9 	.word	0x0800a5e9
 800a544:	0800a60f 	.word	0x0800a60f
 800a548:	0800a647 	.word	0x0800a647
 800a54c:	0800a671 	.word	0x0800a671
 800a550:	0800a6c3 	.word	0x0800a6c3
 800a554:	0800a6e5 	.word	0x0800a6e5
 800a558:	0800a721 	.word	0x0800a721
 800a55c:	0800a747 	.word	0x0800a747
 800a560:	0800a785 	.word	0x0800a785
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f103 0110 	add.w	r1, r3, #16
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	795b      	ldrb	r3, [r3, #5]
 800a56e:	461a      	mov	r2, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f943 	bl	800a7fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2202      	movs	r2, #2
 800a57a:	761a      	strb	r2, [r3, #24]
      break;
 800a57c:	e139      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	795b      	ldrb	r3, [r3, #5]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fccb 	bl	800af20 <USBH_LL_GetURBState>
 800a58a:	4603      	mov	r3, r0
 800a58c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d11e      	bne.n	800a5d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7c1b      	ldrb	r3, [r3, #16]
 800a598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a59c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8adb      	ldrh	r3, [r3, #22]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5a6:	7b7b      	ldrb	r3, [r7, #13]
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	d103      	bne.n	800a5b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5b2:	e115      	b.n	800a7e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	761a      	strb	r2, [r3, #24]
      break;
 800a5ba:	e111      	b.n	800a7e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a5bc:	7b7b      	ldrb	r3, [r7, #13]
 800a5be:	2b80      	cmp	r3, #128	; 0x80
 800a5c0:	d103      	bne.n	800a5ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2209      	movs	r2, #9
 800a5c6:	761a      	strb	r2, [r3, #24]
      break;
 800a5c8:	e10a      	b.n	800a7e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2207      	movs	r2, #7
 800a5ce:	761a      	strb	r2, [r3, #24]
      break;
 800a5d0:	e106      	b.n	800a7e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d003      	beq.n	800a5e0 <USBH_HandleControl+0xcc>
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	f040 8100 	bne.w	800a7e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	220b      	movs	r2, #11
 800a5e4:	761a      	strb	r2, [r3, #24]
      break;
 800a5e6:	e0fb      	b.n	800a7e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6899      	ldr	r1, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	899a      	ldrh	r2, [r3, #12]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f93a 	bl	800a87a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2204      	movs	r2, #4
 800a60a:	761a      	strb	r2, [r3, #24]
      break;
 800a60c:	e0f1      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fc83 	bl	800af20 <USBH_LL_GetURBState>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d102      	bne.n	800a62a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2209      	movs	r2, #9
 800a628:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a62a:	7bbb      	ldrb	r3, [r7, #14]
 800a62c:	2b05      	cmp	r3, #5
 800a62e:	d102      	bne.n	800a636 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a634:	e0d6      	b.n	800a7e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b04      	cmp	r3, #4
 800a63a:	f040 80d3 	bne.w	800a7e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	220b      	movs	r2, #11
 800a642:	761a      	strb	r2, [r3, #24]
      break;
 800a644:	e0ce      	b.n	800a7e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6899      	ldr	r1, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	899a      	ldrh	r2, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	795b      	ldrb	r3, [r3, #5]
 800a652:	2001      	movs	r0, #1
 800a654:	9000      	str	r0, [sp, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f8ea 	bl	800a830 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a662:	b29a      	uxth	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2206      	movs	r2, #6
 800a66c:	761a      	strb	r2, [r3, #24]
      break;
 800a66e:	e0c0      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	795b      	ldrb	r3, [r3, #5]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fc52 	bl	800af20 <USBH_LL_GetURBState>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d103      	bne.n	800a68e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2207      	movs	r2, #7
 800a68a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a68c:	e0ac      	b.n	800a7e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	2b05      	cmp	r3, #5
 800a692:	d105      	bne.n	800a6a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	220c      	movs	r2, #12
 800a698:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a69a:	2303      	movs	r3, #3
 800a69c:	73fb      	strb	r3, [r7, #15]
      break;
 800a69e:	e0a3      	b.n	800a7e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	761a      	strb	r2, [r3, #24]
      break;
 800a6ac:	e09c      	b.n	800a7e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	f040 8099 	bne.w	800a7e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	220b      	movs	r2, #11
 800a6ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e092      	b.n	800a7e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	791b      	ldrb	r3, [r3, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f8d5 	bl	800a87a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2208      	movs	r2, #8
 800a6e0:	761a      	strb	r2, [r3, #24]

      break;
 800a6e2:	e086      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	791b      	ldrb	r3, [r3, #4]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc18 	bl	800af20 <USBH_LL_GetURBState>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d105      	bne.n	800a706 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	220d      	movs	r2, #13
 800a6fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a704:	e072      	b.n	800a7ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d103      	bne.n	800a714 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	220b      	movs	r2, #11
 800a710:	761a      	strb	r2, [r3, #24]
      break;
 800a712:	e06b      	b.n	800a7ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	2b05      	cmp	r3, #5
 800a718:	d168      	bne.n	800a7ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a71a:	2303      	movs	r3, #3
 800a71c:	73fb      	strb	r3, [r7, #15]
      break;
 800a71e:	e065      	b.n	800a7ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	795b      	ldrb	r3, [r3, #5]
 800a724:	2201      	movs	r2, #1
 800a726:	9200      	str	r2, [sp, #0]
 800a728:	2200      	movs	r2, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f87f 	bl	800a830 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	220a      	movs	r2, #10
 800a742:	761a      	strb	r2, [r3, #24]
      break;
 800a744:	e055      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	795b      	ldrb	r3, [r3, #5]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fbe7 	bl	800af20 <USBH_LL_GetURBState>
 800a752:	4603      	mov	r3, r0
 800a754:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d105      	bne.n	800a768 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	220d      	movs	r2, #13
 800a764:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a766:	e043      	b.n	800a7f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d103      	bne.n	800a776 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2209      	movs	r2, #9
 800a772:	761a      	strb	r2, [r3, #24]
      break;
 800a774:	e03c      	b.n	800a7f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d139      	bne.n	800a7f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	220b      	movs	r2, #11
 800a780:	761a      	strb	r2, [r3, #24]
      break;
 800a782:	e035      	b.n	800a7f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7e5b      	ldrb	r3, [r3, #25]
 800a788:	3301      	adds	r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	765a      	strb	r2, [r3, #25]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	7e5b      	ldrb	r3, [r3, #25]
 800a794:	2b02      	cmp	r3, #2
 800a796:	d806      	bhi.n	800a7a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a7a4:	e025      	b.n	800a7f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ac:	2106      	movs	r1, #6
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	795b      	ldrb	r3, [r3, #5]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f90c 	bl	800a9dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f906 	bl	800a9dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7da:	e00a      	b.n	800a7f2 <USBH_HandleControl+0x2de>

    default:
      break;
 800a7dc:	bf00      	nop
 800a7de:	e008      	b.n	800a7f2 <USBH_HandleControl+0x2de>
      break;
 800a7e0:	bf00      	nop
 800a7e2:	e006      	b.n	800a7f2 <USBH_HandleControl+0x2de>
      break;
 800a7e4:	bf00      	nop
 800a7e6:	e004      	b.n	800a7f2 <USBH_HandleControl+0x2de>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e002      	b.n	800a7f2 <USBH_HandleControl+0x2de>
      break;
 800a7ec:	bf00      	nop
 800a7ee:	e000      	b.n	800a7f2 <USBH_HandleControl+0x2de>
      break;
 800a7f0:	bf00      	nop
  }

  return status;
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af04      	add	r7, sp, #16
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	4613      	mov	r3, r2
 800a808:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a80a:	79f9      	ldrb	r1, [r7, #7]
 800a80c:	2300      	movs	r3, #0
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	2308      	movs	r3, #8
 800a812:	9302      	str	r3, [sp, #8]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	2300      	movs	r3, #0
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	2300      	movs	r3, #0
 800a81e:	2200      	movs	r2, #0
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fb4c 	bl	800aebe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af04      	add	r7, sp, #16
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4611      	mov	r1, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	460b      	mov	r3, r1
 800a840:	80fb      	strh	r3, [r7, #6]
 800a842:	4613      	mov	r3, r2
 800a844:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a854:	7979      	ldrb	r1, [r7, #5]
 800a856:	7e3b      	ldrb	r3, [r7, #24]
 800a858:	9303      	str	r3, [sp, #12]
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	2301      	movs	r3, #1
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	2300      	movs	r3, #0
 800a868:	2200      	movs	r2, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 fb27 	bl	800aebe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b088      	sub	sp, #32
 800a87e:	af04      	add	r7, sp, #16
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	4611      	mov	r1, r2
 800a886:	461a      	mov	r2, r3
 800a888:	460b      	mov	r3, r1
 800a88a:	80fb      	strh	r3, [r7, #6]
 800a88c:	4613      	mov	r3, r2
 800a88e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a890:	7979      	ldrb	r1, [r7, #5]
 800a892:	2300      	movs	r3, #0
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	88fb      	ldrh	r3, [r7, #6]
 800a898:	9302      	str	r3, [sp, #8]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	2301      	movs	r3, #1
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fb09 	bl	800aebe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8ac:	2300      	movs	r3, #0

}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	af04      	add	r7, sp, #16
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	80fb      	strh	r3, [r7, #6]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8da:	7979      	ldrb	r1, [r7, #5]
 800a8dc:	7e3b      	ldrb	r3, [r7, #24]
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	88fb      	ldrh	r3, [r7, #6]
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fae4 	bl	800aebe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af04      	add	r7, sp, #16
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4611      	mov	r1, r2
 800a90c:	461a      	mov	r2, r3
 800a90e:	460b      	mov	r3, r1
 800a910:	80fb      	strh	r3, [r7, #6]
 800a912:	4613      	mov	r3, r2
 800a914:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a916:	7979      	ldrb	r1, [r7, #5]
 800a918:	2300      	movs	r3, #0
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	88fb      	ldrh	r3, [r7, #6]
 800a91e:	9302      	str	r3, [sp, #8]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	2301      	movs	r3, #1
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	2302      	movs	r3, #2
 800a92a:	2201      	movs	r2, #1
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 fac6 	bl	800aebe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af04      	add	r7, sp, #16
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	70fb      	strb	r3, [r7, #3]
 800a94e:	460b      	mov	r3, r1
 800a950:	70bb      	strb	r3, [r7, #2]
 800a952:	4613      	mov	r3, r2
 800a954:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a956:	7878      	ldrb	r0, [r7, #1]
 800a958:	78ba      	ldrb	r2, [r7, #2]
 800a95a:	78f9      	ldrb	r1, [r7, #3]
 800a95c:	8b3b      	ldrh	r3, [r7, #24]
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	7d3b      	ldrb	r3, [r7, #20]
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	7c3b      	ldrb	r3, [r7, #16]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa59 	bl	800ae22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fa78 	bl	800ae80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f836 	bl	800aa18 <USBH_GetFreePipe>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a9b0:	89fb      	ldrh	r3, [r7, #14]
 800a9b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00a      	beq.n	800a9d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a9ba:	78fa      	ldrb	r2, [r7, #3]
 800a9bc:	89fb      	ldrh	r3, [r7, #14]
 800a9be:	f003 030f 	and.w	r3, r3, #15
 800a9c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	33e0      	adds	r3, #224	; 0xe0
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	b2db      	uxtb	r3, r3
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	2b0f      	cmp	r3, #15
 800a9ec:	d80d      	bhi.n	800aa0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	33e0      	adds	r3, #224	; 0xe0
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	33e0      	adds	r3, #224	; 0xe0
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
 800aa28:	e00f      	b.n	800aa4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	33e0      	adds	r3, #224	; 0xe0
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d102      	bne.n	800aa44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	e007      	b.n	800aa54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	3301      	adds	r3, #1
 800aa48:	73fb      	strb	r3, [r7, #15]
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	2b0f      	cmp	r3, #15
 800aa4e:	d9ec      	bls.n	800aa2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800aa64:	2200      	movs	r2, #0
 800aa66:	490e      	ldr	r1, [pc, #56]	; (800aaa0 <MX_USB_HOST_Init+0x40>)
 800aa68:	480e      	ldr	r0, [pc, #56]	; (800aaa4 <MX_USB_HOST_Init+0x44>)
 800aa6a:	f7fe fba7 	bl	80091bc <USBH_Init>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa74:	f7f6 ffb2 	bl	80019dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800aa78:	490b      	ldr	r1, [pc, #44]	; (800aaa8 <MX_USB_HOST_Init+0x48>)
 800aa7a:	480a      	ldr	r0, [pc, #40]	; (800aaa4 <MX_USB_HOST_Init+0x44>)
 800aa7c:	f7fe fc2c 	bl	80092d8 <USBH_RegisterClass>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa86:	f7f6 ffa9 	bl	80019dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800aa8a:	4806      	ldr	r0, [pc, #24]	; (800aaa4 <MX_USB_HOST_Init+0x44>)
 800aa8c:	f7fe fcb0 	bl	80093f0 <USBH_Start>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa96:	f7f6 ffa1 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa9a:	bf00      	nop
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800aac1 	.word	0x0800aac1
 800aaa4:	2000048c 	.word	0x2000048c
 800aaa8:	2000000c 	.word	0x2000000c

0800aaac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800aab0:	4802      	ldr	r0, [pc, #8]	; (800aabc <MX_USB_HOST_Process+0x10>)
 800aab2:	f7fe fcad 	bl	8009410 <USBH_Process>
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	2000048c 	.word	0x2000048c

0800aac0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	3b01      	subs	r3, #1
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d819      	bhi.n	800ab08 <USBH_UserProcess+0x48>
 800aad4:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <USBH_UserProcess+0x1c>)
 800aad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aada:	bf00      	nop
 800aadc:	0800ab09 	.word	0x0800ab09
 800aae0:	0800aaf9 	.word	0x0800aaf9
 800aae4:	0800ab09 	.word	0x0800ab09
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800aaf1 	.word	0x0800aaf1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aaf0:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <USBH_UserProcess+0x58>)
 800aaf2:	2203      	movs	r2, #3
 800aaf4:	701a      	strb	r2, [r3, #0]
  break;
 800aaf6:	e008      	b.n	800ab0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aaf8:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <USBH_UserProcess+0x58>)
 800aafa:	2202      	movs	r2, #2
 800aafc:	701a      	strb	r2, [r3, #0]
  break;
 800aafe:	e004      	b.n	800ab0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ab00:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <USBH_UserProcess+0x58>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	701a      	strb	r2, [r3, #0]
  break;
 800ab06:	e000      	b.n	800ab0a <USBH_UserProcess+0x4a>

  default:
  break;
 800ab08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	20000864 	.word	0x20000864

0800ab1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	; 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab24:	f107 0314 	add.w	r3, r7, #20
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a24      	ldr	r2, [pc, #144]	; (800abcc <HAL_HCD_MspInit+0xb0>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d141      	bne.n	800abc2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab3e:	2300      	movs	r3, #0
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	4a22      	ldr	r2, [pc, #136]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800ab48:	f043 0302 	orr.w	r3, r3, #2
 800ab4c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab4e:	4b20      	ldr	r3, [pc, #128]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ab5a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ab5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab60:	2302      	movs	r3, #2
 800ab62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ab6c:	230c      	movs	r3, #12
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	4619      	mov	r1, r3
 800ab76:	4817      	ldr	r0, [pc, #92]	; (800abd4 <HAL_HCD_MspInit+0xb8>)
 800ab78:	f7f8 f930 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ab7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab82:	2300      	movs	r3, #0
 800ab84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ab8a:	f107 0314 	add.w	r3, r7, #20
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4810      	ldr	r0, [pc, #64]	; (800abd4 <HAL_HCD_MspInit+0xb8>)
 800ab92:	f7f8 f923 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	4a0c      	ldr	r2, [pc, #48]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800aba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aba4:	6313      	str	r3, [r2, #48]	; 0x30
 800aba6:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <HAL_HCD_MspInit+0xb4>)
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	204d      	movs	r0, #77	; 0x4d
 800abb8:	f7f7 fd4e 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800abbc:	204d      	movs	r0, #77	; 0x4d
 800abbe:	f7f7 fd67 	bl	8002690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800abc2:	bf00      	nop
 800abc4:	3728      	adds	r7, #40	; 0x28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	40040000 	.word	0x40040000
 800abd0:	40023800 	.word	0x40023800
 800abd4:	40020400 	.word	0x40020400

0800abd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fff1 	bl	8009bce <USBH_LL_IncTimer>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff f829 	bl	8009c5a <USBH_LL_Connect>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff f832 	bl	8009c88 <USBH_LL_Disconnect>
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe ffe3 	bl	8009c22 <USBH_LL_PortEnabled>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe ffe3 	bl	8009c3e <USBH_LL_PortDisabled>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d132      	bne.n	800acf8 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ac92:	4a1c      	ldr	r2, [pc, #112]	; (800ad04 <USBH_LL_Init+0x84>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a19      	ldr	r2, [pc, #100]	; (800ad04 <USBH_LL_Init+0x84>)
 800ac9e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <USBH_LL_Init+0x84>)
 800aca4:	4a18      	ldr	r2, [pc, #96]	; (800ad08 <USBH_LL_Init+0x88>)
 800aca6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800aca8:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <USBH_LL_Init+0x84>)
 800acaa:	220c      	movs	r2, #12
 800acac:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800acae:	4b15      	ldr	r3, [pc, #84]	; (800ad04 <USBH_LL_Init+0x84>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800acb4:	4b13      	ldr	r3, [pc, #76]	; (800ad04 <USBH_LL_Init+0x84>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800acba:	4b12      	ldr	r3, [pc, #72]	; (800ad04 <USBH_LL_Init+0x84>)
 800acbc:	2202      	movs	r2, #2
 800acbe:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800acc0:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <USBH_LL_Init+0x84>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <USBH_LL_Init+0x84>)
 800acc8:	2200      	movs	r2, #0
 800acca:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800accc:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <USBH_LL_Init+0x84>)
 800acce:	2200      	movs	r2, #0
 800acd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800acd2:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <USBH_LL_Init+0x84>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800acd8:	480a      	ldr	r0, [pc, #40]	; (800ad04 <USBH_LL_Init+0x84>)
 800acda:	f7f8 fa44 	bl	8003166 <HAL_HCD_Init>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ace4:	f7f6 fe7a 	bl	80019dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ace8:	4806      	ldr	r0, [pc, #24]	; (800ad04 <USBH_LL_Init+0x84>)
 800acea:	f7f8 fe28 	bl	800393e <HAL_HCD_GetCurrentFrame>
 800acee:	4603      	mov	r3, r0
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7fe ff5c 	bl	8009bb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000868 	.word	0x20000868
 800ad08:	40040000 	.word	0x40040000

0800ad0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f8 fd95 	bl	8003852 <HAL_HCD_Start>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 f95c 	bl	800afec <USBH_Get_USB_Status>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7f8 fd9d 	bl	8003898 <HAL_HCD_Stop>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f941 	bl	800afec <USBH_Get_USB_Status>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad80:	2301      	movs	r3, #1
 800ad82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f8 fde5 	bl	800395a <HAL_HCD_GetCurrentSpeed>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d00c      	beq.n	800adb0 <USBH_LL_GetSpeed+0x38>
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d80d      	bhi.n	800adb6 <USBH_LL_GetSpeed+0x3e>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <USBH_LL_GetSpeed+0x2c>
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d003      	beq.n	800adaa <USBH_LL_GetSpeed+0x32>
 800ada2:	e008      	b.n	800adb6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73fb      	strb	r3, [r7, #15]
    break;
 800ada8:	e008      	b.n	800adbc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800adaa:	2301      	movs	r3, #1
 800adac:	73fb      	strb	r3, [r7, #15]
    break;
 800adae:	e005      	b.n	800adbc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800adb0:	2302      	movs	r3, #2
 800adb2:	73fb      	strb	r3, [r7, #15]
    break;
 800adb4:	e002      	b.n	800adbc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800adb6:	2301      	movs	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]
    break;
 800adba:	bf00      	nop
  }
  return  speed;
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800addc:	4618      	mov	r0, r3
 800adde:	f7f8 fd78 	bl	80038d2 <HAL_HCD_ResetPort>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 f8ff 	bl	800afec <USBH_Get_USB_Status>
 800adee:	4603      	mov	r3, r0
 800adf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae0e:	78fa      	ldrb	r2, [r7, #3]
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7f8 fd7f 	bl	8003916 <HAL_HCD_HC_GetXferCount>
 800ae18:	4603      	mov	r3, r0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae22:	b590      	push	{r4, r7, lr}
 800ae24:	b089      	sub	sp, #36	; 0x24
 800ae26:	af04      	add	r7, sp, #16
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	461a      	mov	r2, r3
 800ae30:	4603      	mov	r3, r0
 800ae32:	70fb      	strb	r3, [r7, #3]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70bb      	strb	r3, [r7, #2]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae4a:	787c      	ldrb	r4, [r7, #1]
 800ae4c:	78ba      	ldrb	r2, [r7, #2]
 800ae4e:	78f9      	ldrb	r1, [r7, #3]
 800ae50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	4623      	mov	r3, r4
 800ae62:	f7f8 f9e2 	bl	800322a <HAL_HCD_HC_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 f8bd 	bl	800afec <USBH_Get_USB_Status>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd90      	pop	{r4, r7, pc}

0800ae80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f8 fa52 	bl	8003348 <HAL_HCD_HC_Halt>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 f89e 	bl	800afec <USBH_Get_USB_Status>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aebe:	b590      	push	{r4, r7, lr}
 800aec0:	b089      	sub	sp, #36	; 0x24
 800aec2:	af04      	add	r7, sp, #16
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	461a      	mov	r2, r3
 800aecc:	4603      	mov	r3, r0
 800aece:	70fb      	strb	r3, [r7, #3]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70bb      	strb	r3, [r7, #2]
 800aed4:	4613      	mov	r3, r2
 800aed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aee6:	787c      	ldrb	r4, [r7, #1]
 800aee8:	78ba      	ldrb	r2, [r7, #2]
 800aeea:	78f9      	ldrb	r1, [r7, #3]
 800aeec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aef4:	9302      	str	r3, [sp, #8]
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	4623      	mov	r3, r4
 800af02:	f7f8 fa45 	bl	8003390 <HAL_HCD_HC_SubmitRequest>
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f86d 	bl	800afec <USBH_Get_USB_Status>
 800af12:	4603      	mov	r3, r0
 800af14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af16:	7bbb      	ldrb	r3, [r7, #14]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd90      	pop	{r4, r7, pc}

0800af20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af32:	78fa      	ldrb	r2, [r7, #3]
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7f8 fcd9 	bl	80038ee <HAL_HCD_HC_GetURBState>
 800af3c:	4603      	mov	r3, r0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	460b      	mov	r3, r1
 800af50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 f870 	bl	800b044 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af64:	20c8      	movs	r0, #200	; 0xc8
 800af66:	f7f7 fa9b 	bl	80024a0 <HAL_Delay>
  return USBH_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
 800af80:	4613      	mov	r3, r2
 800af82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	212c      	movs	r1, #44	; 0x2c
 800af92:	fb01 f303 	mul.w	r3, r1, r3
 800af96:	4413      	add	r3, r2
 800af98:	333b      	adds	r3, #59	; 0x3b
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	212c      	movs	r1, #44	; 0x2c
 800afa6:	fb01 f303 	mul.w	r3, r1, r3
 800afaa:	4413      	add	r3, r2
 800afac:	3354      	adds	r3, #84	; 0x54
 800afae:	78ba      	ldrb	r2, [r7, #2]
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e008      	b.n	800afc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800afb4:	78fb      	ldrb	r3, [r7, #3]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	212c      	movs	r1, #44	; 0x2c
 800afba:	fb01 f303 	mul.w	r3, r1, r3
 800afbe:	4413      	add	r3, r2
 800afc0:	3355      	adds	r3, #85	; 0x55
 800afc2:	78ba      	ldrb	r2, [r7, #2]
 800afc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7f7 fa5f 	bl	80024a0 <HAL_Delay>
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	2b03      	cmp	r3, #3
 800affe:	d817      	bhi.n	800b030 <USBH_Get_USB_Status+0x44>
 800b000:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <USBH_Get_USB_Status+0x1c>)
 800b002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b006:	bf00      	nop
 800b008:	0800b019 	.word	0x0800b019
 800b00c:	0800b01f 	.word	0x0800b01f
 800b010:	0800b025 	.word	0x0800b025
 800b014:	0800b02b 	.word	0x0800b02b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
    break;
 800b01c:	e00b      	b.n	800b036 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b01e:	2302      	movs	r3, #2
 800b020:	73fb      	strb	r3, [r7, #15]
    break;
 800b022:	e008      	b.n	800b036 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b024:	2301      	movs	r3, #1
 800b026:	73fb      	strb	r3, [r7, #15]
    break;
 800b028:	e005      	b.n	800b036 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b02a:	2302      	movs	r3, #2
 800b02c:	73fb      	strb	r3, [r7, #15]
    break;
 800b02e:	e002      	b.n	800b036 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b030:	2302      	movs	r3, #2
 800b032:	73fb      	strb	r3, [r7, #15]
    break;
 800b034:	bf00      	nop
  }
  return usb_status;
 800b036:	7bfb      	ldrb	r3, [r7, #15]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d102      	bne.n	800b05e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
 800b05c:	e001      	b.n	800b062 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	461a      	mov	r2, r3
 800b066:	2110      	movs	r1, #16
 800b068:	4803      	ldr	r0, [pc, #12]	; (800b078 <MX_DriverVbusHS+0x34>)
 800b06a:	f7f8 f863 	bl	8003134 <HAL_GPIO_WritePin>
}
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	40020800 	.word	0x40020800

0800b07c <atoi>:
 800b07c:	220a      	movs	r2, #10
 800b07e:	2100      	movs	r1, #0
 800b080:	f000 ba92 	b.w	800b5a8 <strtol>

0800b084 <__errno>:
 800b084:	4b01      	ldr	r3, [pc, #4]	; (800b08c <__errno+0x8>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	2000002c 	.word	0x2000002c

0800b090 <__libc_init_array>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	4d0d      	ldr	r5, [pc, #52]	; (800b0c8 <__libc_init_array+0x38>)
 800b094:	4c0d      	ldr	r4, [pc, #52]	; (800b0cc <__libc_init_array+0x3c>)
 800b096:	1b64      	subs	r4, r4, r5
 800b098:	10a4      	asrs	r4, r4, #2
 800b09a:	2600      	movs	r6, #0
 800b09c:	42a6      	cmp	r6, r4
 800b09e:	d109      	bne.n	800b0b4 <__libc_init_array+0x24>
 800b0a0:	4d0b      	ldr	r5, [pc, #44]	; (800b0d0 <__libc_init_array+0x40>)
 800b0a2:	4c0c      	ldr	r4, [pc, #48]	; (800b0d4 <__libc_init_array+0x44>)
 800b0a4:	f001 f910 	bl	800c2c8 <_init>
 800b0a8:	1b64      	subs	r4, r4, r5
 800b0aa:	10a4      	asrs	r4, r4, #2
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	42a6      	cmp	r6, r4
 800b0b0:	d105      	bne.n	800b0be <__libc_init_array+0x2e>
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b8:	4798      	blx	r3
 800b0ba:	3601      	adds	r6, #1
 800b0bc:	e7ee      	b.n	800b09c <__libc_init_array+0xc>
 800b0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c2:	4798      	blx	r3
 800b0c4:	3601      	adds	r6, #1
 800b0c6:	e7f2      	b.n	800b0ae <__libc_init_array+0x1e>
 800b0c8:	0800c838 	.word	0x0800c838
 800b0cc:	0800c838 	.word	0x0800c838
 800b0d0:	0800c838 	.word	0x0800c838
 800b0d4:	0800c83c 	.word	0x0800c83c

0800b0d8 <malloc>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <malloc+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f000 b87f 	b.w	800b1e0 <_malloc_r>
 800b0e2:	bf00      	nop
 800b0e4:	2000002c 	.word	0x2000002c

0800b0e8 <free>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	; (800b0f4 <free+0xc>)
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f000 b80b 	b.w	800b108 <_free_r>
 800b0f2:	bf00      	nop
 800b0f4:	2000002c 	.word	0x2000002c

0800b0f8 <memset>:
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d100      	bne.n	800b102 <memset+0xa>
 800b100:	4770      	bx	lr
 800b102:	f803 1b01 	strb.w	r1, [r3], #1
 800b106:	e7f9      	b.n	800b0fc <memset+0x4>

0800b108 <_free_r>:
 800b108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10a:	2900      	cmp	r1, #0
 800b10c:	d044      	beq.n	800b198 <_free_r+0x90>
 800b10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b112:	9001      	str	r0, [sp, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f1a1 0404 	sub.w	r4, r1, #4
 800b11a:	bfb8      	it	lt
 800b11c:	18e4      	addlt	r4, r4, r3
 800b11e:	f000 fc6d 	bl	800b9fc <__malloc_lock>
 800b122:	4a1e      	ldr	r2, [pc, #120]	; (800b19c <_free_r+0x94>)
 800b124:	9801      	ldr	r0, [sp, #4]
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	b933      	cbnz	r3, 800b138 <_free_r+0x30>
 800b12a:	6063      	str	r3, [r4, #4]
 800b12c:	6014      	str	r4, [r2, #0]
 800b12e:	b003      	add	sp, #12
 800b130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b134:	f000 bc68 	b.w	800ba08 <__malloc_unlock>
 800b138:	42a3      	cmp	r3, r4
 800b13a:	d908      	bls.n	800b14e <_free_r+0x46>
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1961      	adds	r1, r4, r5
 800b140:	428b      	cmp	r3, r1
 800b142:	bf01      	itttt	eq
 800b144:	6819      	ldreq	r1, [r3, #0]
 800b146:	685b      	ldreq	r3, [r3, #4]
 800b148:	1949      	addeq	r1, r1, r5
 800b14a:	6021      	streq	r1, [r4, #0]
 800b14c:	e7ed      	b.n	800b12a <_free_r+0x22>
 800b14e:	461a      	mov	r2, r3
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	b10b      	cbz	r3, 800b158 <_free_r+0x50>
 800b154:	42a3      	cmp	r3, r4
 800b156:	d9fa      	bls.n	800b14e <_free_r+0x46>
 800b158:	6811      	ldr	r1, [r2, #0]
 800b15a:	1855      	adds	r5, r2, r1
 800b15c:	42a5      	cmp	r5, r4
 800b15e:	d10b      	bne.n	800b178 <_free_r+0x70>
 800b160:	6824      	ldr	r4, [r4, #0]
 800b162:	4421      	add	r1, r4
 800b164:	1854      	adds	r4, r2, r1
 800b166:	42a3      	cmp	r3, r4
 800b168:	6011      	str	r1, [r2, #0]
 800b16a:	d1e0      	bne.n	800b12e <_free_r+0x26>
 800b16c:	681c      	ldr	r4, [r3, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	6053      	str	r3, [r2, #4]
 800b172:	4421      	add	r1, r4
 800b174:	6011      	str	r1, [r2, #0]
 800b176:	e7da      	b.n	800b12e <_free_r+0x26>
 800b178:	d902      	bls.n	800b180 <_free_r+0x78>
 800b17a:	230c      	movs	r3, #12
 800b17c:	6003      	str	r3, [r0, #0]
 800b17e:	e7d6      	b.n	800b12e <_free_r+0x26>
 800b180:	6825      	ldr	r5, [r4, #0]
 800b182:	1961      	adds	r1, r4, r5
 800b184:	428b      	cmp	r3, r1
 800b186:	bf04      	itt	eq
 800b188:	6819      	ldreq	r1, [r3, #0]
 800b18a:	685b      	ldreq	r3, [r3, #4]
 800b18c:	6063      	str	r3, [r4, #4]
 800b18e:	bf04      	itt	eq
 800b190:	1949      	addeq	r1, r1, r5
 800b192:	6021      	streq	r1, [r4, #0]
 800b194:	6054      	str	r4, [r2, #4]
 800b196:	e7ca      	b.n	800b12e <_free_r+0x26>
 800b198:	b003      	add	sp, #12
 800b19a:	bd30      	pop	{r4, r5, pc}
 800b19c:	20000b6c 	.word	0x20000b6c

0800b1a0 <sbrk_aligned>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	4e0e      	ldr	r6, [pc, #56]	; (800b1dc <sbrk_aligned+0x3c>)
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	6831      	ldr	r1, [r6, #0]
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	b911      	cbnz	r1, 800b1b2 <sbrk_aligned+0x12>
 800b1ac:	f000 f8a4 	bl	800b2f8 <_sbrk_r>
 800b1b0:	6030      	str	r0, [r6, #0]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	f000 f89f 	bl	800b2f8 <_sbrk_r>
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	d00a      	beq.n	800b1d4 <sbrk_aligned+0x34>
 800b1be:	1cc4      	adds	r4, r0, #3
 800b1c0:	f024 0403 	bic.w	r4, r4, #3
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d007      	beq.n	800b1d8 <sbrk_aligned+0x38>
 800b1c8:	1a21      	subs	r1, r4, r0
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 f894 	bl	800b2f8 <_sbrk_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d101      	bne.n	800b1d8 <sbrk_aligned+0x38>
 800b1d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b1d8:	4620      	mov	r0, r4
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	20000b70 	.word	0x20000b70

0800b1e0 <_malloc_r>:
 800b1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e4:	1ccd      	adds	r5, r1, #3
 800b1e6:	f025 0503 	bic.w	r5, r5, #3
 800b1ea:	3508      	adds	r5, #8
 800b1ec:	2d0c      	cmp	r5, #12
 800b1ee:	bf38      	it	cc
 800b1f0:	250c      	movcc	r5, #12
 800b1f2:	2d00      	cmp	r5, #0
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	db01      	blt.n	800b1fc <_malloc_r+0x1c>
 800b1f8:	42a9      	cmp	r1, r5
 800b1fa:	d905      	bls.n	800b208 <_malloc_r+0x28>
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	603b      	str	r3, [r7, #0]
 800b200:	2600      	movs	r6, #0
 800b202:	4630      	mov	r0, r6
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b208:	4e2e      	ldr	r6, [pc, #184]	; (800b2c4 <_malloc_r+0xe4>)
 800b20a:	f000 fbf7 	bl	800b9fc <__malloc_lock>
 800b20e:	6833      	ldr	r3, [r6, #0]
 800b210:	461c      	mov	r4, r3
 800b212:	bb34      	cbnz	r4, 800b262 <_malloc_r+0x82>
 800b214:	4629      	mov	r1, r5
 800b216:	4638      	mov	r0, r7
 800b218:	f7ff ffc2 	bl	800b1a0 <sbrk_aligned>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	4604      	mov	r4, r0
 800b220:	d14d      	bne.n	800b2be <_malloc_r+0xde>
 800b222:	6834      	ldr	r4, [r6, #0]
 800b224:	4626      	mov	r6, r4
 800b226:	2e00      	cmp	r6, #0
 800b228:	d140      	bne.n	800b2ac <_malloc_r+0xcc>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	4631      	mov	r1, r6
 800b22e:	4638      	mov	r0, r7
 800b230:	eb04 0803 	add.w	r8, r4, r3
 800b234:	f000 f860 	bl	800b2f8 <_sbrk_r>
 800b238:	4580      	cmp	r8, r0
 800b23a:	d13a      	bne.n	800b2b2 <_malloc_r+0xd2>
 800b23c:	6821      	ldr	r1, [r4, #0]
 800b23e:	3503      	adds	r5, #3
 800b240:	1a6d      	subs	r5, r5, r1
 800b242:	f025 0503 	bic.w	r5, r5, #3
 800b246:	3508      	adds	r5, #8
 800b248:	2d0c      	cmp	r5, #12
 800b24a:	bf38      	it	cc
 800b24c:	250c      	movcc	r5, #12
 800b24e:	4629      	mov	r1, r5
 800b250:	4638      	mov	r0, r7
 800b252:	f7ff ffa5 	bl	800b1a0 <sbrk_aligned>
 800b256:	3001      	adds	r0, #1
 800b258:	d02b      	beq.n	800b2b2 <_malloc_r+0xd2>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	442b      	add	r3, r5
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	e00e      	b.n	800b280 <_malloc_r+0xa0>
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	1b52      	subs	r2, r2, r5
 800b266:	d41e      	bmi.n	800b2a6 <_malloc_r+0xc6>
 800b268:	2a0b      	cmp	r2, #11
 800b26a:	d916      	bls.n	800b29a <_malloc_r+0xba>
 800b26c:	1961      	adds	r1, r4, r5
 800b26e:	42a3      	cmp	r3, r4
 800b270:	6025      	str	r5, [r4, #0]
 800b272:	bf18      	it	ne
 800b274:	6059      	strne	r1, [r3, #4]
 800b276:	6863      	ldr	r3, [r4, #4]
 800b278:	bf08      	it	eq
 800b27a:	6031      	streq	r1, [r6, #0]
 800b27c:	5162      	str	r2, [r4, r5]
 800b27e:	604b      	str	r3, [r1, #4]
 800b280:	4638      	mov	r0, r7
 800b282:	f104 060b 	add.w	r6, r4, #11
 800b286:	f000 fbbf 	bl	800ba08 <__malloc_unlock>
 800b28a:	f026 0607 	bic.w	r6, r6, #7
 800b28e:	1d23      	adds	r3, r4, #4
 800b290:	1af2      	subs	r2, r6, r3
 800b292:	d0b6      	beq.n	800b202 <_malloc_r+0x22>
 800b294:	1b9b      	subs	r3, r3, r6
 800b296:	50a3      	str	r3, [r4, r2]
 800b298:	e7b3      	b.n	800b202 <_malloc_r+0x22>
 800b29a:	6862      	ldr	r2, [r4, #4]
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	bf0c      	ite	eq
 800b2a0:	6032      	streq	r2, [r6, #0]
 800b2a2:	605a      	strne	r2, [r3, #4]
 800b2a4:	e7ec      	b.n	800b280 <_malloc_r+0xa0>
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	6864      	ldr	r4, [r4, #4]
 800b2aa:	e7b2      	b.n	800b212 <_malloc_r+0x32>
 800b2ac:	4634      	mov	r4, r6
 800b2ae:	6876      	ldr	r6, [r6, #4]
 800b2b0:	e7b9      	b.n	800b226 <_malloc_r+0x46>
 800b2b2:	230c      	movs	r3, #12
 800b2b4:	603b      	str	r3, [r7, #0]
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f000 fba6 	bl	800ba08 <__malloc_unlock>
 800b2bc:	e7a1      	b.n	800b202 <_malloc_r+0x22>
 800b2be:	6025      	str	r5, [r4, #0]
 800b2c0:	e7de      	b.n	800b280 <_malloc_r+0xa0>
 800b2c2:	bf00      	nop
 800b2c4:	20000b6c 	.word	0x20000b6c

0800b2c8 <iprintf>:
 800b2c8:	b40f      	push	{r0, r1, r2, r3}
 800b2ca:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <iprintf+0x2c>)
 800b2cc:	b513      	push	{r0, r1, r4, lr}
 800b2ce:	681c      	ldr	r4, [r3, #0]
 800b2d0:	b124      	cbz	r4, 800b2dc <iprintf+0x14>
 800b2d2:	69a3      	ldr	r3, [r4, #24]
 800b2d4:	b913      	cbnz	r3, 800b2dc <iprintf+0x14>
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fa8a 	bl	800b7f0 <__sinit>
 800b2dc:	ab05      	add	r3, sp, #20
 800b2de:	9a04      	ldr	r2, [sp, #16]
 800b2e0:	68a1      	ldr	r1, [r4, #8]
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fbbf 	bl	800ba68 <_vfiprintf_r>
 800b2ea:	b002      	add	sp, #8
 800b2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f0:	b004      	add	sp, #16
 800b2f2:	4770      	bx	lr
 800b2f4:	2000002c 	.word	0x2000002c

0800b2f8 <_sbrk_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d06      	ldr	r5, [pc, #24]	; (800b314 <_sbrk_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f7 f818 	bl	8002338 <_sbrk>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_sbrk_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_sbrk_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	20000b78 	.word	0x20000b78

0800b318 <setvbuf>:
 800b318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b31c:	461d      	mov	r5, r3
 800b31e:	4b5d      	ldr	r3, [pc, #372]	; (800b494 <setvbuf+0x17c>)
 800b320:	681f      	ldr	r7, [r3, #0]
 800b322:	4604      	mov	r4, r0
 800b324:	460e      	mov	r6, r1
 800b326:	4690      	mov	r8, r2
 800b328:	b127      	cbz	r7, 800b334 <setvbuf+0x1c>
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	b913      	cbnz	r3, 800b334 <setvbuf+0x1c>
 800b32e:	4638      	mov	r0, r7
 800b330:	f000 fa5e 	bl	800b7f0 <__sinit>
 800b334:	4b58      	ldr	r3, [pc, #352]	; (800b498 <setvbuf+0x180>)
 800b336:	429c      	cmp	r4, r3
 800b338:	d167      	bne.n	800b40a <setvbuf+0xf2>
 800b33a:	687c      	ldr	r4, [r7, #4]
 800b33c:	f1b8 0f02 	cmp.w	r8, #2
 800b340:	d006      	beq.n	800b350 <setvbuf+0x38>
 800b342:	f1b8 0f01 	cmp.w	r8, #1
 800b346:	f200 809f 	bhi.w	800b488 <setvbuf+0x170>
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	f2c0 809c 	blt.w	800b488 <setvbuf+0x170>
 800b350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d405      	bmi.n	800b362 <setvbuf+0x4a>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	0598      	lsls	r0, r3, #22
 800b35a:	d402      	bmi.n	800b362 <setvbuf+0x4a>
 800b35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b35e:	f000 fae5 	bl	800b92c <__retarget_lock_acquire_recursive>
 800b362:	4621      	mov	r1, r4
 800b364:	4638      	mov	r0, r7
 800b366:	f000 f9af 	bl	800b6c8 <_fflush_r>
 800b36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b36c:	b141      	cbz	r1, 800b380 <setvbuf+0x68>
 800b36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b372:	4299      	cmp	r1, r3
 800b374:	d002      	beq.n	800b37c <setvbuf+0x64>
 800b376:	4638      	mov	r0, r7
 800b378:	f7ff fec6 	bl	800b108 <_free_r>
 800b37c:	2300      	movs	r3, #0
 800b37e:	6363      	str	r3, [r4, #52]	; 0x34
 800b380:	2300      	movs	r3, #0
 800b382:	61a3      	str	r3, [r4, #24]
 800b384:	6063      	str	r3, [r4, #4]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	0619      	lsls	r1, r3, #24
 800b38a:	d503      	bpl.n	800b394 <setvbuf+0x7c>
 800b38c:	6921      	ldr	r1, [r4, #16]
 800b38e:	4638      	mov	r0, r7
 800b390:	f7ff feba 	bl	800b108 <_free_r>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	f1b8 0f02 	cmp.w	r8, #2
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	d06c      	beq.n	800b480 <setvbuf+0x168>
 800b3a6:	ab01      	add	r3, sp, #4
 800b3a8:	466a      	mov	r2, sp
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f000 fabf 	bl	800b930 <__swhatbuf_r>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	4318      	orrs	r0, r3
 800b3b6:	81a0      	strh	r0, [r4, #12]
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	d130      	bne.n	800b41e <setvbuf+0x106>
 800b3bc:	9d00      	ldr	r5, [sp, #0]
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f7ff fe8a 	bl	800b0d8 <malloc>
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d155      	bne.n	800b476 <setvbuf+0x15e>
 800b3ca:	f8dd 9000 	ldr.w	r9, [sp]
 800b3ce:	45a9      	cmp	r9, r5
 800b3d0:	d14a      	bne.n	800b468 <setvbuf+0x150>
 800b3d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	60a2      	str	r2, [r4, #8]
 800b3da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b3de:	6022      	str	r2, [r4, #0]
 800b3e0:	6122      	str	r2, [r4, #16]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e8:	6162      	str	r2, [r4, #20]
 800b3ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3ec:	f043 0302 	orr.w	r3, r3, #2
 800b3f0:	07d2      	lsls	r2, r2, #31
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	d405      	bmi.n	800b402 <setvbuf+0xea>
 800b3f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b3fa:	d102      	bne.n	800b402 <setvbuf+0xea>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fe:	f000 fa96 	bl	800b92e <__retarget_lock_release_recursive>
 800b402:	4628      	mov	r0, r5
 800b404:	b003      	add	sp, #12
 800b406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <setvbuf+0x184>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d101      	bne.n	800b414 <setvbuf+0xfc>
 800b410:	68bc      	ldr	r4, [r7, #8]
 800b412:	e793      	b.n	800b33c <setvbuf+0x24>
 800b414:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <setvbuf+0x188>)
 800b416:	429c      	cmp	r4, r3
 800b418:	bf08      	it	eq
 800b41a:	68fc      	ldreq	r4, [r7, #12]
 800b41c:	e78e      	b.n	800b33c <setvbuf+0x24>
 800b41e:	2e00      	cmp	r6, #0
 800b420:	d0cd      	beq.n	800b3be <setvbuf+0xa6>
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	b913      	cbnz	r3, 800b42c <setvbuf+0x114>
 800b426:	4638      	mov	r0, r7
 800b428:	f000 f9e2 	bl	800b7f0 <__sinit>
 800b42c:	f1b8 0f01 	cmp.w	r8, #1
 800b430:	bf08      	it	eq
 800b432:	89a3      	ldrheq	r3, [r4, #12]
 800b434:	6026      	str	r6, [r4, #0]
 800b436:	bf04      	itt	eq
 800b438:	f043 0301 	orreq.w	r3, r3, #1
 800b43c:	81a3      	strheq	r3, [r4, #12]
 800b43e:	89a2      	ldrh	r2, [r4, #12]
 800b440:	f012 0308 	ands.w	r3, r2, #8
 800b444:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b448:	d01c      	beq.n	800b484 <setvbuf+0x16c>
 800b44a:	07d3      	lsls	r3, r2, #31
 800b44c:	bf41      	itttt	mi
 800b44e:	2300      	movmi	r3, #0
 800b450:	426d      	negmi	r5, r5
 800b452:	60a3      	strmi	r3, [r4, #8]
 800b454:	61a5      	strmi	r5, [r4, #24]
 800b456:	bf58      	it	pl
 800b458:	60a5      	strpl	r5, [r4, #8]
 800b45a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b45c:	f015 0501 	ands.w	r5, r5, #1
 800b460:	d115      	bne.n	800b48e <setvbuf+0x176>
 800b462:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b466:	e7c8      	b.n	800b3fa <setvbuf+0xe2>
 800b468:	4648      	mov	r0, r9
 800b46a:	f7ff fe35 	bl	800b0d8 <malloc>
 800b46e:	4606      	mov	r6, r0
 800b470:	2800      	cmp	r0, #0
 800b472:	d0ae      	beq.n	800b3d2 <setvbuf+0xba>
 800b474:	464d      	mov	r5, r9
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	e7d0      	b.n	800b422 <setvbuf+0x10a>
 800b480:	2500      	movs	r5, #0
 800b482:	e7a8      	b.n	800b3d6 <setvbuf+0xbe>
 800b484:	60a3      	str	r3, [r4, #8]
 800b486:	e7e8      	b.n	800b45a <setvbuf+0x142>
 800b488:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b48c:	e7b9      	b.n	800b402 <setvbuf+0xea>
 800b48e:	2500      	movs	r5, #0
 800b490:	e7b7      	b.n	800b402 <setvbuf+0xea>
 800b492:	bf00      	nop
 800b494:	2000002c 	.word	0x2000002c
 800b498:	0800c7bc 	.word	0x0800c7bc
 800b49c:	0800c7dc 	.word	0x0800c7dc
 800b4a0:	0800c79c 	.word	0x0800c79c

0800b4a4 <_strtol_l.constprop.0>:
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4aa:	d001      	beq.n	800b4b0 <_strtol_l.constprop.0+0xc>
 800b4ac:	2b24      	cmp	r3, #36	; 0x24
 800b4ae:	d906      	bls.n	800b4be <_strtol_l.constprop.0+0x1a>
 800b4b0:	f7ff fde8 	bl	800b084 <__errno>
 800b4b4:	2316      	movs	r3, #22
 800b4b6:	6003      	str	r3, [r0, #0]
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b5a4 <_strtol_l.constprop.0+0x100>
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	462e      	mov	r6, r5
 800b4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b4ce:	f017 0708 	ands.w	r7, r7, #8
 800b4d2:	d1f7      	bne.n	800b4c4 <_strtol_l.constprop.0+0x20>
 800b4d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b4d6:	d132      	bne.n	800b53e <_strtol_l.constprop.0+0x9a>
 800b4d8:	782c      	ldrb	r4, [r5, #0]
 800b4da:	2701      	movs	r7, #1
 800b4dc:	1cb5      	adds	r5, r6, #2
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d05b      	beq.n	800b59a <_strtol_l.constprop.0+0xf6>
 800b4e2:	2b10      	cmp	r3, #16
 800b4e4:	d109      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b4e6:	2c30      	cmp	r4, #48	; 0x30
 800b4e8:	d107      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b4ea:	782c      	ldrb	r4, [r5, #0]
 800b4ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4f0:	2c58      	cmp	r4, #88	; 0x58
 800b4f2:	d14d      	bne.n	800b590 <_strtol_l.constprop.0+0xec>
 800b4f4:	786c      	ldrb	r4, [r5, #1]
 800b4f6:	2310      	movs	r3, #16
 800b4f8:	3502      	adds	r5, #2
 800b4fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b502:	f04f 0c00 	mov.w	ip, #0
 800b506:	fbb8 f9f3 	udiv	r9, r8, r3
 800b50a:	4666      	mov	r6, ip
 800b50c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b510:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b514:	f1be 0f09 	cmp.w	lr, #9
 800b518:	d816      	bhi.n	800b548 <_strtol_l.constprop.0+0xa4>
 800b51a:	4674      	mov	r4, lr
 800b51c:	42a3      	cmp	r3, r4
 800b51e:	dd24      	ble.n	800b56a <_strtol_l.constprop.0+0xc6>
 800b520:	f1bc 0f00 	cmp.w	ip, #0
 800b524:	db1e      	blt.n	800b564 <_strtol_l.constprop.0+0xc0>
 800b526:	45b1      	cmp	r9, r6
 800b528:	d31c      	bcc.n	800b564 <_strtol_l.constprop.0+0xc0>
 800b52a:	d101      	bne.n	800b530 <_strtol_l.constprop.0+0x8c>
 800b52c:	45a2      	cmp	sl, r4
 800b52e:	db19      	blt.n	800b564 <_strtol_l.constprop.0+0xc0>
 800b530:	fb06 4603 	mla	r6, r6, r3, r4
 800b534:	f04f 0c01 	mov.w	ip, #1
 800b538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b53c:	e7e8      	b.n	800b510 <_strtol_l.constprop.0+0x6c>
 800b53e:	2c2b      	cmp	r4, #43	; 0x2b
 800b540:	bf04      	itt	eq
 800b542:	782c      	ldrbeq	r4, [r5, #0]
 800b544:	1cb5      	addeq	r5, r6, #2
 800b546:	e7ca      	b.n	800b4de <_strtol_l.constprop.0+0x3a>
 800b548:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b54c:	f1be 0f19 	cmp.w	lr, #25
 800b550:	d801      	bhi.n	800b556 <_strtol_l.constprop.0+0xb2>
 800b552:	3c37      	subs	r4, #55	; 0x37
 800b554:	e7e2      	b.n	800b51c <_strtol_l.constprop.0+0x78>
 800b556:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b55a:	f1be 0f19 	cmp.w	lr, #25
 800b55e:	d804      	bhi.n	800b56a <_strtol_l.constprop.0+0xc6>
 800b560:	3c57      	subs	r4, #87	; 0x57
 800b562:	e7db      	b.n	800b51c <_strtol_l.constprop.0+0x78>
 800b564:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b568:	e7e6      	b.n	800b538 <_strtol_l.constprop.0+0x94>
 800b56a:	f1bc 0f00 	cmp.w	ip, #0
 800b56e:	da05      	bge.n	800b57c <_strtol_l.constprop.0+0xd8>
 800b570:	2322      	movs	r3, #34	; 0x22
 800b572:	6003      	str	r3, [r0, #0]
 800b574:	4646      	mov	r6, r8
 800b576:	b942      	cbnz	r2, 800b58a <_strtol_l.constprop.0+0xe6>
 800b578:	4630      	mov	r0, r6
 800b57a:	e79e      	b.n	800b4ba <_strtol_l.constprop.0+0x16>
 800b57c:	b107      	cbz	r7, 800b580 <_strtol_l.constprop.0+0xdc>
 800b57e:	4276      	negs	r6, r6
 800b580:	2a00      	cmp	r2, #0
 800b582:	d0f9      	beq.n	800b578 <_strtol_l.constprop.0+0xd4>
 800b584:	f1bc 0f00 	cmp.w	ip, #0
 800b588:	d000      	beq.n	800b58c <_strtol_l.constprop.0+0xe8>
 800b58a:	1e69      	subs	r1, r5, #1
 800b58c:	6011      	str	r1, [r2, #0]
 800b58e:	e7f3      	b.n	800b578 <_strtol_l.constprop.0+0xd4>
 800b590:	2430      	movs	r4, #48	; 0x30
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1b1      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b596:	2308      	movs	r3, #8
 800b598:	e7af      	b.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b59a:	2c30      	cmp	r4, #48	; 0x30
 800b59c:	d0a5      	beq.n	800b4ea <_strtol_l.constprop.0+0x46>
 800b59e:	230a      	movs	r3, #10
 800b5a0:	e7ab      	b.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b5a2:	bf00      	nop
 800b5a4:	0800c699 	.word	0x0800c699

0800b5a8 <strtol>:
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	460a      	mov	r2, r1
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <strtol+0x10>)
 800b5b0:	6800      	ldr	r0, [r0, #0]
 800b5b2:	f7ff bf77 	b.w	800b4a4 <_strtol_l.constprop.0>
 800b5b6:	bf00      	nop
 800b5b8:	2000002c 	.word	0x2000002c

0800b5bc <__sflush_r>:
 800b5bc:	898a      	ldrh	r2, [r1, #12]
 800b5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	0710      	lsls	r0, r2, #28
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	d458      	bmi.n	800b67c <__sflush_r+0xc0>
 800b5ca:	684b      	ldr	r3, [r1, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dc05      	bgt.n	800b5dc <__sflush_r+0x20>
 800b5d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dc02      	bgt.n	800b5dc <__sflush_r+0x20>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	d0f9      	beq.n	800b5d6 <__sflush_r+0x1a>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5e8:	682f      	ldr	r7, [r5, #0]
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	d032      	beq.n	800b654 <__sflush_r+0x98>
 800b5ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	075a      	lsls	r2, r3, #29
 800b5f4:	d505      	bpl.n	800b602 <__sflush_r+0x46>
 800b5f6:	6863      	ldr	r3, [r4, #4]
 800b5f8:	1ac0      	subs	r0, r0, r3
 800b5fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5fc:	b10b      	cbz	r3, 800b602 <__sflush_r+0x46>
 800b5fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b600:	1ac0      	subs	r0, r0, r3
 800b602:	2300      	movs	r3, #0
 800b604:	4602      	mov	r2, r0
 800b606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b608:	6a21      	ldr	r1, [r4, #32]
 800b60a:	4628      	mov	r0, r5
 800b60c:	47b0      	blx	r6
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	d106      	bne.n	800b622 <__sflush_r+0x66>
 800b614:	6829      	ldr	r1, [r5, #0]
 800b616:	291d      	cmp	r1, #29
 800b618:	d82c      	bhi.n	800b674 <__sflush_r+0xb8>
 800b61a:	4a2a      	ldr	r2, [pc, #168]	; (800b6c4 <__sflush_r+0x108>)
 800b61c:	40ca      	lsrs	r2, r1
 800b61e:	07d6      	lsls	r6, r2, #31
 800b620:	d528      	bpl.n	800b674 <__sflush_r+0xb8>
 800b622:	2200      	movs	r2, #0
 800b624:	6062      	str	r2, [r4, #4]
 800b626:	04d9      	lsls	r1, r3, #19
 800b628:	6922      	ldr	r2, [r4, #16]
 800b62a:	6022      	str	r2, [r4, #0]
 800b62c:	d504      	bpl.n	800b638 <__sflush_r+0x7c>
 800b62e:	1c42      	adds	r2, r0, #1
 800b630:	d101      	bne.n	800b636 <__sflush_r+0x7a>
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	b903      	cbnz	r3, 800b638 <__sflush_r+0x7c>
 800b636:	6560      	str	r0, [r4, #84]	; 0x54
 800b638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b63a:	602f      	str	r7, [r5, #0]
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d0ca      	beq.n	800b5d6 <__sflush_r+0x1a>
 800b640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b644:	4299      	cmp	r1, r3
 800b646:	d002      	beq.n	800b64e <__sflush_r+0x92>
 800b648:	4628      	mov	r0, r5
 800b64a:	f7ff fd5d 	bl	800b108 <_free_r>
 800b64e:	2000      	movs	r0, #0
 800b650:	6360      	str	r0, [r4, #52]	; 0x34
 800b652:	e7c1      	b.n	800b5d8 <__sflush_r+0x1c>
 800b654:	6a21      	ldr	r1, [r4, #32]
 800b656:	2301      	movs	r3, #1
 800b658:	4628      	mov	r0, r5
 800b65a:	47b0      	blx	r6
 800b65c:	1c41      	adds	r1, r0, #1
 800b65e:	d1c7      	bne.n	800b5f0 <__sflush_r+0x34>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0c4      	beq.n	800b5f0 <__sflush_r+0x34>
 800b666:	2b1d      	cmp	r3, #29
 800b668:	d001      	beq.n	800b66e <__sflush_r+0xb2>
 800b66a:	2b16      	cmp	r3, #22
 800b66c:	d101      	bne.n	800b672 <__sflush_r+0xb6>
 800b66e:	602f      	str	r7, [r5, #0]
 800b670:	e7b1      	b.n	800b5d6 <__sflush_r+0x1a>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	e7ad      	b.n	800b5d8 <__sflush_r+0x1c>
 800b67c:	690f      	ldr	r7, [r1, #16]
 800b67e:	2f00      	cmp	r7, #0
 800b680:	d0a9      	beq.n	800b5d6 <__sflush_r+0x1a>
 800b682:	0793      	lsls	r3, r2, #30
 800b684:	680e      	ldr	r6, [r1, #0]
 800b686:	bf08      	it	eq
 800b688:	694b      	ldreq	r3, [r1, #20]
 800b68a:	600f      	str	r7, [r1, #0]
 800b68c:	bf18      	it	ne
 800b68e:	2300      	movne	r3, #0
 800b690:	eba6 0807 	sub.w	r8, r6, r7
 800b694:	608b      	str	r3, [r1, #8]
 800b696:	f1b8 0f00 	cmp.w	r8, #0
 800b69a:	dd9c      	ble.n	800b5d6 <__sflush_r+0x1a>
 800b69c:	6a21      	ldr	r1, [r4, #32]
 800b69e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6a0:	4643      	mov	r3, r8
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b0      	blx	r6
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	dc06      	bgt.n	800b6ba <__sflush_r+0xfe>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b2:	81a3      	strh	r3, [r4, #12]
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b8:	e78e      	b.n	800b5d8 <__sflush_r+0x1c>
 800b6ba:	4407      	add	r7, r0
 800b6bc:	eba8 0800 	sub.w	r8, r8, r0
 800b6c0:	e7e9      	b.n	800b696 <__sflush_r+0xda>
 800b6c2:	bf00      	nop
 800b6c4:	20400001 	.word	0x20400001

0800b6c8 <_fflush_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b913      	cbnz	r3, 800b6d8 <_fflush_r+0x10>
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	b118      	cbz	r0, 800b6e2 <_fflush_r+0x1a>
 800b6da:	6983      	ldr	r3, [r0, #24]
 800b6dc:	b90b      	cbnz	r3, 800b6e2 <_fflush_r+0x1a>
 800b6de:	f000 f887 	bl	800b7f0 <__sinit>
 800b6e2:	4b14      	ldr	r3, [pc, #80]	; (800b734 <_fflush_r+0x6c>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	d11b      	bne.n	800b720 <_fflush_r+0x58>
 800b6e8:	686c      	ldr	r4, [r5, #4]
 800b6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0ef      	beq.n	800b6d2 <_fflush_r+0xa>
 800b6f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6f4:	07d0      	lsls	r0, r2, #31
 800b6f6:	d404      	bmi.n	800b702 <_fflush_r+0x3a>
 800b6f8:	0599      	lsls	r1, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_fflush_r+0x3a>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6fe:	f000 f915 	bl	800b92c <__retarget_lock_acquire_recursive>
 800b702:	4628      	mov	r0, r5
 800b704:	4621      	mov	r1, r4
 800b706:	f7ff ff59 	bl	800b5bc <__sflush_r>
 800b70a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b70c:	07da      	lsls	r2, r3, #31
 800b70e:	4605      	mov	r5, r0
 800b710:	d4e0      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	059b      	lsls	r3, r3, #22
 800b716:	d4dd      	bmi.n	800b6d4 <_fflush_r+0xc>
 800b718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b71a:	f000 f908 	bl	800b92e <__retarget_lock_release_recursive>
 800b71e:	e7d9      	b.n	800b6d4 <_fflush_r+0xc>
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <_fflush_r+0x70>)
 800b722:	429c      	cmp	r4, r3
 800b724:	d101      	bne.n	800b72a <_fflush_r+0x62>
 800b726:	68ac      	ldr	r4, [r5, #8]
 800b728:	e7df      	b.n	800b6ea <_fflush_r+0x22>
 800b72a:	4b04      	ldr	r3, [pc, #16]	; (800b73c <_fflush_r+0x74>)
 800b72c:	429c      	cmp	r4, r3
 800b72e:	bf08      	it	eq
 800b730:	68ec      	ldreq	r4, [r5, #12]
 800b732:	e7da      	b.n	800b6ea <_fflush_r+0x22>
 800b734:	0800c7bc 	.word	0x0800c7bc
 800b738:	0800c7dc 	.word	0x0800c7dc
 800b73c:	0800c79c 	.word	0x0800c79c

0800b740 <std>:
 800b740:	2300      	movs	r3, #0
 800b742:	b510      	push	{r4, lr}
 800b744:	4604      	mov	r4, r0
 800b746:	e9c0 3300 	strd	r3, r3, [r0]
 800b74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b74e:	6083      	str	r3, [r0, #8]
 800b750:	8181      	strh	r1, [r0, #12]
 800b752:	6643      	str	r3, [r0, #100]	; 0x64
 800b754:	81c2      	strh	r2, [r0, #14]
 800b756:	6183      	str	r3, [r0, #24]
 800b758:	4619      	mov	r1, r3
 800b75a:	2208      	movs	r2, #8
 800b75c:	305c      	adds	r0, #92	; 0x5c
 800b75e:	f7ff fccb 	bl	800b0f8 <memset>
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <std+0x38>)
 800b764:	6263      	str	r3, [r4, #36]	; 0x24
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <std+0x3c>)
 800b768:	62a3      	str	r3, [r4, #40]	; 0x28
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <std+0x40>)
 800b76c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <std+0x44>)
 800b770:	6224      	str	r4, [r4, #32]
 800b772:	6323      	str	r3, [r4, #48]	; 0x30
 800b774:	bd10      	pop	{r4, pc}
 800b776:	bf00      	nop
 800b778:	0800bff1 	.word	0x0800bff1
 800b77c:	0800c013 	.word	0x0800c013
 800b780:	0800c04b 	.word	0x0800c04b
 800b784:	0800c06f 	.word	0x0800c06f

0800b788 <_cleanup_r>:
 800b788:	4901      	ldr	r1, [pc, #4]	; (800b790 <_cleanup_r+0x8>)
 800b78a:	f000 b8af 	b.w	800b8ec <_fwalk_reent>
 800b78e:	bf00      	nop
 800b790:	0800b6c9 	.word	0x0800b6c9

0800b794 <__sfmoreglue>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	2268      	movs	r2, #104	; 0x68
 800b798:	1e4d      	subs	r5, r1, #1
 800b79a:	4355      	muls	r5, r2
 800b79c:	460e      	mov	r6, r1
 800b79e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7a2:	f7ff fd1d 	bl	800b1e0 <_malloc_r>
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	b140      	cbz	r0, 800b7bc <__sfmoreglue+0x28>
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	e9c0 1600 	strd	r1, r6, [r0]
 800b7b0:	300c      	adds	r0, #12
 800b7b2:	60a0      	str	r0, [r4, #8]
 800b7b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7b8:	f7ff fc9e 	bl	800b0f8 <memset>
 800b7bc:	4620      	mov	r0, r4
 800b7be:	bd70      	pop	{r4, r5, r6, pc}

0800b7c0 <__sfp_lock_acquire>:
 800b7c0:	4801      	ldr	r0, [pc, #4]	; (800b7c8 <__sfp_lock_acquire+0x8>)
 800b7c2:	f000 b8b3 	b.w	800b92c <__retarget_lock_acquire_recursive>
 800b7c6:	bf00      	nop
 800b7c8:	20000b75 	.word	0x20000b75

0800b7cc <__sfp_lock_release>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sfp_lock_release+0x8>)
 800b7ce:	f000 b8ae 	b.w	800b92e <__retarget_lock_release_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20000b75 	.word	0x20000b75

0800b7d8 <__sinit_lock_acquire>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sinit_lock_acquire+0x8>)
 800b7da:	f000 b8a7 	b.w	800b92c <__retarget_lock_acquire_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20000b76 	.word	0x20000b76

0800b7e4 <__sinit_lock_release>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sinit_lock_release+0x8>)
 800b7e6:	f000 b8a2 	b.w	800b92e <__retarget_lock_release_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20000b76 	.word	0x20000b76

0800b7f0 <__sinit>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	f7ff fff0 	bl	800b7d8 <__sinit_lock_acquire>
 800b7f8:	69a3      	ldr	r3, [r4, #24]
 800b7fa:	b11b      	cbz	r3, 800b804 <__sinit+0x14>
 800b7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b800:	f7ff bff0 	b.w	800b7e4 <__sinit_lock_release>
 800b804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b808:	6523      	str	r3, [r4, #80]	; 0x50
 800b80a:	4b13      	ldr	r3, [pc, #76]	; (800b858 <__sinit+0x68>)
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <__sinit+0x6c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	62a2      	str	r2, [r4, #40]	; 0x28
 800b812:	42a3      	cmp	r3, r4
 800b814:	bf04      	itt	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	61a3      	streq	r3, [r4, #24]
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f820 	bl	800b860 <__sfp>
 800b820:	6060      	str	r0, [r4, #4]
 800b822:	4620      	mov	r0, r4
 800b824:	f000 f81c 	bl	800b860 <__sfp>
 800b828:	60a0      	str	r0, [r4, #8]
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f818 	bl	800b860 <__sfp>
 800b830:	2200      	movs	r2, #0
 800b832:	60e0      	str	r0, [r4, #12]
 800b834:	2104      	movs	r1, #4
 800b836:	6860      	ldr	r0, [r4, #4]
 800b838:	f7ff ff82 	bl	800b740 <std>
 800b83c:	68a0      	ldr	r0, [r4, #8]
 800b83e:	2201      	movs	r2, #1
 800b840:	2109      	movs	r1, #9
 800b842:	f7ff ff7d 	bl	800b740 <std>
 800b846:	68e0      	ldr	r0, [r4, #12]
 800b848:	2202      	movs	r2, #2
 800b84a:	2112      	movs	r1, #18
 800b84c:	f7ff ff78 	bl	800b740 <std>
 800b850:	2301      	movs	r3, #1
 800b852:	61a3      	str	r3, [r4, #24]
 800b854:	e7d2      	b.n	800b7fc <__sinit+0xc>
 800b856:	bf00      	nop
 800b858:	0800c694 	.word	0x0800c694
 800b85c:	0800b789 	.word	0x0800b789

0800b860 <__sfp>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	4607      	mov	r7, r0
 800b864:	f7ff ffac 	bl	800b7c0 <__sfp_lock_acquire>
 800b868:	4b1e      	ldr	r3, [pc, #120]	; (800b8e4 <__sfp+0x84>)
 800b86a:	681e      	ldr	r6, [r3, #0]
 800b86c:	69b3      	ldr	r3, [r6, #24]
 800b86e:	b913      	cbnz	r3, 800b876 <__sfp+0x16>
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff ffbd 	bl	800b7f0 <__sinit>
 800b876:	3648      	adds	r6, #72	; 0x48
 800b878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	d503      	bpl.n	800b888 <__sfp+0x28>
 800b880:	6833      	ldr	r3, [r6, #0]
 800b882:	b30b      	cbz	r3, 800b8c8 <__sfp+0x68>
 800b884:	6836      	ldr	r6, [r6, #0]
 800b886:	e7f7      	b.n	800b878 <__sfp+0x18>
 800b888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b88c:	b9d5      	cbnz	r5, 800b8c4 <__sfp+0x64>
 800b88e:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <__sfp+0x88>)
 800b890:	60e3      	str	r3, [r4, #12]
 800b892:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b896:	6665      	str	r5, [r4, #100]	; 0x64
 800b898:	f000 f847 	bl	800b92a <__retarget_lock_init_recursive>
 800b89c:	f7ff ff96 	bl	800b7cc <__sfp_lock_release>
 800b8a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8a8:	6025      	str	r5, [r4, #0]
 800b8aa:	61a5      	str	r5, [r4, #24]
 800b8ac:	2208      	movs	r2, #8
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b4:	f7ff fc20 	bl	800b0f8 <memset>
 800b8b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c4:	3468      	adds	r4, #104	; 0x68
 800b8c6:	e7d9      	b.n	800b87c <__sfp+0x1c>
 800b8c8:	2104      	movs	r1, #4
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff ff62 	bl	800b794 <__sfmoreglue>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	6030      	str	r0, [r6, #0]
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d1d5      	bne.n	800b884 <__sfp+0x24>
 800b8d8:	f7ff ff78 	bl	800b7cc <__sfp_lock_release>
 800b8dc:	230c      	movs	r3, #12
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	e7ee      	b.n	800b8c0 <__sfp+0x60>
 800b8e2:	bf00      	nop
 800b8e4:	0800c694 	.word	0x0800c694
 800b8e8:	ffff0001 	.word	0xffff0001

0800b8ec <_fwalk_reent>:
 800b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	4688      	mov	r8, r1
 800b8f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8f8:	2700      	movs	r7, #0
 800b8fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8fe:	f1b9 0901 	subs.w	r9, r9, #1
 800b902:	d505      	bpl.n	800b910 <_fwalk_reent+0x24>
 800b904:	6824      	ldr	r4, [r4, #0]
 800b906:	2c00      	cmp	r4, #0
 800b908:	d1f7      	bne.n	800b8fa <_fwalk_reent+0xe>
 800b90a:	4638      	mov	r0, r7
 800b90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b910:	89ab      	ldrh	r3, [r5, #12]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d907      	bls.n	800b926 <_fwalk_reent+0x3a>
 800b916:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b91a:	3301      	adds	r3, #1
 800b91c:	d003      	beq.n	800b926 <_fwalk_reent+0x3a>
 800b91e:	4629      	mov	r1, r5
 800b920:	4630      	mov	r0, r6
 800b922:	47c0      	blx	r8
 800b924:	4307      	orrs	r7, r0
 800b926:	3568      	adds	r5, #104	; 0x68
 800b928:	e7e9      	b.n	800b8fe <_fwalk_reent+0x12>

0800b92a <__retarget_lock_init_recursive>:
 800b92a:	4770      	bx	lr

0800b92c <__retarget_lock_acquire_recursive>:
 800b92c:	4770      	bx	lr

0800b92e <__retarget_lock_release_recursive>:
 800b92e:	4770      	bx	lr

0800b930 <__swhatbuf_r>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	460e      	mov	r6, r1
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	2900      	cmp	r1, #0
 800b93a:	b096      	sub	sp, #88	; 0x58
 800b93c:	4614      	mov	r4, r2
 800b93e:	461d      	mov	r5, r3
 800b940:	da08      	bge.n	800b954 <__swhatbuf_r+0x24>
 800b942:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	602a      	str	r2, [r5, #0]
 800b94a:	061a      	lsls	r2, r3, #24
 800b94c:	d410      	bmi.n	800b970 <__swhatbuf_r+0x40>
 800b94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b952:	e00e      	b.n	800b972 <__swhatbuf_r+0x42>
 800b954:	466a      	mov	r2, sp
 800b956:	f000 fc71 	bl	800c23c <_fstat_r>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	dbf1      	blt.n	800b942 <__swhatbuf_r+0x12>
 800b95e:	9a01      	ldr	r2, [sp, #4]
 800b960:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b964:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b968:	425a      	negs	r2, r3
 800b96a:	415a      	adcs	r2, r3
 800b96c:	602a      	str	r2, [r5, #0]
 800b96e:	e7ee      	b.n	800b94e <__swhatbuf_r+0x1e>
 800b970:	2340      	movs	r3, #64	; 0x40
 800b972:	2000      	movs	r0, #0
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	b016      	add	sp, #88	; 0x58
 800b978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b97c <__smakebuf_r>:
 800b97c:	898b      	ldrh	r3, [r1, #12]
 800b97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b980:	079d      	lsls	r5, r3, #30
 800b982:	4606      	mov	r6, r0
 800b984:	460c      	mov	r4, r1
 800b986:	d507      	bpl.n	800b998 <__smakebuf_r+0x1c>
 800b988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	6123      	str	r3, [r4, #16]
 800b990:	2301      	movs	r3, #1
 800b992:	6163      	str	r3, [r4, #20]
 800b994:	b002      	add	sp, #8
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	ab01      	add	r3, sp, #4
 800b99a:	466a      	mov	r2, sp
 800b99c:	f7ff ffc8 	bl	800b930 <__swhatbuf_r>
 800b9a0:	9900      	ldr	r1, [sp, #0]
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f7ff fc1b 	bl	800b1e0 <_malloc_r>
 800b9aa:	b948      	cbnz	r0, 800b9c0 <__smakebuf_r+0x44>
 800b9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b0:	059a      	lsls	r2, r3, #22
 800b9b2:	d4ef      	bmi.n	800b994 <__smakebuf_r+0x18>
 800b9b4:	f023 0303 	bic.w	r3, r3, #3
 800b9b8:	f043 0302 	orr.w	r3, r3, #2
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	e7e3      	b.n	800b988 <__smakebuf_r+0xc>
 800b9c0:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <__smakebuf_r+0x7c>)
 800b9c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	6020      	str	r0, [r4, #0]
 800b9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	6163      	str	r3, [r4, #20]
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	6120      	str	r0, [r4, #16]
 800b9d6:	b15b      	cbz	r3, 800b9f0 <__smakebuf_r+0x74>
 800b9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f000 fc3f 	bl	800c260 <_isatty_r>
 800b9e2:	b128      	cbz	r0, 800b9f0 <__smakebuf_r+0x74>
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	f023 0303 	bic.w	r3, r3, #3
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	81a3      	strh	r3, [r4, #12]
 800b9f0:	89a0      	ldrh	r0, [r4, #12]
 800b9f2:	4305      	orrs	r5, r0
 800b9f4:	81a5      	strh	r5, [r4, #12]
 800b9f6:	e7cd      	b.n	800b994 <__smakebuf_r+0x18>
 800b9f8:	0800b789 	.word	0x0800b789

0800b9fc <__malloc_lock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__malloc_lock+0x8>)
 800b9fe:	f7ff bf95 	b.w	800b92c <__retarget_lock_acquire_recursive>
 800ba02:	bf00      	nop
 800ba04:	20000b74 	.word	0x20000b74

0800ba08 <__malloc_unlock>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__malloc_unlock+0x8>)
 800ba0a:	f7ff bf90 	b.w	800b92e <__retarget_lock_release_recursive>
 800ba0e:	bf00      	nop
 800ba10:	20000b74 	.word	0x20000b74

0800ba14 <__sfputc_r>:
 800ba14:	6893      	ldr	r3, [r2, #8]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	b410      	push	{r4}
 800ba1c:	6093      	str	r3, [r2, #8]
 800ba1e:	da08      	bge.n	800ba32 <__sfputc_r+0x1e>
 800ba20:	6994      	ldr	r4, [r2, #24]
 800ba22:	42a3      	cmp	r3, r4
 800ba24:	db01      	blt.n	800ba2a <__sfputc_r+0x16>
 800ba26:	290a      	cmp	r1, #10
 800ba28:	d103      	bne.n	800ba32 <__sfputc_r+0x1e>
 800ba2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba2e:	f000 bb23 	b.w	800c078 <__swbuf_r>
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	1c58      	adds	r0, r3, #1
 800ba36:	6010      	str	r0, [r2, #0]
 800ba38:	7019      	strb	r1, [r3, #0]
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <__sfputs_r>:
 800ba42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba44:	4606      	mov	r6, r0
 800ba46:	460f      	mov	r7, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	18d5      	adds	r5, r2, r3
 800ba4c:	42ac      	cmp	r4, r5
 800ba4e:	d101      	bne.n	800ba54 <__sfputs_r+0x12>
 800ba50:	2000      	movs	r0, #0
 800ba52:	e007      	b.n	800ba64 <__sfputs_r+0x22>
 800ba54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba58:	463a      	mov	r2, r7
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ffda 	bl	800ba14 <__sfputc_r>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d1f3      	bne.n	800ba4c <__sfputs_r+0xa>
 800ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba68 <_vfiprintf_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	b09d      	sub	sp, #116	; 0x74
 800ba70:	4614      	mov	r4, r2
 800ba72:	4698      	mov	r8, r3
 800ba74:	4606      	mov	r6, r0
 800ba76:	b118      	cbz	r0, 800ba80 <_vfiprintf_r+0x18>
 800ba78:	6983      	ldr	r3, [r0, #24]
 800ba7a:	b90b      	cbnz	r3, 800ba80 <_vfiprintf_r+0x18>
 800ba7c:	f7ff feb8 	bl	800b7f0 <__sinit>
 800ba80:	4b89      	ldr	r3, [pc, #548]	; (800bca8 <_vfiprintf_r+0x240>)
 800ba82:	429d      	cmp	r5, r3
 800ba84:	d11b      	bne.n	800babe <_vfiprintf_r+0x56>
 800ba86:	6875      	ldr	r5, [r6, #4]
 800ba88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba8a:	07d9      	lsls	r1, r3, #31
 800ba8c:	d405      	bmi.n	800ba9a <_vfiprintf_r+0x32>
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	059a      	lsls	r2, r3, #22
 800ba92:	d402      	bmi.n	800ba9a <_vfiprintf_r+0x32>
 800ba94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba96:	f7ff ff49 	bl	800b92c <__retarget_lock_acquire_recursive>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	071b      	lsls	r3, r3, #28
 800ba9e:	d501      	bpl.n	800baa4 <_vfiprintf_r+0x3c>
 800baa0:	692b      	ldr	r3, [r5, #16]
 800baa2:	b9eb      	cbnz	r3, 800bae0 <_vfiprintf_r+0x78>
 800baa4:	4629      	mov	r1, r5
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 fb4a 	bl	800c140 <__swsetup_r>
 800baac:	b1c0      	cbz	r0, 800bae0 <_vfiprintf_r+0x78>
 800baae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab0:	07dc      	lsls	r4, r3, #31
 800bab2:	d50e      	bpl.n	800bad2 <_vfiprintf_r+0x6a>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bab8:	b01d      	add	sp, #116	; 0x74
 800baba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babe:	4b7b      	ldr	r3, [pc, #492]	; (800bcac <_vfiprintf_r+0x244>)
 800bac0:	429d      	cmp	r5, r3
 800bac2:	d101      	bne.n	800bac8 <_vfiprintf_r+0x60>
 800bac4:	68b5      	ldr	r5, [r6, #8]
 800bac6:	e7df      	b.n	800ba88 <_vfiprintf_r+0x20>
 800bac8:	4b79      	ldr	r3, [pc, #484]	; (800bcb0 <_vfiprintf_r+0x248>)
 800baca:	429d      	cmp	r5, r3
 800bacc:	bf08      	it	eq
 800bace:	68f5      	ldreq	r5, [r6, #12]
 800bad0:	e7da      	b.n	800ba88 <_vfiprintf_r+0x20>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	0598      	lsls	r0, r3, #22
 800bad6:	d4ed      	bmi.n	800bab4 <_vfiprintf_r+0x4c>
 800bad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bada:	f7ff ff28 	bl	800b92e <__retarget_lock_release_recursive>
 800bade:	e7e9      	b.n	800bab4 <_vfiprintf_r+0x4c>
 800bae0:	2300      	movs	r3, #0
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	2320      	movs	r3, #32
 800bae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baea:	f8cd 800c 	str.w	r8, [sp, #12]
 800baee:	2330      	movs	r3, #48	; 0x30
 800baf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcb4 <_vfiprintf_r+0x24c>
 800baf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baf8:	f04f 0901 	mov.w	r9, #1
 800bafc:	4623      	mov	r3, r4
 800bafe:	469a      	mov	sl, r3
 800bb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb04:	b10a      	cbz	r2, 800bb0a <_vfiprintf_r+0xa2>
 800bb06:	2a25      	cmp	r2, #37	; 0x25
 800bb08:	d1f9      	bne.n	800bafe <_vfiprintf_r+0x96>
 800bb0a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0e:	d00b      	beq.n	800bb28 <_vfiprintf_r+0xc0>
 800bb10:	465b      	mov	r3, fp
 800bb12:	4622      	mov	r2, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ff93 	bl	800ba42 <__sfputs_r>
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	f000 80aa 	beq.w	800bc76 <_vfiprintf_r+0x20e>
 800bb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb24:	445a      	add	r2, fp
 800bb26:	9209      	str	r2, [sp, #36]	; 0x24
 800bb28:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80a2 	beq.w	800bc76 <_vfiprintf_r+0x20e>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb3c:	f10a 0a01 	add.w	sl, sl, #1
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	9307      	str	r3, [sp, #28]
 800bb44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb48:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2205      	movs	r2, #5
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	4858      	ldr	r0, [pc, #352]	; (800bcb4 <_vfiprintf_r+0x24c>)
 800bb54:	f7f4 fb4c 	bl	80001f0 <memchr>
 800bb58:	9a04      	ldr	r2, [sp, #16]
 800bb5a:	b9d8      	cbnz	r0, 800bb94 <_vfiprintf_r+0x12c>
 800bb5c:	06d1      	lsls	r1, r2, #27
 800bb5e:	bf44      	itt	mi
 800bb60:	2320      	movmi	r3, #32
 800bb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb66:	0713      	lsls	r3, r2, #28
 800bb68:	bf44      	itt	mi
 800bb6a:	232b      	movmi	r3, #43	; 0x2b
 800bb6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb70:	f89a 3000 	ldrb.w	r3, [sl]
 800bb74:	2b2a      	cmp	r3, #42	; 0x2a
 800bb76:	d015      	beq.n	800bba4 <_vfiprintf_r+0x13c>
 800bb78:	9a07      	ldr	r2, [sp, #28]
 800bb7a:	4654      	mov	r4, sl
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f04f 0c0a 	mov.w	ip, #10
 800bb82:	4621      	mov	r1, r4
 800bb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb88:	3b30      	subs	r3, #48	; 0x30
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d94e      	bls.n	800bc2c <_vfiprintf_r+0x1c4>
 800bb8e:	b1b0      	cbz	r0, 800bbbe <_vfiprintf_r+0x156>
 800bb90:	9207      	str	r2, [sp, #28]
 800bb92:	e014      	b.n	800bbbe <_vfiprintf_r+0x156>
 800bb94:	eba0 0308 	sub.w	r3, r0, r8
 800bb98:	fa09 f303 	lsl.w	r3, r9, r3
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	9304      	str	r3, [sp, #16]
 800bba0:	46a2      	mov	sl, r4
 800bba2:	e7d2      	b.n	800bb4a <_vfiprintf_r+0xe2>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1d19      	adds	r1, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	9103      	str	r1, [sp, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bfbb      	ittet	lt
 800bbb0:	425b      	neglt	r3, r3
 800bbb2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb6:	9307      	strge	r3, [sp, #28]
 800bbb8:	9307      	strlt	r3, [sp, #28]
 800bbba:	bfb8      	it	lt
 800bbbc:	9204      	strlt	r2, [sp, #16]
 800bbbe:	7823      	ldrb	r3, [r4, #0]
 800bbc0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc2:	d10c      	bne.n	800bbde <_vfiprintf_r+0x176>
 800bbc4:	7863      	ldrb	r3, [r4, #1]
 800bbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc8:	d135      	bne.n	800bc36 <_vfiprintf_r+0x1ce>
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	1d1a      	adds	r2, r3, #4
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	9203      	str	r2, [sp, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bfb8      	it	lt
 800bbd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bbda:	3402      	adds	r4, #2
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcc4 <_vfiprintf_r+0x25c>
 800bbe2:	7821      	ldrb	r1, [r4, #0]
 800bbe4:	2203      	movs	r2, #3
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	f7f4 fb02 	bl	80001f0 <memchr>
 800bbec:	b140      	cbz	r0, 800bc00 <_vfiprintf_r+0x198>
 800bbee:	2340      	movs	r3, #64	; 0x40
 800bbf0:	eba0 000a 	sub.w	r0, r0, sl
 800bbf4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	4303      	orrs	r3, r0
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	482c      	ldr	r0, [pc, #176]	; (800bcb8 <_vfiprintf_r+0x250>)
 800bc06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	f7f4 faf0 	bl	80001f0 <memchr>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d03f      	beq.n	800bc94 <_vfiprintf_r+0x22c>
 800bc14:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <_vfiprintf_r+0x254>)
 800bc16:	bb1b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x1f8>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	3308      	adds	r3, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc26:	443b      	add	r3, r7
 800bc28:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2a:	e767      	b.n	800bafc <_vfiprintf_r+0x94>
 800bc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc30:	460c      	mov	r4, r1
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7a5      	b.n	800bb82 <_vfiprintf_r+0x11a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f04f 0c0a 	mov.w	ip, #10
 800bc42:	4620      	mov	r0, r4
 800bc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc48:	3a30      	subs	r2, #48	; 0x30
 800bc4a:	2a09      	cmp	r2, #9
 800bc4c:	d903      	bls.n	800bc56 <_vfiprintf_r+0x1ee>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c5      	beq.n	800bbde <_vfiprintf_r+0x176>
 800bc52:	9105      	str	r1, [sp, #20]
 800bc54:	e7c3      	b.n	800bbde <_vfiprintf_r+0x176>
 800bc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7f0      	b.n	800bc42 <_vfiprintf_r+0x1da>
 800bc60:	ab03      	add	r3, sp, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462a      	mov	r2, r5
 800bc66:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <_vfiprintf_r+0x258>)
 800bc68:	a904      	add	r1, sp, #16
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f3af 8000 	nop.w
 800bc70:	4607      	mov	r7, r0
 800bc72:	1c78      	adds	r0, r7, #1
 800bc74:	d1d6      	bne.n	800bc24 <_vfiprintf_r+0x1bc>
 800bc76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc78:	07d9      	lsls	r1, r3, #31
 800bc7a:	d405      	bmi.n	800bc88 <_vfiprintf_r+0x220>
 800bc7c:	89ab      	ldrh	r3, [r5, #12]
 800bc7e:	059a      	lsls	r2, r3, #22
 800bc80:	d402      	bmi.n	800bc88 <_vfiprintf_r+0x220>
 800bc82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc84:	f7ff fe53 	bl	800b92e <__retarget_lock_release_recursive>
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	065b      	lsls	r3, r3, #25
 800bc8c:	f53f af12 	bmi.w	800bab4 <_vfiprintf_r+0x4c>
 800bc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc92:	e711      	b.n	800bab8 <_vfiprintf_r+0x50>
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <_vfiprintf_r+0x258>)
 800bc9c:	a904      	add	r1, sp, #16
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f000 f880 	bl	800bda4 <_printf_i>
 800bca4:	e7e4      	b.n	800bc70 <_vfiprintf_r+0x208>
 800bca6:	bf00      	nop
 800bca8:	0800c7bc 	.word	0x0800c7bc
 800bcac:	0800c7dc 	.word	0x0800c7dc
 800bcb0:	0800c79c 	.word	0x0800c79c
 800bcb4:	0800c7fc 	.word	0x0800c7fc
 800bcb8:	0800c806 	.word	0x0800c806
 800bcbc:	00000000 	.word	0x00000000
 800bcc0:	0800ba43 	.word	0x0800ba43
 800bcc4:	0800c802 	.word	0x0800c802

0800bcc8 <_printf_common>:
 800bcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	4616      	mov	r6, r2
 800bcce:	4699      	mov	r9, r3
 800bcd0:	688a      	ldr	r2, [r1, #8]
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	bfb8      	it	lt
 800bcdc:	4613      	movlt	r3, r2
 800bcde:	6033      	str	r3, [r6, #0]
 800bce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bce4:	4607      	mov	r7, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	b10a      	cbz	r2, 800bcee <_printf_common+0x26>
 800bcea:	3301      	adds	r3, #1
 800bcec:	6033      	str	r3, [r6, #0]
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	0699      	lsls	r1, r3, #26
 800bcf2:	bf42      	ittt	mi
 800bcf4:	6833      	ldrmi	r3, [r6, #0]
 800bcf6:	3302      	addmi	r3, #2
 800bcf8:	6033      	strmi	r3, [r6, #0]
 800bcfa:	6825      	ldr	r5, [r4, #0]
 800bcfc:	f015 0506 	ands.w	r5, r5, #6
 800bd00:	d106      	bne.n	800bd10 <_printf_common+0x48>
 800bd02:	f104 0a19 	add.w	sl, r4, #25
 800bd06:	68e3      	ldr	r3, [r4, #12]
 800bd08:	6832      	ldr	r2, [r6, #0]
 800bd0a:	1a9b      	subs	r3, r3, r2
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	dc26      	bgt.n	800bd5e <_printf_common+0x96>
 800bd10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd14:	1e13      	subs	r3, r2, #0
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	bf18      	it	ne
 800bd1a:	2301      	movne	r3, #1
 800bd1c:	0692      	lsls	r2, r2, #26
 800bd1e:	d42b      	bmi.n	800bd78 <_printf_common+0xb0>
 800bd20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd24:	4649      	mov	r1, r9
 800bd26:	4638      	mov	r0, r7
 800bd28:	47c0      	blx	r8
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d01e      	beq.n	800bd6c <_printf_common+0xa4>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	68e5      	ldr	r5, [r4, #12]
 800bd32:	6832      	ldr	r2, [r6, #0]
 800bd34:	f003 0306 	and.w	r3, r3, #6
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	bf08      	it	eq
 800bd3c:	1aad      	subeq	r5, r5, r2
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	bf0c      	ite	eq
 800bd44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd48:	2500      	movne	r5, #0
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	bfc4      	itt	gt
 800bd4e:	1a9b      	subgt	r3, r3, r2
 800bd50:	18ed      	addgt	r5, r5, r3
 800bd52:	2600      	movs	r6, #0
 800bd54:	341a      	adds	r4, #26
 800bd56:	42b5      	cmp	r5, r6
 800bd58:	d11a      	bne.n	800bd90 <_printf_common+0xc8>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	e008      	b.n	800bd70 <_printf_common+0xa8>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4652      	mov	r2, sl
 800bd62:	4649      	mov	r1, r9
 800bd64:	4638      	mov	r0, r7
 800bd66:	47c0      	blx	r8
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d103      	bne.n	800bd74 <_printf_common+0xac>
 800bd6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd74:	3501      	adds	r5, #1
 800bd76:	e7c6      	b.n	800bd06 <_printf_common+0x3e>
 800bd78:	18e1      	adds	r1, r4, r3
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	2030      	movs	r0, #48	; 0x30
 800bd7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd82:	4422      	add	r2, r4
 800bd84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd8c:	3302      	adds	r3, #2
 800bd8e:	e7c7      	b.n	800bd20 <_printf_common+0x58>
 800bd90:	2301      	movs	r3, #1
 800bd92:	4622      	mov	r2, r4
 800bd94:	4649      	mov	r1, r9
 800bd96:	4638      	mov	r0, r7
 800bd98:	47c0      	blx	r8
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d0e6      	beq.n	800bd6c <_printf_common+0xa4>
 800bd9e:	3601      	adds	r6, #1
 800bda0:	e7d9      	b.n	800bd56 <_printf_common+0x8e>
	...

0800bda4 <_printf_i>:
 800bda4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	7e0f      	ldrb	r7, [r1, #24]
 800bdaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdac:	2f78      	cmp	r7, #120	; 0x78
 800bdae:	4691      	mov	r9, r2
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	469a      	mov	sl, r3
 800bdb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdba:	d807      	bhi.n	800bdcc <_printf_i+0x28>
 800bdbc:	2f62      	cmp	r7, #98	; 0x62
 800bdbe:	d80a      	bhi.n	800bdd6 <_printf_i+0x32>
 800bdc0:	2f00      	cmp	r7, #0
 800bdc2:	f000 80d8 	beq.w	800bf76 <_printf_i+0x1d2>
 800bdc6:	2f58      	cmp	r7, #88	; 0x58
 800bdc8:	f000 80a3 	beq.w	800bf12 <_printf_i+0x16e>
 800bdcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdd4:	e03a      	b.n	800be4c <_printf_i+0xa8>
 800bdd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdda:	2b15      	cmp	r3, #21
 800bddc:	d8f6      	bhi.n	800bdcc <_printf_i+0x28>
 800bdde:	a101      	add	r1, pc, #4	; (adr r1, 800bde4 <_printf_i+0x40>)
 800bde0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bde4:	0800be3d 	.word	0x0800be3d
 800bde8:	0800be51 	.word	0x0800be51
 800bdec:	0800bdcd 	.word	0x0800bdcd
 800bdf0:	0800bdcd 	.word	0x0800bdcd
 800bdf4:	0800bdcd 	.word	0x0800bdcd
 800bdf8:	0800bdcd 	.word	0x0800bdcd
 800bdfc:	0800be51 	.word	0x0800be51
 800be00:	0800bdcd 	.word	0x0800bdcd
 800be04:	0800bdcd 	.word	0x0800bdcd
 800be08:	0800bdcd 	.word	0x0800bdcd
 800be0c:	0800bdcd 	.word	0x0800bdcd
 800be10:	0800bf5d 	.word	0x0800bf5d
 800be14:	0800be81 	.word	0x0800be81
 800be18:	0800bf3f 	.word	0x0800bf3f
 800be1c:	0800bdcd 	.word	0x0800bdcd
 800be20:	0800bdcd 	.word	0x0800bdcd
 800be24:	0800bf7f 	.word	0x0800bf7f
 800be28:	0800bdcd 	.word	0x0800bdcd
 800be2c:	0800be81 	.word	0x0800be81
 800be30:	0800bdcd 	.word	0x0800bdcd
 800be34:	0800bdcd 	.word	0x0800bdcd
 800be38:	0800bf47 	.word	0x0800bf47
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	1d1a      	adds	r2, r3, #4
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	602a      	str	r2, [r5, #0]
 800be44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be4c:	2301      	movs	r3, #1
 800be4e:	e0a3      	b.n	800bf98 <_printf_i+0x1f4>
 800be50:	6820      	ldr	r0, [r4, #0]
 800be52:	6829      	ldr	r1, [r5, #0]
 800be54:	0606      	lsls	r6, r0, #24
 800be56:	f101 0304 	add.w	r3, r1, #4
 800be5a:	d50a      	bpl.n	800be72 <_printf_i+0xce>
 800be5c:	680e      	ldr	r6, [r1, #0]
 800be5e:	602b      	str	r3, [r5, #0]
 800be60:	2e00      	cmp	r6, #0
 800be62:	da03      	bge.n	800be6c <_printf_i+0xc8>
 800be64:	232d      	movs	r3, #45	; 0x2d
 800be66:	4276      	negs	r6, r6
 800be68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be6c:	485e      	ldr	r0, [pc, #376]	; (800bfe8 <_printf_i+0x244>)
 800be6e:	230a      	movs	r3, #10
 800be70:	e019      	b.n	800bea6 <_printf_i+0x102>
 800be72:	680e      	ldr	r6, [r1, #0]
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be7a:	bf18      	it	ne
 800be7c:	b236      	sxthne	r6, r6
 800be7e:	e7ef      	b.n	800be60 <_printf_i+0xbc>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	6820      	ldr	r0, [r4, #0]
 800be84:	1d19      	adds	r1, r3, #4
 800be86:	6029      	str	r1, [r5, #0]
 800be88:	0601      	lsls	r1, r0, #24
 800be8a:	d501      	bpl.n	800be90 <_printf_i+0xec>
 800be8c:	681e      	ldr	r6, [r3, #0]
 800be8e:	e002      	b.n	800be96 <_printf_i+0xf2>
 800be90:	0646      	lsls	r6, r0, #25
 800be92:	d5fb      	bpl.n	800be8c <_printf_i+0xe8>
 800be94:	881e      	ldrh	r6, [r3, #0]
 800be96:	4854      	ldr	r0, [pc, #336]	; (800bfe8 <_printf_i+0x244>)
 800be98:	2f6f      	cmp	r7, #111	; 0x6f
 800be9a:	bf0c      	ite	eq
 800be9c:	2308      	moveq	r3, #8
 800be9e:	230a      	movne	r3, #10
 800bea0:	2100      	movs	r1, #0
 800bea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bea6:	6865      	ldr	r5, [r4, #4]
 800bea8:	60a5      	str	r5, [r4, #8]
 800beaa:	2d00      	cmp	r5, #0
 800beac:	bfa2      	ittt	ge
 800beae:	6821      	ldrge	r1, [r4, #0]
 800beb0:	f021 0104 	bicge.w	r1, r1, #4
 800beb4:	6021      	strge	r1, [r4, #0]
 800beb6:	b90e      	cbnz	r6, 800bebc <_printf_i+0x118>
 800beb8:	2d00      	cmp	r5, #0
 800beba:	d04d      	beq.n	800bf58 <_printf_i+0x1b4>
 800bebc:	4615      	mov	r5, r2
 800bebe:	fbb6 f1f3 	udiv	r1, r6, r3
 800bec2:	fb03 6711 	mls	r7, r3, r1, r6
 800bec6:	5dc7      	ldrb	r7, [r0, r7]
 800bec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800becc:	4637      	mov	r7, r6
 800bece:	42bb      	cmp	r3, r7
 800bed0:	460e      	mov	r6, r1
 800bed2:	d9f4      	bls.n	800bebe <_printf_i+0x11a>
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d10b      	bne.n	800bef0 <_printf_i+0x14c>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	07de      	lsls	r6, r3, #31
 800bedc:	d508      	bpl.n	800bef0 <_printf_i+0x14c>
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	6861      	ldr	r1, [r4, #4]
 800bee2:	4299      	cmp	r1, r3
 800bee4:	bfde      	ittt	le
 800bee6:	2330      	movle	r3, #48	; 0x30
 800bee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800beec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bef0:	1b52      	subs	r2, r2, r5
 800bef2:	6122      	str	r2, [r4, #16]
 800bef4:	f8cd a000 	str.w	sl, [sp]
 800bef8:	464b      	mov	r3, r9
 800befa:	aa03      	add	r2, sp, #12
 800befc:	4621      	mov	r1, r4
 800befe:	4640      	mov	r0, r8
 800bf00:	f7ff fee2 	bl	800bcc8 <_printf_common>
 800bf04:	3001      	adds	r0, #1
 800bf06:	d14c      	bne.n	800bfa2 <_printf_i+0x1fe>
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf0c:	b004      	add	sp, #16
 800bf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf12:	4835      	ldr	r0, [pc, #212]	; (800bfe8 <_printf_i+0x244>)
 800bf14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf18:	6829      	ldr	r1, [r5, #0]
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf20:	6029      	str	r1, [r5, #0]
 800bf22:	061d      	lsls	r5, r3, #24
 800bf24:	d514      	bpl.n	800bf50 <_printf_i+0x1ac>
 800bf26:	07df      	lsls	r7, r3, #31
 800bf28:	bf44      	itt	mi
 800bf2a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf2e:	6023      	strmi	r3, [r4, #0]
 800bf30:	b91e      	cbnz	r6, 800bf3a <_printf_i+0x196>
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	f023 0320 	bic.w	r3, r3, #32
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	2310      	movs	r3, #16
 800bf3c:	e7b0      	b.n	800bea0 <_printf_i+0xfc>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	f043 0320 	orr.w	r3, r3, #32
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	2378      	movs	r3, #120	; 0x78
 800bf48:	4828      	ldr	r0, [pc, #160]	; (800bfec <_printf_i+0x248>)
 800bf4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf4e:	e7e3      	b.n	800bf18 <_printf_i+0x174>
 800bf50:	0659      	lsls	r1, r3, #25
 800bf52:	bf48      	it	mi
 800bf54:	b2b6      	uxthmi	r6, r6
 800bf56:	e7e6      	b.n	800bf26 <_printf_i+0x182>
 800bf58:	4615      	mov	r5, r2
 800bf5a:	e7bb      	b.n	800bed4 <_printf_i+0x130>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	6826      	ldr	r6, [r4, #0]
 800bf60:	6961      	ldr	r1, [r4, #20]
 800bf62:	1d18      	adds	r0, r3, #4
 800bf64:	6028      	str	r0, [r5, #0]
 800bf66:	0635      	lsls	r5, r6, #24
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	d501      	bpl.n	800bf70 <_printf_i+0x1cc>
 800bf6c:	6019      	str	r1, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <_printf_i+0x1d2>
 800bf70:	0670      	lsls	r0, r6, #25
 800bf72:	d5fb      	bpl.n	800bf6c <_printf_i+0x1c8>
 800bf74:	8019      	strh	r1, [r3, #0]
 800bf76:	2300      	movs	r3, #0
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	4615      	mov	r5, r2
 800bf7c:	e7ba      	b.n	800bef4 <_printf_i+0x150>
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	1d1a      	adds	r2, r3, #4
 800bf82:	602a      	str	r2, [r5, #0]
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	6862      	ldr	r2, [r4, #4]
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f4 f930 	bl	80001f0 <memchr>
 800bf90:	b108      	cbz	r0, 800bf96 <_printf_i+0x1f2>
 800bf92:	1b40      	subs	r0, r0, r5
 800bf94:	6060      	str	r0, [r4, #4]
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	6123      	str	r3, [r4, #16]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa0:	e7a8      	b.n	800bef4 <_printf_i+0x150>
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	462a      	mov	r2, r5
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	47d0      	blx	sl
 800bfac:	3001      	adds	r0, #1
 800bfae:	d0ab      	beq.n	800bf08 <_printf_i+0x164>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	079b      	lsls	r3, r3, #30
 800bfb4:	d413      	bmi.n	800bfde <_printf_i+0x23a>
 800bfb6:	68e0      	ldr	r0, [r4, #12]
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	4298      	cmp	r0, r3
 800bfbc:	bfb8      	it	lt
 800bfbe:	4618      	movlt	r0, r3
 800bfc0:	e7a4      	b.n	800bf0c <_printf_i+0x168>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4632      	mov	r2, r6
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	4640      	mov	r0, r8
 800bfca:	47d0      	blx	sl
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d09b      	beq.n	800bf08 <_printf_i+0x164>
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	9903      	ldr	r1, [sp, #12]
 800bfd6:	1a5b      	subs	r3, r3, r1
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	dcf2      	bgt.n	800bfc2 <_printf_i+0x21e>
 800bfdc:	e7eb      	b.n	800bfb6 <_printf_i+0x212>
 800bfde:	2500      	movs	r5, #0
 800bfe0:	f104 0619 	add.w	r6, r4, #25
 800bfe4:	e7f5      	b.n	800bfd2 <_printf_i+0x22e>
 800bfe6:	bf00      	nop
 800bfe8:	0800c80d 	.word	0x0800c80d
 800bfec:	0800c81e 	.word	0x0800c81e

0800bff0 <__sread>:
 800bff0:	b510      	push	{r4, lr}
 800bff2:	460c      	mov	r4, r1
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	f000 f954 	bl	800c2a4 <_read_r>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	bfab      	itete	ge
 800c000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c002:	89a3      	ldrhlt	r3, [r4, #12]
 800c004:	181b      	addge	r3, r3, r0
 800c006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c00a:	bfac      	ite	ge
 800c00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c00e:	81a3      	strhlt	r3, [r4, #12]
 800c010:	bd10      	pop	{r4, pc}

0800c012 <__swrite>:
 800c012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c016:	461f      	mov	r7, r3
 800c018:	898b      	ldrh	r3, [r1, #12]
 800c01a:	05db      	lsls	r3, r3, #23
 800c01c:	4605      	mov	r5, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	4616      	mov	r6, r2
 800c022:	d505      	bpl.n	800c030 <__swrite+0x1e>
 800c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c028:	2302      	movs	r3, #2
 800c02a:	2200      	movs	r2, #0
 800c02c:	f000 f928 	bl	800c280 <_lseek_r>
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	4632      	mov	r2, r6
 800c03e:	463b      	mov	r3, r7
 800c040:	4628      	mov	r0, r5
 800c042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c046:	f000 b869 	b.w	800c11c <_write_r>

0800c04a <__sseek>:
 800c04a:	b510      	push	{r4, lr}
 800c04c:	460c      	mov	r4, r1
 800c04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c052:	f000 f915 	bl	800c280 <_lseek_r>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	bf15      	itete	ne
 800c05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c066:	81a3      	strheq	r3, [r4, #12]
 800c068:	bf18      	it	ne
 800c06a:	81a3      	strhne	r3, [r4, #12]
 800c06c:	bd10      	pop	{r4, pc}

0800c06e <__sclose>:
 800c06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c072:	f000 b8d3 	b.w	800c21c <_close_r>
	...

0800c078 <__swbuf_r>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	460e      	mov	r6, r1
 800c07c:	4614      	mov	r4, r2
 800c07e:	4605      	mov	r5, r0
 800c080:	b118      	cbz	r0, 800c08a <__swbuf_r+0x12>
 800c082:	6983      	ldr	r3, [r0, #24]
 800c084:	b90b      	cbnz	r3, 800c08a <__swbuf_r+0x12>
 800c086:	f7ff fbb3 	bl	800b7f0 <__sinit>
 800c08a:	4b21      	ldr	r3, [pc, #132]	; (800c110 <__swbuf_r+0x98>)
 800c08c:	429c      	cmp	r4, r3
 800c08e:	d12b      	bne.n	800c0e8 <__swbuf_r+0x70>
 800c090:	686c      	ldr	r4, [r5, #4]
 800c092:	69a3      	ldr	r3, [r4, #24]
 800c094:	60a3      	str	r3, [r4, #8]
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	071a      	lsls	r2, r3, #28
 800c09a:	d52f      	bpl.n	800c0fc <__swbuf_r+0x84>
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	b36b      	cbz	r3, 800c0fc <__swbuf_r+0x84>
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	6820      	ldr	r0, [r4, #0]
 800c0a4:	1ac0      	subs	r0, r0, r3
 800c0a6:	6963      	ldr	r3, [r4, #20]
 800c0a8:	b2f6      	uxtb	r6, r6
 800c0aa:	4283      	cmp	r3, r0
 800c0ac:	4637      	mov	r7, r6
 800c0ae:	dc04      	bgt.n	800c0ba <__swbuf_r+0x42>
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f7ff fb08 	bl	800b6c8 <_fflush_r>
 800c0b8:	bb30      	cbnz	r0, 800c108 <__swbuf_r+0x90>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	6022      	str	r2, [r4, #0]
 800c0c6:	701e      	strb	r6, [r3, #0]
 800c0c8:	6963      	ldr	r3, [r4, #20]
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	4283      	cmp	r3, r0
 800c0ce:	d004      	beq.n	800c0da <__swbuf_r+0x62>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	07db      	lsls	r3, r3, #31
 800c0d4:	d506      	bpl.n	800c0e4 <__swbuf_r+0x6c>
 800c0d6:	2e0a      	cmp	r6, #10
 800c0d8:	d104      	bne.n	800c0e4 <__swbuf_r+0x6c>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f7ff faf3 	bl	800b6c8 <_fflush_r>
 800c0e2:	b988      	cbnz	r0, 800c108 <__swbuf_r+0x90>
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <__swbuf_r+0x9c>)
 800c0ea:	429c      	cmp	r4, r3
 800c0ec:	d101      	bne.n	800c0f2 <__swbuf_r+0x7a>
 800c0ee:	68ac      	ldr	r4, [r5, #8]
 800c0f0:	e7cf      	b.n	800c092 <__swbuf_r+0x1a>
 800c0f2:	4b09      	ldr	r3, [pc, #36]	; (800c118 <__swbuf_r+0xa0>)
 800c0f4:	429c      	cmp	r4, r3
 800c0f6:	bf08      	it	eq
 800c0f8:	68ec      	ldreq	r4, [r5, #12]
 800c0fa:	e7ca      	b.n	800c092 <__swbuf_r+0x1a>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 f81e 	bl	800c140 <__swsetup_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	d0cb      	beq.n	800c0a0 <__swbuf_r+0x28>
 800c108:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c10c:	e7ea      	b.n	800c0e4 <__swbuf_r+0x6c>
 800c10e:	bf00      	nop
 800c110:	0800c7bc 	.word	0x0800c7bc
 800c114:	0800c7dc 	.word	0x0800c7dc
 800c118:	0800c79c 	.word	0x0800c79c

0800c11c <_write_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	; (800c13c <_write_r+0x20>)
 800c120:	4604      	mov	r4, r0
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	2200      	movs	r2, #0
 800c128:	602a      	str	r2, [r5, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7f5 fc8a 	bl	8001a44 <_write>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_write_r+0x1e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_write_r+0x1e>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20000b78 	.word	0x20000b78

0800c140 <__swsetup_r>:
 800c140:	4b32      	ldr	r3, [pc, #200]	; (800c20c <__swsetup_r+0xcc>)
 800c142:	b570      	push	{r4, r5, r6, lr}
 800c144:	681d      	ldr	r5, [r3, #0]
 800c146:	4606      	mov	r6, r0
 800c148:	460c      	mov	r4, r1
 800c14a:	b125      	cbz	r5, 800c156 <__swsetup_r+0x16>
 800c14c:	69ab      	ldr	r3, [r5, #24]
 800c14e:	b913      	cbnz	r3, 800c156 <__swsetup_r+0x16>
 800c150:	4628      	mov	r0, r5
 800c152:	f7ff fb4d 	bl	800b7f0 <__sinit>
 800c156:	4b2e      	ldr	r3, [pc, #184]	; (800c210 <__swsetup_r+0xd0>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	d10f      	bne.n	800c17c <__swsetup_r+0x3c>
 800c15c:	686c      	ldr	r4, [r5, #4]
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c164:	0719      	lsls	r1, r3, #28
 800c166:	d42c      	bmi.n	800c1c2 <__swsetup_r+0x82>
 800c168:	06dd      	lsls	r5, r3, #27
 800c16a:	d411      	bmi.n	800c190 <__swsetup_r+0x50>
 800c16c:	2309      	movs	r3, #9
 800c16e:	6033      	str	r3, [r6, #0]
 800c170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c17a:	e03e      	b.n	800c1fa <__swsetup_r+0xba>
 800c17c:	4b25      	ldr	r3, [pc, #148]	; (800c214 <__swsetup_r+0xd4>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	d101      	bne.n	800c186 <__swsetup_r+0x46>
 800c182:	68ac      	ldr	r4, [r5, #8]
 800c184:	e7eb      	b.n	800c15e <__swsetup_r+0x1e>
 800c186:	4b24      	ldr	r3, [pc, #144]	; (800c218 <__swsetup_r+0xd8>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	bf08      	it	eq
 800c18c:	68ec      	ldreq	r4, [r5, #12]
 800c18e:	e7e6      	b.n	800c15e <__swsetup_r+0x1e>
 800c190:	0758      	lsls	r0, r3, #29
 800c192:	d512      	bpl.n	800c1ba <__swsetup_r+0x7a>
 800c194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c196:	b141      	cbz	r1, 800c1aa <__swsetup_r+0x6a>
 800c198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c19c:	4299      	cmp	r1, r3
 800c19e:	d002      	beq.n	800c1a6 <__swsetup_r+0x66>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7fe ffb1 	bl	800b108 <_free_r>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f043 0308 	orr.w	r3, r3, #8
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	b94b      	cbnz	r3, 800c1da <__swsetup_r+0x9a>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d0:	d003      	beq.n	800c1da <__swsetup_r+0x9a>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff fbd1 	bl	800b97c <__smakebuf_r>
 800c1da:	89a0      	ldrh	r0, [r4, #12]
 800c1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1e0:	f010 0301 	ands.w	r3, r0, #1
 800c1e4:	d00a      	beq.n	800c1fc <__swsetup_r+0xbc>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60a3      	str	r3, [r4, #8]
 800c1ea:	6963      	ldr	r3, [r4, #20]
 800c1ec:	425b      	negs	r3, r3
 800c1ee:	61a3      	str	r3, [r4, #24]
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	b943      	cbnz	r3, 800c206 <__swsetup_r+0xc6>
 800c1f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1f8:	d1ba      	bne.n	800c170 <__swsetup_r+0x30>
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	0781      	lsls	r1, r0, #30
 800c1fe:	bf58      	it	pl
 800c200:	6963      	ldrpl	r3, [r4, #20]
 800c202:	60a3      	str	r3, [r4, #8]
 800c204:	e7f4      	b.n	800c1f0 <__swsetup_r+0xb0>
 800c206:	2000      	movs	r0, #0
 800c208:	e7f7      	b.n	800c1fa <__swsetup_r+0xba>
 800c20a:	bf00      	nop
 800c20c:	2000002c 	.word	0x2000002c
 800c210:	0800c7bc 	.word	0x0800c7bc
 800c214:	0800c7dc 	.word	0x0800c7dc
 800c218:	0800c79c 	.word	0x0800c79c

0800c21c <_close_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d06      	ldr	r5, [pc, #24]	; (800c238 <_close_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f5 fc38 	bl	8001a9c <_close>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_close_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_close_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20000b78 	.word	0x20000b78

0800c23c <_fstat_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_fstat_r+0x20>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	4611      	mov	r1, r2
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	f7f5 fc77 	bl	8001b3c <_fstat>
 800c24e:	1c43      	adds	r3, r0, #1
 800c250:	d102      	bne.n	800c258 <_fstat_r+0x1c>
 800c252:	682b      	ldr	r3, [r5, #0]
 800c254:	b103      	cbz	r3, 800c258 <_fstat_r+0x1c>
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	20000b78 	.word	0x20000b78

0800c260 <_isatty_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d06      	ldr	r5, [pc, #24]	; (800c27c <_isatty_r+0x1c>)
 800c264:	2300      	movs	r3, #0
 800c266:	4604      	mov	r4, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	602b      	str	r3, [r5, #0]
 800c26c:	f7f5 fbd4 	bl	8001a18 <_isatty>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_isatty_r+0x1a>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_isatty_r+0x1a>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20000b78 	.word	0x20000b78

0800c280 <_lseek_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_lseek_r+0x20>)
 800c284:	4604      	mov	r4, r0
 800c286:	4608      	mov	r0, r1
 800c288:	4611      	mov	r1, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f7f5 fc1b 	bl	8001aca <_lseek>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_lseek_r+0x1e>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_lseek_r+0x1e>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	20000b78 	.word	0x20000b78

0800c2a4 <_read_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_read_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f5 fc1a 	bl	8001aec <_read>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_read_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_read_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20000b78 	.word	0x20000b78

0800c2c8 <_init>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	bf00      	nop
 800c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ce:	bc08      	pop	{r3}
 800c2d0:	469e      	mov	lr, r3
 800c2d2:	4770      	bx	lr

0800c2d4 <_fini>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr
