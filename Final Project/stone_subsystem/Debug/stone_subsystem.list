
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f700  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800f8b0  0800f8b0  0001f8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe18  0800fe18  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe18  0800fe18  0001fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe20  0800fe20  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe20  0800fe20  0001fe20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe24  0800fe24  0001fe24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800fe28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003ab4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003b48  20003b48  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265a6  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005802  00000000  00000000  0004666a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b68  00000000  00000000  0004be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001938  00000000  00000000  0004d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b055  00000000  00000000  0004f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c0d  00000000  00000000  0007a365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7644  00000000  00000000  000a1f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001895b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a68  00000000  00000000  00189608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f898 	.word	0x0800f898

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800f898 	.word	0x0800f898

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800f8b0 	.word	0x0800f8b0
 8000738:	0800f8fc 	.word	0x0800f8fc
 800073c:	0800f900 	.word	0x0800f900
 8000740:	200001b0 	.word	0x200001b0
 8000744:	200000b0 	.word	0x200000b0

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	0800f904 	.word	0x0800f904
 80008b0:	0800f90c 	.word	0x0800f90c
 80008b4:	0800f8fc 	.word	0x0800f8fc
 80008b8:	0800f914 	.word	0x0800f914
 80008bc:	0800f900 	.word	0x0800f900

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00d fe32 	bl	800e630 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800f9c0 	.word	0x0800f9c0
 8000d0c:	0800f970 	.word	0x0800f970
 8000d10:	0800f974 	.word	0x0800f974

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800f978 	.word	0x0800f978
 8000dc0:	0800f988 	.word	0x0800f988
 8000dc4:	0800f990 	.word	0x0800f990
 8000dc8:	0800f974 	.word	0x0800f974

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800f994 	.word	0x0800f994
 8000e10:	0800f974 	.word	0x0800f974

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800f9a4 	.word	0x0800f9a4
 8000e3c:	0800f974 	.word	0x0800f974

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800f9c0 	.word	0x0800f9c0

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c0 	.word	0x200001c0
 8000e74:	200001bc 	.word	0x200001bc

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 ff9d 	bl	8008dce <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b8 	.word	0x200001b8
 8000ea4:	200001ce 	.word	0x200001ce

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00d fcd0 	bl	800e898 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	0800f9b8 	.word	0x0800f9b8

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00d fcb4 	bl	800e898 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800f9b8 	.word	0x0800f9b8

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 ff2a 	bl	8008dce <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	200001ce 	.word	0x200001ce
 8000f8c:	200001c4 	.word	0x200001c4
 8000f90:	200001bc 	.word	0x200001bc
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <I3G450D_Init+0x164>)
 8000fa2:	f002 ff4b 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f002 f8ce 	bl	8003148 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4852      	ldr	r0, [pc, #328]	; (80010fc <I3G450D_Init+0x164>)
 8000fb2:	f002 ff43 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f002 f8c6 	bl	8003148 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <I3G450D_Init+0x168>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <I3G450D_Init+0x168>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	494c      	ldr	r1, [pc, #304]	; (8001100 <I3G450D_Init+0x168>)
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <I3G450D_Init+0x16c>)
 8000fd0:	f006 f889 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4848      	ldr	r0, [pc, #288]	; (80010fc <I3G450D_Init+0x164>)
 8000fda:	f002 ff2f 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f002 f8b2 	bl	8003148 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <I3G450D_Init+0x164>)
 8000fea:	f002 ff27 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f002 f8aa 	bl	8003148 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <I3G450D_Init+0x168>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <I3G450D_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	493e      	ldr	r1, [pc, #248]	; (8001100 <I3G450D_Init+0x168>)
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <I3G450D_Init+0x16c>)
 8001008:	f006 f86d 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	483a      	ldr	r0, [pc, #232]	; (80010fc <I3G450D_Init+0x164>)
 8001012:	f002 ff13 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f002 f896 	bl	8003148 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4836      	ldr	r0, [pc, #216]	; (80010fc <I3G450D_Init+0x164>)
 8001022:	f002 ff0b 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f002 f88e 	bl	8003148 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <I3G450D_Init+0x168>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <I3G450D_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4930      	ldr	r1, [pc, #192]	; (8001100 <I3G450D_Init+0x168>)
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <I3G450D_Init+0x16c>)
 8001040:	f006 f851 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <I3G450D_Init+0x164>)
 800104a:	f002 fef7 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f002 f87a 	bl	8003148 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4828      	ldr	r0, [pc, #160]	; (80010fc <I3G450D_Init+0x164>)
 800105a:	f002 feef 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f002 f872 	bl	8003148 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <I3G450D_Init+0x168>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <I3G450D_Init+0x168>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4922      	ldr	r1, [pc, #136]	; (8001100 <I3G450D_Init+0x168>)
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <I3G450D_Init+0x16c>)
 8001078:	f006 f835 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <I3G450D_Init+0x164>)
 8001082:	f002 fedb 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f002 f85e 	bl	8003148 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <I3G450D_Init+0x164>)
 8001092:	f002 fed3 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f002 f856 	bl	8003148 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <I3G450D_Init+0x168>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <I3G450D_Init+0x168>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <I3G450D_Init+0x168>)
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <I3G450D_Init+0x16c>)
 80010b0:	f006 f819 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <I3G450D_Init+0x164>)
 80010ba:	f002 febf 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f002 f842 	bl	8003148 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <I3G450D_Init+0x164>)
 80010ca:	f002 feb7 	bl	8003e3c <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <I3G450D_Init+0x168>)
 80010d0:	228f      	movs	r2, #143	; 0x8f
 80010d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	2201      	movs	r2, #1
 80010d8:	4909      	ldr	r1, [pc, #36]	; (8001100 <I3G450D_Init+0x168>)
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <I3G450D_Init+0x16c>)
 80010dc:	f006 f803 	bl	80070e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2201      	movs	r2, #1
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <I3G450D_Init+0x170>)
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <I3G450D_Init+0x16c>)
 80010e8:	f006 f939 	bl	800735e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <I3G450D_Init+0x164>)
 80010f2:	f002 fea3 	bl	8003e3c <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800
 8001100:	20003108 	.word	0x20003108
 8001104:	20003220 	.word	0x20003220
 8001108:	2000310d 	.word	0x2000310d

0800110c <I3G450D_loop>:

void I3G450D_loop(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	; 0x60
 8001110:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800111e:	2300      	movs	r3, #0
 8001120:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <I3G450D_loop+0x1b0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <I3G450D_loop+0x6a>
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 80ba 	beq.w	80012e8 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001174:	e36d      	b.n	8001852 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <I3G450D_loop+0x1b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 8368 	bne.w	8001850 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001186:	f002 fe59 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <I3G450D_loop+0x1bc>)
 800118c:	22a8      	movs	r2, #168	; 0xa8
 800118e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	2201      	movs	r2, #1
 8001194:	494c      	ldr	r1, [pc, #304]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001196:	484d      	ldr	r0, [pc, #308]	; (80012cc <I3G450D_loop+0x1c0>)
 8001198:	f005 ffa5 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	2201      	movs	r2, #1
 80011a0:	494b      	ldr	r1, [pc, #300]	; (80012d0 <I3G450D_loop+0x1c4>)
 80011a2:	484a      	ldr	r0, [pc, #296]	; (80012cc <I3G450D_loop+0x1c0>)
 80011a4:	f006 f8db 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ae:	f002 fe45 	bl	8003e3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4843      	ldr	r0, [pc, #268]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011b8:	f002 fe40 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011be:	22a9      	movs	r2, #169	; 0xa9
 80011c0:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	2201      	movs	r2, #1
 80011c6:	4940      	ldr	r1, [pc, #256]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011c8:	4840      	ldr	r0, [pc, #256]	; (80012cc <I3G450D_loop+0x1c0>)
 80011ca:	f005 ff8c 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80011ce:	2332      	movs	r3, #50	; 0x32
 80011d0:	2201      	movs	r2, #1
 80011d2:	4940      	ldr	r1, [pc, #256]	; (80012d4 <I3G450D_loop+0x1c8>)
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <I3G450D_loop+0x1c0>)
 80011d6:	f006 f8c2 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2102      	movs	r1, #2
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011e0:	f002 fe2c 	bl	8003e3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	4836      	ldr	r0, [pc, #216]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ea:	f002 fe27 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011f4:	2332      	movs	r3, #50	; 0x32
 80011f6:	2201      	movs	r2, #1
 80011f8:	4933      	ldr	r1, [pc, #204]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011fa:	4834      	ldr	r0, [pc, #208]	; (80012cc <I3G450D_loop+0x1c0>)
 80011fc:	f005 ff73 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8001200:	2332      	movs	r3, #50	; 0x32
 8001202:	2201      	movs	r2, #1
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <I3G450D_loop+0x1cc>)
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <I3G450D_loop+0x1c0>)
 8001208:	f006 f8a9 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001212:	f002 fe13 	bl	8003e3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	482a      	ldr	r0, [pc, #168]	; (80012c4 <I3G450D_loop+0x1b8>)
 800121c:	f002 fe0e 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001222:	22ab      	movs	r2, #171	; 0xab
 8001224:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	2201      	movs	r2, #1
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <I3G450D_loop+0x1bc>)
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <I3G450D_loop+0x1c0>)
 800122e:	f005 ff5a 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	2201      	movs	r2, #1
 8001236:	4929      	ldr	r1, [pc, #164]	; (80012dc <I3G450D_loop+0x1d0>)
 8001238:	4824      	ldr	r0, [pc, #144]	; (80012cc <I3G450D_loop+0x1c0>)
 800123a:	f006 f890 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001244:	f002 fdfa 	bl	8003e3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <I3G450D_loop+0x1b8>)
 800124e:	f002 fdf5 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001254:	22ac      	movs	r2, #172	; 0xac
 8001256:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001258:	2332      	movs	r3, #50	; 0x32
 800125a:	2201      	movs	r2, #1
 800125c:	491a      	ldr	r1, [pc, #104]	; (80012c8 <I3G450D_loop+0x1bc>)
 800125e:	481b      	ldr	r0, [pc, #108]	; (80012cc <I3G450D_loop+0x1c0>)
 8001260:	f005 ff41 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	491d      	ldr	r1, [pc, #116]	; (80012e0 <I3G450D_loop+0x1d4>)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <I3G450D_loop+0x1c0>)
 800126c:	f006 f877 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001276:	f002 fde1 	bl	8003e3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001280:	f002 fddc 	bl	8003e3c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001286:	22ad      	movs	r2, #173	; 0xad
 8001288:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800128a:	2332      	movs	r3, #50	; 0x32
 800128c:	2201      	movs	r2, #1
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <I3G450D_loop+0x1c0>)
 8001292:	f005 ff28 	bl	80070e6 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	2201      	movs	r2, #1
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <I3G450D_loop+0x1d8>)
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <I3G450D_loop+0x1c0>)
 800129e:	f006 f85e 	bl	800735e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <I3G450D_loop+0x1b8>)
 80012a8:	f002 fdc8 	bl	8003e3c <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <I3G450D_loop+0x1b0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <I3G450D_loop+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
				break;
 80012b8:	e2ca      	b.n	8001850 <I3G450D_loop+0x744>
 80012ba:	bf00      	nop
 80012bc:	200001d0 	.word	0x200001d0
 80012c0:	20000000 	.word	0x20000000
 80012c4:	40020800 	.word	0x40020800
 80012c8:	20003108 	.word	0x20003108
 80012cc:	20003220 	.word	0x20003220
 80012d0:	2000310d 	.word	0x2000310d
 80012d4:	2000310e 	.word	0x2000310e
 80012d8:	2000310f 	.word	0x2000310f
 80012dc:	20003110 	.word	0x20003110
 80012e0:	20003111 	.word	0x20003111
 80012e4:	20003112 	.word	0x20003112
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80012e8:	4ba0      	ldr	r3, [pc, #640]	; (800156c <I3G450D_loop+0x460>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b9e      	ldr	r3, [pc, #632]	; (800156c <I3G450D_loop+0x460>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80012fe:	4b9b      	ldr	r3, [pc, #620]	; (800156c <I3G450D_loop+0x460>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <I3G450D_loop+0x460>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001314:	4b95      	ldr	r3, [pc, #596]	; (800156c <I3G450D_loop+0x460>)
 8001316:	799b      	ldrb	r3, [r3, #6]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <I3G450D_loop+0x460>)
 800131e:	795b      	ldrb	r3, [r3, #5]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <I3G450D_loop+0x464>)
 8001330:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <I3G450D_loop+0x468>)
 800133a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800133c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <I3G450D_loop+0x46c>)
 8001342:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001344:	4b8d      	ldr	r3, [pc, #564]	; (800157c <I3G450D_loop+0x470>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80d5 	bne.w	80014f8 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 800134e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <I3G450D_loop+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001584 <I3G450D_loop+0x478>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <I3G450D_loop+0x47c>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	b21b      	sxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <I3G450D_loop+0x480>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001584 <I3G450D_loop+0x478>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <I3G450D_loop+0x484>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001398:	b21b      	sxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <I3G450D_loop+0x488>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001584 <I3G450D_loop+0x478>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b79      	ldr	r3, [pc, #484]	; (8001598 <I3G450D_loop+0x48c>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <I3G450D_loop+0x490>)
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80013bc:	4b72      	ldr	r3, [pc, #456]	; (8001588 <I3G450D_loop+0x47c>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <I3G450D_loop+0x494>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dc0c      	bgt.n	80013ec <I3G450D_loop+0x2e0>
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <I3G450D_loop+0x494>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb1 7a67 	vneg.f32	s14, s15
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <I3G450D_loop+0x47c>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd1b      	ble.n	8001424 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <I3G450D_loop+0x47c>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <I3G450D_loop+0x498>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <I3G450D_loop+0x49c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <I3G450D_loop+0x49c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <I3G450D_loop+0x47c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <I3G450D_loop+0x498>)
 8001422:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001424:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <I3G450D_loop+0x484>)
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <I3G450D_loop+0x4a0>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dc0c      	bgt.n	8001454 <I3G450D_loop+0x348>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <I3G450D_loop+0x4a0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eeb1 7a67 	vneg.f32	s14, s15
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <I3G450D_loop+0x484>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd1b      	ble.n	800148c <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <I3G450D_loop+0x484>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <I3G450D_loop+0x4a4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <I3G450D_loop+0x484>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <I3G450D_loop+0x4a4>)
 800148a:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <I3G450D_loop+0x48c>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <I3G450D_loop+0x4ac>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dc0d      	bgt.n	80014be <I3G450D_loop+0x3b2>
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <I3G450D_loop+0x4ac>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eeb1 7a67 	vneg.f32	s14, s15
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <I3G450D_loop+0x48c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	f340 81c2 	ble.w	8001842 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <I3G450D_loop+0x48c>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <I3G450D_loop+0x4b0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <I3G450D_loop+0x48c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <I3G450D_loop+0x4b0>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e1a4      	b.n	8001842 <I3G450D_loop+0x736>
				switch(currentcalistate)
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <I3G450D_loop+0x470>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 819b 	beq.w	8001838 <I3G450D_loop+0x72c>
 8001502:	2b02      	cmp	r3, #2
 8001504:	f300 819a 	bgt.w	800183c <I3G450D_loop+0x730>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <I3G450D_loop+0x406>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d029      	beq.n	8001564 <I3G450D_loop+0x458>
						break;
 8001510:	e194      	b.n	800183c <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800151a:	b211      	sxth	r1, r2
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <I3G450D_loop+0x4bc>)
 800151e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800152a:	b211      	sxth	r1, r2
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <I3G450D_loop+0x4c0>)
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001538:	b211      	sxth	r1, r2
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <I3G450D_loop+0x4c4>)
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001548:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <I3G450D_loop+0x4b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001552:	f0c0 8175 	bcc.w	8001840 <I3G450D_loop+0x734>
							caliCounter=0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <I3G450D_loop+0x470>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
						break;
 8001562:	e16d      	b.n	8001840 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001568:	e0a5      	b.n	80016b6 <I3G450D_loop+0x5aa>
 800156a:	bf00      	nop
 800156c:	2000310c 	.word	0x2000310c
 8001570:	2000021c 	.word	0x2000021c
 8001574:	2000021e 	.word	0x2000021e
 8001578:	20000220 	.word	0x20000220
 800157c:	200001cf 	.word	0x200001cf
 8001580:	200001e0 	.word	0x200001e0
 8001584:	3d8f5c29 	.word	0x3d8f5c29
 8001588:	200001d4 	.word	0x200001d4
 800158c:	200001e4 	.word	0x200001e4
 8001590:	200001d8 	.word	0x200001d8
 8001594:	200001e8 	.word	0x200001e8
 8001598:	200001dc 	.word	0x200001dc
 800159c:	3b449ba6 	.word	0x3b449ba6
 80015a0:	200001ec 	.word	0x200001ec
 80015a4:	20000204 	.word	0x20000204
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	200001f0 	.word	0x200001f0
 80015b0:	20000208 	.word	0x20000208
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	200001f4 	.word	0x200001f4
 80015bc:	2000020c 	.word	0x2000020c
 80015c0:	20000200 	.word	0x20000200
 80015c4:	20000224 	.word	0x20000224
 80015c8:	20000228 	.word	0x20000228
 80015cc:	200011c8 	.word	0x200011c8
 80015d0:	20002168 	.word	0x20002168
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	443b      	add	r3, r7
 80015dc:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	499d      	ldr	r1, [pc, #628]	; (800185c <I3G450D_loop+0x750>)
 80015e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ea:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015ee:	4413      	add	r3, r2
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3360      	adds	r3, #96	; 0x60
 80015f8:	443b      	add	r3, r7
 80015fa:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80015fe:	461a      	mov	r2, r3
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	4996      	ldr	r1, [pc, #600]	; (8001860 <I3G450D_loop+0x754>)
 8001606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001608:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800160c:	4413      	add	r3, r2
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	443b      	add	r3, r7
 8001618:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800161c:	461a      	mov	r2, r3
 800161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <I3G450D_loop+0x758>)
 8001624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001626:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800162a:	4413      	add	r3, r2
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800162e:	4a8b      	ldr	r2, [pc, #556]	; (800185c <I3G450D_loop+0x750>)
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	443b      	add	r3, r7
 800163e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <I3G450D_loop+0x754>)
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800164a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	443b      	add	r3, r7
 8001652:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001656:	4a83      	ldr	r2, [pc, #524]	; (8001864 <I3G450D_loop+0x758>)
 8001658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800165e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3360      	adds	r3, #96	; 0x60
 8001664:	443b      	add	r3, r7
 8001666:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <I3G450D_loop+0x75c>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a7c      	ldr	r2, [pc, #496]	; (800186c <I3G450D_loop+0x760>)
 800167a:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <I3G450D_loop+0x75c>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1092      	asrs	r2, r2, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <I3G450D_loop+0x764>)
 800168c:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	4a75      	ldr	r2, [pc, #468]	; (8001868 <I3G450D_loop+0x75c>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1092      	asrs	r2, r2, #2
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a75      	ldr	r2, [pc, #468]	; (8001874 <I3G450D_loop+0x768>)
 800169e:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	3301      	adds	r3, #1
 80016a4:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80016a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d901      	bls.n	80016b0 <I3G450D_loop+0x5a4>
									windowPosition=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	3301      	adds	r3, #1
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016bc:	d38a      	bcc.n	80015d4 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c2:	e089      	b.n	80017d8 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <I3G450D_loop+0x750>)
 80016c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <I3G450D_loop+0x760>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <I3G450D_loop+0x76c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd0a      	ble.n	80016f2 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <I3G450D_loop+0x750>)
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <I3G450D_loop+0x760>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a62      	ldr	r2, [pc, #392]	; (8001878 <I3G450D_loop+0x76c>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e015      	b.n	800171e <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <I3G450D_loop+0x750>)
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <I3G450D_loop+0x760>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <I3G450D_loop+0x76c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	425b      	negs	r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	da08      	bge.n	800171e <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <I3G450D_loop+0x760>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4952      	ldr	r1, [pc, #328]	; (800185c <I3G450D_loop+0x750>)
 8001712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001714:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <I3G450D_loop+0x76c>)
 800171c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800171e:	4a50      	ldr	r2, [pc, #320]	; (8001860 <I3G450D_loop+0x754>)
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001726:	461a      	mov	r2, r3
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <I3G450D_loop+0x764>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <I3G450D_loop+0x770>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	dd0a      	ble.n	800174c <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <I3G450D_loop+0x754>)
 8001738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800173e:	461a      	mov	r2, r3
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <I3G450D_loop+0x764>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <I3G450D_loop+0x770>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e015      	b.n	8001778 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <I3G450D_loop+0x754>)
 800174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001754:	461a      	mov	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <I3G450D_loop+0x764>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <I3G450D_loop+0x770>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	425b      	negs	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	da08      	bge.n	8001778 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <I3G450D_loop+0x764>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	493d      	ldr	r1, [pc, #244]	; (8001860 <I3G450D_loop+0x754>)
 800176c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800176e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <I3G450D_loop+0x770>)
 8001776:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <I3G450D_loop+0x758>)
 800177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	461a      	mov	r2, r3
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <I3G450D_loop+0x768>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <I3G450D_loop+0x774>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd0a      	ble.n	80017a6 <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <I3G450D_loop+0x758>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001798:	461a      	mov	r2, r3
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <I3G450D_loop+0x768>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <I3G450D_loop+0x774>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e015      	b.n	80017d2 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <I3G450D_loop+0x758>)
 80017a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <I3G450D_loop+0x768>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <I3G450D_loop+0x774>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	425b      	negs	r3, r3
 80017bc:	429a      	cmp	r2, r3
 80017be:	da08      	bge.n	80017d2 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <I3G450D_loop+0x768>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4927      	ldr	r1, [pc, #156]	; (8001864 <I3G450D_loop+0x758>)
 80017c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <I3G450D_loop+0x774>)
 80017d0:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d4:	3301      	adds	r3, #1
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017de:	f4ff af71 	bcc.w	80016c4 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <I3G450D_loop+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001884 <I3G450D_loop+0x778>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <I3G450D_loop+0x77c>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <I3G450D_loop+0x770>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001884 <I3G450D_loop+0x778>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <I3G450D_loop+0x780>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <I3G450D_loop+0x774>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001884 <I3G450D_loop+0x778>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <I3G450D_loop+0x784>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <I3G450D_loop+0x788>)
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
							break;
 8001836:	e004      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001838:	bf00      	nop
 800183a:	e002      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001840:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <I3G450D_loop+0x78c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <I3G450D_loop+0x790>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e000      	b.n	8001852 <I3G450D_loop+0x746>
				break;
 8001850:	bf00      	nop

		}
}
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	; 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000228 	.word	0x20000228
 8001860:	200011c8 	.word	0x200011c8
 8001864:	20002168 	.word	0x20002168
 8001868:	66666667 	.word	0x66666667
 800186c:	200001e0 	.word	0x200001e0
 8001870:	200001e4 	.word	0x200001e4
 8001874:	200001e8 	.word	0x200001e8
 8001878:	20000210 	.word	0x20000210
 800187c:	20000214 	.word	0x20000214
 8001880:	20000218 	.word	0x20000218
 8001884:	3d8f5c29 	.word	0x3d8f5c29
 8001888:	200001ec 	.word	0x200001ec
 800188c:	200001f0 	.word	0x200001f0
 8001890:	200001f4 	.word	0x200001f4
 8001894:	200001cf 	.word	0x200001cf
 8001898:	200001d0 	.word	0x200001d0
 800189c:	20000000 	.word	0x20000000

080018a0 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <Lis3dhInit+0xec>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 80018ae:	238f      	movs	r3, #143	; 0x8f
 80018b0:	753b      	strb	r3, [r7, #20]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <Lis3dhInit+0xec>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	2130      	movs	r1, #48	; 0x30
 80018b8:	f107 0214 	add.w	r2, r7, #20
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	f004 f822 	bl	800590c <HAL_I2C_Master_Transmit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d158      	bne.n	8001984 <Lis3dhInit+0xe4>
	        //Handle Error

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <Lis3dhInit+0xec>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	2130      	movs	r1, #48	; 0x30
 80018d8:	f107 0208 	add.w	r2, r7, #8
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2302      	movs	r3, #2
 80018e4:	f004 f910 	bl	8005b08 <HAL_I2C_Master_Receive>
 80018e8:	4603      	mov	r3, r0
 80018ea:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d148      	bne.n	8001984 <Lis3dhInit+0xe4>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
	        	 sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80018f2:	23a0      	movs	r3, #160	; 0xa0
 80018f4:	753b      	strb	r3, [r7, #20]

	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <Lis3dhInit+0xec>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	2130      	movs	r1, #48	; 0x30
 80018fc:	f107 0214 	add.w	r2, r7, #20
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	f004 f800 	bl	800590c <HAL_I2C_Master_Transmit>
 800190c:	4603      	mov	r3, r0
 800190e:	75fb      	strb	r3, [r7, #23]
	        	  ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <Lis3dhInit+0xec>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	2130      	movs	r1, #48	; 0x30
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2302      	movs	r3, #2
 8001922:	f004 f8f1 	bl	8005b08 <HAL_I2C_Master_Receive>
 8001926:	4603      	mov	r3, r0
 8001928:	75fb      	strb	r3, [r7, #23]

	        	  sendBuff[0] = LIS3DH_REG_CTRL1;
 800192a:	2320      	movs	r3, #32
 800192c:	753b      	strb	r3, [r7, #20]
	        	  sendBuff[1] = 0x57;
 800192e:	2357      	movs	r3, #87	; 0x57
 8001930:	757b      	strb	r3, [r7, #21]
	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <Lis3dhInit+0xec>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	2130      	movs	r1, #48	; 0x30
 8001938:	f107 0214 	add.w	r2, r7, #20
 800193c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	f003 ffe2 	bl	800590c <HAL_I2C_Master_Transmit>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
					//Read to make sure the write worked.
					sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 800194c:	23a0      	movs	r3, #160	; 0xa0
 800194e:	753b      	strb	r3, [r7, #20]

					ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <Lis3dhInit+0xec>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	2130      	movs	r1, #48	; 0x30
 8001956:	f107 0214 	add.w	r2, r7, #20
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	f003 ffd3 	bl	800590c <HAL_I2C_Master_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
					ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <Lis3dhInit+0xec>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	2130      	movs	r1, #48	; 0x30
 8001970:	f107 0208 	add.w	r2, r7, #8
 8001974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2302      	movs	r3, #2
 800197c:	f004 f8c4 	bl	8005b08 <HAL_I2C_Master_Receive>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]





}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20003114 	.word	0x20003114

08001990 <Lis3dhGetAcc>:
int Lis3dhGetAcc(){
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af02      	add	r7, sp, #8
	uint8_t  x,y,z;

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 8001996:	23a7      	movs	r3, #167	; 0xa7
 8001998:	743b      	strb	r3, [r7, #16]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <Lis3dhGetAcc+0xb8>)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	2130      	movs	r1, #48	; 0x30
 80019a0:	f107 0210 	add.w	r2, r7, #16
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	f003 ffae 	bl	800590c <HAL_I2C_Master_Transmit>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <Lis3dhGetAcc+0xb8>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	2130      	movs	r1, #48	; 0x30
 80019ba:	1d3a      	adds	r2, r7, #4
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2302      	movs	r3, #2
 80019c4:	f004 f8a0 	bl	8005b08 <HAL_I2C_Master_Receive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 80019cc:	23a8      	movs	r3, #168	; 0xa8
 80019ce:	743b      	strb	r3, [r7, #16]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <Lis3dhGetAcc+0xb8>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	2130      	movs	r1, #48	; 0x30
 80019d6:	f107 0210 	add.w	r2, r7, #16
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	f003 ff93 	bl	800590c <HAL_I2C_Master_Transmit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <Lis3dhGetAcc+0xb8>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	2130      	movs	r1, #48	; 0x30
 80019f0:	1d3a      	adds	r2, r7, #4
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2306      	movs	r3, #6
 80019fa:	f004 f885 	bl	8005b08 <HAL_I2C_Master_Receive>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]

	  x = reciveBuff[0];
 8001a02:	793b      	ldrb	r3, [r7, #4]
 8001a04:	75bb      	strb	r3, [r7, #22]
	  x |= ((uint16_t)reciveBuff[1]) << 8;
 8001a06:	797b      	ldrb	r3, [r7, #5]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	75bb      	strb	r3, [r7, #22]
	  y = reciveBuff[2];
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	757b      	strb	r3, [r7, #21]
	  y |= ((uint16_t)reciveBuff[3]) << 8;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	757b      	strb	r3, [r7, #21]
	  z = reciveBuff[4];
 8001a2a:	7a3b      	ldrb	r3, [r7, #8]
 8001a2c:	753b      	strb	r3, [r7, #20]
	  z |= ((uint16_t)reciveBuff[5]) << 8;
 8001a2e:	7a7b      	ldrb	r3, [r7, #9]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	753b      	strb	r3, [r7, #20]


	//HAL_SPI_Transmit (SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20003114 	.word	0x20003114

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int p;
	uint32_t stack_pointer = &p;
 8001a52:	463b      	mov	r3, r7
 8001a54:	613b      	str	r3, [r7, #16]

	// the heap pointer
	int *ptr;
	ptr = malloc(15 * sizeof(*ptr));
 8001a56:	203c      	movs	r0, #60	; 0x3c
 8001a58:	f00c fe18 	bl	800e68c <malloc>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f001 fb00 	bl	8003064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f85c 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f000 fb00 	bl	800206c <MX_GPIO_Init>
  MX_CRC_Init();
 8001a6c:	f000 f8c2 	bl	8001bf4 <MX_CRC_Init>
  MX_I2C3_Init();
 8001a70:	f000 f914 	bl	8001c9c <MX_I2C3_Init>
  MX_SPI5_Init();
 8001a74:	f000 f988 	bl	8001d88 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001a78:	f000 f9bc 	bl	8001df4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001a7c:	f000 fa82 	bl	8001f84 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001a80:	f000 fad4 	bl	800202c <MX_DMA_Init>
  MX_TIM2_Init();
 8001a84:	f000 fa0a 	bl	8001e9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001a88:	f000 faa6 	bl	8001fd8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001a8c:	f000 f946 	bl	8001d1c <MX_SPI3_Init>
  MX_FATFS_Init();
 8001a90:	f009 f91c 	bl	800accc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001a94:	f00c fa8e 	bl	800dfb4 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8001a98:	f000 f8c0 	bl	8001c1c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 8001a9c:	f7ff fa7c 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 8001aa0:	481d      	ldr	r0, [pc, #116]	; (8001b18 <main+0xcc>)
 8001aa2:	f000 fdb5 	bl	8002610 <RetargetInit>
  ConsoleInit(&huart1);
 8001aa6:	481c      	ldr	r0, [pc, #112]	; (8001b18 <main+0xcc>)
 8001aa8:	f7fe fe1e 	bl	80006e8 <ConsoleInit>
  Lis3dhInit(&hi2c2);
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <main+0xd0>)
 8001aae:	f7ff fef7 	bl	80018a0 <Lis3dhInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
  const uint8_t angle_difference = 11;
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	72fb      	strb	r3, [r7, #11]
uint8_t x,y,z;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001aba:	f00c faa1 	bl	800e000 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75bb      	strb	r3, [r7, #22]
 8001ac2:	e01b      	b.n	8001afc <main+0xb0>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001ac4:	7dba      	ldrb	r2, [r7, #22]
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	fb12 f303 	smulbb	r3, r2, r3
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	227f      	movs	r2, #127	; 0x7f
 8001ad6:	21ff      	movs	r1, #255	; 0xff
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fccd 	bl	8002478 <hsl_to_rgb>
 8001ade:	6078      	str	r0, [r7, #4]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b2d9      	uxtb	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	7db8      	ldrb	r0, [r7, #22]
 8001af2:	f000 fe67 	bl	80027c4 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001af6:	7dbb      	ldrb	r3, [r7, #22]
 8001af8:	3301      	adds	r3, #1
 8001afa:	75bb      	strb	r3, [r7, #22]
 8001afc:	7dbb      	ldrb	r3, [r7, #22]
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d9e0      	bls.n	8001ac4 <main+0x78>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	3301      	adds	r3, #1
 8001b06:	75fb      	strb	r3, [r7, #23]
	  		//led_render();
	  		// Some delay*/


	  		ConsoleProcess();
 8001b08:	f7fe fe1e 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 8001b0c:	f7ff fafe 	bl	800110c <I3G450D_loop>
	  		Lis3dhGetAcc();
 8001b10:	f7ff ff3e 	bl	8001990 <Lis3dhGetAcc>
    MX_USB_HOST_Process();
 8001b14:	e7d1      	b.n	8001aba <main+0x6e>
 8001b16:	bf00      	nop
 8001b18:	20003368 	.word	0x20003368
 8001b1c:	20003120 	.word	0x20003120

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2230      	movs	r2, #48	; 0x30
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00c fdca 	bl	800e6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <SystemClock_Config+0xcc>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <SystemClock_Config+0xcc>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <SystemClock_Config+0xcc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <SystemClock_Config+0xd0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b6c:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <SystemClock_Config+0xd0>)
 8001b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <SystemClock_Config+0xd0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b94:	2304      	movs	r3, #4
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b98:	2348      	movs	r3, #72	; 0x48
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fd7b 	bl	80066a4 <HAL_RCC_OscConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bb4:	f000 fd26 	bl	8002604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb8:	230f      	movs	r3, #15
 8001bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 ffdd 	bl	8006b94 <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001be0:	f000 fd10 	bl	8002604 <Error_Handler>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3750      	adds	r7, #80	; 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_CRC_Init+0x20>)
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <MX_CRC_Init+0x24>)
 8001bfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_CRC_Init+0x20>)
 8001c00:	f001 fbd7 	bl	80033b2 <HAL_CRC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001c0a:	f000 fcfb 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20003118 	.word	0x20003118
 8001c18:	40023000 	.word	0x40023000

08001c1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C2_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MX_I2C2_Init+0x7c>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c5a:	f003 fd13 	bl	8005684 <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f000 fcce 	bl	8002604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c6c:	f004 fc9f 	bl	80065ae <HAL_I2CEx_ConfigAnalogFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f000 fcc5 	bl	8002604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C2_Init+0x74>)
 8001c7e:	f004 fcd2 	bl	8006626 <HAL_I2CEx_ConfigDigitalFilter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c88:	f000 fcbc 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20003120 	.word	0x20003120
 8001c94:	40005800 	.word	0x40005800
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <MX_I2C3_Init+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <MX_I2C3_Init+0x7c>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cda:	f003 fcd3 	bl	8005684 <HAL_I2C_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ce4:	f000 fc8e 	bl	8002604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4809      	ldr	r0, [pc, #36]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cec:	f004 fc5f 	bl	80065ae <HAL_I2CEx_ConfigAnalogFilter>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cf6:	f000 fc85 	bl	8002604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_I2C3_Init+0x74>)
 8001cfe:	f004 fc92 	bl	8006626 <HAL_I2CEx_ConfigDigitalFilter>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d08:	f000 fc7c 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20003174 	.word	0x20003174
 8001d14:	40005c00 	.word	0x40005c00
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <MX_SPI3_Init+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d68:	220a      	movs	r2, #10
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_SPI3_Init+0x64>)
 8001d6e:	f005 f931 	bl	8006fd4 <HAL_SPI_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d78:	f000 fc44 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200031c8 	.word	0x200031c8
 8001d84:	40003c00 	.word	0x40003c00

08001d88 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_SPI5_Init+0x64>)
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <MX_SPI5_Init+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_SPI5_Init+0x64>)
 8001d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_SPI5_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_SPI5_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_SPI5_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_SPI5_Init+0x64>)
 8001db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dbc:	2218      	movs	r2, #24
 8001dbe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_SPI5_Init+0x64>)
 8001dda:	f005 f8fb 	bl	8006fd4 <HAL_SPI_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001de4:	f000 fc0e 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20003220 	.word	0x20003220
 8001df0:	40015000 	.word	0x40015000

08001df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e12:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <MX_TIM1_Init+0xa4>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e3c:	4815      	ldr	r0, [pc, #84]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e3e:	f005 fe71 	bl	8007b24 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e48:	f000 fbdc 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4619      	mov	r1, r3
 8001e58:	480e      	ldr	r0, [pc, #56]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e5a:	f006 f9a7 	bl	80081ac <HAL_TIM_ConfigClockSource>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e64:	f000 fbce 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e70:	463b      	mov	r3, r7
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e76:	f006 fd99 	bl	80089ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e80:	f000 fbc0 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM1_Init+0xa0>)
 8001e86:	f000 fef3 	bl	8002c70 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20003278 	.word	0x20003278
 8001e98:	40010000 	.word	0x40010000

08001e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	; 0x38
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001ee2:	223b      	movs	r2, #59	; 0x3b
 8001ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	4823      	ldr	r0, [pc, #140]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001ef4:	f005 fe16 	bl	8007b24 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001efe:	f000 fb81 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481c      	ldr	r0, [pc, #112]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001f10:	f006 f94c 	bl	80081ac <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001f1a:	f000 fb73 	bl	8002604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f1e:	4818      	ldr	r0, [pc, #96]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001f20:	f005 fe4f 	bl	8007bc2 <HAL_TIM_PWM_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001f2a:	f000 fb6b 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4810      	ldr	r0, [pc, #64]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001f3e:	f006 fd35 	bl	80089ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001f48:	f000 fb5c 	bl	8002604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4c:	2360      	movs	r3, #96	; 0x60
 8001f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001f64:	f006 f860 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001f6e:	f000 fb49 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <MX_TIM2_Init+0xe4>)
 8001f74:	f000 feec 	bl	8002d50 <HAL_TIM_MspPostInit>

}
 8001f78:	bf00      	nop
 8001f7a:	3738      	adds	r7, #56	; 0x38
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200032c0 	.word	0x200032c0

08001f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <MX_USART1_UART_Init+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f006 fd86 	bl	8008acc <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fc6:	f000 fb1d 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20003368 	.word	0x20003368
 8001fd4:	40011000 	.word	0x40011000

08001fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <MX_USART2_UART_Init+0x50>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USART2_UART_Init+0x4c>)
 8002010:	f006 fd5c 	bl	8008acc <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800201a:	f000 faf3 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200033ac 	.word	0x200033ac
 8002028:	40004400 	.word	0x40004400

0800202c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_DMA_Init+0x3c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <MX_DMA_Init+0x3c>)
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_DMA_Init+0x3c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2010      	movs	r0, #16
 8002054:	f001 f977 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002058:	2010      	movs	r0, #16
 800205a:	f001 f990 	bl	800337e <HAL_NVIC_EnableIRQ>

}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	4bb2      	ldr	r3, [pc, #712]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4ab1      	ldr	r2, [pc, #708]	; (8002350 <MX_GPIO_Init+0x2e4>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4baf      	ldr	r3, [pc, #700]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4bab      	ldr	r3, [pc, #684]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4aaa      	ldr	r2, [pc, #680]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020a8:	f043 0320 	orr.w	r3, r3, #32
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4ba8      	ldr	r3, [pc, #672]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	4ba4      	ldr	r3, [pc, #656]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4aa3      	ldr	r2, [pc, #652]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4ba1      	ldr	r3, [pc, #644]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4b9d      	ldr	r3, [pc, #628]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a9c      	ldr	r2, [pc, #624]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b9a      	ldr	r3, [pc, #616]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b96      	ldr	r3, [pc, #600]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a95      	ldr	r2, [pc, #596]	; (8002350 <MX_GPIO_Init+0x2e4>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b93      	ldr	r3, [pc, #588]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a8e      	ldr	r2, [pc, #568]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a87      	ldr	r2, [pc, #540]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b85      	ldr	r3, [pc, #532]	; (8002350 <MX_GPIO_Init+0x2e4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <MX_GPIO_Init+0x2e4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a80      	ldr	r2, [pc, #512]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b7e      	ldr	r3, [pc, #504]	; (8002350 <MX_GPIO_Init+0x2e4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2116      	movs	r1, #22
 8002166:	487b      	ldr	r0, [pc, #492]	; (8002354 <MX_GPIO_Init+0x2e8>)
 8002168:	f001 fe68 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	4879      	ldr	r0, [pc, #484]	; (8002358 <MX_GPIO_Init+0x2ec>)
 8002172:	f001 fe63 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f243 0104 	movw	r1, #12292	; 0x3004
 800217c:	4877      	ldr	r0, [pc, #476]	; (800235c <MX_GPIO_Init+0x2f0>)
 800217e:	f001 fe5d 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002188:	4875      	ldr	r0, [pc, #468]	; (8002360 <MX_GPIO_Init+0x2f4>)
 800218a:	f001 fe57 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 800218e:	f64f 0338 	movw	r3, #63544	; 0xf838
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a0:	230c      	movs	r3, #12
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	486e      	ldr	r0, [pc, #440]	; (8002364 <MX_GPIO_Init+0x2f8>)
 80021ac:	f001 fc9a 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80021b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c2:	230e      	movs	r3, #14
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	4865      	ldr	r0, [pc, #404]	; (8002364 <MX_GPIO_Init+0x2f8>)
 80021ce:	f001 fc89 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e2:	230c      	movs	r3, #12
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4859      	ldr	r0, [pc, #356]	; (8002354 <MX_GPIO_Init+0x2e8>)
 80021ee:	f001 fc79 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80021f2:	2316      	movs	r3, #22
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002206:	4619      	mov	r1, r3
 8002208:	4852      	ldr	r0, [pc, #328]	; (8002354 <MX_GPIO_Init+0x2e8>)
 800220a:	f001 fc6b 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800220e:	2307      	movs	r3, #7
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002212:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	484d      	ldr	r0, [pc, #308]	; (8002358 <MX_GPIO_Init+0x2ec>)
 8002224:	f001 fc5e 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002228:	f641 0358 	movw	r3, #6232	; 0x1858
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223a:	230e      	movs	r3, #14
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4844      	ldr	r0, [pc, #272]	; (8002358 <MX_GPIO_Init+0x2ec>)
 8002246:	f001 fc4d 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	483d      	ldr	r0, [pc, #244]	; (8002358 <MX_GPIO_Init+0x2ec>)
 8002262:	f001 fc3f 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002266:	2320      	movs	r3, #32
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800226a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	4836      	ldr	r0, [pc, #216]	; (8002354 <MX_GPIO_Init+0x2e8>)
 800227c:	f001 fc32 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002280:	2303      	movs	r3, #3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002290:	2309      	movs	r3, #9
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	4833      	ldr	r0, [pc, #204]	; (8002368 <MX_GPIO_Init+0x2fc>)
 800229c:	f001 fc22 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80022a0:	2304      	movs	r3, #4
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b0:	4619      	mov	r1, r3
 80022b2:	482d      	ldr	r0, [pc, #180]	; (8002368 <MX_GPIO_Init+0x2fc>)
 80022b4:	f001 fc16 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80022b8:	f248 1333 	movw	r3, #33075	; 0x8133
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022ca:	230c      	movs	r3, #12
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4822      	ldr	r0, [pc, #136]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80022d6:	f001 fc05 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022da:	f64f 7383 	movw	r3, #65411	; 0xff83
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022ec:	230c      	movs	r3, #12
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	481d      	ldr	r0, [pc, #116]	; (800236c <MX_GPIO_Init+0x300>)
 80022f8:	f001 fbf4 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80022fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <MX_GPIO_Init+0x2fc>)
 800231a:	f001 fbe3 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800231e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002330:	230c      	movs	r3, #12
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4808      	ldr	r0, [pc, #32]	; (800235c <MX_GPIO_Init+0x2f0>)
 800233c:	f001 fbd2 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	e010      	b.n	8002370 <MX_GPIO_Init+0x304>
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40020800 	.word	0x40020800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021800 	.word	0x40021800
 8002364:	40021400 	.word	0x40021400
 8002368:	40020400 	.word	0x40020400
 800236c:	40021000 	.word	0x40021000
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	4619      	mov	r1, r3
 8002378:	483b      	ldr	r0, [pc, #236]	; (8002468 <MX_GPIO_Init+0x3fc>)
 800237a:	f001 fbb3 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 800237e:	f243 0304 	movw	r3, #12292	; 0x3004
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	4834      	ldr	r0, [pc, #208]	; (8002468 <MX_GPIO_Init+0x3fc>)
 8002398:	f001 fba4 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800239c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ae:	230e      	movs	r3, #14
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	4619      	mov	r1, r3
 80023b8:	482c      	ldr	r0, [pc, #176]	; (800246c <MX_GPIO_Init+0x400>)
 80023ba:	f001 fb93 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ce:	230e      	movs	r3, #14
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	4619      	mov	r1, r3
 80023d8:	4825      	ldr	r0, [pc, #148]	; (8002470 <MX_GPIO_Init+0x404>)
 80023da:	f001 fb83 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 80023de:	2308      	movs	r3, #8
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ee:	230e      	movs	r3, #14
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	4619      	mov	r1, r3
 80023f8:	481b      	ldr	r0, [pc, #108]	; (8002468 <MX_GPIO_Init+0x3fc>)
 80023fa:	f001 fb73 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80023fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002410:	2309      	movs	r3, #9
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <MX_GPIO_Init+0x400>)
 800241c:	f001 fb62 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002420:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	480c      	ldr	r0, [pc, #48]	; (800246c <MX_GPIO_Init+0x400>)
 800243a:	f001 fb53 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800243e:	2360      	movs	r3, #96	; 0x60
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244e:	230c      	movs	r3, #12
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_GPIO_Init+0x408>)
 800245a:	f001 fb43 	bl	8003ae4 <HAL_GPIO_Init>

}
 800245e:	bf00      	nop
 8002460:	3738      	adds	r7, #56	; 0x38
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021800 	.word	0x40021800
 8002470:	40020800 	.word	0x40020800
 8002474:	40020400 	.word	0x40020400

08002478 <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	460b      	mov	r3, r1
 8002484:	71bb      	strb	r3, [r7, #6]
 8002486:	4613      	mov	r3, r2
 8002488:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800248a:	797b      	ldrb	r3, [r7, #5]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <hsl_to_rgb+0x1c>
 8002490:	2300      	movs	r3, #0
 8002492:	e0b1      	b.n	80025f8 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002494:	797b      	ldrb	r3, [r7, #5]
 8002496:	b29b      	uxth	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800249e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db09      	blt.n	80024ba <hsl_to_rgb+0x42>
 80024a6:	89bb      	ldrh	r3, [r7, #12]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	79ba      	ldrb	r2, [r7, #6]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	121b      	asrs	r3, r3, #8
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	74fb      	strb	r3, [r7, #19]
 80024b8:	e00a      	b.n	80024d0 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80024ba:	89bb      	ldrh	r3, [r7, #12]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024c4:	79ba      	ldrb	r2, [r7, #6]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	121b      	asrs	r3, r3, #8
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80024e0:	897b      	ldrh	r3, [r7, #10]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80024e8:	7d3b      	ldrb	r3, [r7, #20]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <hsl_to_rgb+0x9c>
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	b29b      	uxth	r3, r3
 8002504:	7cfa      	ldrb	r2, [r7, #19]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	121b      	asrs	r3, r3, #8
 800250e:	b2db      	uxtb	r3, r3
 8002510:	74bb      	strb	r3, [r7, #18]
 8002512:	e00a      	b.n	800252a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002514:	89fb      	ldrh	r3, [r7, #14]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800251c:	7cfa      	ldrb	r2, [r7, #19]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	121b      	asrs	r3, r3, #8
 8002526:	b2db      	uxtb	r3, r3
 8002528:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	797a      	ldrb	r2, [r7, #5]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800253a:	897b      	ldrh	r3, [r7, #10]
 800253c:	b29b      	uxth	r3, r3
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b04      	cmp	r3, #4
 8002544:	d839      	bhi.n	80025ba <hsl_to_rgb+0x142>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <hsl_to_rgb+0xd4>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	08002561 	.word	0x08002561
 8002550:	08002573 	.word	0x08002573
 8002554:	08002585 	.word	0x08002585
 8002558:	08002597 	.word	0x08002597
 800255c:	080025a9 	.word	0x080025a9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	7cbb      	ldrb	r3, [r7, #18]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	75bb      	strb	r3, [r7, #22]
 800256c:	2300      	movs	r3, #0
 800256e:	757b      	strb	r3, [r7, #21]
 8002570:	e02c      	b.n	80025cc <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002572:	7cbb      	ldrb	r3, [r7, #18]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	75fb      	strb	r3, [r7, #23]
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	75bb      	strb	r3, [r7, #22]
 800257e:	2300      	movs	r3, #0
 8002580:	757b      	strb	r3, [r7, #21]
 8002582:	e023      	b.n	80025cc <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	75bb      	strb	r3, [r7, #22]
 800258e:	7cbb      	ldrb	r3, [r7, #18]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	757b      	strb	r3, [r7, #21]
 8002594:	e01a      	b.n	80025cc <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
 800259a:	7cbb      	ldrb	r3, [r7, #18]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	75bb      	strb	r3, [r7, #22]
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	757b      	strb	r3, [r7, #21]
 80025a6:	e011      	b.n	80025cc <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80025a8:	7cbb      	ldrb	r3, [r7, #18]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	75fb      	strb	r3, [r7, #23]
 80025ae:	2300      	movs	r3, #0
 80025b0:	75bb      	strb	r3, [r7, #22]
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	757b      	strb	r3, [r7, #21]
 80025b8:	e008      	b.n	80025cc <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	75fb      	strb	r3, [r7, #23]
 80025c0:	2300      	movs	r3, #0
 80025c2:	75bb      	strb	r3, [r7, #22]
 80025c4:	7cbb      	ldrb	r3, [r7, #18]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	757b      	strb	r3, [r7, #21]
 80025ca:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	7c7b      	ldrb	r3, [r7, #17]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	7dbb      	ldrb	r3, [r7, #22]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	7c7b      	ldrb	r3, [r7, #17]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	440b      	add	r3, r1
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	431a      	orrs	r2, r3
 80025ea:	7d7b      	ldrb	r3, [r7, #21]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4619      	mov	r1, r3
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	440b      	add	r3, r1
 80025f6:	4313      	orrs	r3, r2
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260c:	e7fe      	b.n	800260c <Error_Handler+0x8>
	...

08002610 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <RetargetInit+0x28>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <RetargetInit+0x2c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6898      	ldr	r0, [r3, #8]
 8002624:	2300      	movs	r3, #0
 8002626:	2202      	movs	r2, #2
 8002628:	2100      	movs	r1, #0
 800262a:	f00c f95d 	bl	800e8e8 <setvbuf>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200033f0 	.word	0x200033f0
 800263c:	20000030 	.word	0x20000030

08002640 <_isatty>:

int _isatty(int fd) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db04      	blt.n	8002658 <_isatty+0x18>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	dc01      	bgt.n	8002658 <_isatty+0x18>
    return 1;
 8002654:	2301      	movs	r3, #1
 8002656:	e005      	b.n	8002664 <_isatty+0x24>

  errno = EBADF;
 8002658:	f00b ffee 	bl	800e638 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	2209      	movs	r2, #9
 8002660:	601a      	str	r2, [r3, #0]
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_write>:

int _write(int fd, char* ptr, int len) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d002      	beq.n	8002684 <_write+0x18>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d111      	bne.n	80026a8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002684:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <_write+0x54>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	f006 fa68 	bl	8008b66 <HAL_UART_Transmit>
 8002696:	4603      	mov	r3, r0
 8002698:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <_write+0x38>
      return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e008      	b.n	80026b6 <_write+0x4a>
    else
      return EIO;
 80026a4:	2305      	movs	r3, #5
 80026a6:	e006      	b.n	80026b6 <_write+0x4a>
  }
  errno = EBADF;
 80026a8:	f00b ffc6 	bl	800e638 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2209      	movs	r2, #9
 80026b0:	601a      	str	r2, [r3, #0]
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200033f0 	.word	0x200033f0

080026c4 <_close>:

int _close(int fd) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db04      	blt.n	80026dc <_close+0x18>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	dc01      	bgt.n	80026dc <_close+0x18>
    return 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	e006      	b.n	80026ea <_close+0x26>

  errno = EBADF;
 80026dc:	f00b ffac 	bl	800e638 <__errno>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2209      	movs	r2, #9
 80026e4:	601a      	str	r2, [r3, #0]
  return -1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80026fe:	f00b ff9b 	bl	800e638 <__errno>
 8002702:	4603      	mov	r3, r0
 8002704:	2209      	movs	r2, #9
 8002706:	601a      	str	r2, [r3, #0]
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_read>:

int _read(int fd, char* ptr, int len) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d110      	bne.n	8002748 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <_read+0x4c>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272e:	2201      	movs	r2, #1
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	f006 faaa 	bl	8008c8a <HAL_UART_Receive>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <_read+0x30>
      return 1;
 8002740:	2301      	movs	r3, #1
 8002742:	e008      	b.n	8002756 <_read+0x42>
    else
      return EIO;
 8002744:	2305      	movs	r3, #5
 8002746:	e006      	b.n	8002756 <_read+0x42>
  }
  errno = EBADF;
 8002748:	f00b ff76 	bl	800e638 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	2209      	movs	r2, #9
 8002750:	601a      	str	r2, [r3, #0]
  return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200033f0 	.word	0x200033f0

08002764 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db08      	blt.n	8002786 <_fstat+0x22>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	dc05      	bgt.n	8002786 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002780:	605a      	str	r2, [r3, #4]
    return 0;
 8002782:	2300      	movs	r3, #0
 8002784:	e005      	b.n	8002792 <_fstat+0x2e>
  }

  errno = EBADF;
 8002786:	f00b ff57 	bl	800e638 <__errno>
 800278a:	4603      	mov	r3, r0
 800278c:	2209      	movs	r2, #9
 800278e:	601a      	str	r2, [r3, #0]
  return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	460a      	mov	r2, r1
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	79ba      	ldrb	r2, [r7, #6]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	121b      	asrs	r3, r3, #8
 80027b4:	b2db      	uxtb	r3, r3
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	4603      	mov	r3, r0
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	460b      	mov	r3, r1
 80027dc:	717b      	strb	r3, [r7, #5]
 80027de:	4613      	mov	r3, r2
 80027e0:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80027e2:	79fa      	ldrb	r2, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	189c      	adds	r4, r3, r2
 80027ea:	797b      	ldrb	r3, [r7, #5]
 80027ec:	21b0      	movs	r1, #176	; 0xb0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ffd3 	bl	800279a <scale8>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <led_set_RGB+0x6c>)
 80027fa:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3301      	adds	r3, #1
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <led_set_RGB+0x6c>)
 8002808:	79ba      	ldrb	r2, [r7, #6]
 800280a:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	1c9c      	adds	r4, r3, #2
 8002816:	793b      	ldrb	r3, [r7, #4]
 8002818:	21f0      	movs	r1, #240	; 0xf0
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ffbd 	bl	800279a <scale8>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <led_set_RGB+0x6c>)
 8002826:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}
 8002830:	200033f4 	.word	0x200033f4

08002834 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d852      	bhi.n	80028ea <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e046      	b.n	80028d8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	4a37      	ldr	r2, [pc, #220]	; (8002934 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	461a      	mov	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	dd01      	ble.n	800286c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002868:	2126      	movs	r1, #38	; 0x26
 800286a:	e000      	b.n	800286e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800286c:	2113      	movs	r1, #19
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3318      	adds	r3, #24
 8002872:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002874:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	3301      	adds	r3, #1
 8002882:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	dd01      	ble.n	800289a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002896:	2126      	movs	r1, #38	; 0x26
 8002898:	e000      	b.n	800289c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800289a:	2113      	movs	r1, #19
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3320      	adds	r3, #32
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028a2:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	3302      	adds	r3, #2
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dd01      	ble.n	80028c8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80028c4:	2126      	movs	r1, #38	; 0x26
 80028c6:	e000      	b.n	80028ca <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80028c8:	2113      	movs	r1, #19
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3328      	adds	r3, #40	; 0x28
 80028ce:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028d0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d9b5      	bls.n	800284a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4a12      	ldr	r2, [pc, #72]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028e6:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80028e8:	e01d      	b.n	8002926 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b07      	cmp	r3, #7
 80028f0:	d812      	bhi.n	8002918 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80028f2:	2318      	movs	r3, #24
 80028f4:	72fb      	strb	r3, [r7, #11]
 80028f6:	e006      	b.n	8002906 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	54d1      	strb	r1, [r2, r3]
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	3301      	adds	r3, #1
 8002904:	72fb      	strb	r3, [r7, #11]
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	2b2f      	cmp	r3, #47	; 0x2f
 800290a:	d9f5      	bls.n	80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002914:	6013      	str	r3, [r2, #0]
}
 8002916:	e006      	b.n	8002926 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800291e:	2100      	movs	r1, #0
 8002920:	4806      	ldr	r0, [pc, #24]	; (800293c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002922:	f005 f9a7 	bl	8007c74 <HAL_TIM_PWM_Stop_DMA>
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20003438 	.word	0x20003438
 8002934:	200033f4 	.word	0x200033f4
 8002938:	20003408 	.word	0x20003408
 800293c:	200032c0 	.word	0x200032c0

08002940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_MspInit+0x68>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_MspInit+0x68>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_MspInit+0x68>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_MspInit+0x68>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_MspInit+0x68>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_MspInit+0x68>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2005      	movs	r0, #5
 8002984:	f000 fcdf 	bl	8003346 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002988:	2005      	movs	r0, #5
 800298a:	f000 fcf8 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2005      	movs	r0, #5
 8002994:	f000 fcd7 	bl	8003346 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002998:	2005      	movs	r0, #5
 800299a:	f000 fcf0 	bl	800337e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_CRC_MspInit+0x3c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10d      	bne.n	80029da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_CRC_MspInit+0x40>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_CRC_MspInit+0x40>)
 80029c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_CRC_MspInit+0x40>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023000 	.word	0x40023000
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_I2C_MspInit+0x128>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12c      	bne.n	8002a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a40      	ldr	r2, [pc, #256]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a1c:	f043 0320 	orr.w	r3, r3, #32
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a32:	2312      	movs	r3, #18
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4835      	ldr	r0, [pc, #212]	; (8002b20 <HAL_I2C_MspInit+0x130>)
 8002a4a:	f001 f84b 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a6a:	e050      	b.n	8002b0e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_I2C_MspInit+0x134>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d14b      	bne.n	8002b0e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4817      	ldr	r0, [pc, #92]	; (8002b28 <HAL_I2C_MspInit+0x138>)
 8002acc:	f001 f80a 	bl	8003ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad6:	2312      	movs	r3, #18
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ada:	2301      	movs	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	480f      	ldr	r0, [pc, #60]	; (8002b2c <HAL_I2C_MspInit+0x13c>)
 8002aee:	f000 fff9 	bl	8003ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_I2C_MspInit+0x12c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
}
 8002b0e:	bf00      	nop
 8002b10:	3730      	adds	r7, #48	; 0x30
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40005800 	.word	0x40005800
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40005c00 	.word	0x40005c00
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_SPI_MspInit+0x128>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d14c      	bne.n	8002bec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a40      	ldr	r2, [pc, #256]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a39      	ldr	r2, [pc, #228]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bb8:	2306      	movs	r3, #6
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4827      	ldr	r0, [pc, #156]	; (8002c60 <HAL_SPI_MspInit+0x130>)
 8002bc4:	f000 ff8e 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bda:	2306      	movs	r3, #6
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	481f      	ldr	r0, [pc, #124]	; (8002c64 <HAL_SPI_MspInit+0x134>)
 8002be6:	f000 ff7d 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002bea:	e031      	b.n	8002c50 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_SPI_MspInit+0x138>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d12c      	bne.n	8002c50 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_SPI_MspInit+0x12c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c2e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c40:	2305      	movs	r3, #5
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <HAL_SPI_MspInit+0x13c>)
 8002c4c:	f000 ff4a 	bl	8003ae4 <HAL_GPIO_Init>
}
 8002c50:	bf00      	nop
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40003c00 	.word	0x40003c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40015000 	.word	0x40015000
 8002c6c:	40021400 	.word	0x40021400

08002c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <HAL_TIM_Base_MspInit+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c9e:	e04a      	b.n	8002d36 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d145      	bne.n	8002d36 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_TIM_Base_MspInit+0xd4>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_TIM_Base_MspInit+0xdc>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cd2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d02:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d04:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002d0a:	480f      	ldr	r0, [pc, #60]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002d0c:	f000 fb6e 	bl	80033ec <HAL_DMA_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002d16:	f7ff fc75 	bl	8002604 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_TIM_Base_MspInit+0xd8>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	201c      	movs	r0, #28
 8002d2c:	f000 fb0b 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d30:	201c      	movs	r0, #28
 8002d32:	f000 fb24 	bl	800337e <HAL_NVIC_EnableIRQ>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	20003308 	.word	0x20003308
 8002d4c:	40026088 	.word	0x40026088

08002d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d11d      	bne.n	8002dae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_TIM_MspPostInit+0x68>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <HAL_TIM_MspPostInit+0x68>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_TIM_MspPostInit+0x68>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	4619      	mov	r1, r3
 8002da8:	4804      	ldr	r0, [pc, #16]	; (8002dbc <HAL_TIM_MspPostInit+0x6c>)
 8002daa:	f000 fe9b 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	; 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a36      	ldr	r2, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0xf8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d135      	bne.n	8002e4e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002dec:	f043 0310 	orr.w	r3, r3, #16
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	4822      	ldr	r0, [pc, #136]	; (8002ec0 <HAL_UART_MspInit+0x100>)
 8002e38:	f000 fe54 	bl	8003ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2025      	movs	r0, #37	; 0x25
 8002e42:	f000 fa80 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e46:	2025      	movs	r0, #37	; 0x25
 8002e48:	f000 fa99 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e4c:	e030      	b.n	8002eb0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_UART_MspInit+0x104>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d12b      	bne.n	8002eb0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_UART_MspInit+0xfc>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e90:	2360      	movs	r3, #96	; 0x60
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <HAL_UART_MspInit+0x108>)
 8002eac:	f000 fe1a 	bl	8003ae4 <HAL_GPIO_Init>
}
 8002eb0:	bf00      	nop
 8002eb2:	3730      	adds	r7, #48	; 0x30
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	40020c00 	.word	0x40020c00

08002ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <NMI_Handler+0x4>

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f18:	f000 f8f6 	bl	8003108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <DMA1_Stream5_IRQHandler+0x10>)
 8002f36:	f000 fb99 	bl	800366c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20003308 	.word	0x20003308

08002f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <TIM2_IRQHandler+0x10>)
 8002f4a:	f004 ff65 	bl	8007e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200032c0 	.word	0x200032c0

08002f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <USART1_IRQHandler+0x10>)
 8002f5e:	f005 ff67 	bl	8008e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20003368 	.word	0x20003368

08002f6c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <OTG_HS_IRQHandler+0x10>)
 8002f72:	f001 f9e7 	bl	8004344 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20003834 	.word	0x20003834

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f00b fb42 	bl	800e638 <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20030000 	.word	0x20030000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	2000343c 	.word	0x2000343c
 8002fe8:	20003b48 	.word	0x20003b48

08002fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <SystemInit+0x20>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <SystemInit+0x20>)
 8002ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003048 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopFillZerobss+0x26>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303a:	f7ff ffd7 	bl	8002fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f00b fb01 	bl	800e644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003042:	f7fe fd03 	bl	8001a4c <main>
  bx  lr    
 8003046:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003048:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003054:	0800fe28 	.word	0x0800fe28
  ldr r2, =_sbss
 8003058:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800305c:	20003b48 	.word	0x20003b48

08003060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC_IRQHandler>
	...

08003064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_Init+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <HAL_Init+0x40>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_Init+0x40>)
 800307a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_Init+0x40>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800308c:	2003      	movs	r0, #3
 800308e:	f000 f94f 	bl	8003330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003092:	200f      	movs	r0, #15
 8003094:	f000 f808 	bl	80030a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003098:	f7ff fc52 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023c00 	.word	0x40023c00

080030a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_InitTick+0x54>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_InitTick+0x58>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030be:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f967 	bl	800339a <HAL_SYSTICK_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00e      	b.n	80030f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d80a      	bhi.n	80030f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030dc:	2200      	movs	r2, #0
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030e4:	f000 f92f 	bl	8003346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_InitTick+0x5c>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000004 	.word	0x20000004
 8003100:	2000000c 	.word	0x2000000c
 8003104:	20000008 	.word	0x20000008

08003108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_IncTick+0x20>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x24>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_IncTick+0x24>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000000c 	.word	0x2000000c
 800312c:	20003440 	.word	0x20003440

08003130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return uwTick;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_GetTick+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20003440 	.word	0x20003440

08003148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff ffee 	bl	8003130 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003160:	d005      	beq.n	800316e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_Delay+0x44>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800316e:	bf00      	nop
 8003170:	f7ff ffde 	bl	8003130 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	429a      	cmp	r2, r3
 800317e:	d8f7      	bhi.n	8003170 <HAL_Delay+0x28>
  {
  }
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000000c 	.word	0x2000000c

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c2:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60d3      	str	r3, [r2, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	; (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	; (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032fc:	d301      	bcc.n	8003302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fe:	2301      	movs	r3, #1
 8003300:	e00f      	b.n	8003322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <SysTick_Config+0x40>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330a:	210f      	movs	r1, #15
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003310:	f7ff ff8e 	bl	8003230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <SysTick_Config+0x40>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <SysTick_Config+0x40>)
 800331c:	2207      	movs	r2, #7
 800331e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000e010 	.word	0xe000e010

08003330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff29 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003358:	f7ff ff3e 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 800335c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7ff ff8e 	bl	8003284 <NVIC_EncodePriority>
 8003368:	4602      	mov	r2, r0
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff5d 	bl	8003230 <__NVIC_SetPriority>
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff31 	bl	80031f4 <__NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffa2 	bl	80032ec <SysTick_Config>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e00e      	b.n	80033e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	795b      	ldrb	r3, [r3, #5]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fae9 	bl	80029ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033f8:	f7ff fe9a 	bl	8003130 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e099      	b.n	800353c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003428:	e00f      	b.n	800344a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800342a:	f7ff fe81 	bl	8003130 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b05      	cmp	r3, #5
 8003436:	d908      	bls.n	800344a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2203      	movs	r2, #3
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e078      	b.n	800353c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e8      	bne.n	800342a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <HAL_DMA_Init+0x158>)
 8003464:	4013      	ands	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d117      	bne.n	800350e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00e      	beq.n	800350e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa7b 	bl	80039ec <DMA_CheckFifoParam>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800350a:	2301      	movs	r3, #1
 800350c:	e016      	b.n	800353c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa32 	bl	8003980 <DMA_CalcBaseAndBitshift>
 800351c:	4603      	mov	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	223f      	movs	r2, #63	; 0x3f
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	f010803f 	.word	0xf010803f

08003548 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003556:	f7ff fdeb 	bl	8003130 <HAL_GetTick>
 800355a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d008      	beq.n	800357a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e052      	b.n	8003620 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0216 	bic.w	r2, r2, #22
 8003588:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <HAL_DMA_Abort+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0208 	bic.w	r2, r2, #8
 80035b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ca:	e013      	b.n	80035f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035cc:	f7ff fdb0 	bl	8003130 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d90c      	bls.n	80035f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2203      	movs	r2, #3
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e015      	b.n	8003620 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e4      	bne.n	80035cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	223f      	movs	r2, #63	; 0x3f
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e00c      	b.n	8003660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2205      	movs	r2, #5
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003678:	4b8e      	ldr	r3, [pc, #568]	; (80038b4 <HAL_DMA_IRQHandler+0x248>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_DMA_IRQHandler+0x24c>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0a9b      	lsrs	r3, r3, #10
 8003684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	2208      	movs	r2, #8
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01a      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	2208      	movs	r2, #8
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	2201      	movs	r2, #1
 80036fc:	409a      	lsls	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2204      	movs	r2, #4
 8003714:	409a      	lsls	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d012      	beq.n	8003744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	2204      	movs	r2, #4
 8003732:	409a      	lsls	r2, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2210      	movs	r2, #16
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d043      	beq.n	80037dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d03c      	beq.n	80037dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2210      	movs	r2, #16
 8003768:	409a      	lsls	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d024      	beq.n	80037dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e01f      	b.n	80037dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e016      	b.n	80037dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0208 	bic.w	r2, r2, #8
 80037ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2220      	movs	r2, #32
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 808f 	beq.w	800390c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8087 	beq.w	800390c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	2220      	movs	r2, #32
 8003804:	409a      	lsls	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b05      	cmp	r3, #5
 8003814:	d136      	bne.n	8003884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0216 	bic.w	r2, r2, #22
 8003824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_DMA_IRQHandler+0x1da>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0208 	bic.w	r2, r2, #8
 8003854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	223f      	movs	r2, #63	; 0x3f
 800385c:	409a      	lsls	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d07e      	beq.n	8003978 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
        }
        return;
 8003882:	e079      	b.n	8003978 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d031      	beq.n	800390c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
 80038b0:	e02c      	b.n	800390c <HAL_DMA_IRQHandler+0x2a0>
 80038b2:	bf00      	nop
 80038b4:	20000004 	.word	0x20000004
 80038b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e01e      	b.n	800390c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	d032      	beq.n	800397a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d022      	beq.n	8003966 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2205      	movs	r2, #5
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3301      	adds	r3, #1
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	d307      	bcc.n	8003954 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f2      	bne.n	8003938 <HAL_DMA_IRQHandler+0x2cc>
 8003952:	e000      	b.n	8003956 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003954:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e000      	b.n	800397a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003978:	bf00      	nop
    }
  }
}
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3b10      	subs	r3, #16
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399a:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d909      	bls.n	80039c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	; 0x58
 80039c0:	e007      	b.n	80039d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	aaaaaaab 	.word	0xaaaaaaab
 80039e8:	0800fc60 	.word	0x0800fc60

080039ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d856      	bhi.n	8003aba <DMA_CheckFifoParam+0xce>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <DMA_CheckFifoParam+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003abb 	.word	0x08003abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d046      	beq.n	8003abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e043      	b.n	8003abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a3e:	d140      	bne.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e03d      	b.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4e:	d121      	bne.n	8003a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d837      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xda>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <DMA_CheckFifoParam+0x70>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a73 	.word	0x08003a73
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e030      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d025      	beq.n	8003aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e022      	b.n	8003aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a92:	e01c      	b.n	8003ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d903      	bls.n	8003aa2 <DMA_CheckFifoParam+0xb6>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d003      	beq.n	8003aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa0:	e018      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa6:	e015      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aba:	bf00      	nop
 8003abc:	e00a      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e008      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e006      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e177      	b.n	8003df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f040 8166 	bne.w	8003dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d005      	beq.n	8003b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d130      	bne.n	8003b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0201 	and.w	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d017      	beq.n	8003bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d123      	bne.n	8003c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	08da      	lsrs	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3208      	adds	r2, #8
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80c0 	beq.w	8003dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b66      	ldr	r3, [pc, #408]	; (8003e08 <HAL_GPIO_Init+0x324>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_GPIO_Init+0x324>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7a:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <HAL_GPIO_Init+0x324>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c86:	4a61      	ldr	r2, [pc, #388]	; (8003e0c <HAL_GPIO_Init+0x328>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d037      	beq.n	8003d22 <HAL_GPIO_Init+0x23e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a57      	ldr	r2, [pc, #348]	; (8003e14 <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_GPIO_Init+0x23a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	; (8003e18 <HAL_GPIO_Init+0x334>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02b      	beq.n	8003d1a <HAL_GPIO_Init+0x236>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a55      	ldr	r2, [pc, #340]	; (8003e1c <HAL_GPIO_Init+0x338>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d025      	beq.n	8003d16 <HAL_GPIO_Init+0x232>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <HAL_GPIO_Init+0x33c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01f      	beq.n	8003d12 <HAL_GPIO_Init+0x22e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a53      	ldr	r2, [pc, #332]	; (8003e24 <HAL_GPIO_Init+0x340>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_Init+0x22a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_GPIO_Init+0x344>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_GPIO_Init+0x226>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a51      	ldr	r2, [pc, #324]	; (8003e2c <HAL_GPIO_Init+0x348>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00d      	beq.n	8003d06 <HAL_GPIO_Init+0x222>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a50      	ldr	r2, [pc, #320]	; (8003e30 <HAL_GPIO_Init+0x34c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <HAL_GPIO_Init+0x21e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	; (8003e34 <HAL_GPIO_Init+0x350>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_GPIO_Init+0x21a>
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	e012      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003cfe:	230a      	movs	r3, #10
 8003d00:	e010      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d02:	2308      	movs	r3, #8
 8003d04:	e00e      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00c      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e00a      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_Init+0x240>
 8003d22:	2300      	movs	r3, #0
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d34:	4935      	ldr	r1, [pc, #212]	; (8003e0c <HAL_GPIO_Init+0x328>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d66:	4a34      	ldr	r2, [pc, #208]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_GPIO_Init+0x354>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f ae84 	bls.w	8003b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020c00 	.word	0x40020c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40021400 	.word	0x40021400
 8003e28:	40021800 	.word	0x40021800
 8003e2c:	40021c00 	.word	0x40021c00
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022400 	.word	0x40022400
 8003e38:	40013c00 	.word	0x40013c00

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e58:	e003      	b.n	8003e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e5a:	887b      	ldrh	r3, [r7, #2]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e70:	b08f      	sub	sp, #60	; 0x3c
 8003e72:	af0a      	add	r7, sp, #40	; 0x28
 8003e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e054      	b.n	8003f2a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f00a f8e8 	bl	800e070 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f005 ff90 	bl	8009de4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	687e      	ldr	r6, [r7, #4]
 8003ecc:	466d      	mov	r5, sp
 8003ece:	f106 0410 	add.w	r4, r6, #16
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ee2:	1d33      	adds	r3, r6, #4
 8003ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee6:	6838      	ldr	r0, [r7, #0]
 8003ee8:	f005 ff0a 	bl	8009d00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f005 ff87 	bl	8009e06 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	687e      	ldr	r6, [r7, #4]
 8003f00:	466d      	mov	r5, sp
 8003f02:	f106 0410 	add.w	r4, r6, #16
 8003f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f16:	1d33      	adds	r3, r6, #4
 8003f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1a:	6838      	ldr	r0, [r7, #0]
 8003f1c:	f006 f910 	bl	800a140 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f32 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003f32:	b590      	push	{r4, r7, lr}
 8003f34:	b089      	sub	sp, #36	; 0x24
 8003f36:	af04      	add	r7, sp, #16
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4603      	mov	r3, r0
 8003f42:	70fb      	strb	r3, [r7, #3]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70bb      	strb	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_HCD_HC_Init+0x28>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e076      	b.n	8004048 <HAL_HCD_HC_Init+0x116>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	333d      	adds	r3, #61	; 0x3d
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3338      	adds	r3, #56	; 0x38
 8003f82:	787a      	ldrb	r2, [r7, #1]
 8003f84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3340      	adds	r3, #64	; 0x40
 8003f94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f96:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3339      	adds	r3, #57	; 0x39
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	333f      	adds	r3, #63	; 0x3f
 8003fb8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003fbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	78ba      	ldrb	r2, [r7, #2]
 8003fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fc6:	b2d0      	uxtb	r0, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	333a      	adds	r3, #58	; 0x3a
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	da09      	bge.n	8003ff4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	333b      	adds	r3, #59	; 0x3b
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e008      	b.n	8004006 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	333b      	adds	r3, #59	; 0x3b
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	333c      	adds	r3, #60	; 0x3c
 8004014:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004018:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	787c      	ldrb	r4, [r7, #1]
 8004020:	78ba      	ldrb	r2, [r7, #2]
 8004022:	78f9      	ldrb	r1, [r7, #3]
 8004024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4623      	mov	r3, r4
 8004036:	f006 fa09 	bl	800a44c <USB_HC_Init>
 800403a:	4603      	mov	r3, r0
 800403c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	bd90      	pop	{r4, r7, pc}

08004050 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_HCD_HC_Halt+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e00f      	b.n	800408e <HAL_HCD_HC_Halt+0x3e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f006 fc59 	bl	800a936 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	70fb      	strb	r3, [r7, #3]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70bb      	strb	r3, [r7, #2]
 80040ae:	4613      	mov	r3, r2
 80040b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	333b      	adds	r3, #59	; 0x3b
 80040c0:	78ba      	ldrb	r2, [r7, #2]
 80040c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	333f      	adds	r3, #63	; 0x3f
 80040d2:	787a      	ldrb	r2, [r7, #1]
 80040d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80040d6:	7c3b      	ldrb	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d112      	bne.n	8004102 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3342      	adds	r3, #66	; 0x42
 80040ea:	2203      	movs	r2, #3
 80040ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	333d      	adds	r3, #61	; 0x3d
 80040fc:	7f3a      	ldrb	r2, [r7, #28]
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e008      	b.n	8004114 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	3342      	adds	r3, #66	; 0x42
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b03      	cmp	r3, #3
 8004118:	f200 80c6 	bhi.w	80042a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004295 	.word	0x08004295
 800412c:	08004199 	.word	0x08004199
 8004130:	08004217 	.word	0x08004217
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004134:	7c3b      	ldrb	r3, [r7, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	f040 80b8 	bne.w	80042ac <HAL_HCD_HC_SubmitRequest+0x214>
 800413c:	78bb      	ldrb	r3, [r7, #2]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 80b4 	bne.w	80042ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004144:	8b3b      	ldrh	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3355      	adds	r3, #85	; 0x55
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3355      	adds	r3, #85	; 0x55
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3342      	adds	r3, #66	; 0x42
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004182:	e093      	b.n	80042ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3342      	adds	r3, #66	; 0x42
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	e089      	b.n	80042ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004198:	78bb      	ldrb	r3, [r7, #2]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11d      	bne.n	80041da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3355      	adds	r3, #85	; 0x55
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	3342      	adds	r3, #66	; 0x42
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80041c4:	e073      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	3342      	adds	r3, #66	; 0x42
 80041d4:	2202      	movs	r2, #2
 80041d6:	701a      	strb	r2, [r3, #0]
      break;
 80041d8:	e069      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3354      	adds	r3, #84	; 0x54
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	3342      	adds	r3, #66	; 0x42
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
      break;
 8004200:	e055      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	212c      	movs	r1, #44	; 0x2c
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	3342      	adds	r3, #66	; 0x42
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
      break;
 8004214:	e04b      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004216:	78bb      	ldrb	r3, [r7, #2]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11d      	bne.n	8004258 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3355      	adds	r3, #85	; 0x55
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3342      	adds	r3, #66	; 0x42
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004242:	e034      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3342      	adds	r3, #66	; 0x42
 8004252:	2202      	movs	r2, #2
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e02a      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3354      	adds	r3, #84	; 0x54
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3342      	adds	r3, #66	; 0x42
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
      break;
 800427e:	e016      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3342      	adds	r3, #66	; 0x42
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	e00c      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3342      	adds	r3, #66	; 0x42
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80042ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3344      	adds	r3, #68	; 0x44
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	8b3a      	ldrh	r2, [r7, #24]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	202c      	movs	r0, #44	; 0x2c
 80042c8:	fb00 f303 	mul.w	r3, r0, r3
 80042cc:	440b      	add	r3, r1
 80042ce:	334c      	adds	r3, #76	; 0x4c
 80042d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3360      	adds	r3, #96	; 0x60
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3350      	adds	r3, #80	; 0x50
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3339      	adds	r3, #57	; 0x39
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3361      	adds	r3, #97	; 0x61
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	222c      	movs	r2, #44	; 0x2c
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	3338      	adds	r3, #56	; 0x38
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	18d1      	adds	r1, r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	f006 f9ac 	bl	800a690 <USB_HC_StartXfer>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop

08004344 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fead 	bl	800a0ba <USB_GetMode>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 80f6 	bne.w	8004554 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f005 fe91 	bl	800a094 <USB_ReadInterrupts>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80ec 	beq.w	8004552 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f005 fe88 	bl	800a094 <USB_ReadInterrupts>
 8004384:	4603      	mov	r3, r0
 8004386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438e:	d104      	bne.n	800439a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f005 fe78 	bl	800a094 <USB_ReadInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ae:	d104      	bne.n	80043ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f005 fe68 	bl	800a094 <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ce:	d104      	bne.n	80043da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f005 fe58 	bl	800a094 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2202      	movs	r2, #2
 80043f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f005 fe4a 	bl	800a094 <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440a:	d11c      	bne.n	8004446 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004414:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004426:	2110      	movs	r1, #16
 8004428:	6938      	ldr	r0, [r7, #16]
 800442a:	f005 fd39 	bl	8009ea0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f005 fd6a 	bl	8009f08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f005 ff40 	bl	800a2c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f009 fe8f 	bl	800e164 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f005 fe22 	bl	800a094 <USB_ReadInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445a:	d102      	bne.n	8004462 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f001 f89e 	bl	800559e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f005 fe14 	bl	800a094 <USB_ReadInterrupts>
 800446c:	4603      	mov	r3, r0
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d106      	bne.n	8004484 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f009 fe58 	bl	800e12c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2208      	movs	r2, #8
 8004482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f005 fe03 	bl	800a094 <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b10      	cmp	r3, #16
 8004496:	d101      	bne.n	800449c <HAL_HCD_IRQHandler+0x158>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_HCD_IRQHandler+0x15a>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0210 	bic.w	r2, r2, #16
 80044b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ffa1 	bl	80053fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0210 	orr.w	r2, r2, #16
 80044c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f005 fde1 	bl	800a094 <USB_ReadInterrupts>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044dc:	d13a      	bne.n	8004554 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f006 fa16 	bl	800a914 <USB_HC_ReadInterrupt>
 80044e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e025      	b.n	800453c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d018      	beq.n	8004536 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d106      	bne.n	800452a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8ab 	bl	800467e <HCD_HC_IN_IRQHandler>
 8004528:	e005      	b.n	8004536 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fbf9 	bl	8004d28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3301      	adds	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	429a      	cmp	r2, r3
 8004544:	d3d4      	bcc.n	80044f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454e:	615a      	str	r2, [r3, #20]
 8004550:	e000      	b.n	8004554 <HAL_HCD_IRQHandler+0x210>
      return;
 8004552:	bf00      	nop
    }
  }
}
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_HCD_Start+0x16>
 800456c:	2302      	movs	r3, #2
 800456e:	e013      	b.n	8004598 <HAL_HCD_Start+0x3e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f005 ff02 	bl	800a388 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f005 fc1a 	bl	8009dc2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_HCD_Stop+0x16>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e00d      	b.n	80045d2 <HAL_HCD_Stop+0x32>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f006 faf0 	bl	800aba8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f005 fea4 	bl	800a334 <USB_ResetPort>
 80045ec:	4603      	mov	r3, r0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	3360      	adds	r3, #96	; 0x60
 8004610:	781b      	ldrb	r3, [r3, #0]
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	212c      	movs	r1, #44	; 0x2c
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	3350      	adds	r3, #80	; 0x50
 8004638:	681b      	ldr	r3, [r3, #0]
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f005 fee8 	bl	800a428 <USB_GetCurrentFrame>
 8004658:	4603      	mov	r3, r0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f005 fec3 	bl	800a3fa <USB_GetHostSpeed>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d11a      	bne.n	80046e4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	461a      	mov	r2, r3
 80046bc:	2304      	movs	r3, #4
 80046be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3361      	adds	r3, #97	; 0x61
 80046ce:	2206      	movs	r2, #6
 80046d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f006 f92a 	bl	800a936 <USB_HC_Halt>
 80046e2:	e0af      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d11b      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004708:	461a      	mov	r2, r3
 800470a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	; 0x61
 800471e:	2207      	movs	r2, #7
 8004720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f006 f902 	bl	800a936 <USB_HC_Halt>
 8004732:	e087      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	d109      	bne.n	800475e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	461a      	mov	r2, r3
 8004758:	2320      	movs	r3, #32
 800475a:	6093      	str	r3, [r2, #8]
 800475c:	e072      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d11a      	bne.n	80047aa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	461a      	mov	r2, r3
 8004782:	2308      	movs	r3, #8
 8004784:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	3361      	adds	r3, #97	; 0x61
 8004794:	2205      	movs	r2, #5
 8004796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f006 f8c7 	bl	800a936 <USB_HC_Halt>
 80047a8:	e04c      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d11b      	bne.n	80047fa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	461a      	mov	r2, r3
 80047d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	212c      	movs	r1, #44	; 0x2c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	3361      	adds	r3, #97	; 0x61
 80047e4:	2208      	movs	r2, #8
 80047e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f006 f89f 	bl	800a936 <USB_HC_Halt>
 80047f8:	e024      	b.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d119      	bne.n	8004844 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	3361      	adds	r3, #97	; 0x61
 8004830:	2206      	movs	r2, #6
 8004832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f006 f879 	bl	800a936 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485a:	d112      	bne.n	8004882 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f006 f865 	bl	800a936 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	461a      	mov	r2, r3
 800487a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004880:	e24e      	b.n	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 80df 	bne.w	8004a58 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3348      	adds	r3, #72	; 0x48
 80048b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0159      	lsls	r1, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	202c      	movs	r0, #44	; 0x2c
 80048cc:	fb00 f303 	mul.w	r3, r0, r3
 80048d0:	440b      	add	r3, r1
 80048d2:	3350      	adds	r3, #80	; 0x50
 80048d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3361      	adds	r3, #97	; 0x61
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	212c      	movs	r1, #44	; 0x2c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	335c      	adds	r3, #92	; 0x5c
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	2301      	movs	r3, #1
 800490a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	333f      	adds	r3, #63	; 0x3f
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	333f      	adds	r3, #63	; 0x3f
 800492e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004930:	2b02      	cmp	r3, #2
 8004932:	d111      	bne.n	8004958 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f005 fff9 	bl	800a936 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	461a      	mov	r2, r3
 8004952:	2310      	movs	r3, #16
 8004954:	6093      	str	r3, [r2, #8]
 8004956:	e03a      	b.n	80049ce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	212c      	movs	r1, #44	; 0x2c
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	4413      	add	r3, r2
 8004964:	333f      	adds	r3, #63	; 0x3f
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d009      	beq.n	8004980 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	212c      	movs	r1, #44	; 0x2c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	333f      	adds	r3, #63	; 0x3f
 800497a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800497c:	2b01      	cmp	r3, #1
 800497e:	d126      	bne.n	80049ce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	440a      	add	r2, r1
 8004996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3360      	adds	r3, #96	; 0x60
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	b2d9      	uxtb	r1, r3
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	202c      	movs	r0, #44	; 0x2c
 80049bc:	fb00 f303 	mul.w	r3, r0, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	3360      	adds	r3, #96	; 0x60
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f009 fbd9 	bl	800e180 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d12b      	bne.n	8004a2e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	212c      	movs	r1, #44	; 0x2c
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	3348      	adds	r3, #72	; 0x48
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	202c      	movs	r0, #44	; 0x2c
 80049ec:	fb00 f202 	mul.w	r2, r0, r2
 80049f0:	440a      	add	r2, r1
 80049f2:	3240      	adds	r2, #64	; 0x40
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 818e 	beq.w	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3354      	adds	r3, #84	; 0x54
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2d8      	uxtb	r0, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	3354      	adds	r3, #84	; 0x54
 8004a28:	4602      	mov	r2, r0
 8004a2a:	701a      	strb	r2, [r3, #0]
}
 8004a2c:	e178      	b.n	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	212c      	movs	r1, #44	; 0x2c
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	3354      	adds	r3, #84	; 0x54
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f083 0301 	eor.w	r3, r3, #1
 8004a42:	b2d8      	uxtb	r0, r3
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3354      	adds	r3, #84	; 0x54
 8004a52:	4602      	mov	r2, r0
 8004a54:	701a      	strb	r2, [r3, #0]
}
 8004a56:	e163      	b.n	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	f040 80f6 	bne.w	8004c5c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3361      	adds	r3, #97	; 0x61
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d109      	bne.n	8004a98 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	212c      	movs	r1, #44	; 0x2c
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	3360      	adds	r3, #96	; 0x60
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e0c9      	b.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3361      	adds	r3, #97	; 0x61
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d109      	bne.n	8004ac0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3360      	adds	r3, #96	; 0x60
 8004aba:	2205      	movs	r2, #5
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e0b5      	b.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3361      	adds	r3, #97	; 0x61
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d009      	beq.n	8004ae8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3361      	adds	r3, #97	; 0x61
 8004ae2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d150      	bne.n	8004b8a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	335c      	adds	r3, #92	; 0x5c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	202c      	movs	r0, #44	; 0x2c
 8004b00:	fb00 f303 	mul.w	r3, r0, r3
 8004b04:	440b      	add	r3, r1
 8004b06:	335c      	adds	r3, #92	; 0x5c
 8004b08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	335c      	adds	r3, #92	; 0x5c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d912      	bls.n	8004b44 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	335c      	adds	r3, #92	; 0x5c
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3360      	adds	r3, #96	; 0x60
 8004b3e:	2204      	movs	r2, #4
 8004b40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b42:	e073      	b.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3360      	adds	r3, #96	; 0x60
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b6c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b74:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b88:	e050      	b.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3361      	adds	r3, #97	; 0x61
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d122      	bne.n	8004be4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	212c      	movs	r1, #44	; 0x2c
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	3360      	adds	r3, #96	; 0x60
 8004bac:	2202      	movs	r2, #2
 8004bae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bc6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e023      	b.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	212c      	movs	r1, #44	; 0x2c
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	3361      	adds	r3, #97	; 0x61
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b07      	cmp	r3, #7
 8004bf6:	d119      	bne.n	8004c2c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	212c      	movs	r1, #44	; 0x2c
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	4413      	add	r3, r2
 8004c04:	335c      	adds	r3, #92	; 0x5c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	202c      	movs	r0, #44	; 0x2c
 8004c10:	fb00 f303 	mul.w	r3, r0, r3
 8004c14:	440b      	add	r3, r1
 8004c16:	335c      	adds	r3, #92	; 0x5c
 8004c18:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2204      	movs	r2, #4
 8004c2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	b2d9      	uxtb	r1, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	202c      	movs	r0, #44	; 0x2c
 8004c48:	fb00 f303 	mul.w	r3, r0, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3360      	adds	r3, #96	; 0x60
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f009 fa93 	bl	800e180 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004c5a:	e061      	b.n	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d156      	bne.n	8004d20 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	212c      	movs	r1, #44	; 0x2c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	333f      	adds	r3, #63	; 0x3f
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d111      	bne.n	8004caa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	335c      	adds	r3, #92	; 0x5c
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f005 fe47 	bl	800a936 <USB_HC_Halt>
 8004ca8:	e031      	b.n	8004d0e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	212c      	movs	r1, #44	; 0x2c
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	333f      	adds	r3, #63	; 0x3f
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	333f      	adds	r3, #63	; 0x3f
 8004ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d11d      	bne.n	8004d0e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	335c      	adds	r3, #92	; 0x5c
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	212c      	movs	r1, #44	; 0x2c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3361      	adds	r3, #97	; 0x61
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f005 fe14 	bl	800a936 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	6093      	str	r3, [r2, #8]
}
 8004d20:	bf00      	nop
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d11a      	bne.n	8004d8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	461a      	mov	r2, r3
 8004d66:	2304      	movs	r3, #4
 8004d68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	3361      	adds	r3, #97	; 0x61
 8004d78:	2206      	movs	r2, #6
 8004d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f005 fdd5 	bl	800a936 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004d8c:	e331      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d12e      	bne.n	8004e02 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	2320      	movs	r3, #32
 8004db4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	333d      	adds	r3, #61	; 0x3d
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	f040 8313 	bne.w	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	333d      	adds	r3, #61	; 0x3d
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	3360      	adds	r3, #96	; 0x60
 8004dec:	2202      	movs	r2, #2
 8004dee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f005 fd9b 	bl	800a936 <USB_HC_Halt>
}
 8004e00:	e2f7      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e18:	d112      	bne.n	8004e40 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	4611      	mov	r1, r2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f005 fd7c 	bl	800a936 <USB_HC_Halt>
}
 8004e3e:	e2d8      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d140      	bne.n	8004ed8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	335c      	adds	r3, #92	; 0x5c
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d111      	bne.n	8004ea2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	333d      	adds	r3, #61	; 0x3d
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3361      	adds	r3, #97	; 0x61
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f005 fd30 	bl	800a936 <USB_HC_Halt>
}
 8004ed6:	e28c      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d12c      	bne.n	8004f48 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3361      	adds	r3, #97	; 0x61
 8004efc:	2204      	movs	r2, #4
 8004efe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	212c      	movs	r1, #44	; 0x2c
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	333d      	adds	r3, #61	; 0x3d
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	212c      	movs	r1, #44	; 0x2c
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	335c      	adds	r3, #92	; 0x5c
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fd01 	bl	800a936 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	2340      	movs	r3, #64	; 0x40
 8004f44:	6093      	str	r3, [r2, #8]
}
 8004f46:	e254      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d11a      	bne.n	8004f94 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	212c      	movs	r1, #44	; 0x2c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3361      	adds	r3, #97	; 0x61
 8004f7e:	2205      	movs	r2, #5
 8004f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 fcd2 	bl	800a936 <USB_HC_Halt>
}
 8004f92:	e22e      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d140      	bne.n	800502c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	335c      	adds	r3, #92	; 0x5c
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	212c      	movs	r1, #44	; 0x2c
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3361      	adds	r3, #97	; 0x61
 8004fca:	2203      	movs	r2, #3
 8004fcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	212c      	movs	r1, #44	; 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	333d      	adds	r3, #61	; 0x3d
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d112      	bne.n	8005008 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	212c      	movs	r1, #44	; 0x2c
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	333c      	adds	r3, #60	; 0x3c
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	; 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	333d      	adds	r3, #61	; 0x3d
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f005 fc8f 	bl	800a936 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005024:	461a      	mov	r2, r3
 8005026:	2310      	movs	r3, #16
 8005028:	6093      	str	r3, [r2, #8]
}
 800502a:	e1e2      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d164      	bne.n	800510c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	212c      	movs	r1, #44	; 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	3361      	adds	r3, #97	; 0x61
 8005058:	2206      	movs	r2, #6
 800505a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f005 fc65 	bl	800a936 <USB_HC_Halt>
 800506c:	e044      	b.n	80050f8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	335c      	adds	r3, #92	; 0x5c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	202c      	movs	r0, #44	; 0x2c
 8005086:	fb00 f303 	mul.w	r3, r0, r3
 800508a:	440b      	add	r3, r1
 800508c:	335c      	adds	r3, #92	; 0x5c
 800508e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	212c      	movs	r1, #44	; 0x2c
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	335c      	adds	r3, #92	; 0x5c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d920      	bls.n	80050e6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	335c      	adds	r3, #92	; 0x5c
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3360      	adds	r3, #96	; 0x60
 80050c4:	2204      	movs	r2, #4
 80050c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	b2d9      	uxtb	r1, r3
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	202c      	movs	r0, #44	; 0x2c
 80050d2:	fb00 f303 	mul.w	r3, r0, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	3360      	adds	r3, #96	; 0x60
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f009 f84e 	bl	800e180 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050e4:	e008      	b.n	80050f8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	3360      	adds	r3, #96	; 0x60
 80050f4:	2202      	movs	r2, #2
 80050f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	461a      	mov	r2, r3
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	6093      	str	r3, [r2, #8]
}
 800510a:	e172      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d11b      	bne.n	800515c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3361      	adds	r3, #97	; 0x61
 8005132:	2208      	movs	r2, #8
 8005134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f005 fbf8 	bl	800a936 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	461a      	mov	r2, r3
 8005154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005158:	6093      	str	r3, [r2, #8]
}
 800515a:	e14a      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	f040 813f 	bne.w	80053f2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3361      	adds	r3, #97	; 0x61
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d17d      	bne.n	8005284 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3360      	adds	r3, #96	; 0x60
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	212c      	movs	r1, #44	; 0x2c
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	333f      	adds	r3, #63	; 0x3f
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d00a      	beq.n	80051c4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	212c      	movs	r1, #44	; 0x2c
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	333f      	adds	r3, #63	; 0x3f
 80051bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80051be:	2b03      	cmp	r3, #3
 80051c0:	f040 8100 	bne.w	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d113      	bne.n	80051f4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	212c      	movs	r1, #44	; 0x2c
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	3355      	adds	r3, #85	; 0x55
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f083 0301 	eor.w	r3, r3, #1
 80051e0:	b2d8      	uxtb	r0, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	212c      	movs	r1, #44	; 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	3355      	adds	r3, #85	; 0x55
 80051f0:	4602      	mov	r2, r0
 80051f2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 80e3 	bne.w	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	212c      	movs	r1, #44	; 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	334c      	adds	r3, #76	; 0x4c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80d8 	beq.w	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	334c      	adds	r3, #76	; 0x4c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	202c      	movs	r0, #44	; 0x2c
 800522a:	fb00 f202 	mul.w	r2, r0, r2
 800522e:	440a      	add	r2, r1
 8005230:	3240      	adds	r2, #64	; 0x40
 8005232:	8812      	ldrh	r2, [r2, #0]
 8005234:	4413      	add	r3, r2
 8005236:	3b01      	subs	r3, #1
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	202c      	movs	r0, #44	; 0x2c
 800523e:	fb00 f202 	mul.w	r2, r0, r2
 8005242:	440a      	add	r2, r1
 8005244:	3240      	adds	r2, #64	; 0x40
 8005246:	8812      	ldrh	r2, [r2, #0]
 8005248:	fbb3 f3f2 	udiv	r3, r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80b5 	beq.w	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	212c      	movs	r1, #44	; 0x2c
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	4413      	add	r3, r2
 8005266:	3355      	adds	r3, #85	; 0x55
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f083 0301 	eor.w	r3, r3, #1
 800526e:	b2d8      	uxtb	r0, r3
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3355      	adds	r3, #85	; 0x55
 800527e:	4602      	mov	r2, r0
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e09f      	b.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3361      	adds	r3, #97	; 0x61
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d109      	bne.n	80052ac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	212c      	movs	r1, #44	; 0x2c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	3360      	adds	r3, #96	; 0x60
 80052a6:	2202      	movs	r2, #2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e08b      	b.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	212c      	movs	r1, #44	; 0x2c
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	3361      	adds	r3, #97	; 0x61
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d109      	bne.n	80052d4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	3360      	adds	r3, #96	; 0x60
 80052ce:	2202      	movs	r2, #2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e077      	b.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	212c      	movs	r1, #44	; 0x2c
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3361      	adds	r3, #97	; 0x61
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d109      	bne.n	80052fc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3360      	adds	r3, #96	; 0x60
 80052f6:	2205      	movs	r2, #5
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e063      	b.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3361      	adds	r3, #97	; 0x61
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d009      	beq.n	8005324 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	212c      	movs	r1, #44	; 0x2c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	3361      	adds	r3, #97	; 0x61
 800531e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005320:	2b08      	cmp	r3, #8
 8005322:	d14f      	bne.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	212c      	movs	r1, #44	; 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	335c      	adds	r3, #92	; 0x5c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	202c      	movs	r0, #44	; 0x2c
 800533c:	fb00 f303 	mul.w	r3, r0, r3
 8005340:	440b      	add	r3, r1
 8005342:	335c      	adds	r3, #92	; 0x5c
 8005344:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	335c      	adds	r3, #92	; 0x5c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d912      	bls.n	8005380 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	335c      	adds	r3, #92	; 0x5c
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3360      	adds	r3, #96	; 0x60
 800537a:	2204      	movs	r2, #4
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e021      	b.n	80053c4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3360      	adds	r3, #96	; 0x60
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053a8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	461a      	mov	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	461a      	mov	r2, r3
 80053d2:	2302      	movs	r3, #2
 80053d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	b2d9      	uxtb	r1, r3
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	202c      	movs	r0, #44	; 0x2c
 80053e0:	fb00 f303 	mul.w	r3, r0, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	3360      	adds	r3, #96	; 0x60
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f008 fec7 	bl	800e180 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80053f2:	bf00      	nop
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08a      	sub	sp, #40	; 0x28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	0c5b      	lsrs	r3, r3, #17
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800542e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d004      	beq.n	8005440 <HCD_RXQLVL_IRQHandler+0x46>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b05      	cmp	r3, #5
 800543a:	f000 80a9 	beq.w	8005590 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800543e:	e0aa      	b.n	8005596 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a6 	beq.w	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	212c      	movs	r1, #44	; 0x2c
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	4413      	add	r3, r2
 8005454:	3344      	adds	r3, #68	; 0x44
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 809b 	beq.w	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	212c      	movs	r1, #44	; 0x2c
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	4413      	add	r3, r2
 800546a:	3350      	adds	r3, #80	; 0x50
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	441a      	add	r2, r3
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	202c      	movs	r0, #44	; 0x2c
 8005478:	fb00 f303 	mul.w	r3, r0, r3
 800547c:	440b      	add	r3, r1
 800547e:	334c      	adds	r3, #76	; 0x4c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d87a      	bhi.n	800557c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3344      	adds	r3, #68	; 0x44
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	b292      	uxth	r2, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f004 fda0 	bl	8009fe4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	212c      	movs	r1, #44	; 0x2c
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	3344      	adds	r3, #68	; 0x44
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	441a      	add	r2, r3
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	202c      	movs	r0, #44	; 0x2c
 80054be:	fb00 f303 	mul.w	r3, r0, r3
 80054c2:	440b      	add	r3, r1
 80054c4:	3344      	adds	r3, #68	; 0x44
 80054c6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	3350      	adds	r3, #80	; 0x50
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	441a      	add	r2, r3
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	202c      	movs	r0, #44	; 0x2c
 80054e2:	fb00 f303 	mul.w	r3, r0, r3
 80054e6:	440b      	add	r3, r1
 80054e8:	3350      	adds	r3, #80	; 0x50
 80054ea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	0cdb      	lsrs	r3, r3, #19
 80054fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005500:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	212c      	movs	r1, #44	; 0x2c
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	4413      	add	r3, r2
 800550e:	3340      	adds	r3, #64	; 0x40
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4293      	cmp	r3, r2
 8005518:	d13c      	bne.n	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d039      	beq.n	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005536:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800553e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	212c      	movs	r1, #44	; 0x2c
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	3354      	adds	r3, #84	; 0x54
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f083 0301 	eor.w	r3, r3, #1
 8005566:	b2d8      	uxtb	r0, r3
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	212c      	movs	r1, #44	; 0x2c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	3354      	adds	r3, #84	; 0x54
 8005576:	4602      	mov	r2, r0
 8005578:	701a      	strb	r2, [r3, #0]
      break;
 800557a:	e00b      	b.n	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3360      	adds	r3, #96	; 0x60
 800558a:	2204      	movs	r2, #4
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	e001      	b.n	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005594:	bf00      	nop
  }
}
 8005596:	bf00      	nop
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d10b      	bne.n	80055ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f008 fdb1 	bl	800e148 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 0302 	orr.w	r3, r3, #2
 80055ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d132      	bne.n	800565e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d126      	bne.n	8005658 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d113      	bne.n	800563a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800561c:	d106      	bne.n	800562c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f004 fe4b 	bl	800a2c0 <USB_InitFSLSPClkSel>
 800562a:	e011      	b.n	8005650 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f004 fe44 	bl	800a2c0 <USB_InitFSLSPClkSel>
 8005638:	e00a      	b.n	8005650 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d106      	bne.n	8005650 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005648:	461a      	mov	r2, r3
 800564a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800564e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f008 fda3 	bl	800e19c <HAL_HCD_PortEnabled_Callback>
 8005656:	e002      	b.n	800565e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f008 fdad 	bl	800e1b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b20      	cmp	r3, #32
 8005666:	d103      	bne.n	8005670 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f043 0320 	orr.w	r3, r3, #32
 800566e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e12b      	b.n	80058ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fd f9a0 	bl	80029f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2224      	movs	r2, #36	; 0x24
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056e8:	f001 fc4c 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4a81      	ldr	r2, [pc, #516]	; (80058f8 <HAL_I2C_Init+0x274>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d807      	bhi.n	8005708 <HAL_I2C_Init+0x84>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a80      	ldr	r2, [pc, #512]	; (80058fc <HAL_I2C_Init+0x278>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bf94      	ite	ls
 8005700:	2301      	movls	r3, #1
 8005702:	2300      	movhi	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e006      	b.n	8005716 <HAL_I2C_Init+0x92>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a7d      	ldr	r2, [pc, #500]	; (8005900 <HAL_I2C_Init+0x27c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	bf94      	ite	ls
 8005710:	2301      	movls	r3, #1
 8005712:	2300      	movhi	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0e7      	b.n	80058ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a78      	ldr	r2, [pc, #480]	; (8005904 <HAL_I2C_Init+0x280>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	0c9b      	lsrs	r3, r3, #18
 8005728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_I2C_Init+0x274>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d802      	bhi.n	8005758 <HAL_I2C_Init+0xd4>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3301      	adds	r3, #1
 8005756:	e009      	b.n	800576c <HAL_I2C_Init+0xe8>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	4a69      	ldr	r2, [pc, #420]	; (8005908 <HAL_I2C_Init+0x284>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	099b      	lsrs	r3, r3, #6
 800576a:	3301      	adds	r3, #1
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430b      	orrs	r3, r1
 8005772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800577e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	495c      	ldr	r1, [pc, #368]	; (80058f8 <HAL_I2C_Init+0x274>)
 8005788:	428b      	cmp	r3, r1
 800578a:	d819      	bhi.n	80057c0 <HAL_I2C_Init+0x13c>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1e59      	subs	r1, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fbb1 f3f3 	udiv	r3, r1, r3
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057a0:	400b      	ands	r3, r1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_I2C_Init+0x138>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1e59      	subs	r1, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ba:	e051      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 80057bc:	2304      	movs	r3, #4
 80057be:	e04f      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_I2C_Init+0x168>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1e58      	subs	r0, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e012      	b.n	8005812 <HAL_I2C_Init+0x18e>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1e58      	subs	r0, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	0099      	lsls	r1, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005802:	3301      	adds	r3, #1
 8005804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_Init+0x196>
 8005816:	2301      	movs	r3, #1
 8005818:	e022      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10e      	bne.n	8005840 <HAL_I2C_Init+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1e58      	subs	r0, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	440b      	add	r3, r1
 8005830:	fbb0 f3f3 	udiv	r3, r0, r3
 8005834:	3301      	adds	r3, #1
 8005836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583e:	e00f      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1e58      	subs	r0, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	0099      	lsls	r1, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	fbb0 f3f3 	udiv	r3, r0, r3
 8005856:	3301      	adds	r3, #1
 8005858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	6809      	ldr	r1, [r1, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800588e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6911      	ldr	r1, [r2, #16]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	4311      	orrs	r1, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	000186a0 	.word	0x000186a0
 80058fc:	001e847f 	.word	0x001e847f
 8005900:	003d08ff 	.word	0x003d08ff
 8005904:	431bde83 	.word	0x431bde83
 8005908:	10624dd3 	.word	0x10624dd3

0800590c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	461a      	mov	r2, r3
 8005918:	460b      	mov	r3, r1
 800591a:	817b      	strh	r3, [r7, #10]
 800591c:	4613      	mov	r3, r2
 800591e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005920:	f7fd fc06 	bl	8003130 <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b20      	cmp	r3, #32
 8005930:	f040 80e0 	bne.w	8005af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2319      	movs	r3, #25
 800593a:	2201      	movs	r2, #1
 800593c:	4970      	ldr	r1, [pc, #448]	; (8005b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fc58 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
 800594c:	e0d3      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_I2C_Master_Transmit+0x50>
 8005958:	2302      	movs	r3, #2
 800595a:	e0cc      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d007      	beq.n	8005982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2221      	movs	r2, #33	; 0x21
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2210      	movs	r2, #16
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	893a      	ldrh	r2, [r7, #8]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a50      	ldr	r2, [pc, #320]	; (8005b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059c4:	8979      	ldrh	r1, [r7, #10]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fac2 	bl	8005f54 <I2C_MasterRequestWrite>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e08d      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80059f0:	e066      	b.n	8005ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	6a39      	ldr	r1, [r7, #32]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fcd2 	bl	80063a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d107      	bne.n	8005a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e06b      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d11b      	bne.n	8005a94 <HAL_I2C_Master_Transmit+0x188>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d017      	beq.n	8005a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	6a39      	ldr	r1, [r7, #32]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fcc2 	bl	8006422 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d107      	bne.n	8005abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e01a      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d194      	bne.n	80059f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	e000      	b.n	8005af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	00100002 	.word	0x00100002
 8005b04:	ffff0000 	.word	0xffff0000

08005b08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	; 0x30
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	461a      	mov	r2, r3
 8005b14:	460b      	mov	r3, r1
 8005b16:	817b      	strh	r3, [r7, #10]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1c:	f7fd fb08 	bl	8003130 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	f040 820b 	bne.w	8005f46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2319      	movs	r3, #25
 8005b36:	2201      	movs	r2, #1
 8005b38:	497c      	ldr	r1, [pc, #496]	; (8005d2c <HAL_I2C_Master_Receive+0x224>)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fb5a 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
 8005b48:	e1fe      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_I2C_Master_Receive+0x50>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e1f7      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d007      	beq.n	8005b7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2222      	movs	r2, #34	; 0x22
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2210      	movs	r2, #16
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	893a      	ldrh	r2, [r7, #8]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <HAL_I2C_Master_Receive+0x228>)
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bc0:	8979      	ldrh	r1, [r7, #10]
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fa46 	bl	8006058 <I2C_MasterRequestRead>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e1b8      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d113      	bne.n	8005c06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bde:	2300      	movs	r3, #0
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e18c      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d11b      	bne.n	8005c46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e16c      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d11b      	bne.n	8005c86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	e14c      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cac:	e138      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	f200 80f1 	bhi.w	8005e9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d123      	bne.n	8005d08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fbed 	bl	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e139      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d06:	e10b      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d14e      	bne.n	8005dae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2200      	movs	r2, #0
 8005d18:	4906      	ldr	r1, [pc, #24]	; (8005d34 <HAL_I2C_Master_Receive+0x22c>)
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fa6a 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e10e      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
 8005d2a:	bf00      	nop
 8005d2c:	00100002 	.word	0x00100002
 8005d30:	ffff0000 	.word	0xffff0000
 8005d34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dac:	e0b8      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2200      	movs	r2, #0
 8005db6:	4966      	ldr	r1, [pc, #408]	; (8005f50 <HAL_I2C_Master_Receive+0x448>)
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fa1b 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0bf      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	2200      	movs	r2, #0
 8005e12:	494f      	ldr	r1, [pc, #316]	; (8005f50 <HAL_I2C_Master_Receive+0x448>)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9ed 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e091      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e98:	e042      	b.n	8005f20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fb00 	bl	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e04c      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d118      	bne.n	8005f20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f47f aec2 	bne.w	8005cae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	00010004 	.word	0x00010004

08005f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	460b      	mov	r3, r1
 8005f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d006      	beq.n	8005f7e <I2C_MasterRequestWrite+0x2a>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d003      	beq.n	8005f7e <I2C_MasterRequestWrite+0x2a>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f7c:	d108      	bne.n	8005f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e00b      	b.n	8005fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	2b12      	cmp	r3, #18
 8005f96:	d107      	bne.n	8005fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f91d 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fce:	d103      	bne.n	8005fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e035      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe4:	d108      	bne.n	8005ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]
 8005ff6:	e01b      	b.n	8006030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ff8:	897b      	ldrh	r3, [r7, #10]
 8005ffa:	11db      	asrs	r3, r3, #7
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f063 030f 	orn	r3, r3, #15
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <I2C_MasterRequestWrite+0xfc>)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f943 	bl	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e010      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4907      	ldr	r1, [pc, #28]	; (8006054 <I2C_MasterRequestWrite+0x100>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f933 	bl	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	00010008 	.word	0x00010008
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	460b      	mov	r3, r1
 8006066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800607c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d006      	beq.n	8006092 <I2C_MasterRequestRead+0x3a>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d003      	beq.n	8006092 <I2C_MasterRequestRead+0x3a>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006090:	d108      	bne.n	80060a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e00b      	b.n	80060bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b11      	cmp	r3, #17
 80060aa:	d107      	bne.n	80060bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f893 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00d      	beq.n	80060f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e2:	d103      	bne.n	80060ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e079      	b.n	80061e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f8:	d108      	bne.n	800610c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	611a      	str	r2, [r3, #16]
 800610a:	e05f      	b.n	80061cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800610c:	897b      	ldrh	r3, [r7, #10]
 800610e:	11db      	asrs	r3, r3, #7
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0306 	and.w	r3, r3, #6
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f063 030f 	orn	r3, r3, #15
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4930      	ldr	r1, [pc, #192]	; (80061ec <I2C_MasterRequestRead+0x194>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f8b9 	bl	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e054      	b.n	80061e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800613a:	897b      	ldrh	r3, [r7, #10]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4929      	ldr	r1, [pc, #164]	; (80061f0 <I2C_MasterRequestRead+0x198>)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f8a9 	bl	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e044      	b.n	80061e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f831 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d103      	bne.n	80061b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e017      	b.n	80061e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80061b4:	897b      	ldrh	r3, [r7, #10]
 80061b6:	11db      	asrs	r3, r3, #7
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0306 	and.w	r3, r3, #6
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f063 030e 	orn	r3, r3, #14
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4907      	ldr	r1, [pc, #28]	; (80061f0 <I2C_MasterRequestRead+0x198>)
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f865 	bl	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	00010008 	.word	0x00010008
 80061f0:	00010002 	.word	0x00010002

080061f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006204:	e025      	b.n	8006252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620c:	d021      	beq.n	8006252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7fc ff8f 	bl	8003130 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d116      	bne.n	8006252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e023      	b.n	800629a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d10d      	bne.n	8006278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	43da      	mvns	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	e00c      	b.n	8006292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	43da      	mvns	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	429a      	cmp	r2, r3
 8006296:	d0b6      	beq.n	8006206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062b0:	e051      	b.n	8006356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c0:	d123      	bne.n	800630a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f043 0204 	orr.w	r2, r3, #4
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e046      	b.n	8006398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006310:	d021      	beq.n	8006356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006312:	f7fc ff0d 	bl	8003130 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d116      	bne.n	8006356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e020      	b.n	8006398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10c      	bne.n	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	43da      	mvns	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e00b      	b.n	8006392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	43da      	mvns	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d18d      	bne.n	80062b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ac:	e02d      	b.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f8ce 	bl	8006550 <I2C_IsAcknowledgeFailed>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e02d      	b.n	800641a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c4:	d021      	beq.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fc feb3 	bl	8003130 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d116      	bne.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e007      	b.n	800641a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d1ca      	bne.n	80063ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800642e:	e02d      	b.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f88d 	bl	8006550 <I2C_IsAcknowledgeFailed>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e02d      	b.n	800649c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006446:	d021      	beq.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006448:	f7fc fe72 	bl	8003130 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d302      	bcc.n	800645e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d116      	bne.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e007      	b.n	800649c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d1ca      	bne.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b0:	e042      	b.n	8006538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d119      	bne.n	80064f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0210 	mvn.w	r2, #16
 80064c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e029      	b.n	8006548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fc fe1c 	bl	8003130 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d116      	bne.n	8006538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e007      	b.n	8006548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	d1b5      	bne.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d11b      	bne.n	80065a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0204 	orr.w	r2, r3, #4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d129      	bne.n	8006618 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	; 0x24
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0210 	bic.w	r2, r2, #16
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	d12a      	bne.n	8006696 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2224      	movs	r2, #36	; 0x24
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	f023 030f 	bic.w	r3, r3, #15
 8006666:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	b29a      	uxth	r2, r3
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	4313      	orrs	r3, r2
 8006670:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	89fa      	ldrh	r2, [r7, #14]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e267      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d075      	beq.n	80067ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066c2:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d00c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ce:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d112      	bne.n	8006700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066da:	4b82      	ldr	r3, [pc, #520]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e6:	d10b      	bne.n	8006700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e8:	4b7e      	ldr	r3, [pc, #504]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d05b      	beq.n	80067ac <HAL_RCC_OscConfig+0x108>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d157      	bne.n	80067ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e242      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006708:	d106      	bne.n	8006718 <HAL_RCC_OscConfig+0x74>
 800670a:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a75      	ldr	r2, [pc, #468]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e01d      	b.n	8006754 <HAL_RCC_OscConfig+0xb0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x98>
 8006722:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6f      	ldr	r2, [pc, #444]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4b6d      	ldr	r3, [pc, #436]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6c      	ldr	r2, [pc, #432]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e00b      	b.n	8006754 <HAL_RCC_OscConfig+0xb0>
 800673c:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a68      	ldr	r2, [pc, #416]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	4b66      	ldr	r3, [pc, #408]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a65      	ldr	r2, [pc, #404]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800674e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d013      	beq.n	8006784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675c:	f7fc fce8 	bl	8003130 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006764:	f7fc fce4 	bl	8003130 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b64      	cmp	r3, #100	; 0x64
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e207      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0xc0>
 8006782:	e014      	b.n	80067ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7fc fcd4 	bl	8003130 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800678c:	f7fc fcd0 	bl	8003130 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	; 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e1f3      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	4b51      	ldr	r3, [pc, #324]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f0      	bne.n	800678c <HAL_RCC_OscConfig+0xe8>
 80067aa:	e000      	b.n	80067ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d063      	beq.n	8006882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ba:	4b4a      	ldr	r3, [pc, #296]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d11c      	bne.n	800680c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067d2:	4b44      	ldr	r3, [pc, #272]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d116      	bne.n	800680c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067de:	4b41      	ldr	r3, [pc, #260]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_RCC_OscConfig+0x152>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d001      	beq.n	80067f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e1c7      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f6:	4b3b      	ldr	r3, [pc, #236]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4937      	ldr	r1, [pc, #220]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680a:	e03a      	b.n	8006882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d020      	beq.n	8006856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006814:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCC_OscConfig+0x244>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fc fc89 	bl	8003130 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006822:	f7fc fc85 	bl	8003130 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e1a8      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006840:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	4925      	ldr	r1, [pc, #148]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]
 8006854:	e015      	b.n	8006882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_RCC_OscConfig+0x244>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fc fc68 	bl	8003130 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006864:	f7fc fc64 	bl	8003130 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e187      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006876:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d036      	beq.n	80068fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_RCC_OscConfig+0x248>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689c:	f7fc fc48 	bl	8003130 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a4:	f7fc fc44 	bl	8003130 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e167      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x200>
 80068c2:	e01b      	b.n	80068fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_RCC_OscConfig+0x248>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ca:	f7fc fc31 	bl	8003130 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d0:	e00e      	b.n	80068f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d2:	f7fc fc2d 	bl	8003130 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d907      	bls.n	80068f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e150      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
 80068e4:	40023800 	.word	0x40023800
 80068e8:	42470000 	.word	0x42470000
 80068ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f0:	4b88      	ldr	r3, [pc, #544]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1ea      	bne.n	80068d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8097 	beq.w	8006a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
 800691e:	4b7d      	ldr	r3, [pc, #500]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4a7c      	ldr	r2, [pc, #496]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006928:	6413      	str	r3, [r2, #64]	; 0x40
 800692a:	4b7a      	ldr	r3, [pc, #488]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693a:	4b77      	ldr	r3, [pc, #476]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d118      	bne.n	8006978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006946:	4b74      	ldr	r3, [pc, #464]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a73      	ldr	r2, [pc, #460]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006952:	f7fc fbed 	bl	8003130 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695a:	f7fc fbe9 	bl	8003130 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e10c      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696c:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <HAL_RCC_OscConfig+0x2ea>
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a63      	ldr	r2, [pc, #396]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
 800698c:	e01c      	b.n	80069c8 <HAL_RCC_OscConfig+0x324>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b05      	cmp	r3, #5
 8006994:	d10c      	bne.n	80069b0 <HAL_RCC_OscConfig+0x30c>
 8006996:	4b5f      	ldr	r3, [pc, #380]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a5e      	ldr	r2, [pc, #376]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 800699c:	f043 0304 	orr.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	4b5c      	ldr	r3, [pc, #368]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a5b      	ldr	r2, [pc, #364]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
 80069ae:	e00b      	b.n	80069c8 <HAL_RCC_OscConfig+0x324>
 80069b0:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a57      	ldr	r2, [pc, #348]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	4b55      	ldr	r3, [pc, #340]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	4a54      	ldr	r2, [pc, #336]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069c2:	f023 0304 	bic.w	r3, r3, #4
 80069c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d015      	beq.n	80069fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fc fbae 	bl	8003130 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d8:	f7fc fbaa 	bl	8003130 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0cb      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ee:	4b49      	ldr	r3, [pc, #292]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0ee      	beq.n	80069d8 <HAL_RCC_OscConfig+0x334>
 80069fa:	e014      	b.n	8006a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fc:	f7fc fb98 	bl	8003130 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a02:	e00a      	b.n	8006a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a04:	f7fc fb94 	bl	8003130 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e0b5      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1ee      	bne.n	8006a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2c:	4b39      	ldr	r3, [pc, #228]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	4a38      	ldr	r2, [pc, #224]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a1 	beq.w	8006b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a42:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d05c      	beq.n	8006b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d141      	bne.n	8006ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fc fb68 	bl	8003130 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a64:	f7fc fb64 	bl	8003130 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e087      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a76:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f0      	bne.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	491b      	ldr	r1, [pc, #108]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aac:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab2:	f7fc fb3d 	bl	8003130 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fc fb39 	bl	8003130 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e05c      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x416>
 8006ad8:	e054      	b.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fc fb26 	bl	8003130 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae8:	f7fc fb22 	bl	8003130 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e045      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x444>
 8006b06:	e03d      	b.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e038      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <HAL_RCC_OscConfig+0x4ec>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d028      	beq.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d121      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d11a      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b50:	4013      	ands	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d111      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40023800 	.word	0x40023800

08006b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0cc      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b68      	ldr	r3, [pc, #416]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d90c      	bls.n	8006bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b63      	ldr	r3, [pc, #396]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0b8      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d020      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006be8:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a58      	ldr	r2, [pc, #352]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c00:	4b53      	ldr	r3, [pc, #332]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4a52      	ldr	r2, [pc, #328]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c0c:	4b50      	ldr	r3, [pc, #320]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	494d      	ldr	r1, [pc, #308]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d044      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d119      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d003      	beq.n	8006c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d107      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c52:	4b3f      	ldr	r3, [pc, #252]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e06f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e067      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 0203 	bic.w	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	4934      	ldr	r1, [pc, #208]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c84:	f7fc fa54 	bl	8003130 <HAL_GetTick>
 8006c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c8a:	e00a      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c8c:	f7fc fa50 	bl	8003130 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e04f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 020c 	and.w	r2, r3, #12
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d1eb      	bne.n	8006c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d20c      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e032      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4916      	ldr	r1, [pc, #88]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d06:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	490e      	ldr	r1, [pc, #56]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d1a:	f000 f821 	bl	8006d60 <HAL_RCC_GetSysClockFreq>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	490a      	ldr	r1, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x1c0>)
 8006d2c:	5ccb      	ldrb	r3, [r1, r3]
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fc f9b4 	bl	80030a8 <HAL_InitTick>

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023c00 	.word	0x40023c00
 8006d50:	40023800 	.word	0x40023800
 8006d54:	0800fc48 	.word	0x0800fc48
 8006d58:	20000004 	.word	0x20000004
 8006d5c:	20000008 	.word	0x20000008

08006d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d64:	b094      	sub	sp, #80	; 0x50
 8006d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	2300      	movs	r3, #0
 8006d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d78:	4b79      	ldr	r3, [pc, #484]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 030c 	and.w	r3, r3, #12
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d00d      	beq.n	8006da0 <HAL_RCC_GetSysClockFreq+0x40>
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	f200 80e1 	bhi.w	8006f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_RCC_GetSysClockFreq+0x34>
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d003      	beq.n	8006d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d92:	e0db      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d94:	4b73      	ldr	r3, [pc, #460]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d98:	e0db      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d9a:	4b73      	ldr	r3, [pc, #460]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d9e:	e0d8      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da0:	4b6f      	ldr	r3, [pc, #444]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006daa:	4b6d      	ldr	r3, [pc, #436]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d063      	beq.n	8006e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db6:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	099b      	lsrs	r3, r3, #6
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dca:	2300      	movs	r3, #0
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	f04f 0000 	mov.w	r0, #0
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	0159      	lsls	r1, r3, #5
 8006de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006de4:	0150      	lsls	r0, r2, #5
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4621      	mov	r1, r4
 8006dec:	1a51      	subs	r1, r2, r1
 8006dee:	6139      	str	r1, [r7, #16]
 8006df0:	4629      	mov	r1, r5
 8006df2:	eb63 0301 	sbc.w	r3, r3, r1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e04:	4659      	mov	r1, fp
 8006e06:	018b      	lsls	r3, r1, #6
 8006e08:	4651      	mov	r1, sl
 8006e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e0e:	4651      	mov	r1, sl
 8006e10:	018a      	lsls	r2, r1, #6
 8006e12:	4651      	mov	r1, sl
 8006e14:	ebb2 0801 	subs.w	r8, r2, r1
 8006e18:	4659      	mov	r1, fp
 8006e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e32:	4690      	mov	r8, r2
 8006e34:	4699      	mov	r9, r3
 8006e36:	4623      	mov	r3, r4
 8006e38:	eb18 0303 	adds.w	r3, r8, r3
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	462b      	mov	r3, r5
 8006e40:	eb49 0303 	adc.w	r3, r9, r3
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e52:	4629      	mov	r1, r5
 8006e54:	024b      	lsls	r3, r1, #9
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	024a      	lsls	r2, r1, #9
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	2200      	movs	r2, #0
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e70:	f7f9 fa0e 	bl	8000290 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e7c:	e058      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7e:	4b38      	ldr	r3, [pc, #224]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	099b      	lsrs	r3, r3, #6
 8006e84:	2200      	movs	r2, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	4611      	mov	r1, r2
 8006e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e8e:	623b      	str	r3, [r7, #32]
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	f04f 0000 	mov.w	r0, #0
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	0159      	lsls	r1, r3, #5
 8006ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eaa:	0150      	lsls	r0, r2, #5
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	00eb      	lsls	r3, r5, #3
 8006ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ee6:	00e2      	lsls	r2, r4, #3
 8006ee8:	4614      	mov	r4, r2
 8006eea:	461d      	mov	r5, r3
 8006eec:	4643      	mov	r3, r8
 8006eee:	18e3      	adds	r3, r4, r3
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	eb45 0303 	adc.w	r3, r5, r3
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f06:	4629      	mov	r1, r5
 8006f08:	028b      	lsls	r3, r1, #10
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f10:	4621      	mov	r1, r4
 8006f12:	028a      	lsls	r2, r1, #10
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	61fa      	str	r2, [r7, #28]
 8006f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f24:	f7f9 f9b4 	bl	8000290 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f4a:	e002      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3750      	adds	r7, #80	; 0x50
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800
 8006f64:	00f42400 	.word	0x00f42400
 8006f68:	007a1200 	.word	0x007a1200

08006f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f72:	681b      	ldr	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000004 	.word	0x20000004

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f88:	f7ff fff0 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	0a9b      	lsrs	r3, r3, #10
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4903      	ldr	r1, [pc, #12]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	0800fc58 	.word	0x0800fc58

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fb0:	f7ff ffdc 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	0b5b      	lsrs	r3, r3, #13
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4903      	ldr	r1, [pc, #12]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc2:	5ccb      	ldrb	r3, [r1, r3]
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	0800fc58 	.word	0x0800fc58

08006fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e07b      	b.n	80070de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d108      	bne.n	8007000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff6:	d009      	beq.n	800700c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61da      	str	r2, [r3, #28]
 8006ffe:	e005      	b.n	800700c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fb fd82 	bl	8002b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	ea42 0103 	orr.w	r1, r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	f003 0104 	and.w	r1, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	f003 0210 	and.w	r2, r3, #16
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b088      	sub	sp, #32
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_SPI_Transmit+0x22>
 8007104:	2302      	movs	r3, #2
 8007106:	e126      	b.n	8007356 <HAL_SPI_Transmit+0x270>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007110:	f7fc f80e 	bl	8003130 <HAL_GetTick>
 8007114:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b01      	cmp	r3, #1
 8007124:	d002      	beq.n	800712c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007126:	2302      	movs	r3, #2
 8007128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800712a:	e10b      	b.n	8007344 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_SPI_Transmit+0x52>
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800713c:	e102      	b.n	8007344 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2203      	movs	r2, #3
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007184:	d10f      	bne.n	80071a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d007      	beq.n	80071c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071cc:	d14b      	bne.n	8007266 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_SPI_Transmit+0xf6>
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d13e      	bne.n	800725a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	881a      	ldrh	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007200:	e02b      	b.n	800725a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b02      	cmp	r3, #2
 800720e:	d112      	bne.n	8007236 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	1c9a      	adds	r2, r3, #2
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	86da      	strh	r2, [r3, #54]	; 0x36
 8007234:	e011      	b.n	800725a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007236:	f7fb ff7b 	bl	8003130 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d803      	bhi.n	800724e <HAL_SPI_Transmit+0x168>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724c:	d102      	bne.n	8007254 <HAL_SPI_Transmit+0x16e>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007258:	e074      	b.n	8007344 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725e:	b29b      	uxth	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1ce      	bne.n	8007202 <HAL_SPI_Transmit+0x11c>
 8007264:	e04c      	b.n	8007300 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_SPI_Transmit+0x18e>
 800726e:	8afb      	ldrh	r3, [r7, #22]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d140      	bne.n	80072f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800729a:	e02c      	b.n	80072f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d113      	bne.n	80072d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	330c      	adds	r3, #12
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80072d0:	e011      	b.n	80072f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d2:	f7fb ff2d 	bl	8003130 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d803      	bhi.n	80072ea <HAL_SPI_Transmit+0x204>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e8:	d102      	bne.n	80072f0 <HAL_SPI_Transmit+0x20a>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072f4:	e026      	b.n	8007344 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1cd      	bne.n	800729c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fbcb 	bl	8007aa0 <SPI_EndRxTxTransaction>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e000      	b.n	8007344 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007354:	7ffb      	ldrb	r3, [r7, #31]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b088      	sub	sp, #32
 8007362:	af02      	add	r7, sp, #8
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737a:	d112      	bne.n	80073a2 <HAL_SPI_Receive+0x44>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10e      	bne.n	80073a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2204      	movs	r2, #4
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f8f1 	bl	8007580 <HAL_SPI_TransmitReceive>
 800739e:	4603      	mov	r3, r0
 80073a0:	e0ea      	b.n	8007578 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_SPI_Receive+0x52>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e0e3      	b.n	8007578 <HAL_SPI_Receive+0x21a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073b8:	f7fb feba 	bl	8003130 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d002      	beq.n	80073d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80073ca:	2302      	movs	r3, #2
 80073cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073ce:	e0ca      	b.n	8007566 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_SPI_Receive+0x7e>
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073e0:	e0c1      	b.n	8007566 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2204      	movs	r2, #4
 80073e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	88fa      	ldrh	r2, [r7, #6]
 80073fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007428:	d10f      	bne.n	800744a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007448:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b40      	cmp	r3, #64	; 0x40
 8007456:	d007      	beq.n	8007468 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007466:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d162      	bne.n	8007536 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007470:	e02e      	b.n	80074d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b01      	cmp	r3, #1
 800747e:	d115      	bne.n	80074ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f103 020c 	add.w	r2, r3, #12
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074aa:	e011      	b.n	80074d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ac:	f7fb fe40 	bl	8003130 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d803      	bhi.n	80074c4 <HAL_SPI_Receive+0x166>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c2:	d102      	bne.n	80074ca <HAL_SPI_Receive+0x16c>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074ce:	e04a      	b.n	8007566 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1cb      	bne.n	8007472 <HAL_SPI_Receive+0x114>
 80074da:	e031      	b.n	8007540 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d113      	bne.n	8007512 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	b292      	uxth	r2, r2
 80074f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007510:	e011      	b.n	8007536 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007512:	f7fb fe0d 	bl	8003130 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d803      	bhi.n	800752a <HAL_SPI_Receive+0x1cc>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007528:	d102      	bne.n	8007530 <HAL_SPI_Receive+0x1d2>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007534:	e017      	b.n	8007566 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1cd      	bne.n	80074dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fa45 	bl	80079d4 <SPI_EndRxTransaction>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
 8007562:	e000      	b.n	8007566 <HAL_SPI_Receive+0x208>
  }

error :
 8007564:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	; 0x30
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800758e:	2301      	movs	r3, #1
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_SPI_TransmitReceive+0x26>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e18a      	b.n	80078bc <HAL_SPI_TransmitReceive+0x33c>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ae:	f7fb fdbf 	bl	8003130 <HAL_GetTick>
 80075b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075c4:	887b      	ldrh	r3, [r7, #2]
 80075c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d00f      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x70>
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d6:	d107      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x68>
 80075e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d003      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075ee:	e15b      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x82>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x82>
 80075fc:	887b      	ldrh	r3, [r7, #2]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007608:	e14e      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b04      	cmp	r3, #4
 8007614:	d003      	beq.n	800761e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2205      	movs	r2, #5
 800761a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	887a      	ldrh	r2, [r7, #2]
 800762e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	887a      	ldrh	r2, [r7, #2]
 8007634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	887a      	ldrh	r2, [r7, #2]
 8007640:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	887a      	ldrh	r2, [r7, #2]
 8007646:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d007      	beq.n	8007672 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800767a:	d178      	bne.n	800776e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_SPI_TransmitReceive+0x10a>
 8007684:	8b7b      	ldrh	r3, [r7, #26]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d166      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	881a      	ldrh	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	1c9a      	adds	r2, r3, #2
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ae:	e053      	b.n	8007758 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d11b      	bne.n	80076f6 <HAL_SPI_TransmitReceive+0x176>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d016      	beq.n	80076f6 <HAL_SPI_TransmitReceive+0x176>
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d113      	bne.n	80076f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	881a      	ldrh	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	1c9a      	adds	r2, r3, #2
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b01      	cmp	r3, #1
 8007702:	d119      	bne.n	8007738 <HAL_SPI_TransmitReceive+0x1b8>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d014      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	b292      	uxth	r2, r2
 800771a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007734:	2301      	movs	r3, #1
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007738:	f7fb fcfa 	bl	8003130 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007744:	429a      	cmp	r2, r3
 8007746:	d807      	bhi.n	8007758 <HAL_SPI_TransmitReceive+0x1d8>
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774e:	d003      	beq.n	8007758 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007756:	e0a7      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1a6      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x130>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1a1      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x130>
 800776c:	e07c      	b.n	8007868 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_SPI_TransmitReceive+0x1fc>
 8007776:	8b7b      	ldrh	r3, [r7, #26]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d16b      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	7812      	ldrb	r2, [r2, #0]
 8007788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077a2:	e057      	b.n	8007854 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d11c      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x26c>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d017      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x26c>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d114      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	330c      	adds	r3, #12
 80077cc:	7812      	ldrb	r2, [r2, #0]
 80077ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d119      	bne.n	800782e <HAL_SPI_TransmitReceive+0x2ae>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d014      	beq.n	800782e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800782a:	2301      	movs	r3, #1
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800782e:	f7fb fc7f 	bl	8003130 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783a:	429a      	cmp	r2, r3
 800783c:	d803      	bhi.n	8007846 <HAL_SPI_TransmitReceive+0x2c6>
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007844:	d102      	bne.n	800784c <HAL_SPI_TransmitReceive+0x2cc>
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007852:	e029      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1a2      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x224>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d19d      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f917 	bl	8007aa0 <SPI_EndRxTxTransaction>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007884:	e010      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e000      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80078a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3730      	adds	r7, #48	; 0x30
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078d4:	f7fb fc2c 	bl	8003130 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4413      	add	r3, r2
 80078e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078e4:	f7fb fc24 	bl	8003130 <HAL_GetTick>
 80078e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078ea:	4b39      	ldr	r3, [pc, #228]	; (80079d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	015b      	lsls	r3, r3, #5
 80078f0:	0d1b      	lsrs	r3, r3, #20
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fa:	e054      	b.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007902:	d050      	beq.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007904:	f7fb fc14 	bl	8003130 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	429a      	cmp	r2, r3
 8007912:	d902      	bls.n	800791a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d13d      	bne.n	8007996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007932:	d111      	bne.n	8007958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793c:	d004      	beq.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007946:	d107      	bne.n	8007958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007960:	d10f      	bne.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e017      	b.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	bf0c      	ite	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	2300      	movne	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d19b      	bne.n	80078fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000004 	.word	0x20000004

080079d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e8:	d111      	bne.n	8007a0e <SPI_EndRxTransaction+0x3a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f2:	d004      	beq.n	80079fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d107      	bne.n	8007a0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a16:	d12a      	bne.n	8007a6e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a20:	d012      	beq.n	8007a48 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff ff49 	bl	80078c4 <SPI_WaitFlagStateUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d02d      	beq.n	8007a94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f043 0220 	orr.w	r2, r3, #32
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e026      	b.n	8007a96 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2101      	movs	r1, #1
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff ff36 	bl	80078c4 <SPI_WaitFlagStateUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01a      	beq.n	8007a94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a62:	f043 0220 	orr.w	r2, r3, #32
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e013      	b.n	8007a96 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2101      	movs	r1, #1
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff ff23 	bl	80078c4 <SPI_WaitFlagStateUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e000      	b.n	8007a96 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007aac:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <SPI_EndRxTxTransaction+0x7c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <SPI_EndRxTxTransaction+0x80>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	0d5b      	lsrs	r3, r3, #21
 8007ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aca:	d112      	bne.n	8007af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff fef4 	bl	80078c4 <SPI_WaitFlagStateUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d016      	beq.n	8007b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e00f      	b.n	8007b12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d0f2      	beq.n	8007af2 <SPI_EndRxTxTransaction+0x52>
 8007b0c:	e000      	b.n	8007b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b0e:	bf00      	nop
  }

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000004 	.word	0x20000004
 8007b20:	165e9f81 	.word	0x165e9f81

08007b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e041      	b.n	8007bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fb f890 	bl	8002c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f000 fc12 	bl	800838c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e041      	b.n	8007c58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d106      	bne.n	8007bee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f839 	bl	8007c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f000 fbc3 	bl	800838c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b0c      	cmp	r3, #12
 8007c86:	d855      	bhi.n	8007d34 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007d35 	.word	0x08007d35
 8007c98:	08007d35 	.word	0x08007d35
 8007c9c:	08007d35 	.word	0x08007d35
 8007ca0:	08007ce1 	.word	0x08007ce1
 8007ca4:	08007d35 	.word	0x08007d35
 8007ca8:	08007d35 	.word	0x08007d35
 8007cac:	08007d35 	.word	0x08007d35
 8007cb0:	08007cfd 	.word	0x08007cfd
 8007cb4:	08007d35 	.word	0x08007d35
 8007cb8:	08007d35 	.word	0x08007d35
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d19 	.word	0x08007d19
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fb fca5 	bl	8003628 <HAL_DMA_Abort_IT>
      break;
 8007cde:	e02c      	b.n	8007d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fb fc97 	bl	8003628 <HAL_DMA_Abort_IT>
      break;
 8007cfa:	e01e      	b.n	8007d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fb fc89 	bl	8003628 <HAL_DMA_Abort_IT>
      break;
 8007d16:	e010      	b.n	8007d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fb fc7b 	bl	8003628 <HAL_DMA_Abort_IT>
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d161      	bne.n	8007e04 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fe09 	bl	8008960 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_TIM_PWM_Stop_DMA+0xee>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	; (8007e14 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d101      	bne.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d017      	beq.n	8007d9c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10f      	bne.n	8007d9c <HAL_TIM_PWM_Stop_DMA+0x128>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	f240 4344 	movw	r3, #1092	; 0x444
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d107      	bne.n	8007d9c <HAL_TIM_PWM_Stop_DMA+0x128>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10f      	bne.n	8007dcc <HAL_TIM_PWM_Stop_DMA+0x158>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a1a      	ldr	r2, [r3, #32]
 8007db2:	f240 4344 	movw	r3, #1092	; 0x444
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d107      	bne.n	8007dcc <HAL_TIM_PWM_Stop_DMA+0x158>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <HAL_TIM_PWM_Stop_DMA+0x168>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dda:	e013      	b.n	8007e04 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d104      	bne.n	8007dec <HAL_TIM_PWM_Stop_DMA+0x178>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dea:	e00b      	b.n	8007e04 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d104      	bne.n	8007dfc <HAL_TIM_PWM_Stop_DMA+0x188>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfa:	e003      	b.n	8007e04 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40010400 	.word	0x40010400

08007e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0202 	mvn.w	r2, #2
 8007e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa81 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa73 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fa fce3 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d122      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0204 	mvn.w	r2, #4
 8007e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa57 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa49 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fa fcb9 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d122      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d11b      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0208 	mvn.w	r2, #8
 8007eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa2d 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007f08:	e005      	b.n	8007f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa1f 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7fa fc8f 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d122      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d11b      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0210 	mvn.w	r2, #16
 8007f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2208      	movs	r2, #8
 8007f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa03 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9f5 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fa fc65 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10e      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d107      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0201 	mvn.w	r2, #1
 8007f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9cf 	bl	800833a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb4:	2b80      	cmp	r3, #128	; 0x80
 8007fb6:	d107      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fd78 	bl	8008ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9c1 	bl	8008376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d10e      	bne.n	8008020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b20      	cmp	r3, #32
 800800e:	d107      	bne.n	8008020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0220 	mvn.w	r2, #32
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fd42 	bl	8008aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008042:	2302      	movs	r3, #2
 8008044:	e0ae      	b.n	80081a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b0c      	cmp	r3, #12
 8008052:	f200 809f 	bhi.w	8008194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008091 	.word	0x08008091
 8008060:	08008195 	.word	0x08008195
 8008064:	08008195 	.word	0x08008195
 8008068:	08008195 	.word	0x08008195
 800806c:	080080d1 	.word	0x080080d1
 8008070:	08008195 	.word	0x08008195
 8008074:	08008195 	.word	0x08008195
 8008078:	08008195 	.word	0x08008195
 800807c:	08008113 	.word	0x08008113
 8008080:	08008195 	.word	0x08008195
 8008084:	08008195 	.word	0x08008195
 8008088:	08008195 	.word	0x08008195
 800808c:	08008153 	.word	0x08008153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa18 	bl	80084cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0208 	orr.w	r2, r2, #8
 80080aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6999      	ldr	r1, [r3, #24]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	619a      	str	r2, [r3, #24]
      break;
 80080ce:	e064      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fa68 	bl	80085ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6999      	ldr	r1, [r3, #24]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	021a      	lsls	r2, r3, #8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	619a      	str	r2, [r3, #24]
      break;
 8008110:	e043      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fabd 	bl	8008698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0208 	orr.w	r2, r2, #8
 800812c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0204 	bic.w	r2, r2, #4
 800813c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69d9      	ldr	r1, [r3, #28]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	61da      	str	r2, [r3, #28]
      break;
 8008150:	e023      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fb11 	bl	8008780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800816c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69d9      	ldr	r1, [r3, #28]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	021a      	lsls	r2, r3, #8
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	61da      	str	r2, [r3, #28]
      break;
 8008192:	e002      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIM_ConfigClockSource+0x1c>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e0b4      	b.n	8008332 <HAL_TIM_ConfigClockSource+0x186>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008200:	d03e      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0xd4>
 8008202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008206:	f200 8087 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	f000 8086 	beq.w	800831e <HAL_TIM_ConfigClockSource+0x172>
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008216:	d87f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008218:	2b70      	cmp	r3, #112	; 0x70
 800821a:	d01a      	beq.n	8008252 <HAL_TIM_ConfigClockSource+0xa6>
 800821c:	2b70      	cmp	r3, #112	; 0x70
 800821e:	d87b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008220:	2b60      	cmp	r3, #96	; 0x60
 8008222:	d050      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008224:	2b60      	cmp	r3, #96	; 0x60
 8008226:	d877      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008228:	2b50      	cmp	r3, #80	; 0x50
 800822a:	d03c      	beq.n	80082a6 <HAL_TIM_ConfigClockSource+0xfa>
 800822c:	2b50      	cmp	r3, #80	; 0x50
 800822e:	d873      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d058      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d86f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	d064      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 800823c:	2b30      	cmp	r3, #48	; 0x30
 800823e:	d86b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d060      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	2b20      	cmp	r3, #32
 8008246:	d867      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05c      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 800824c:	2b10      	cmp	r3, #16
 800824e:	d05a      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 8008250:	e062      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6899      	ldr	r1, [r3, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f000 fb5d 	bl	8008920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	609a      	str	r2, [r3, #8]
      break;
 800827e:	e04f      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6818      	ldr	r0, [r3, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6899      	ldr	r1, [r3, #8]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f000 fb46 	bl	8008920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082a2:	609a      	str	r2, [r3, #8]
      break;
 80082a4:	e03c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6859      	ldr	r1, [r3, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f000 faba 	bl	800882c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2150      	movs	r1, #80	; 0x50
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fb13 	bl	80088ea <TIM_ITRx_SetConfig>
      break;
 80082c4:	e02c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6859      	ldr	r1, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f000 fad9 	bl	800888a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2160      	movs	r1, #96	; 0x60
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fb03 	bl	80088ea <TIM_ITRx_SetConfig>
      break;
 80082e4:	e01c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6859      	ldr	r1, [r3, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f000 fa9a 	bl	800882c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2140      	movs	r1, #64	; 0x40
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 faf3 	bl	80088ea <TIM_ITRx_SetConfig>
      break;
 8008304:	e00c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f000 faea 	bl	80088ea <TIM_ITRx_SetConfig>
      break;
 8008316:	e003      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
      break;
 800831c:	e000      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800831e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a40      	ldr	r2, [pc, #256]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d013      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083aa:	d00f      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a3d      	ldr	r2, [pc, #244]	; (80084a4 <TIM_Base_SetConfig+0x118>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00b      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3c      	ldr	r2, [pc, #240]	; (80084a8 <TIM_Base_SetConfig+0x11c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d007      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <TIM_Base_SetConfig+0x120>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3a      	ldr	r2, [pc, #232]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d108      	bne.n	80083de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2f      	ldr	r2, [pc, #188]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d02b      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ec:	d027      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <TIM_Base_SetConfig+0x118>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d023      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <TIM_Base_SetConfig+0x11c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d01f      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <TIM_Base_SetConfig+0x120>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d01b      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a29      	ldr	r2, [pc, #164]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d017      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a28      	ldr	r2, [pc, #160]	; (80084b4 <TIM_Base_SetConfig+0x128>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d013      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <TIM_Base_SetConfig+0x12c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00f      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a26      	ldr	r2, [pc, #152]	; (80084bc <TIM_Base_SetConfig+0x130>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00b      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a25      	ldr	r2, [pc, #148]	; (80084c0 <TIM_Base_SetConfig+0x134>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d007      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a24      	ldr	r2, [pc, #144]	; (80084c4 <TIM_Base_SetConfig+0x138>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d003      	beq.n	800843e <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a23      	ldr	r2, [pc, #140]	; (80084c8 <TIM_Base_SetConfig+0x13c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d108      	bne.n	8008450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a0c      	ldr	r2, [pc, #48]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d103      	bne.n	800848c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	615a      	str	r2, [r3, #20]
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40010000 	.word	0x40010000
 80084a4:	40000400 	.word	0x40000400
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40000c00 	.word	0x40000c00
 80084b0:	40010400 	.word	0x40010400
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40014400 	.word	0x40014400
 80084bc:	40014800 	.word	0x40014800
 80084c0:	40001800 	.word	0x40001800
 80084c4:	40001c00 	.word	0x40001c00
 80084c8:	40002000 	.word	0x40002000

080084cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	f023 0201 	bic.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0302 	bic.w	r3, r3, #2
 8008514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a20      	ldr	r2, [pc, #128]	; (80085a4 <TIM_OC1_SetConfig+0xd8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <TIM_OC1_SetConfig+0x64>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a1f      	ldr	r2, [pc, #124]	; (80085a8 <TIM_OC1_SetConfig+0xdc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10c      	bne.n	800854a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 0308 	bic.w	r3, r3, #8
 8008536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f023 0304 	bic.w	r3, r3, #4
 8008548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <TIM_OC1_SetConfig+0xd8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC1_SetConfig+0x8e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <TIM_OC1_SetConfig+0xdc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d111      	bne.n	800857e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	621a      	str	r2, [r3, #32]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40010400 	.word	0x40010400

080085ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0210 	bic.w	r2, r3, #16
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a22      	ldr	r2, [pc, #136]	; (8008690 <TIM_OC2_SetConfig+0xe4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_OC2_SetConfig+0x68>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a21      	ldr	r2, [pc, #132]	; (8008694 <TIM_OC2_SetConfig+0xe8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d10d      	bne.n	8008630 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800861a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a17      	ldr	r2, [pc, #92]	; (8008690 <TIM_OC2_SetConfig+0xe4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_OC2_SetConfig+0x94>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a16      	ldr	r2, [pc, #88]	; (8008694 <TIM_OC2_SetConfig+0xe8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d113      	bne.n	8008668 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800864e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	621a      	str	r2, [r3, #32]
}
 8008682:	bf00      	nop
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40010000 	.word	0x40010000
 8008694:	40010400 	.word	0x40010400

08008698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <TIM_OC3_SetConfig+0xe0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d003      	beq.n	80086fe <TIM_OC3_SetConfig+0x66>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a20      	ldr	r2, [pc, #128]	; (800877c <TIM_OC3_SetConfig+0xe4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d10d      	bne.n	800871a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	021b      	lsls	r3, r3, #8
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a16      	ldr	r2, [pc, #88]	; (8008778 <TIM_OC3_SetConfig+0xe0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC3_SetConfig+0x92>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a15      	ldr	r2, [pc, #84]	; (800877c <TIM_OC3_SetConfig+0xe4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d113      	bne.n	8008752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40010000 	.word	0x40010000
 800877c:	40010400 	.word	0x40010400

08008780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	031b      	lsls	r3, r3, #12
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a12      	ldr	r2, [pc, #72]	; (8008824 <TIM_OC4_SetConfig+0xa4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d003      	beq.n	80087e8 <TIM_OC4_SetConfig+0x68>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <TIM_OC4_SetConfig+0xa8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d109      	bne.n	80087fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	019b      	lsls	r3, r3, #6
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400

0800882c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	f023 0201 	bic.w	r2, r3, #1
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f023 030a 	bic.w	r3, r3, #10
 8008868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	4313      	orrs	r3, r2
 8008870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	621a      	str	r2, [r3, #32]
}
 800887e:	bf00      	nop
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800888a:	b480      	push	{r7}
 800888c:	b087      	sub	sp, #28
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f023 0210 	bic.w	r2, r3, #16
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	031b      	lsls	r3, r3, #12
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	621a      	str	r2, [r3, #32]
}
 80088de:	bf00      	nop
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	f043 0307 	orr.w	r3, r3, #7
 800890c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	609a      	str	r2, [r3, #8]
}
 8008914:	bf00      	nop
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800893a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	021a      	lsls	r2, r3, #8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	431a      	orrs	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4313      	orrs	r3, r2
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	609a      	str	r2, [r3, #8]
}
 8008954:	bf00      	nop
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2201      	movs	r2, #1
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1a      	ldr	r2, [r3, #32]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	43db      	mvns	r3, r3
 8008982:	401a      	ands	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1a      	ldr	r2, [r3, #32]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 031f 	and.w	r3, r3, #31
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	fa01 f303 	lsl.w	r3, r1, r3
 8008998:	431a      	orrs	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e05a      	b.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a21      	ldr	r2, [pc, #132]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d022      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a10:	d01d      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d018      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d013      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1a      	ldr	r2, [pc, #104]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d009      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a17      	ldr	r2, [pc, #92]	; (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d10c      	bne.n	8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40000400 	.word	0x40000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	40000c00 	.word	0x40000c00
 8008a98:	40010400 	.word	0x40010400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40001800 	.word	0x40001800

08008aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e03f      	b.n	8008b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fa f964 	bl	8002dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2224      	movs	r2, #36	; 0x24
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fe81 	bl	8009818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695a      	ldr	r2, [r3, #20]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b08a      	sub	sp, #40	; 0x28
 8008b6a:	af02      	add	r7, sp, #8
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	d17c      	bne.n	8008c80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <HAL_UART_Transmit+0x2c>
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e075      	b.n	8008c82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UART_Transmit+0x3e>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e06e      	b.n	8008c82 <HAL_UART_Transmit+0x11c>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2221      	movs	r2, #33	; 0x21
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bba:	f7fa fab9 	bl	8003130 <HAL_GetTick>
 8008bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	88fa      	ldrh	r2, [r7, #6]
 8008bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd4:	d108      	bne.n	8008be8 <HAL_UART_Transmit+0x82>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	e003      	b.n	8008bf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008bf8:	e02a      	b.n	8008c50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2200      	movs	r2, #0
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fbc1 	bl	800938c <UART_WaitOnFlagUntilTimeout>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e036      	b.n	8008c82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	e007      	b.n	8008c42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1cf      	bne.n	8008bfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2140      	movs	r1, #64	; 0x40
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fb91 	bl	800938c <UART_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e006      	b.n	8008c82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c80:	2302      	movs	r3, #2
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b08a      	sub	sp, #40	; 0x28
 8008c8e:	af02      	add	r7, sp, #8
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	603b      	str	r3, [r7, #0]
 8008c96:	4613      	mov	r3, r2
 8008c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	f040 808c 	bne.w	8008dc4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_UART_Receive+0x2e>
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e084      	b.n	8008dc6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_UART_Receive+0x40>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e07d      	b.n	8008dc6 <HAL_UART_Receive+0x13c>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2222      	movs	r2, #34	; 0x22
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ce6:	f7fa fa23 	bl	8003130 <HAL_GetTick>
 8008cea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	88fa      	ldrh	r2, [r7, #6]
 8008cf0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	88fa      	ldrh	r2, [r7, #6]
 8008cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d00:	d108      	bne.n	8008d14 <HAL_UART_Receive+0x8a>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	e003      	b.n	8008d1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008d24:	e043      	b.n	8008dae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2120      	movs	r1, #32
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fb2b 	bl	800938c <UART_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e042      	b.n	8008dc6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10c      	bne.n	8008d60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	e01f      	b.n	8008da0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d68:	d007      	beq.n	8008d7a <HAL_UART_Receive+0xf0>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <HAL_UART_Receive+0xfe>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e008      	b.n	8008d9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1b6      	bne.n	8008d26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e000      	b.n	8008dc6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008dc4:	2302      	movs	r3, #2
  }
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d11d      	bne.n	8008e24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_UART_Receive_IT+0x26>
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e016      	b.n	8008e26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_UART_Receive_IT+0x38>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e00f      	b.n	8008e26 <HAL_UART_Receive_IT+0x58>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	461a      	mov	r2, r3
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fb24 	bl	8009468 <UART_Start_Receive_IT>
 8008e20:	4603      	mov	r3, r0
 8008e22:	e000      	b.n	8008e26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e24:	2302      	movs	r3, #2
  }
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b0ba      	sub	sp, #232	; 0xe8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10f      	bne.n	8008e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d009      	beq.n	8008e96 <HAL_UART_IRQHandler+0x66>
 8008e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fc07 	bl	80096a2 <UART_Receive_IT>
      return;
 8008e94:	e256      	b.n	8009344 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 80de 	beq.w	800905c <HAL_UART_IRQHandler+0x22c>
 8008ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d106      	bne.n	8008eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 80d1 	beq.w	800905c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <HAL_UART_IRQHandler+0xae>
 8008ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	f043 0201 	orr.w	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee2:	f003 0304 	and.w	r3, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <HAL_UART_IRQHandler+0xd2>
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f043 0202 	orr.w	r2, r3, #2
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HAL_UART_IRQHandler+0xf6>
 8008f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f043 0204 	orr.w	r2, r3, #4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d011      	beq.n	8008f56 <HAL_UART_IRQHandler+0x126>
 8008f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f043 0208 	orr.w	r2, r3, #8
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 81ed 	beq.w	800933a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <HAL_UART_IRQHandler+0x14e>
 8008f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fb92 	bl	80096a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b40      	cmp	r3, #64	; 0x40
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d103      	bne.n	8008faa <HAL_UART_IRQHandler+0x17a>
 8008fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d04f      	beq.n	800904a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa9a 	bl	80094e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d141      	bne.n	8009042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3314      	adds	r3, #20
 8008fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3314      	adds	r3, #20
 8008fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1d9      	bne.n	8008fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	2b00      	cmp	r3, #0
 8009010:	d013      	beq.n	800903a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	4a7d      	ldr	r2, [pc, #500]	; (800920c <HAL_UART_IRQHandler+0x3dc>)
 8009018:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	4618      	mov	r0, r3
 8009020:	f7fa fb02 	bl	8003628 <HAL_DMA_Abort_IT>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d016      	beq.n	8009058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009038:	e00e      	b.n	8009058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f990 	bl	8009360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	e00a      	b.n	8009058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f98c 	bl	8009360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009048:	e006      	b.n	8009058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f988 	bl	8009360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009056:	e170      	b.n	800933a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	bf00      	nop
    return;
 800905a:	e16e      	b.n	800933a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	2b01      	cmp	r3, #1
 8009062:	f040 814a 	bne.w	80092fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8143 	beq.w	80092fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 813c 	beq.w	80092fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	60bb      	str	r3, [r7, #8]
 8009096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a2:	2b40      	cmp	r3, #64	; 0x40
 80090a4:	f040 80b4 	bne.w	8009210 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8140 	beq.w	800933e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090c6:	429a      	cmp	r2, r3
 80090c8:	f080 8139 	bcs.w	800933e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090de:	f000 8088 	beq.w	80091f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	330c      	adds	r3, #12
 80090e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800910e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800911a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1d9      	bne.n	80090e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3314      	adds	r3, #20
 8009134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800913e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3314      	adds	r3, #20
 800914e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800915a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e1      	bne.n	800912e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3314      	adds	r3, #20
 8009170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800917a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3314      	adds	r3, #20
 800918a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800918e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800919c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e3      	bne.n	800916a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	330c      	adds	r3, #12
 80091b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c2:	f023 0310 	bic.w	r3, r3, #16
 80091c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	330c      	adds	r3, #12
 80091d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80091d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091dc:	e841 2300 	strex	r3, r2, [r1]
 80091e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e3      	bne.n	80091b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fa f9ab 	bl	8003548 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8b6 	bl	8009374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009208:	e099      	b.n	800933e <HAL_UART_IRQHandler+0x50e>
 800920a:	bf00      	nop
 800920c:	080095ab 	.word	0x080095ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009218:	b29b      	uxth	r3, r3
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 808b 	beq.w	8009342 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800922c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8086 	beq.w	8009342 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	330c      	adds	r3, #12
 800923c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800924c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800925a:	647a      	str	r2, [r7, #68]	; 0x44
 800925c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e3      	bne.n	8009236 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3314      	adds	r3, #20
 8009274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	623b      	str	r3, [r7, #32]
   return(result);
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3314      	adds	r3, #20
 800928e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009292:	633a      	str	r2, [r7, #48]	; 0x30
 8009294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e3      	bne.n	800926e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	330c      	adds	r3, #12
 80092d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80092d8:	61fa      	str	r2, [r7, #28]
 80092da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	69b9      	ldr	r1, [r7, #24]
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	617b      	str	r3, [r7, #20]
   return(result);
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e3      	bne.n	80092b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f83e 	bl	8009374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092f8:	e023      	b.n	8009342 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d009      	beq.n	800931a <HAL_UART_IRQHandler+0x4ea>
 8009306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f95d 	bl	80095d2 <UART_Transmit_IT>
    return;
 8009318:	e014      	b.n	8009344 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800931a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00e      	beq.n	8009344 <HAL_UART_IRQHandler+0x514>
 8009326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d008      	beq.n	8009344 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f99d 	bl	8009672 <UART_EndTransmit_IT>
    return;
 8009338:	e004      	b.n	8009344 <HAL_UART_IRQHandler+0x514>
    return;
 800933a:	bf00      	nop
 800933c:	e002      	b.n	8009344 <HAL_UART_IRQHandler+0x514>
      return;
 800933e:	bf00      	nop
 8009340:	e000      	b.n	8009344 <HAL_UART_IRQHandler+0x514>
      return;
 8009342:	bf00      	nop
  }
}
 8009344:	37e8      	adds	r7, #232	; 0xe8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop

0800934c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b090      	sub	sp, #64	; 0x40
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939c:	e050      	b.n	8009440 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a4:	d04c      	beq.n	8009440 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <UART_WaitOnFlagUntilTimeout+0x30>
 80093ac:	f7f9 fec0 	bl	8003130 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d241      	bcs.n	8009440 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	330c      	adds	r3, #12
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093dc:	637a      	str	r2, [r7, #52]	; 0x34
 80093de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e5      	bne.n	80093bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3314      	adds	r3, #20
 80093f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	63bb      	str	r3, [r7, #56]	; 0x38
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3314      	adds	r3, #20
 800940e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009410:	623a      	str	r2, [r7, #32]
 8009412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	69f9      	ldr	r1, [r7, #28]
 8009416:	6a3a      	ldr	r2, [r7, #32]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	61bb      	str	r3, [r7, #24]
   return(result);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e5      	bne.n	80093f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e00f      	b.n	8009460 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4013      	ands	r3, r2
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	429a      	cmp	r2, r3
 800944e:	bf0c      	ite	eq
 8009450:	2301      	moveq	r3, #1
 8009452:	2300      	movne	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	429a      	cmp	r2, r3
 800945c:	d09f      	beq.n	800939e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3740      	adds	r7, #64	; 0x40
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2222      	movs	r2, #34	; 0x22
 8009492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695a      	ldr	r2, [r3, #20]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f042 0220 	orr.w	r2, r2, #32
 80094d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b095      	sub	sp, #84	; 0x54
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	330c      	adds	r3, #12
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	330c      	adds	r3, #12
 800950a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800950c:	643a      	str	r2, [r7, #64]	; 0x40
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3314      	adds	r3, #20
 8009526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f023 0301 	bic.w	r3, r3, #1
 8009536:	64bb      	str	r3, [r7, #72]	; 0x48
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3314      	adds	r3, #20
 800953e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e5      	bne.n	8009520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d119      	bne.n	8009590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	330c      	adds	r3, #12
 8009562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	60bb      	str	r3, [r7, #8]
   return(result);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f023 0310 	bic.w	r3, r3, #16
 8009572:	647b      	str	r3, [r7, #68]	; 0x44
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	330c      	adds	r3, #12
 800957a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800957c:	61ba      	str	r2, [r7, #24]
 800957e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6979      	ldr	r1, [r7, #20]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	613b      	str	r3, [r7, #16]
   return(result);
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e5      	bne.n	800955c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800959e:	bf00      	nop
 80095a0:	3754      	adds	r7, #84	; 0x54
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff fecb 	bl	8009360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b21      	cmp	r3, #33	; 0x21
 80095e4:	d13e      	bne.n	8009664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ee:	d114      	bne.n	800961a <UART_Transmit_IT+0x48>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d110      	bne.n	800961a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800960c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	1c9a      	adds	r2, r3, #2
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	621a      	str	r2, [r3, #32]
 8009618:	e008      	b.n	800962c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	6211      	str	r1, [r2, #32]
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29b      	uxth	r3, r3
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	4619      	mov	r1, r3
 800963a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10f      	bne.n	8009660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800964e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800965e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e000      	b.n	8009666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fe5a 	bl	800934c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b08c      	sub	sp, #48	; 0x30
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b22      	cmp	r3, #34	; 0x22
 80096b4:	f040 80ab 	bne.w	800980e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c0:	d117      	bne.n	80096f2 <UART_Receive_IT+0x50>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d113      	bne.n	80096f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	1c9a      	adds	r2, r3, #2
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
 80096f0:	e026      	b.n	8009740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80096f8:	2300      	movs	r3, #0
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009704:	d007      	beq.n	8009716 <UART_Receive_IT+0x74>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <UART_Receive_IT+0x82>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	e008      	b.n	8009736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009730:	b2da      	uxtb	r2, r3
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4619      	mov	r1, r3
 800974e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009750:	2b00      	cmp	r3, #0
 8009752:	d15a      	bne.n	800980a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0220 	bic.w	r2, r2, #32
 8009762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0201 	bic.w	r2, r2, #1
 8009782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	2b01      	cmp	r3, #1
 8009792:	d135      	bne.n	8009800 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	330c      	adds	r3, #12
 80097a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f023 0310 	bic.w	r3, r3, #16
 80097b0:	627b      	str	r3, [r7, #36]	; 0x24
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	330c      	adds	r3, #12
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	623a      	str	r2, [r7, #32]
 80097bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	69f9      	ldr	r1, [r7, #28]
 80097c0:	6a3a      	ldr	r2, [r7, #32]
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e5      	bne.n	800979a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0310 	and.w	r3, r3, #16
 80097d8:	2b10      	cmp	r3, #16
 80097da:	d10a      	bne.n	80097f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fdbb 	bl	8009374 <HAL_UARTEx_RxEventCallback>
 80097fe:	e002      	b.n	8009806 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7f7 fb9d 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e002      	b.n	8009810 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	e000      	b.n	8009810 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800980e:	2302      	movs	r3, #2
  }
}
 8009810:	4618      	mov	r0, r3
 8009812:	3730      	adds	r7, #48	; 0x30
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800981c:	b0c0      	sub	sp, #256	; 0x100
 800981e:	af00      	add	r7, sp, #0
 8009820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009834:	68d9      	ldr	r1, [r3, #12]
 8009836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	ea40 0301 	orr.w	r3, r0, r1
 8009840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	431a      	orrs	r2, r3
 8009850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	431a      	orrs	r2, r3
 8009858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	4313      	orrs	r3, r2
 8009860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009870:	f021 010c 	bic.w	r1, r1, #12
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800987e:	430b      	orrs	r3, r1
 8009880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009892:	6999      	ldr	r1, [r3, #24]
 8009894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	ea40 0301 	orr.w	r3, r0, r1
 800989e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b8f      	ldr	r3, [pc, #572]	; (8009ae4 <UART_SetConfig+0x2cc>)
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d005      	beq.n	80098b8 <UART_SetConfig+0xa0>
 80098ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b8d      	ldr	r3, [pc, #564]	; (8009ae8 <UART_SetConfig+0x2d0>)
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d104      	bne.n	80098c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098b8:	f7fd fb78 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 80098bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80098c0:	e003      	b.n	80098ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098c2:	f7fd fb5f 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 80098c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d4:	f040 810c 	bne.w	8009af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098dc:	2200      	movs	r2, #0
 80098de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80098ea:	4622      	mov	r2, r4
 80098ec:	462b      	mov	r3, r5
 80098ee:	1891      	adds	r1, r2, r2
 80098f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80098f2:	415b      	adcs	r3, r3
 80098f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098fa:	4621      	mov	r1, r4
 80098fc:	eb12 0801 	adds.w	r8, r2, r1
 8009900:	4629      	mov	r1, r5
 8009902:	eb43 0901 	adc.w	r9, r3, r1
 8009906:	f04f 0200 	mov.w	r2, #0
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800991a:	4690      	mov	r8, r2
 800991c:	4699      	mov	r9, r3
 800991e:	4623      	mov	r3, r4
 8009920:	eb18 0303 	adds.w	r3, r8, r3
 8009924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009928:	462b      	mov	r3, r5
 800992a:	eb49 0303 	adc.w	r3, r9, r3
 800992e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800993e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009946:	460b      	mov	r3, r1
 8009948:	18db      	adds	r3, r3, r3
 800994a:	653b      	str	r3, [r7, #80]	; 0x50
 800994c:	4613      	mov	r3, r2
 800994e:	eb42 0303 	adc.w	r3, r2, r3
 8009952:	657b      	str	r3, [r7, #84]	; 0x54
 8009954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800995c:	f7f6 fc98 	bl	8000290 <__aeabi_uldivmod>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4b61      	ldr	r3, [pc, #388]	; (8009aec <UART_SetConfig+0x2d4>)
 8009966:	fba3 2302 	umull	r2, r3, r3, r2
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	011c      	lsls	r4, r3, #4
 800996e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009972:	2200      	movs	r2, #0
 8009974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800997c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009980:	4642      	mov	r2, r8
 8009982:	464b      	mov	r3, r9
 8009984:	1891      	adds	r1, r2, r2
 8009986:	64b9      	str	r1, [r7, #72]	; 0x48
 8009988:	415b      	adcs	r3, r3
 800998a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800998c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009990:	4641      	mov	r1, r8
 8009992:	eb12 0a01 	adds.w	sl, r2, r1
 8009996:	4649      	mov	r1, r9
 8009998:	eb43 0b01 	adc.w	fp, r3, r1
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099b0:	4692      	mov	sl, r2
 80099b2:	469b      	mov	fp, r3
 80099b4:	4643      	mov	r3, r8
 80099b6:	eb1a 0303 	adds.w	r3, sl, r3
 80099ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099be:	464b      	mov	r3, r9
 80099c0:	eb4b 0303 	adc.w	r3, fp, r3
 80099c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099dc:	460b      	mov	r3, r1
 80099de:	18db      	adds	r3, r3, r3
 80099e0:	643b      	str	r3, [r7, #64]	; 0x40
 80099e2:	4613      	mov	r3, r2
 80099e4:	eb42 0303 	adc.w	r3, r2, r3
 80099e8:	647b      	str	r3, [r7, #68]	; 0x44
 80099ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80099f2:	f7f6 fc4d 	bl	8000290 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	4b3b      	ldr	r3, [pc, #236]	; (8009aec <UART_SetConfig+0x2d4>)
 80099fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009a02:	095b      	lsrs	r3, r3, #5
 8009a04:	2264      	movs	r2, #100	; 0x64
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	1acb      	subs	r3, r1, r3
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a12:	4b36      	ldr	r3, [pc, #216]	; (8009aec <UART_SetConfig+0x2d4>)
 8009a14:	fba3 2302 	umull	r2, r3, r3, r2
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a20:	441c      	add	r4, r3
 8009a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a34:	4642      	mov	r2, r8
 8009a36:	464b      	mov	r3, r9
 8009a38:	1891      	adds	r1, r2, r2
 8009a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a3c:	415b      	adcs	r3, r3
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a44:	4641      	mov	r1, r8
 8009a46:	1851      	adds	r1, r2, r1
 8009a48:	6339      	str	r1, [r7, #48]	; 0x30
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	414b      	adcs	r3, r1
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	00cb      	lsls	r3, r1, #3
 8009a60:	4651      	mov	r1, sl
 8009a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a66:	4651      	mov	r1, sl
 8009a68:	00ca      	lsls	r2, r1, #3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4642      	mov	r2, r8
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a78:	464b      	mov	r3, r9
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	eb42 0303 	adc.w	r3, r2, r3
 8009a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a98:	460b      	mov	r3, r1
 8009a9a:	18db      	adds	r3, r3, r3
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	eb42 0303 	adc.w	r3, r2, r3
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009aae:	f7f6 fbef 	bl	8000290 <__aeabi_uldivmod>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <UART_SetConfig+0x2d4>)
 8009ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8009abc:	095b      	lsrs	r3, r3, #5
 8009abe:	2164      	movs	r1, #100	; 0x64
 8009ac0:	fb01 f303 	mul.w	r3, r1, r3
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	3332      	adds	r3, #50	; 0x32
 8009aca:	4a08      	ldr	r2, [pc, #32]	; (8009aec <UART_SetConfig+0x2d4>)
 8009acc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	f003 0207 	and.w	r2, r3, #7
 8009ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4422      	add	r2, r4
 8009ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ae0:	e105      	b.n	8009cee <UART_SetConfig+0x4d6>
 8009ae2:	bf00      	nop
 8009ae4:	40011000 	.word	0x40011000
 8009ae8:	40011400 	.word	0x40011400
 8009aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b02:	4642      	mov	r2, r8
 8009b04:	464b      	mov	r3, r9
 8009b06:	1891      	adds	r1, r2, r2
 8009b08:	6239      	str	r1, [r7, #32]
 8009b0a:	415b      	adcs	r3, r3
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b12:	4641      	mov	r1, r8
 8009b14:	1854      	adds	r4, r2, r1
 8009b16:	4649      	mov	r1, r9
 8009b18:	eb43 0501 	adc.w	r5, r3, r1
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	00eb      	lsls	r3, r5, #3
 8009b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b2a:	00e2      	lsls	r2, r4, #3
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	461d      	mov	r5, r3
 8009b30:	4643      	mov	r3, r8
 8009b32:	18e3      	adds	r3, r4, r3
 8009b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b38:	464b      	mov	r3, r9
 8009b3a:	eb45 0303 	adc.w	r3, r5, r3
 8009b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b5e:	4629      	mov	r1, r5
 8009b60:	008b      	lsls	r3, r1, #2
 8009b62:	4621      	mov	r1, r4
 8009b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b68:	4621      	mov	r1, r4
 8009b6a:	008a      	lsls	r2, r1, #2
 8009b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b70:	f7f6 fb8e 	bl	8000290 <__aeabi_uldivmod>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4b60      	ldr	r3, [pc, #384]	; (8009cfc <UART_SetConfig+0x4e4>)
 8009b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	011c      	lsls	r4, r3, #4
 8009b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	1891      	adds	r1, r2, r2
 8009b9a:	61b9      	str	r1, [r7, #24]
 8009b9c:	415b      	adcs	r3, r3
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	1851      	adds	r1, r2, r1
 8009ba8:	6139      	str	r1, [r7, #16]
 8009baa:	4649      	mov	r1, r9
 8009bac:	414b      	adcs	r3, r1
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	00cb      	lsls	r3, r1, #3
 8009bc0:	4651      	mov	r1, sl
 8009bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bc6:	4651      	mov	r1, sl
 8009bc8:	00ca      	lsls	r2, r1, #3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4603      	mov	r3, r0
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	189b      	adds	r3, r3, r2
 8009bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bd8:	464b      	mov	r3, r9
 8009bda:	460a      	mov	r2, r1
 8009bdc:	eb42 0303 	adc.w	r3, r2, r3
 8009be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	008b      	lsls	r3, r1, #2
 8009c00:	4641      	mov	r1, r8
 8009c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c06:	4641      	mov	r1, r8
 8009c08:	008a      	lsls	r2, r1, #2
 8009c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c0e:	f7f6 fb3f 	bl	8000290 <__aeabi_uldivmod>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4b39      	ldr	r3, [pc, #228]	; (8009cfc <UART_SetConfig+0x4e4>)
 8009c18:	fba3 1302 	umull	r1, r3, r3, r2
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2164      	movs	r1, #100	; 0x64
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	3332      	adds	r3, #50	; 0x32
 8009c2a:	4a34      	ldr	r2, [pc, #208]	; (8009cfc <UART_SetConfig+0x4e4>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c36:	441c      	add	r4, r3
 8009c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c40:	677a      	str	r2, [r7, #116]	; 0x74
 8009c42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c46:	4642      	mov	r2, r8
 8009c48:	464b      	mov	r3, r9
 8009c4a:	1891      	adds	r1, r2, r2
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	415b      	adcs	r3, r3
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c56:	4641      	mov	r1, r8
 8009c58:	1851      	adds	r1, r2, r1
 8009c5a:	6039      	str	r1, [r7, #0]
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	414b      	adcs	r3, r1
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	f04f 0200 	mov.w	r2, #0
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c6e:	4659      	mov	r1, fp
 8009c70:	00cb      	lsls	r3, r1, #3
 8009c72:	4651      	mov	r1, sl
 8009c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c78:	4651      	mov	r1, sl
 8009c7a:	00ca      	lsls	r2, r1, #3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	4642      	mov	r2, r8
 8009c84:	189b      	adds	r3, r3, r2
 8009c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c88:	464b      	mov	r3, r9
 8009c8a:	460a      	mov	r2, r1
 8009c8c:	eb42 0303 	adc.w	r3, r2, r3
 8009c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8009c9e:	f04f 0200 	mov.w	r2, #0
 8009ca2:	f04f 0300 	mov.w	r3, #0
 8009ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009caa:	4649      	mov	r1, r9
 8009cac:	008b      	lsls	r3, r1, #2
 8009cae:	4641      	mov	r1, r8
 8009cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	008a      	lsls	r2, r1, #2
 8009cb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cbc:	f7f6 fae8 	bl	8000290 <__aeabi_uldivmod>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <UART_SetConfig+0x4e4>)
 8009cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8009cca:	095b      	lsrs	r3, r3, #5
 8009ccc:	2164      	movs	r1, #100	; 0x64
 8009cce:	fb01 f303 	mul.w	r3, r1, r3
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	3332      	adds	r3, #50	; 0x32
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <UART_SetConfig+0x4e4>)
 8009cda:	fba2 2303 	umull	r2, r3, r2, r3
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	f003 020f 	and.w	r2, r3, #15
 8009ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4422      	add	r2, r4
 8009cec:	609a      	str	r2, [r3, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cfa:	bf00      	nop
 8009cfc:	51eb851f 	.word	0x51eb851f

08009d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d00:	b084      	sub	sp, #16
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	f107 001c 	add.w	r0, r7, #28
 8009d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d122      	bne.n	8009d5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d105      	bne.n	8009d52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9c0 	bl	800a0d8 <USB_CoreReset>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
 8009d5c:	e01a      	b.n	8009d94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f9b4 	bl	800a0d8 <USB_CoreReset>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d106      	bne.n	8009d88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38
 8009d86:	e005      	b.n	8009d94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d10b      	bne.n	8009db2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f043 0206 	orr.w	r2, r3, #6
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f043 0220 	orr.w	r2, r3, #32
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dbe:	b004      	add	sp, #16
 8009dc0:	4770      	bx	lr

08009dc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f043 0201 	orr.w	r2, r3, #1
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f023 0201 	bic.w	r2, r3, #1
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d115      	bne.n	8009e54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7f9 f987 	bl	8003148 <HAL_Delay>
      ms++;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f93a 	bl	800a0ba <USB_GetMode>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d01e      	beq.n	8009e8a <USB_SetCurrentMode+0x84>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b31      	cmp	r3, #49	; 0x31
 8009e50:	d9f0      	bls.n	8009e34 <USB_SetCurrentMode+0x2e>
 8009e52:	e01a      	b.n	8009e8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d115      	bne.n	8009e86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e66:	2001      	movs	r0, #1
 8009e68:	f7f9 f96e 	bl	8003148 <HAL_Delay>
      ms++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f921 	bl	800a0ba <USB_GetMode>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <USB_SetCurrentMode+0x84>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b31      	cmp	r3, #49	; 0x31
 8009e82:	d9f0      	bls.n	8009e66 <USB_SetCurrentMode+0x60>
 8009e84:	e001      	b.n	8009e8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e005      	b.n	8009e96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b32      	cmp	r3, #50	; 0x32
 8009e8e:	d101      	bne.n	8009e94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <USB_FlushTxFifo+0x64>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d901      	bls.n	8009ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e01b      	b.n	8009ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	daf2      	bge.n	8009eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	019b      	lsls	r3, r3, #6
 8009ed0:	f043 0220 	orr.w	r2, r3, #32
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a08      	ldr	r2, [pc, #32]	; (8009f04 <USB_FlushTxFifo+0x64>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d901      	bls.n	8009eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e006      	b.n	8009ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	d0f0      	beq.n	8009ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	00030d40 	.word	0x00030d40

08009f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4a11      	ldr	r2, [pc, #68]	; (8009f64 <USB_FlushRxFifo+0x5c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d901      	bls.n	8009f26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e018      	b.n	8009f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	daf2      	bge.n	8009f14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2210      	movs	r2, #16
 8009f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4a08      	ldr	r2, [pc, #32]	; (8009f64 <USB_FlushRxFifo+0x5c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d901      	bls.n	8009f4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e006      	b.n	8009f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b10      	cmp	r3, #16
 8009f54:	d0f0      	beq.n	8009f38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	00030d40 	.word	0x00030d40

08009f68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b089      	sub	sp, #36	; 0x24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4611      	mov	r1, r2
 8009f74:	461a      	mov	r2, r3
 8009f76:	460b      	mov	r3, r1
 8009f78:	71fb      	strb	r3, [r7, #7]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d123      	bne.n	8009fd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f8e:	88bb      	ldrh	r3, [r7, #4]
 8009f90:	3303      	adds	r3, #3
 8009f92:	089b      	lsrs	r3, r3, #2
 8009f94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f96:	2300      	movs	r3, #0
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	e018      	b.n	8009fce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	031a      	lsls	r2, r3, #12
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa8:	461a      	mov	r2, r3
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	69ba      	ldr	r2, [r7, #24]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d3e2      	bcc.n	8009f9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3724      	adds	r7, #36	; 0x24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b08b      	sub	sp, #44	; 0x2c
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	089b      	lsrs	r3, r3, #2
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a002:	88fb      	ldrh	r3, [r7, #6]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	623b      	str	r3, [r7, #32]
 800a00e:	e014      	b.n	800a03a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	3301      	adds	r3, #1
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	3301      	adds	r3, #1
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	3301      	adds	r3, #1
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	3301      	adds	r3, #1
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	3301      	adds	r3, #1
 800a038:	623b      	str	r3, [r7, #32]
 800a03a:	6a3a      	ldr	r2, [r7, #32]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d3e6      	bcc.n	800a010 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a042:	8bfb      	ldrh	r3, [r7, #30]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01e      	beq.n	800a086 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a052:	461a      	mov	r2, r3
 800a054:	f107 0310 	add.w	r3, r7, #16
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	701a      	strb	r2, [r3, #0]
      i++;
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	3301      	adds	r3, #1
 800a072:	623b      	str	r3, [r7, #32]
      pDest++;
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	3301      	adds	r3, #1
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a07a:	8bfb      	ldrh	r3, [r7, #30]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a080:	8bfb      	ldrh	r3, [r7, #30]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1ea      	bne.n	800a05c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a088:	4618      	mov	r0, r3
 800a08a:	372c      	adds	r7, #44	; 0x2c
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4a13      	ldr	r2, [pc, #76]	; (800a13c <USB_CoreReset+0x64>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d901      	bls.n	800a0f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e01b      	b.n	800a12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	daf2      	bge.n	800a0e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f043 0201 	orr.w	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3301      	adds	r3, #1
 800a112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4a09      	ldr	r2, [pc, #36]	; (800a13c <USB_CoreReset+0x64>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d901      	bls.n	800a120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e006      	b.n	800a12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d0f0      	beq.n	800a10e <USB_CoreReset+0x36>

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	00030d40 	.word	0x00030d40

0800a140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a140:	b084      	sub	sp, #16
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a160:	461a      	mov	r2, r3
 800a162:	2300      	movs	r3, #0
 800a164:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d10a      	bne.n	800a1b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1aa:	f043 0304 	orr.w	r3, r3, #4
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	e014      	b.n	800a1dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1c0:	f023 0304 	bic.w	r3, r3, #4
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	e009      	b.n	800a1dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1d6:	f023 0304 	bic.w	r3, r3, #4
 800a1da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1dc:	2110      	movs	r1, #16
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff fe5e 	bl	8009ea0 <USB_FlushTxFifo>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fe8a 	bl	8009f08 <USB_FlushRxFifo>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a1fe:	2300      	movs	r3, #0
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	e015      	b.n	800a230 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a210:	461a      	mov	r2, r3
 800a212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a216:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a224:	461a      	mov	r2, r3
 800a226:	2300      	movs	r3, #0
 800a228:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3301      	adds	r3, #1
 800a22e:	613b      	str	r3, [r7, #16]
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	429a      	cmp	r2, r3
 800a236:	d3e5      	bcc.n	800a204 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a244:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00b      	beq.n	800a26a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a258:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <USB_HostInit+0x16c>)
 800a25e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a13      	ldr	r2, [pc, #76]	; (800a2b0 <USB_HostInit+0x170>)
 800a264:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a268:	e009      	b.n	800a27e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2280      	movs	r2, #128	; 0x80
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a10      	ldr	r2, [pc, #64]	; (800a2b4 <USB_HostInit+0x174>)
 800a274:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a0f      	ldr	r2, [pc, #60]	; (800a2b8 <USB_HostInit+0x178>)
 800a27a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	f043 0210 	orr.w	r2, r3, #16
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <USB_HostInit+0x17c>)
 800a296:	4313      	orrs	r3, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2a8:	b004      	add	sp, #16
 800a2aa:	4770      	bx	lr
 800a2ac:	01000200 	.word	0x01000200
 800a2b0:	00e00300 	.word	0x00e00300
 800a2b4:	00600080 	.word	0x00600080
 800a2b8:	004000e0 	.word	0x004000e0
 800a2bc:	a3200008 	.word	0xa3200008

0800a2c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d107      	bne.n	800a312 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a308:	461a      	mov	r2, r3
 800a30a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a30e:	6053      	str	r3, [r2, #4]
 800a310:	e009      	b.n	800a326 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d106      	bne.n	800a326 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a31e:	461a      	mov	r2, r3
 800a320:	f241 7370 	movw	r3, #6000	; 0x1770
 800a324:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a354:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a35e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a362:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a364:	2064      	movs	r0, #100	; 0x64
 800a366:	f7f8 feef 	bl	8003148 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a376:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a378:	200a      	movs	r0, #10
 800a37a:	f7f8 fee5 	bl	8003148 <HAL_Delay>

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a3ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <USB_DriveVbus+0x44>
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d106      	bne.n	800a3cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a3c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d6:	d109      	bne.n	800a3ec <USB_DriveVbus+0x64>
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	0c5b      	lsrs	r3, r3, #17
 800a418:	f003 0303 	and.w	r3, r3, #3
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	b29b      	uxth	r3, r3
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
	...

0800a44c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	4608      	mov	r0, r1
 800a456:	4611      	mov	r1, r2
 800a458:	461a      	mov	r2, r3
 800a45a:	4603      	mov	r3, r0
 800a45c:	70fb      	strb	r3, [r7, #3]
 800a45e:	460b      	mov	r3, r1
 800a460:	70bb      	strb	r3, [r7, #2]
 800a462:	4613      	mov	r3, r2
 800a464:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47a:	461a      	mov	r2, r3
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a480:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a486:	2b03      	cmp	r3, #3
 800a488:	d87e      	bhi.n	800a588 <USB_HC_Init+0x13c>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <USB_HC_Init+0x44>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a54b 	.word	0x0800a54b
 800a498:	0800a4a1 	.word	0x0800a4a1
 800a49c:	0800a50d 	.word	0x0800a50d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f240 439d 	movw	r3, #1181	; 0x49d
 800a4b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a4b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	da10      	bge.n	800a4de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a4dc:	e057      	b.n	800a58e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d051      	beq.n	800a58e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	78fa      	ldrb	r2, [r7, #3]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a504:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a508:	60d3      	str	r3, [r2, #12]
      break;
 800a50a:	e040      	b.n	800a58e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	4413      	add	r3, r2
 800a514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a518:	461a      	mov	r2, r3
 800a51a:	f240 639d 	movw	r3, #1693	; 0x69d
 800a51e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a524:	2b00      	cmp	r3, #0
 800a526:	da34      	bge.n	800a592 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	78fa      	ldrb	r2, [r7, #3]
 800a538:	0151      	lsls	r1, r2, #5
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	440a      	add	r2, r1
 800a53e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a546:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a548:	e023      	b.n	800a592 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a556:	461a      	mov	r2, r3
 800a558:	f240 2325 	movw	r3, #549	; 0x225
 800a55c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a55e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a562:	2b00      	cmp	r3, #0
 800a564:	da17      	bge.n	800a596 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	78fa      	ldrb	r2, [r7, #3]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a580:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a584:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a586:	e006      	b.n	800a596 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	77fb      	strb	r3, [r7, #31]
      break;
 800a58c:	e004      	b.n	800a598 <USB_HC_Init+0x14c>
      break;
 800a58e:	bf00      	nop
 800a590:	e002      	b.n	800a598 <USB_HC_Init+0x14c>
      break;
 800a592:	bf00      	nop
 800a594:	e000      	b.n	800a598 <USB_HC_Init+0x14c>
      break;
 800a596:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b2:	f043 0302 	orr.w	r3, r3, #2
 800a5b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5be:	699a      	ldr	r2, [r3, #24]
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a5e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da03      	bge.n	800a5f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a5ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	e001      	b.n	800a5f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff feff 	bl	800a3fa <USB_GetHostSpeed>
 800a5fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a5fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a602:	2b02      	cmp	r3, #2
 800a604:	d106      	bne.n	800a614 <USB_HC_Init+0x1c8>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d003      	beq.n	800a614 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a60c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	e001      	b.n	800a618 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a618:	787b      	ldrb	r3, [r7, #1]
 800a61a:	059b      	lsls	r3, r3, #22
 800a61c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a620:	78bb      	ldrb	r3, [r7, #2]
 800a622:	02db      	lsls	r3, r3, #11
 800a624:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a628:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a62a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a62e:	049b      	lsls	r3, r3, #18
 800a630:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a634:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a636:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a638:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a63c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	0159      	lsls	r1, r3, #5
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	440b      	add	r3, r1
 800a64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a654:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a656:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d003      	beq.n	800a666 <USB_HC_Init+0x21a>
 800a65e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a662:	2b01      	cmp	r3, #1
 800a664:	d10f      	bne.n	800a686 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a684:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a686:	7ffb      	ldrb	r3, [r7, #31]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af02      	add	r7, sp, #8
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	785b      	ldrb	r3, [r3, #1]
 800a6a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d02d      	beq.n	800a716 <USB_HC_StartXfer+0x86>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d129      	bne.n	800a716 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d117      	bne.n	800a6f8 <USB_HC_StartXfer+0x68>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	79db      	ldrb	r3, [r3, #7]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <USB_HC_StartXfer+0x48>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	79db      	ldrb	r3, [r3, #7]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d10f      	bne.n	800a6f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	6a3a      	ldr	r2, [r7, #32]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <USB_HC_StartXfer+0x86>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	795b      	ldrb	r3, [r3, #5]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d107      	bne.n	800a716 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fa0f 	bl	800ab30 <USB_DoPing>
      return HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	e0f8      	b.n	800a908 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d018      	beq.n	800a750 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	8912      	ldrh	r2, [r2, #8]
 800a726:	4413      	add	r3, r2
 800a728:	3b01      	subs	r3, #1
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	8912      	ldrh	r2, [r2, #8]
 800a72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a732:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a734:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a736:	8b7b      	ldrh	r3, [r7, #26]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d90b      	bls.n	800a754 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a73c:	8b7b      	ldrh	r3, [r7, #26]
 800a73e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	8912      	ldrh	r2, [r2, #8]
 800a746:	fb03 f202 	mul.w	r2, r3, r2
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	611a      	str	r2, [r3, #16]
 800a74e:	e001      	b.n	800a754 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a750:	2301      	movs	r3, #1
 800a752:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	78db      	ldrb	r3, [r3, #3]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d007      	beq.n	800a76c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a75c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	8912      	ldrh	r2, [r2, #8]
 800a762:	fb03 f202 	mul.w	r2, r3, r2
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	611a      	str	r2, [r3, #16]
 800a76a:	e003      	b.n	800a774 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	695a      	ldr	r2, [r3, #20]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a77c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a77e:	04d9      	lsls	r1, r3, #19
 800a780:	4b63      	ldr	r3, [pc, #396]	; (800a910 <USB_HC_StartXfer+0x280>)
 800a782:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a784:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	7a9b      	ldrb	r3, [r3, #10]
 800a78a:	075b      	lsls	r3, r3, #29
 800a78c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a790:	69f9      	ldr	r1, [r7, #28]
 800a792:	0148      	lsls	r0, r1, #5
 800a794:	6a39      	ldr	r1, [r7, #32]
 800a796:	4401      	add	r1, r0
 800a798:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a79c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a79e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	68d9      	ldr	r1, [r3, #12]
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	bf0c      	ite	eq
 800a7ca:	2301      	moveq	r3, #1
 800a7cc:	2300      	movne	r3, #0
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	6a3a      	ldr	r2, [r7, #32]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	7e7b      	ldrb	r3, [r7, #25]
 800a802:	075b      	lsls	r3, r3, #29
 800a804:	69f9      	ldr	r1, [r7, #28]
 800a806:	0148      	lsls	r0, r1, #5
 800a808:	6a39      	ldr	r1, [r7, #32]
 800a80a:	4401      	add	r1, r0
 800a80c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a810:	4313      	orrs	r3, r2
 800a812:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a82a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	78db      	ldrb	r3, [r3, #3]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e003      	b.n	800a846 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a844:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a84c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	4413      	add	r3, r2
 800a856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a85a:	461a      	mov	r2, r3
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	e04e      	b.n	800a908 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d149      	bne.n	800a906 <USB_HC_StartXfer+0x276>
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d045      	beq.n	800a906 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	79db      	ldrb	r3, [r3, #7]
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d830      	bhi.n	800a8e4 <USB_HC_StartXfer+0x254>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <USB_HC_StartXfer+0x1f8>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a8bd 	.word	0x0800a8bd
 800a890:	0800a899 	.word	0x0800a899
 800a894:	0800a8bd 	.word	0x0800a8bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	3303      	adds	r3, #3
 800a89e:	089b      	lsrs	r3, r3, #2
 800a8a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a8a2:	8afa      	ldrh	r2, [r7, #22]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d91c      	bls.n	800a8e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f043 0220 	orr.w	r2, r3, #32
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a8ba:	e015      	b.n	800a8e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	3303      	adds	r3, #3
 800a8c2:	089b      	lsrs	r3, r3, #2
 800a8c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a8c6:	8afa      	ldrh	r2, [r7, #22]
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d90a      	bls.n	800a8ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a8e2:	e003      	b.n	800a8ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a8e4:	bf00      	nop
 800a8e6:	e002      	b.n	800a8ee <USB_HC_StartXfer+0x25e>
        break;
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <USB_HC_StartXfer+0x25e>
        break;
 800a8ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	68d9      	ldr	r1, [r3, #12]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	785a      	ldrb	r2, [r3, #1]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	9000      	str	r0, [sp, #0]
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7ff fb31 	bl	8009f68 <USB_WritePacket>
  }

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3728      	adds	r7, #40	; 0x28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	1ff80000 	.word	0x1ff80000

0800a914 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	b29b      	uxth	r3, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a936:	b480      	push	{r7}
 800a938:	b089      	sub	sp, #36	; 0x24
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	4413      	add	r3, r2
 800a956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	0c9b      	lsrs	r3, r3, #18
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	0fdb      	lsrs	r3, r3, #31
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0320 	and.w	r3, r3, #32
 800a982:	2b20      	cmp	r3, #32
 800a984:	d104      	bne.n	800a990 <USB_HC_Halt+0x5a>
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e0c8      	b.n	800ab22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <USB_HC_Halt+0x66>
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d163      	bne.n	800aa64 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 80ab 	bne.w	800ab20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d133      	bne.n	800aa3e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	0151      	lsls	r1, r2, #5
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	440a      	add	r2, r1
 800a9ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa22:	d81d      	bhi.n	800aa60 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa3a:	d0ec      	beq.n	800aa16 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa3c:	e070      	b.n	800ab20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	69fa      	ldr	r2, [r7, #28]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa5e:	e05f      	b.n	800ab20 <USB_HC_Halt+0x1ea>
            break;
 800aa60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa62:	e05d      	b.n	800ab20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d133      	bne.n	800aafc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	0151      	lsls	r1, r2, #5
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	440a      	add	r2, r1
 800aaaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aab2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	0151      	lsls	r1, r2, #5
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	440a      	add	r2, r1
 800aaca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aad2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aae0:	d81d      	bhi.n	800ab1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaf8:	d0ec      	beq.n	800aad4 <USB_HC_Halt+0x19e>
 800aafa:	e011      	b.n	800ab20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	0151      	lsls	r1, r2, #5
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	440a      	add	r2, r1
 800ab12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	e000      	b.n	800ab20 <USB_HC_Halt+0x1ea>
          break;
 800ab1e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3724      	adds	r7, #36	; 0x24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ab44:	2301      	movs	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	04da      	lsls	r2, r3, #19
 800ab4c:	4b15      	ldr	r3, [pc, #84]	; (800aba4 <USB_DoPing+0x74>)
 800ab4e:	4013      	ands	r3, r2
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	0151      	lsls	r1, r2, #5
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	440a      	add	r2, r1
 800ab58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8e:	461a      	mov	r2, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	1ff80000 	.word	0x1ff80000

0800aba8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff f911 	bl	8009de4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800abc2:	2110      	movs	r1, #16
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff f96b 	bl	8009ea0 <USB_FlushTxFifo>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff f997 	bl	8009f08 <USB_FlushRxFifo>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800abe4:	2300      	movs	r3, #0
 800abe6:	61bb      	str	r3, [r7, #24]
 800abe8:	e01f      	b.n	800ac2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac1e:	461a      	mov	r2, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	3301      	adds	r3, #1
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b0f      	cmp	r3, #15
 800ac2e:	d9dc      	bls.n	800abea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ac30:	2300      	movs	r3, #0
 800ac32:	61bb      	str	r3, [r7, #24]
 800ac34:	e034      	b.n	800aca0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3301      	adds	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac7c:	d80c      	bhi.n	800ac98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac94:	d0ec      	beq.n	800ac70 <USB_StopHost+0xc8>
 800ac96:	e000      	b.n	800ac9a <USB_StopHost+0xf2>
        break;
 800ac98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	61bb      	str	r3, [r7, #24]
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	2b0f      	cmp	r3, #15
 800aca4:	d9c7      	bls.n	800ac36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acac:	461a      	mov	r2, r3
 800acae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff f880 	bl	8009dc2 <USB_EnableGlobalInt>

  return ret;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800acd0:	4904      	ldr	r1, [pc, #16]	; (800ace4 <MX_FATFS_Init+0x18>)
 800acd2:	4805      	ldr	r0, [pc, #20]	; (800ace8 <MX_FATFS_Init+0x1c>)
 800acd4:	f003 f95e 	bl	800df94 <FATFS_LinkDriver>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	4b03      	ldr	r3, [pc, #12]	; (800acec <MX_FATFS_Init+0x20>)
 800acde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ace0:	bf00      	nop
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	20003448 	.word	0x20003448
 800ace8:	0800fc68 	.word	0x0800fc68
 800acec:	20003444 	.word	0x20003444

0800acf0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4808      	ldr	r0, [pc, #32]	; (800ad3c <USBH_status+0x34>)
 800ad1c:	f000 fe32 	bl	800b984 <USBH_MSC_UnitIsReady>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <USBH_status+0x24>
  {
    res = RES_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]
 800ad2a:	e001      	b.n	800ad30 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20003458 	.word	0x20003458

0800ad40 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b094      	sub	sp, #80	; 0x50
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ad56:	7bf9      	ldrb	r1, [r7, #15]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4813      	ldr	r0, [pc, #76]	; (800adb0 <USBH_read+0x70>)
 800ad62:	f000 fe59 	bl	800ba18 <USBH_MSC_Read>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <USBH_read+0x34>
  {
    res = RES_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad72:	e017      	b.n	800ada4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ad74:	f107 0210 	add.w	r2, r7, #16
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	480c      	ldr	r0, [pc, #48]	; (800adb0 <USBH_read+0x70>)
 800ad7e:	f000 fe27 	bl	800b9d0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800ad82:	7f7b      	ldrb	r3, [r7, #29]
 800ad84:	2b3a      	cmp	r3, #58	; 0x3a
 800ad86:	d005      	beq.n	800ad94 <USBH_read+0x54>
 800ad88:	2b3a      	cmp	r3, #58	; 0x3a
 800ad8a:	dc07      	bgt.n	800ad9c <USBH_read+0x5c>
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d001      	beq.n	800ad94 <USBH_read+0x54>
 800ad90:	2b28      	cmp	r3, #40	; 0x28
 800ad92:	d103      	bne.n	800ad9c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ad94:	2303      	movs	r3, #3
 800ad96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ad9a:	e003      	b.n	800ada4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ada2:	bf00      	nop
    }
  }

  return res;
 800ada4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3748      	adds	r7, #72	; 0x48
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20003458 	.word	0x20003458

0800adb4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b094      	sub	sp, #80	; 0x50
 800adb8:	af02      	add	r7, sp, #8
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800adca:	7bf9      	ldrb	r1, [r7, #15]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4817      	ldr	r0, [pc, #92]	; (800ae34 <USBH_write+0x80>)
 800add6:	f000 fe88 	bl	800baea <USBH_MSC_Write>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <USBH_write+0x34>
  {
    res = RES_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ade6:	e01f      	b.n	800ae28 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ade8:	f107 0210 	add.w	r2, r7, #16
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	4619      	mov	r1, r3
 800adf0:	4810      	ldr	r0, [pc, #64]	; (800ae34 <USBH_write+0x80>)
 800adf2:	f000 fded 	bl	800b9d0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800adf6:	7f7b      	ldrb	r3, [r7, #29]
 800adf8:	2b3a      	cmp	r3, #58	; 0x3a
 800adfa:	d00d      	beq.n	800ae18 <USBH_write+0x64>
 800adfc:	2b3a      	cmp	r3, #58	; 0x3a
 800adfe:	dc0f      	bgt.n	800ae20 <USBH_write+0x6c>
 800ae00:	2b28      	cmp	r3, #40	; 0x28
 800ae02:	d009      	beq.n	800ae18 <USBH_write+0x64>
 800ae04:	2b28      	cmp	r3, #40	; 0x28
 800ae06:	dc0b      	bgt.n	800ae20 <USBH_write+0x6c>
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d005      	beq.n	800ae18 <USBH_write+0x64>
 800ae0c:	2b27      	cmp	r3, #39	; 0x27
 800ae0e:	d107      	bne.n	800ae20 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800ae10:	2302      	movs	r3, #2
 800ae12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ae16:	e007      	b.n	800ae28 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ae1e:	e003      	b.n	800ae28 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ae26:	bf00      	nop
    }
  }

  return res;
 800ae28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3748      	adds	r7, #72	; 0x48
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20003458 	.word	0x20003458

0800ae38 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b090      	sub	sp, #64	; 0x40
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	603a      	str	r2, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]
 800ae44:	460b      	mov	r3, r1
 800ae46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800ae4e:	79bb      	ldrb	r3, [r7, #6]
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d852      	bhi.n	800aefa <USBH_ioctl+0xc2>
 800ae54:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <USBH_ioctl+0x24>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800ae6d 	.word	0x0800ae6d
 800ae60:	0800ae75 	.word	0x0800ae75
 800ae64:	0800ae9f 	.word	0x0800ae9f
 800ae68:	0800aecb 	.word	0x0800aecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ae72:	e045      	b.n	800af00 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ae74:	f107 0208 	add.w	r2, r7, #8
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4823      	ldr	r0, [pc, #140]	; (800af0c <USBH_ioctl+0xd4>)
 800ae7e:	f000 fda7 	bl	800b9d0 <USBH_MSC_GetLUNInfo>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d106      	bne.n	800ae96 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ae94:	e034      	b.n	800af00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ae9c:	e030      	b.n	800af00 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ae9e:	f107 0208 	add.w	r2, r7, #8
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	4619      	mov	r1, r3
 800aea6:	4819      	ldr	r0, [pc, #100]	; (800af0c <USBH_ioctl+0xd4>)
 800aea8:	f000 fd92 	bl	800b9d0 <USBH_MSC_GetLUNInfo>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d107      	bne.n	800aec2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aeb2:	8a3b      	ldrh	r3, [r7, #16]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aec0:	e01e      	b.n	800af00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aec8:	e01a      	b.n	800af00 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aeca:	f107 0208 	add.w	r2, r7, #8
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	4619      	mov	r1, r3
 800aed2:	480e      	ldr	r0, [pc, #56]	; (800af0c <USBH_ioctl+0xd4>)
 800aed4:	f000 fd7c 	bl	800b9d0 <USBH_MSC_GetLUNInfo>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800aede:	8a3b      	ldrh	r3, [r7, #16]
 800aee0:	0a5b      	lsrs	r3, r3, #9
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aef0:	e006      	b.n	800af00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aef8:	e002      	b.n	800af00 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aefa:	2304      	movs	r3, #4
 800aefc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800af00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800af04:	4618      	mov	r0, r3
 800af06:	3740      	adds	r7, #64	; 0x40
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20003458 	.word	0x20003458

0800af10 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b089      	sub	sp, #36	; 0x24
 800af14:	af04      	add	r7, sp, #16
 800af16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af1e:	7919      	ldrb	r1, [r3, #4]
 800af20:	2350      	movs	r3, #80	; 0x50
 800af22:	2206      	movs	r2, #6
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 fc6b 	bl	800c800 <USBH_FindInterface>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2bff      	cmp	r3, #255	; 0xff
 800af32:	d002      	beq.n	800af3a <USBH_MSC_InterfaceInit+0x2a>
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d901      	bls.n	800af3e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800af3a:	2302      	movs	r3, #2
 800af3c:	e106      	b.n	800b14c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fc40 	bl	800c7c8 <USBH_SelectInterface>
 800af48:	4603      	mov	r3, r0
 800af4a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800af52:	2302      	movs	r3, #2
 800af54:	e0fa      	b.n	800b14c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800af5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800af60:	f003 fb94 	bl	800e68c <malloc>
 800af64:	4603      	mov	r3, r0
 800af66:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800af78:	2302      	movs	r3, #2
 800af7a:	e0e7      	b.n	800b14c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800af7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af80:	2100      	movs	r1, #0
 800af82:	68b8      	ldr	r0, [r7, #8]
 800af84:	f003 fba0 	bl	800e6c8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	211a      	movs	r1, #26
 800af8e:	fb01 f303 	mul.w	r3, r1, r3
 800af92:	4413      	add	r3, r2
 800af94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b25b      	sxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da16      	bge.n	800afce <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	211a      	movs	r1, #26
 800afa6:	fb01 f303 	mul.w	r3, r1, r3
 800afaa:	4413      	add	r3, r2
 800afac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	211a      	movs	r1, #26
 800afbc:	fb01 f303 	mul.w	r3, r1, r3
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800afc6:	881a      	ldrh	r2, [r3, #0]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	815a      	strh	r2, [r3, #10]
 800afcc:	e015      	b.n	800affa <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	211a      	movs	r1, #26
 800afd4:	fb01 f303 	mul.w	r3, r1, r3
 800afd8:	4413      	add	r3, r2
 800afda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800afde:	781a      	ldrb	r2, [r3, #0]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	211a      	movs	r1, #26
 800afea:	fb01 f303 	mul.w	r3, r1, r3
 800afee:	4413      	add	r3, r2
 800aff0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aff4:	881a      	ldrh	r2, [r3, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	211a      	movs	r1, #26
 800b000:	fb01 f303 	mul.w	r3, r1, r3
 800b004:	4413      	add	r3, r2
 800b006:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b25b      	sxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da16      	bge.n	800b040 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	211a      	movs	r1, #26
 800b018:	fb01 f303 	mul.w	r3, r1, r3
 800b01c:	4413      	add	r3, r2
 800b01e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	211a      	movs	r1, #26
 800b02e:	fb01 f303 	mul.w	r3, r1, r3
 800b032:	4413      	add	r3, r2
 800b034:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b038:	881a      	ldrh	r2, [r3, #0]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	815a      	strh	r2, [r3, #10]
 800b03e:	e015      	b.n	800b06c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	211a      	movs	r1, #26
 800b046:	fb01 f303 	mul.w	r3, r1, r3
 800b04a:	4413      	add	r3, r2
 800b04c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b050:	781a      	ldrb	r2, [r3, #0]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	211a      	movs	r1, #26
 800b05c:	fb01 f303 	mul.w	r3, r1, r3
 800b060:	4413      	add	r3, r2
 800b062:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b066:	881a      	ldrh	r2, [r3, #0]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2200      	movs	r2, #0
 800b076:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	799b      	ldrb	r3, [r3, #6]
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f002 fed6 	bl	800de36 <USBH_AllocPipe>
 800b08a:	4603      	mov	r3, r0
 800b08c:	461a      	mov	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	79db      	ldrb	r3, [r3, #7]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 fecc 	bl	800de36 <USBH_AllocPipe>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fdc4 	bl	800bc34 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	799b      	ldrb	r3, [r3, #6]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01e      	beq.n	800b0f2 <USBH_MSC_InterfaceInit+0x1e2>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	891b      	ldrh	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01a      	beq.n	800b0f2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	7959      	ldrb	r1, [r3, #5]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	7998      	ldrb	r0, [r3, #6]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	8912      	ldrh	r2, [r2, #8]
 800b0d4:	9202      	str	r2, [sp, #8]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	9201      	str	r2, [sp, #4]
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	4623      	mov	r3, r4
 800b0de:	4602      	mov	r2, r0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f002 fe79 	bl	800ddd8 <USBH_OpenPipe>
 800b0e6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	79db      	ldrb	r3, [r3, #7]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d02c      	beq.n	800b14a <USBH_MSC_InterfaceInit+0x23a>
 800b0f0:	e001      	b.n	800b0f6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e02a      	b.n	800b14c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	895b      	ldrh	r3, [r3, #10]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d025      	beq.n	800b14a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	7919      	ldrb	r1, [r3, #4]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	79d8      	ldrb	r0, [r3, #7]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	8952      	ldrh	r2, [r2, #10]
 800b116:	9202      	str	r2, [sp, #8]
 800b118:	2202      	movs	r2, #2
 800b11a:	9201      	str	r2, [sp, #4]
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	4623      	mov	r3, r4
 800b120:	4602      	mov	r2, r0
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f002 fe58 	bl	800ddd8 <USBH_OpenPipe>
 800b128:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	791b      	ldrb	r3, [r3, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f003 f9c8 	bl	800e4c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	795b      	ldrb	r3, [r3, #5]
 800b13c:	2200      	movs	r2, #0
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f003 f9c1 	bl	800e4c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	e000      	b.n	800b14c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b14a:	2303      	movs	r3, #3
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	795b      	ldrb	r3, [r3, #5]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00e      	beq.n	800b18c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	795b      	ldrb	r3, [r3, #5]
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f002 fe4e 	bl	800de16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	795b      	ldrb	r3, [r3, #5]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fe79 	bl	800de78 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00e      	beq.n	800b1b2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	791b      	ldrb	r3, [r3, #4]
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f002 fe3b 	bl	800de16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	791b      	ldrb	r3, [r3, #4]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f002 fe66 	bl	800de78 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f003 fa68 	bl	800e69c <free>
    phost->pActiveClass->pData = 0U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	7b9b      	ldrb	r3, [r3, #14]
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d041      	beq.n	800b282 <USBH_MSC_ClassRequest+0xa2>
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	dc4b      	bgt.n	800b29a <USBH_MSC_ClassRequest+0xba>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <USBH_MSC_ClassRequest+0x2a>
 800b206:	2b02      	cmp	r3, #2
 800b208:	d147      	bne.n	800b29a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fcf1 	bl	800bbf6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d104      	bne.n	800b228 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d137      	bne.n	800b29e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d804      	bhi.n	800b240 <USBH_MSC_ClassRequest+0x60>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	e000      	b.n	800b242 <USBH_MSC_ClassRequest+0x62>
 800b240:	2202      	movs	r2, #2
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b246:	2300      	movs	r3, #0
 800b248:	73bb      	strb	r3, [r7, #14]
 800b24a:	e014      	b.n	800b276 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	2134      	movs	r1, #52	; 0x34
 800b252:	fb01 f303 	mul.w	r3, r1, r3
 800b256:	4413      	add	r3, r2
 800b258:	3392      	adds	r3, #146	; 0x92
 800b25a:	2202      	movs	r2, #2
 800b25c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	2134      	movs	r1, #52	; 0x34
 800b264:	fb01 f303 	mul.w	r3, r1, r3
 800b268:	4413      	add	r3, r2
 800b26a:	33c1      	adds	r3, #193	; 0xc1
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	3301      	adds	r3, #1
 800b274:	73bb      	strb	r3, [r7, #14]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	7bba      	ldrb	r2, [r7, #14]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d3e5      	bcc.n	800b24c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b280:	e00d      	b.n	800b29e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b282:	2100      	movs	r1, #0
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f888 	bl	800d39a <USBH_ClrFeature>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d108      	bne.n	800b2a2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	7bda      	ldrb	r2, [r3, #15]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b298:	e003      	b.n	800b2a2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b29a:	bf00      	nop
 800b29c:	e002      	b.n	800b2a4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b29e:	bf00      	nop
 800b2a0:	e000      	b.n	800b2a4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b2a2:	bf00      	nop
  }

  return status;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	7b1b      	ldrb	r3, [r3, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <USBH_MSC_Process+0x2e>
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	f000 8271 	beq.w	800b7be <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b2dc:	e272      	b.n	800b7c4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	f080 824f 	bcs.w	800b78e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	2334      	movs	r3, #52	; 0x34
 800b2fc:	fb01 f303 	mul.w	r3, r1, r3
 800b300:	4413      	add	r3, r2
 800b302:	3391      	adds	r3, #145	; 0x91
 800b304:	2201      	movs	r2, #1
 800b306:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b30e:	4619      	mov	r1, r3
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	2334      	movs	r3, #52	; 0x34
 800b314:	fb01 f303 	mul.w	r3, r1, r3
 800b318:	4413      	add	r3, r2
 800b31a:	3390      	adds	r3, #144	; 0x90
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b08      	cmp	r3, #8
 800b320:	f200 8243 	bhi.w	800b7aa <USBH_MSC_Process+0x4fa>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <USBH_MSC_Process+0x7c>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b7ab 	.word	0x0800b7ab
 800b334:	0800b419 	.word	0x0800b419
 800b338:	0800b59d 	.word	0x0800b59d
 800b33c:	0800b377 	.word	0x0800b377
 800b340:	0800b669 	.word	0x0800b669
 800b344:	0800b7ab 	.word	0x0800b7ab
 800b348:	0800b7ab 	.word	0x0800b7ab
 800b34c:	0800b77d 	.word	0x0800b77d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b356:	4619      	mov	r1, r3
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	2334      	movs	r3, #52	; 0x34
 800b35c:	fb01 f303 	mul.w	r3, r1, r3
 800b360:	4413      	add	r3, r2
 800b362:	3390      	adds	r3, #144	; 0x90
 800b364:	2204      	movs	r2, #4
 800b366:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b374:	e222      	b.n	800b7bc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b37c:	b2d9      	uxtb	r1, r3
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b384:	461a      	mov	r2, r3
 800b386:	2334      	movs	r3, #52	; 0x34
 800b388:	fb02 f303 	mul.w	r3, r2, r3
 800b38c:	3398      	adds	r3, #152	; 0x98
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	4413      	add	r3, r2
 800b392:	3307      	adds	r3, #7
 800b394:	461a      	mov	r2, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 ff6a 	bl	800c270 <USBH_MSC_SCSI_Inquiry>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10b      	bne.n	800b3be <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	2334      	movs	r3, #52	; 0x34
 800b3b2:	fb01 f303 	mul.w	r3, r1, r3
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3390      	adds	r3, #144	; 0x90
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d10c      	bne.n	800b3de <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	2334      	movs	r3, #52	; 0x34
 800b3d0:	fb01 f303 	mul.w	r3, r1, r3
 800b3d4:	4413      	add	r3, r2
 800b3d6:	3390      	adds	r3, #144	; 0x90
 800b3d8:	2205      	movs	r2, #5
 800b3da:	701a      	strb	r2, [r3, #0]
            break;
 800b3dc:	e1e7      	b.n	800b7ae <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	f040 81e4 	bne.w	800b7ae <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	2334      	movs	r3, #52	; 0x34
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	4413      	add	r3, r2
 800b3f8:	3390      	adds	r3, #144	; 0x90
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b404:	4619      	mov	r1, r3
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	2334      	movs	r3, #52	; 0x34
 800b40a:	fb01 f303 	mul.w	r3, r1, r3
 800b40e:	4413      	add	r3, r2
 800b410:	3391      	adds	r3, #145	; 0x91
 800b412:	2202      	movs	r2, #2
 800b414:	701a      	strb	r2, [r3, #0]
            break;
 800b416:	e1ca      	b.n	800b7ae <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fe66 	bl	800c0f4 <USBH_MSC_SCSI_TestUnitReady>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d149      	bne.n	800b4c6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b438:	4619      	mov	r1, r3
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	2334      	movs	r3, #52	; 0x34
 800b43e:	fb01 f303 	mul.w	r3, r1, r3
 800b442:	4413      	add	r3, r2
 800b444:	3392      	adds	r3, #146	; 0x92
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00c      	beq.n	800b466 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b452:	4619      	mov	r1, r3
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	2334      	movs	r3, #52	; 0x34
 800b458:	fb01 f303 	mul.w	r3, r1, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	33c1      	adds	r3, #193	; 0xc1
 800b460:	2201      	movs	r2, #1
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	e00b      	b.n	800b47e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b46c:	4619      	mov	r1, r3
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	2334      	movs	r3, #52	; 0x34
 800b472:	fb01 f303 	mul.w	r3, r1, r3
 800b476:	4413      	add	r3, r2
 800b478:	33c1      	adds	r3, #193	; 0xc1
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b484:	4619      	mov	r1, r3
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	2334      	movs	r3, #52	; 0x34
 800b48a:	fb01 f303 	mul.w	r3, r1, r3
 800b48e:	4413      	add	r3, r2
 800b490:	3390      	adds	r3, #144	; 0x90
 800b492:	2203      	movs	r2, #3
 800b494:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b49c:	4619      	mov	r1, r3
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	2334      	movs	r3, #52	; 0x34
 800b4a2:	fb01 f303 	mul.w	r3, r1, r3
 800b4a6:	4413      	add	r3, r2
 800b4a8:	3391      	adds	r3, #145	; 0x91
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	2334      	movs	r3, #52	; 0x34
 800b4ba:	fb01 f303 	mul.w	r3, r1, r3
 800b4be:	4413      	add	r3, r2
 800b4c0:	3392      	adds	r3, #146	; 0x92
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d14a      	bne.n	800b562 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	2334      	movs	r3, #52	; 0x34
 800b4d8:	fb01 f303 	mul.w	r3, r1, r3
 800b4dc:	4413      	add	r3, r2
 800b4de:	3392      	adds	r3, #146	; 0x92
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d00c      	beq.n	800b500 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	2334      	movs	r3, #52	; 0x34
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	33c1      	adds	r3, #193	; 0xc1
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	e00b      	b.n	800b518 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b506:	4619      	mov	r1, r3
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	2334      	movs	r3, #52	; 0x34
 800b50c:	fb01 f303 	mul.w	r3, r1, r3
 800b510:	4413      	add	r3, r2
 800b512:	33c1      	adds	r3, #193	; 0xc1
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b51e:	4619      	mov	r1, r3
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	2334      	movs	r3, #52	; 0x34
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	4413      	add	r3, r2
 800b52a:	3390      	adds	r3, #144	; 0x90
 800b52c:	2205      	movs	r2, #5
 800b52e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b536:	4619      	mov	r1, r3
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	2334      	movs	r3, #52	; 0x34
 800b53c:	fb01 f303 	mul.w	r3, r1, r3
 800b540:	4413      	add	r3, r2
 800b542:	3391      	adds	r3, #145	; 0x91
 800b544:	2201      	movs	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b54e:	4619      	mov	r1, r3
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	2334      	movs	r3, #52	; 0x34
 800b554:	fb01 f303 	mul.w	r3, r1, r3
 800b558:	4413      	add	r3, r2
 800b55a:	3392      	adds	r3, #146	; 0x92
 800b55c:	2202      	movs	r2, #2
 800b55e:	701a      	strb	r2, [r3, #0]
            break;
 800b560:	e127      	b.n	800b7b2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	2b04      	cmp	r3, #4
 800b566:	f040 8124 	bne.w	800b7b2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b570:	4619      	mov	r1, r3
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	2334      	movs	r3, #52	; 0x34
 800b576:	fb01 f303 	mul.w	r3, r1, r3
 800b57a:	4413      	add	r3, r2
 800b57c:	3390      	adds	r3, #144	; 0x90
 800b57e:	2201      	movs	r2, #1
 800b580:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b588:	4619      	mov	r1, r3
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	2334      	movs	r3, #52	; 0x34
 800b58e:	fb01 f303 	mul.w	r3, r1, r3
 800b592:	4413      	add	r3, r2
 800b594:	3391      	adds	r3, #145	; 0x91
 800b596:	2202      	movs	r2, #2
 800b598:	701a      	strb	r2, [r3, #0]
            break;
 800b59a:	e10a      	b.n	800b7b2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5a2:	b2d9      	uxtb	r1, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	2334      	movs	r3, #52	; 0x34
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	3390      	adds	r3, #144	; 0x90
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fddc 	bl	800c17a <USBH_MSC_SCSI_ReadCapacity>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d120      	bne.n	800b60e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	2334      	movs	r3, #52	; 0x34
 800b5d8:	fb01 f303 	mul.w	r3, r1, r3
 800b5dc:	4413      	add	r3, r2
 800b5de:	3390      	adds	r3, #144	; 0x90
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	2334      	movs	r3, #52	; 0x34
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3391      	adds	r3, #145	; 0x91
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b602:	3301      	adds	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b60c:	e0d3      	b.n	800b7b6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d10c      	bne.n	800b62e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b61a:	4619      	mov	r1, r3
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	2334      	movs	r3, #52	; 0x34
 800b620:	fb01 f303 	mul.w	r3, r1, r3
 800b624:	4413      	add	r3, r2
 800b626:	3390      	adds	r3, #144	; 0x90
 800b628:	2205      	movs	r2, #5
 800b62a:	701a      	strb	r2, [r3, #0]
            break;
 800b62c:	e0c3      	b.n	800b7b6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b04      	cmp	r3, #4
 800b632:	f040 80c0 	bne.w	800b7b6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b63c:	4619      	mov	r1, r3
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	2334      	movs	r3, #52	; 0x34
 800b642:	fb01 f303 	mul.w	r3, r1, r3
 800b646:	4413      	add	r3, r2
 800b648:	3390      	adds	r3, #144	; 0x90
 800b64a:	2201      	movs	r2, #1
 800b64c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b654:	4619      	mov	r1, r3
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	2334      	movs	r3, #52	; 0x34
 800b65a:	fb01 f303 	mul.w	r3, r1, r3
 800b65e:	4413      	add	r3, r2
 800b660:	3391      	adds	r3, #145	; 0x91
 800b662:	2202      	movs	r2, #2
 800b664:	701a      	strb	r2, [r3, #0]
            break;
 800b666:	e0a6      	b.n	800b7b6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b66e:	b2d9      	uxtb	r1, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b676:	461a      	mov	r2, r3
 800b678:	2334      	movs	r3, #52	; 0x34
 800b67a:	fb02 f303 	mul.w	r3, r2, r3
 800b67e:	3398      	adds	r3, #152	; 0x98
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4413      	add	r3, r2
 800b684:	3304      	adds	r3, #4
 800b686:	461a      	mov	r2, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fe96 	bl	800c3ba <USBH_MSC_SCSI_RequestSense>
 800b68e:	4603      	mov	r3, r0
 800b690:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d145      	bne.n	800b724 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b69e:	4619      	mov	r1, r3
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	2334      	movs	r3, #52	; 0x34
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	339c      	adds	r3, #156	; 0x9c
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	d00c      	beq.n	800b6cc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	2334      	movs	r3, #52	; 0x34
 800b6be:	fb01 f303 	mul.w	r3, r1, r3
 800b6c2:	4413      	add	r3, r2
 800b6c4:	339c      	adds	r3, #156	; 0x9c
 800b6c6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d117      	bne.n	800b6fc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	f242 720f 	movw	r2, #9999	; 0x270f
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d80c      	bhi.n	800b6fc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	2334      	movs	r3, #52	; 0x34
 800b6ee:	fb01 f303 	mul.w	r3, r1, r3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3390      	adds	r3, #144	; 0x90
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	701a      	strb	r2, [r3, #0]
                  break;
 800b6fa:	e05f      	b.n	800b7bc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b702:	4619      	mov	r1, r3
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	2334      	movs	r3, #52	; 0x34
 800b708:	fb01 f303 	mul.w	r3, r1, r3
 800b70c:	4413      	add	r3, r2
 800b70e:	3390      	adds	r3, #144	; 0x90
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b71a:	3301      	adds	r3, #1
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d10c      	bne.n	800b744 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b730:	4619      	mov	r1, r3
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	2334      	movs	r3, #52	; 0x34
 800b736:	fb01 f303 	mul.w	r3, r1, r3
 800b73a:	4413      	add	r3, r2
 800b73c:	3390      	adds	r3, #144	; 0x90
 800b73e:	2208      	movs	r2, #8
 800b740:	701a      	strb	r2, [r3, #0]
            break;
 800b742:	e03a      	b.n	800b7ba <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b744:	7bfb      	ldrb	r3, [r7, #15]
 800b746:	2b04      	cmp	r3, #4
 800b748:	d137      	bne.n	800b7ba <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b750:	4619      	mov	r1, r3
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	2334      	movs	r3, #52	; 0x34
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	4413      	add	r3, r2
 800b75c:	3390      	adds	r3, #144	; 0x90
 800b75e:	2201      	movs	r2, #1
 800b760:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b768:	4619      	mov	r1, r3
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	2334      	movs	r3, #52	; 0x34
 800b76e:	fb01 f303 	mul.w	r3, r1, r3
 800b772:	4413      	add	r3, r2
 800b774:	3391      	adds	r3, #145	; 0x91
 800b776:	2202      	movs	r2, #2
 800b778:	701a      	strb	r2, [r3, #0]
            break;
 800b77a:	e01e      	b.n	800b7ba <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b782:	3301      	adds	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b78c:	e016      	b.n	800b7bc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2200      	movs	r2, #0
 800b792:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2201      	movs	r2, #1
 800b79a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
      break;
 800b7a8:	e00c      	b.n	800b7c4 <USBH_MSC_Process+0x514>
            break;
 800b7aa:	bf00      	nop
 800b7ac:	e00a      	b.n	800b7c4 <USBH_MSC_Process+0x514>
            break;
 800b7ae:	bf00      	nop
 800b7b0:	e008      	b.n	800b7c4 <USBH_MSC_Process+0x514>
            break;
 800b7b2:	bf00      	nop
 800b7b4:	e006      	b.n	800b7c4 <USBH_MSC_Process+0x514>
            break;
 800b7b6:	bf00      	nop
 800b7b8:	e004      	b.n	800b7c4 <USBH_MSC_Process+0x514>
            break;
 800b7ba:	bf00      	nop
      break;
 800b7bc:	e002      	b.n	800b7c4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c2:	bf00      	nop
  }
  return error;
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop

0800b7d0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b088      	sub	sp, #32
 800b7ea:	af02      	add	r7, sp, #8
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	2134      	movs	r1, #52	; 0x34
 800b80a:	fb01 f303 	mul.w	r3, r1, r3
 800b80e:	4413      	add	r3, r2
 800b810:	3390      	adds	r3, #144	; 0x90
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b07      	cmp	r3, #7
 800b816:	d03c      	beq.n	800b892 <USBH_MSC_RdWrProcess+0xac>
 800b818:	2b07      	cmp	r3, #7
 800b81a:	f300 80a7 	bgt.w	800b96c <USBH_MSC_RdWrProcess+0x186>
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d06c      	beq.n	800b8fc <USBH_MSC_RdWrProcess+0x116>
 800b822:	2b06      	cmp	r3, #6
 800b824:	f040 80a2 	bne.w	800b96c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b828:	78f9      	ldrb	r1, [r7, #3]
 800b82a:	2300      	movs	r3, #0
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	2300      	movs	r3, #0
 800b830:	2200      	movs	r2, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fea5 	bl	800c582 <USBH_MSC_SCSI_Read>
 800b838:	4603      	mov	r3, r0
 800b83a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10b      	bne.n	800b85a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b842:	78fb      	ldrb	r3, [r7, #3]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	2134      	movs	r1, #52	; 0x34
 800b848:	fb01 f303 	mul.w	r3, r1, r3
 800b84c:	4413      	add	r3, r2
 800b84e:	3390      	adds	r3, #144	; 0x90
 800b850:	2201      	movs	r2, #1
 800b852:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b858:	e08a      	b.n	800b970 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d109      	bne.n	800b874 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	2134      	movs	r1, #52	; 0x34
 800b866:	fb01 f303 	mul.w	r3, r1, r3
 800b86a:	4413      	add	r3, r2
 800b86c:	3390      	adds	r3, #144	; 0x90
 800b86e:	2205      	movs	r2, #5
 800b870:	701a      	strb	r2, [r3, #0]
      break;
 800b872:	e07d      	b.n	800b970 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b04      	cmp	r3, #4
 800b878:	d17a      	bne.n	800b970 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	2134      	movs	r1, #52	; 0x34
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	4413      	add	r3, r2
 800b886:	3390      	adds	r3, #144	; 0x90
 800b888:	2208      	movs	r2, #8
 800b88a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b88c:	2302      	movs	r3, #2
 800b88e:	75fb      	strb	r3, [r7, #23]
      break;
 800b890:	e06e      	b.n	800b970 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b892:	78f9      	ldrb	r1, [r7, #3]
 800b894:	2300      	movs	r3, #0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	2200      	movs	r2, #0
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fe05 	bl	800c4ac <USBH_MSC_SCSI_Write>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10b      	bne.n	800b8c4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	2134      	movs	r1, #52	; 0x34
 800b8b2:	fb01 f303 	mul.w	r3, r1, r3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	3390      	adds	r3, #144	; 0x90
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8c2:	e057      	b.n	800b974 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d109      	bne.n	800b8de <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	2134      	movs	r1, #52	; 0x34
 800b8d0:	fb01 f303 	mul.w	r3, r1, r3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	3390      	adds	r3, #144	; 0x90
 800b8d8:	2205      	movs	r2, #5
 800b8da:	701a      	strb	r2, [r3, #0]
      break;
 800b8dc:	e04a      	b.n	800b974 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d147      	bne.n	800b974 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	2134      	movs	r1, #52	; 0x34
 800b8ea:	fb01 f303 	mul.w	r3, r1, r3
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3390      	adds	r3, #144	; 0x90
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8fa:	e03b      	b.n	800b974 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	2234      	movs	r2, #52	; 0x34
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	3398      	adds	r3, #152	; 0x98
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	4413      	add	r3, r2
 800b90a:	1d1a      	adds	r2, r3, #4
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fd52 	bl	800c3ba <USBH_MSC_SCSI_RequestSense>
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d113      	bne.n	800b948 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	2134      	movs	r1, #52	; 0x34
 800b926:	fb01 f303 	mul.w	r3, r1, r3
 800b92a:	4413      	add	r3, r2
 800b92c:	3390      	adds	r3, #144	; 0x90
 800b92e:	2201      	movs	r2, #1
 800b930:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b932:	78fb      	ldrb	r3, [r7, #3]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	2134      	movs	r1, #52	; 0x34
 800b938:	fb01 f303 	mul.w	r3, r1, r3
 800b93c:	4413      	add	r3, r2
 800b93e:	3391      	adds	r3, #145	; 0x91
 800b940:	2202      	movs	r2, #2
 800b942:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b944:	2302      	movs	r3, #2
 800b946:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d014      	beq.n	800b978 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
 800b950:	2b04      	cmp	r3, #4
 800b952:	d111      	bne.n	800b978 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	2134      	movs	r1, #52	; 0x34
 800b95a:	fb01 f303 	mul.w	r3, r1, r3
 800b95e:	4413      	add	r3, r2
 800b960:	3390      	adds	r3, #144	; 0x90
 800b962:	2208      	movs	r2, #8
 800b964:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b966:	2302      	movs	r3, #2
 800b968:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b96a:	e005      	b.n	800b978 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b96c:	bf00      	nop
 800b96e:	e004      	b.n	800b97a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b970:	bf00      	nop
 800b972:	e002      	b.n	800b97a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b974:	bf00      	nop
 800b976:	e000      	b.n	800b97a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b978:	bf00      	nop

  }
  return error;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b0b      	cmp	r3, #11
 800b9a2:	d10c      	bne.n	800b9be <USBH_MSC_UnitIsReady+0x3a>
 800b9a4:	78fb      	ldrb	r3, [r7, #3]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	2134      	movs	r1, #52	; 0x34
 800b9aa:	fb01 f303 	mul.w	r3, r1, r3
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3391      	adds	r3, #145	; 0x91
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	73fb      	strb	r3, [r7, #15]
 800b9bc:	e001      	b.n	800b9c2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b0b      	cmp	r3, #11
 800b9f0:	d10d      	bne.n	800ba0e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b9f2:	7afb      	ldrb	r3, [r7, #11]
 800b9f4:	2234      	movs	r2, #52	; 0x34
 800b9f6:	fb02 f303 	mul.w	r3, r2, r3
 800b9fa:	3390      	adds	r3, #144	; 0x90
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4413      	add	r3, r2
 800ba00:	2234      	movs	r2, #52	; 0x34
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f002 fe51 	bl	800e6ac <memcpy>
    return USBH_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e000      	b.n	800ba10 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ba0e:	2302      	movs	r3, #2
  }
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	460b      	mov	r3, r1
 800ba26:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00e      	beq.n	800ba5c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ba44:	2b0b      	cmp	r3, #11
 800ba46:	d109      	bne.n	800ba5c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ba48:	7afb      	ldrb	r3, [r7, #11]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	2134      	movs	r1, #52	; 0x34
 800ba4e:	fb01 f303 	mul.w	r3, r1, r3
 800ba52:	4413      	add	r3, r2
 800ba54:	3390      	adds	r3, #144	; 0x90
 800ba56:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d001      	beq.n	800ba60 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e040      	b.n	800bae2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2206      	movs	r2, #6
 800ba64:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	2134      	movs	r1, #52	; 0x34
 800ba6c:	fb01 f303 	mul.w	r3, r1, r3
 800ba70:	4413      	add	r3, r2
 800ba72:	3390      	adds	r3, #144	; 0x90
 800ba74:	2206      	movs	r2, #6
 800ba76:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ba78:	7afb      	ldrb	r3, [r7, #11]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ba82:	7af9      	ldrb	r1, [r7, #11]
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 fd78 	bl	800c582 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba98:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ba9a:	e016      	b.n	800baca <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	1ad2      	subs	r2, r2, r3
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	f242 7110 	movw	r1, #10000	; 0x2710
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d805      	bhi.n	800bac0 <USBH_MSC_Read+0xa8>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2201      	movs	r2, #1
 800bac4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bac6:	2302      	movs	r3, #2
 800bac8:	e00b      	b.n	800bae2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	4619      	mov	r1, r3
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7ff fe89 	bl	800b7e6 <USBH_MSC_RdWrProcess>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d0e0      	beq.n	800ba9c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	2201      	movs	r2, #1
 800bade:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b088      	sub	sp, #32
 800baee:	af02      	add	r7, sp, #8
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
 800baf6:	460b      	mov	r3, r1
 800baf8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00e      	beq.n	800bb2e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bb16:	2b0b      	cmp	r3, #11
 800bb18:	d109      	bne.n	800bb2e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	2134      	movs	r1, #52	; 0x34
 800bb20:	fb01 f303 	mul.w	r3, r1, r3
 800bb24:	4413      	add	r3, r2
 800bb26:	3390      	adds	r3, #144	; 0x90
 800bb28:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d001      	beq.n	800bb32 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e040      	b.n	800bbb4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	2207      	movs	r2, #7
 800bb36:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	2134      	movs	r1, #52	; 0x34
 800bb3e:	fb01 f303 	mul.w	r3, r1, r3
 800bb42:	4413      	add	r3, r2
 800bb44:	3390      	adds	r3, #144	; 0x90
 800bb46:	2207      	movs	r2, #7
 800bb48:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bb54:	7af9      	ldrb	r1, [r7, #11]
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 fca4 	bl	800c4ac <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb6a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb6c:	e016      	b.n	800bb9c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	1ad2      	subs	r2, r2, r3
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	f242 7110 	movw	r1, #10000	; 0x2710
 800bb7e:	fb01 f303 	mul.w	r3, r1, r3
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d805      	bhi.n	800bb92 <USBH_MSC_Write+0xa8>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d104      	bne.n	800bb9c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2201      	movs	r2, #1
 800bb96:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e00b      	b.n	800bbb4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f7ff fe20 	bl	800b7e6 <USBH_MSC_RdWrProcess>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d0e0      	beq.n	800bb6e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2221      	movs	r2, #33	; 0x21
 800bbc8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	22ff      	movs	r2, #255	; 0xff
 800bbce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fea4 	bl	800d934 <USBH_CtlReq>
 800bbec:	4603      	mov	r3, r0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	22a1      	movs	r2, #161	; 0xa1
 800bc04:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	22fe      	movs	r2, #254	; 0xfe
 800bc0a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bc1e:	2201      	movs	r2, #1
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fe86 	bl	800d934 <USBH_CtlReq>
 800bc28:	4603      	mov	r3, r0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4a09      	ldr	r2, [pc, #36]	; (800bc70 <USBH_MSC_BOT_Init+0x3c>)
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <USBH_MSC_BOT_Init+0x40>)
 800bc50:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	43425355 	.word	0x43425355
 800bc74:	20304050 	.word	0x20304050

0800bc78 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	2b0a      	cmp	r3, #10
 800bcac:	f200 819e 	bhi.w	800bfec <USBH_MSC_BOT_Process+0x374>
 800bcb0:	a201      	add	r2, pc, #4	; (adr r2, 800bcb8 <USBH_MSC_BOT_Process+0x40>)
 800bcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb6:	bf00      	nop
 800bcb8:	0800bce5 	.word	0x0800bce5
 800bcbc:	0800bd0d 	.word	0x0800bd0d
 800bcc0:	0800bd77 	.word	0x0800bd77
 800bcc4:	0800bd95 	.word	0x0800bd95
 800bcc8:	0800be19 	.word	0x0800be19
 800bccc:	0800be3b 	.word	0x0800be3b
 800bcd0:	0800bed3 	.word	0x0800bed3
 800bcd4:	0800beef 	.word	0x0800beef
 800bcd8:	0800bf41 	.word	0x0800bf41
 800bcdc:	0800bf71 	.word	0x0800bf71
 800bce0:	0800bfd3 	.word	0x0800bfd3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	78fa      	ldrb	r2, [r7, #3]
 800bce8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	795b      	ldrb	r3, [r3, #5]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	9200      	str	r2, [sp, #0]
 800bd02:	221f      	movs	r2, #31
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f002 f824 	bl	800dd52 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bd0a:	e17e      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	795b      	ldrb	r3, [r3, #5]
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f002 fbae 	bl	800e474 <USBH_LL_GetURBState>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bd1c:	7d3b      	ldrb	r3, [r7, #20]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d118      	bne.n	800bd54 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00f      	beq.n	800bd4a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bd30:	b25b      	sxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da04      	bge.n	800bd40 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2203      	movs	r2, #3
 800bd3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd3e:	e157      	b.n	800bff0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2205      	movs	r2, #5
 800bd44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd48:	e152      	b.n	800bff0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2207      	movs	r2, #7
 800bd4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd52:	e14d      	b.n	800bff0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd54:	7d3b      	ldrb	r3, [r7, #20]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d104      	bne.n	800bd64 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd62:	e145      	b.n	800bff0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bd64:	7d3b      	ldrb	r3, [r7, #20]
 800bd66:	2b05      	cmp	r3, #5
 800bd68:	f040 8142 	bne.w	800bff0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	220a      	movs	r2, #10
 800bd70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd74:	e13c      	b.n	800bff0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	895a      	ldrh	r2, [r3, #10]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f002 f809 	bl	800dd9c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800bd92:	e13a      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f002 fb6a 	bl	800e474 <USBH_LL_GetURBState>
 800bda0:	4603      	mov	r3, r0
 800bda2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bda4:	7d3b      	ldrb	r3, [r7, #20]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d12d      	bne.n	800be06 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	8952      	ldrh	r2, [r2, #10]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d910      	bls.n	800bdd8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	8952      	ldrh	r2, [r2, #10]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	8952      	ldrh	r2, [r2, #10]
 800bdd0:	1a9a      	subs	r2, r3, r2
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bdd6:	e002      	b.n	800bdde <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	2200      	movs	r2, #0
 800bddc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	895a      	ldrh	r2, [r3, #10]
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	791b      	ldrb	r3, [r3, #4]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 ffd1 	bl	800dd9c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bdfa:	e0fb      	b.n	800bff4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2207      	movs	r2, #7
 800be00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be04:	e0f6      	b.n	800bff4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800be06:	7d3b      	ldrb	r3, [r7, #20]
 800be08:	2b05      	cmp	r3, #5
 800be0a:	f040 80f3 	bne.w	800bff4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2209      	movs	r2, #9
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be16:	e0ed      	b.n	800bff4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	891a      	ldrh	r2, [r3, #8]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	795b      	ldrb	r3, [r3, #5]
 800be26:	2001      	movs	r0, #1
 800be28:	9000      	str	r0, [sp, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 ff91 	bl	800dd52 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2206      	movs	r2, #6
 800be34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be38:	e0e7      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	795b      	ldrb	r3, [r3, #5]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f002 fb17 	bl	800e474 <USBH_LL_GetURBState>
 800be46:	4603      	mov	r3, r0
 800be48:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800be4a:	7d3b      	ldrb	r3, [r7, #20]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d12f      	bne.n	800beb0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	8912      	ldrh	r2, [r2, #8]
 800be58:	4293      	cmp	r3, r2
 800be5a:	d910      	bls.n	800be7e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	8912      	ldrh	r2, [r2, #8]
 800be66:	441a      	add	r2, r3
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	8912      	ldrh	r2, [r2, #8]
 800be76:	1a9a      	subs	r2, r3, r2
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	65da      	str	r2, [r3, #92]	; 0x5c
 800be7c:	e002      	b.n	800be84 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	2200      	movs	r2, #0
 800be82:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00c      	beq.n	800bea6 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	891a      	ldrh	r2, [r3, #8]
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	795b      	ldrb	r3, [r3, #5]
 800be9a:	2001      	movs	r0, #1
 800be9c:	9000      	str	r0, [sp, #0]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 ff57 	bl	800dd52 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bea4:	e0a8      	b.n	800bff8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2207      	movs	r2, #7
 800beaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800beae:	e0a3      	b.n	800bff8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800beb0:	7d3b      	ldrb	r3, [r7, #20]
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d104      	bne.n	800bec0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2205      	movs	r2, #5
 800beba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bebe:	e09b      	b.n	800bff8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800bec0:	7d3b      	ldrb	r3, [r7, #20]
 800bec2:	2b05      	cmp	r3, #5
 800bec4:	f040 8098 	bne.w	800bff8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	220a      	movs	r2, #10
 800becc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bed0:	e092      	b.n	800bff8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	791b      	ldrb	r3, [r3, #4]
 800bedc:	220d      	movs	r2, #13
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f001 ff5c 	bl	800dd9c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2208      	movs	r2, #8
 800bee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800beec:	e08d      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	791b      	ldrb	r3, [r3, #4]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f002 fabd 	bl	800e474 <USBH_LL_GetURBState>
 800befa:	4603      	mov	r3, r0
 800befc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800befe:	7d3b      	ldrb	r3, [r7, #20]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d115      	bne.n	800bf30 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f8a9 	bl	800c06c <USBH_MSC_DecodeCSW>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bf1e:	7d7b      	ldrb	r3, [r7, #21]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bf28:	e068      	b.n	800bffc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf2e:	e065      	b.n	800bffc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bf30:	7d3b      	ldrb	r3, [r7, #20]
 800bf32:	2b05      	cmp	r3, #5
 800bf34:	d162      	bne.n	800bffc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	2209      	movs	r2, #9
 800bf3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf3e:	e05d      	b.n	800bffc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	2200      	movs	r2, #0
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f864 	bl	800c014 <USBH_MSC_BOT_Abort>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bf50:	7dbb      	ldrb	r3, [r7, #22]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d104      	bne.n	800bf60 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2207      	movs	r2, #7
 800bf5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bf5e:	e04f      	b.n	800c000 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bf60:	7dbb      	ldrb	r3, [r7, #22]
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d14c      	bne.n	800c000 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	220b      	movs	r2, #11
 800bf6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf6e:	e047      	b.n	800c000 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	2201      	movs	r2, #1
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f84c 	bl	800c014 <USBH_MSC_BOT_Abort>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bf80:	7dbb      	ldrb	r3, [r7, #22]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d11d      	bne.n	800bfc2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	795b      	ldrb	r3, [r3, #5]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f002 facb 	bl	800e528 <USBH_LL_GetToggle>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	7959      	ldrb	r1, [r3, #5]
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	f1c3 0301 	rsb	r3, r3, #1
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f002 fa8f 	bl	800e4c8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	791b      	ldrb	r3, [r3, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f002 fa88 	bl	800e4c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2209      	movs	r2, #9
 800bfbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bfc0:	e020      	b.n	800c004 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bfc2:	7dbb      	ldrb	r3, [r7, #22]
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	d11d      	bne.n	800c004 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	220b      	movs	r2, #11
 800bfcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfd0:	e018      	b.n	800c004 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fdf2 	bl	800bbbc <USBH_MSC_BOT_REQ_Reset>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d112      	bne.n	800c008 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bfea:	e00d      	b.n	800c008 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bfec:	bf00      	nop
 800bfee:	e00c      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800bff0:	bf00      	nop
 800bff2:	e00a      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800bff4:	bf00      	nop
 800bff6:	e008      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800bff8:	bf00      	nop
 800bffa:	e006      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800bffc:	bf00      	nop
 800bffe:	e004      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800c000:	bf00      	nop
 800c002:	e002      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800c004:	bf00      	nop
 800c006:	e000      	b.n	800c00a <USBH_MSC_BOT_Process+0x392>
      break;
 800c008:	bf00      	nop
  }
  return status;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
 800c020:	4613      	mov	r3, r2
 800c022:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c024:	2302      	movs	r3, #2
 800c026:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c032:	78bb      	ldrb	r3, [r7, #2]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <USBH_MSC_BOT_Abort+0x2a>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d009      	beq.n	800c050 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c03c:	e011      	b.n	800c062 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	79db      	ldrb	r3, [r3, #7]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 f9a8 	bl	800d39a <USBH_ClrFeature>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
      break;
 800c04e:	e008      	b.n	800c062 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	799b      	ldrb	r3, [r3, #6]
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 f99f 	bl	800d39a <USBH_ClrFeature>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]
      break;
 800c060:	bf00      	nop
  }
  return status;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c07e:	2301      	movs	r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	791b      	ldrb	r3, [r3, #4]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f002 f961 	bl	800e350 <USBH_LL_GetLastXferSize>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b0d      	cmp	r3, #13
 800c092:	d002      	beq.n	800c09a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c094:	2302      	movs	r3, #2
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	e024      	b.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c09e:	4a14      	ldr	r2, [pc, #80]	; (800c0f0 <USBH_MSC_DecodeCSW+0x84>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d11d      	bne.n	800c0e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d119      	bne.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
 800c0be:	e011      	b.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d102      	bne.n	800c0d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	73fb      	strb	r3, [r7, #15]
 800c0ce:	e009      	b.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d104      	bne.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c0da:	2302      	movs	r3, #2
 800c0dc:	73fb      	strb	r3, [r7, #15]
 800c0de:	e001      	b.n	800c0e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	53425355 	.word	0x53425355

0800c0f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c100:	2302      	movs	r3, #2
 800c102:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c114:	2b01      	cmp	r3, #1
 800c116:	d002      	beq.n	800c11e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d021      	beq.n	800c160 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c11c:	e028      	b.n	800c170 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	220a      	movs	r2, #10
 800c130:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	3363      	adds	r3, #99	; 0x63
 800c138:	2210      	movs	r2, #16
 800c13a:	2100      	movs	r1, #0
 800c13c:	4618      	mov	r0, r3
 800c13e:	f002 fac3 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2202      	movs	r2, #2
 800c156:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c15a:	2301      	movs	r3, #1
 800c15c:	73fb      	strb	r3, [r7, #15]
      break;
 800c15e:	e007      	b.n	800c170 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff fd87 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
      break;
 800c16e:	bf00      	nop
  }

  return error;
 800c170:	7bfb      	ldrb	r3, [r7, #15]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b086      	sub	sp, #24
 800c17e:	af00      	add	r7, sp, #0
 800c180:	60f8      	str	r0, [r7, #12]
 800c182:	460b      	mov	r3, r1
 800c184:	607a      	str	r2, [r7, #4]
 800c186:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c188:	2301      	movs	r3, #1
 800c18a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d002      	beq.n	800c1a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d027      	beq.n	800c1f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c1a4:	e05f      	b.n	800c266 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2208      	movs	r2, #8
 800c1aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	2280      	movs	r2, #128	; 0x80
 800c1b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	220a      	movs	r2, #10
 800c1b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	3363      	adds	r3, #99	; 0x63
 800c1c0:	2210      	movs	r2, #16
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f002 fa7f 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2225      	movs	r2, #37	; 0x25
 800c1ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2202      	movs	r2, #2
 800c1de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f103 0210 	add.w	r2, r3, #16
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f2:	e038      	b.n	800c266 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f7ff fd3d 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d12d      	bne.n	800c264 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c20e:	3303      	adds	r3, #3
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	461a      	mov	r2, r3
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c21a:	3302      	adds	r3, #2
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	021b      	lsls	r3, r3, #8
 800c220:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c228:	3301      	adds	r3, #1
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c22e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c246:	3307      	adds	r3, #7
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c252:	3306      	adds	r3, #6
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	021b      	lsls	r3, r3, #8
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	4313      	orrs	r3, r2
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	809a      	strh	r2, [r3, #4]
      break;
 800c264:	bf00      	nop
  }

  return error;
 800c266:	7dfb      	ldrb	r3, [r7, #23]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	460b      	mov	r3, r1
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c27e:	2302      	movs	r3, #2
 800c280:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c292:	2b01      	cmp	r3, #1
 800c294:	d002      	beq.n	800c29c <USBH_MSC_SCSI_Inquiry+0x2c>
 800c296:	2b02      	cmp	r3, #2
 800c298:	d03d      	beq.n	800c316 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c29a:	e089      	b.n	800c3b0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	2224      	movs	r2, #36	; 0x24
 800c2a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2280      	movs	r2, #128	; 0x80
 800c2a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3363      	adds	r3, #99	; 0x63
 800c2b6:	220a      	movs	r2, #10
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f002 fa04 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2212      	movs	r2, #18
 800c2c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	015b      	lsls	r3, r3, #5
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	2224      	movs	r2, #36	; 0x24
 800c2e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f103 0210 	add.w	r2, r3, #16
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c310:	2301      	movs	r3, #1
 800c312:	75fb      	strb	r3, [r7, #23]
      break;
 800c314:	e04c      	b.n	800c3b0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c316:	7afb      	ldrb	r3, [r7, #11]
 800c318:	4619      	mov	r1, r3
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fcac 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c320:	4603      	mov	r3, r0
 800c322:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d141      	bne.n	800c3ae <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c32a:	2222      	movs	r2, #34	; 0x22
 800c32c:	2100      	movs	r1, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f002 f9ca 	bl	800e6c8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	b2da      	uxtb	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	b2da      	uxtb	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c35c:	3301      	adds	r3, #1
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	b25b      	sxtb	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	da03      	bge.n	800c36e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	709a      	strb	r2, [r3, #2]
 800c36c:	e002      	b.n	800c374 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	1cd8      	adds	r0, r3, #3
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c37e:	3308      	adds	r3, #8
 800c380:	2208      	movs	r2, #8
 800c382:	4619      	mov	r1, r3
 800c384:	f002 f992 	bl	800e6ac <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f103 000c 	add.w	r0, r3, #12
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c394:	3310      	adds	r3, #16
 800c396:	2210      	movs	r2, #16
 800c398:	4619      	mov	r1, r3
 800c39a:	f002 f987 	bl	800e6ac <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	331d      	adds	r3, #29
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c3a8:	3220      	adds	r2, #32
 800c3aa:	6812      	ldr	r2, [r2, #0]
 800c3ac:	601a      	str	r2, [r3, #0]
      break;
 800c3ae:	bf00      	nop
  }

  return error;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b086      	sub	sp, #24
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	60f8      	str	r0, [r7, #12]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	607a      	str	r2, [r7, #4]
 800c3c6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d002      	beq.n	800c3e6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d03d      	beq.n	800c460 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c3e4:	e05d      	b.n	800c4a2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	220e      	movs	r2, #14
 800c3ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2280      	movs	r2, #128	; 0x80
 800c3f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	220a      	movs	r2, #10
 800c3f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	3363      	adds	r3, #99	; 0x63
 800c400:	2210      	movs	r2, #16
 800c402:	2100      	movs	r1, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f002 f95f 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2203      	movs	r2, #3
 800c40e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	015b      	lsls	r3, r3, #5
 800c416:	b2da      	uxtb	r2, r3
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	220e      	movs	r2, #14
 800c432:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2202      	movs	r2, #2
 800c44a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f103 0210 	add.w	r2, r3, #16
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c45a:	2301      	movs	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
      break;
 800c45e:	e020      	b.n	800c4a2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fc07 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d115      	bne.n	800c4a0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c47a:	3302      	adds	r3, #2
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 030f 	and.w	r3, r3, #15
 800c482:	b2da      	uxtb	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c48e:	7b1a      	ldrb	r2, [r3, #12]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c49a:	7b5a      	ldrb	r2, [r3, #13]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	709a      	strb	r2, [r3, #2]
      break;
 800c4a0:	bf00      	nop
  }

  return error;
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	607a      	str	r2, [r7, #4]
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d002      	beq.n	800c4da <USBH_MSC_SCSI_Write+0x2e>
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d047      	beq.n	800c568 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c4d8:	e04e      	b.n	800c578 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	fb03 f202 	mul.w	r2, r3, r2
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	220a      	movs	r2, #10
 800c4f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3363      	adds	r3, #99	; 0x63
 800c500:	2210      	movs	r2, #16
 800c502:	2100      	movs	r1, #0
 800c504:	4618      	mov	r0, r3
 800c506:	f002 f8df 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	222a      	movs	r2, #42	; 0x2a
 800c50e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c512:	79fa      	ldrb	r2, [r7, #7]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c51a:	79ba      	ldrb	r2, [r7, #6]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c522:	797a      	ldrb	r2, [r7, #5]
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c52a:	1d3b      	adds	r3, r7, #4
 800c52c:	781a      	ldrb	r2, [r3, #0]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c534:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c53e:	f107 0320 	add.w	r3, r7, #32
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2202      	movs	r2, #2
 800c556:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c562:	2301      	movs	r3, #1
 800c564:	75fb      	strb	r3, [r7, #23]
      break;
 800c566:	e007      	b.n	800c578 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c568:	7afb      	ldrb	r3, [r7, #11]
 800c56a:	4619      	mov	r1, r3
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff fb83 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c572:	4603      	mov	r3, r0
 800c574:	75fb      	strb	r3, [r7, #23]
      break;
 800c576:	bf00      	nop
  }

  return error;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b086      	sub	sp, #24
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
 800c58e:	460b      	mov	r3, r1
 800c590:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c592:	2302      	movs	r3, #2
 800c594:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d002      	beq.n	800c5b0 <USBH_MSC_SCSI_Read+0x2e>
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d047      	beq.n	800c63e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c5ae:	e04e      	b.n	800c64e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	fb03 f202 	mul.w	r2, r3, r2
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2280      	movs	r2, #128	; 0x80
 800c5c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	220a      	movs	r2, #10
 800c5ce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	3363      	adds	r3, #99	; 0x63
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	2100      	movs	r1, #0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f002 f874 	bl	800e6c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2228      	movs	r2, #40	; 0x28
 800c5e4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c5e8:	79fa      	ldrb	r2, [r7, #7]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c5f0:	79ba      	ldrb	r2, [r7, #6]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c5f8:	797a      	ldrb	r2, [r7, #5]
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c600:	1d3b      	adds	r3, r7, #4
 800c602:	781a      	ldrb	r2, [r3, #0]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c60a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c614:	f107 0320 	add.w	r3, r7, #32
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c638:	2301      	movs	r3, #1
 800c63a:	75fb      	strb	r3, [r7, #23]
      break;
 800c63c:	e007      	b.n	800c64e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c63e:	7afb      	ldrb	r3, [r7, #11]
 800c640:	4619      	mov	r1, r3
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fb18 	bl	800bc78 <USBH_MSC_BOT_Process>
 800c648:	4603      	mov	r3, r0
 800c64a:	75fb      	strb	r3, [r7, #23]
      break;
 800c64c:	bf00      	nop
  }

  return error;
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	4613      	mov	r3, r2
 800c664:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c66c:	2302      	movs	r3, #2
 800c66e:	e029      	b.n	800c6c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	79fa      	ldrb	r2, [r7, #7]
 800c674:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f000 f81f 	bl	800c6cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f001 fd89 	bl	800e1d4 <USBH_LL_Init>

  return USBH_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	e009      	b.n	800c6f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	33e0      	adds	r3, #224	; 0xe0
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	60fb      	str	r3, [r7, #12]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b0f      	cmp	r3, #15
 800c6f6:	d9f2      	bls.n	800c6de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e009      	b.n	800c712 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c708:	2200      	movs	r2, #0
 800c70a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3301      	adds	r3, #1
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c718:	d3f1      	bcc.n	800c6fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2201      	movs	r2, #1
 800c738:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2240      	movs	r2, #64	; 0x40
 800c73e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d016      	beq.n	800c7b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10e      	bne.n	800c7b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c798:	1c59      	adds	r1, r3, #1
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	33de      	adds	r3, #222	; 0xde
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]
 800c7ae:	e004      	b.n	800c7ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	73fb      	strb	r3, [r7, #15]
 800c7b4:	e001      	b.n	800c7ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d204      	bcs.n	800c7ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	78fa      	ldrb	r2, [r7, #3]
 800c7e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c7ec:	e001      	b.n	800c7f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	4608      	mov	r0, r1
 800c80a:	4611      	mov	r1, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	4603      	mov	r3, r0
 800c810:	70fb      	strb	r3, [r7, #3]
 800c812:	460b      	mov	r3, r1
 800c814:	70bb      	strb	r3, [r7, #2]
 800c816:	4613      	mov	r3, r2
 800c818:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c828:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c82a:	e025      	b.n	800c878 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c82c:	7dfb      	ldrb	r3, [r7, #23]
 800c82e:	221a      	movs	r2, #26
 800c830:	fb02 f303 	mul.w	r3, r2, r3
 800c834:	3308      	adds	r3, #8
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4413      	add	r3, r2
 800c83a:	3302      	adds	r3, #2
 800c83c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	795b      	ldrb	r3, [r3, #5]
 800c842:	78fa      	ldrb	r2, [r7, #3]
 800c844:	429a      	cmp	r2, r3
 800c846:	d002      	beq.n	800c84e <USBH_FindInterface+0x4e>
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	2bff      	cmp	r3, #255	; 0xff
 800c84c:	d111      	bne.n	800c872 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c852:	78ba      	ldrb	r2, [r7, #2]
 800c854:	429a      	cmp	r2, r3
 800c856:	d002      	beq.n	800c85e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c858:	78bb      	ldrb	r3, [r7, #2]
 800c85a:	2bff      	cmp	r3, #255	; 0xff
 800c85c:	d109      	bne.n	800c872 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c862:	787a      	ldrb	r2, [r7, #1]
 800c864:	429a      	cmp	r2, r3
 800c866:	d002      	beq.n	800c86e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c868:	787b      	ldrb	r3, [r7, #1]
 800c86a:	2bff      	cmp	r3, #255	; 0xff
 800c86c:	d101      	bne.n	800c872 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	e006      	b.n	800c880 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c872:	7dfb      	ldrb	r3, [r7, #23]
 800c874:	3301      	adds	r3, #1
 800c876:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d9d6      	bls.n	800c82c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c87e:	23ff      	movs	r3, #255	; 0xff
}
 800c880:	4618      	mov	r0, r3
 800c882:	371c      	adds	r7, #28
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 fce3 	bl	800e260 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c89a:	2101      	movs	r1, #1
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f001 fdfc 	bl	800e49a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b088      	sub	sp, #32
 800c8b0:	af04      	add	r7, sp, #16
 800c8b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d102      	bne.n	800c8ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2203      	movs	r2, #3
 800c8cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b0b      	cmp	r3, #11
 800c8d6:	f200 81be 	bhi.w	800cc56 <USBH_Process+0x3aa>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <USBH_Process+0x34>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c911 	.word	0x0800c911
 800c8e4:	0800c943 	.word	0x0800c943
 800c8e8:	0800c9ab 	.word	0x0800c9ab
 800c8ec:	0800cbf1 	.word	0x0800cbf1
 800c8f0:	0800cc57 	.word	0x0800cc57
 800c8f4:	0800ca4f 	.word	0x0800ca4f
 800c8f8:	0800cb97 	.word	0x0800cb97
 800c8fc:	0800ca85 	.word	0x0800ca85
 800c900:	0800caa5 	.word	0x0800caa5
 800c904:	0800cac5 	.word	0x0800cac5
 800c908:	0800cb09 	.word	0x0800cb09
 800c90c:	0800cbd9 	.word	0x0800cbd9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 819e 	beq.w	800cc5a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c924:	20c8      	movs	r0, #200	; 0xc8
 800c926:	f001 fe2f 	bl	800e588 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 fcf5 	bl	800e31a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c940:	e18b      	b.n	800cc5a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d107      	bne.n	800c95c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c95a:	e18d      	b.n	800cc78 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c966:	d914      	bls.n	800c992 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c96e:	3301      	adds	r3, #1
 800c970:	b2da      	uxtb	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d903      	bls.n	800c98a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	220d      	movs	r2, #13
 800c986:	701a      	strb	r2, [r3, #0]
      break;
 800c988:	e176      	b.n	800cc78 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
      break;
 800c990:	e172      	b.n	800cc78 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c998:	f103 020a 	add.w	r2, r3, #10
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c9a2:	200a      	movs	r0, #10
 800c9a4:	f001 fdf0 	bl	800e588 <USBH_Delay>
      break;
 800c9a8:	e166      	b.n	800cc78 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d005      	beq.n	800c9c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9ba:	2104      	movs	r1, #4
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c9c0:	2064      	movs	r0, #100	; 0x64
 800c9c2:	f001 fde1 	bl	800e588 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 fc80 	bl	800e2cc <USBH_LL_GetSpeed>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2205      	movs	r2, #5
 800c9da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c9dc:	2100      	movs	r1, #0
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f001 fa29 	bl	800de36 <USBH_AllocPipe>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c9ec:	2180      	movs	r1, #128	; 0x80
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 fa21 	bl	800de36 <USBH_AllocPipe>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7919      	ldrb	r1, [r3, #4]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca10:	b292      	uxth	r2, r2
 800ca12:	9202      	str	r2, [sp, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	9201      	str	r2, [sp, #4]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2280      	movs	r2, #128	; 0x80
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f9da 	bl	800ddd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7959      	ldrb	r1, [r3, #5]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca38:	b292      	uxth	r2, r2
 800ca3a:	9202      	str	r2, [sp, #8]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	9201      	str	r2, [sp, #4]
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	4603      	mov	r3, r0
 800ca44:	2200      	movs	r2, #0
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 f9c6 	bl	800ddd8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca4c:	e114      	b.n	800cc78 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f918 	bl	800cc84 <USBH_HandleEnum>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f040 80fe 	bne.w	800cc5e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d103      	bne.n	800ca7c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2208      	movs	r2, #8
 800ca78:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca7a:	e0f0      	b.n	800cc5e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2207      	movs	r2, #7
 800ca80:	701a      	strb	r2, [r3, #0]
      break;
 800ca82:	e0ec      	b.n	800cc5e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 80e9 	beq.w	800cc62 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca96:	2101      	movs	r1, #1
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2208      	movs	r2, #8
 800caa0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800caa2:	e0de      	b.n	800cc62 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800caaa:	b29b      	uxth	r3, r3
 800caac:	4619      	mov	r1, r3
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fc2c 	bl	800d30c <USBH_SetCfg>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f040 80d5 	bne.w	800cc66 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2209      	movs	r2, #9
 800cac0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cac2:	e0d0      	b.n	800cc66 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800caca:	f003 0320 	and.w	r3, r3, #32
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d016      	beq.n	800cb00 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cad2:	2101      	movs	r1, #1
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fc3c 	bl	800d352 <USBH_SetFeature>
 800cada:	4603      	mov	r3, r0
 800cadc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	220a      	movs	r2, #10
 800caea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800caec:	e0bd      	b.n	800cc6a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800caee:	7bbb      	ldrb	r3, [r7, #14]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	f040 80b9 	bne.w	800cc6a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	220a      	movs	r2, #10
 800cafc:	701a      	strb	r2, [r3, #0]
      break;
 800cafe:	e0b4      	b.n	800cc6a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	220a      	movs	r2, #10
 800cb04:	701a      	strb	r2, [r3, #0]
      break;
 800cb06:	e0b0      	b.n	800cc6a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 80ad 	beq.w	800cc6e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73fb      	strb	r3, [r7, #15]
 800cb20:	e016      	b.n	800cb50 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cb22:	7bfa      	ldrb	r2, [r7, #15]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	32de      	adds	r2, #222	; 0xde
 800cb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2c:	791a      	ldrb	r2, [r3, #4]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d108      	bne.n	800cb4a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cb38:	7bfa      	ldrb	r2, [r7, #15]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	32de      	adds	r2, #222	; 0xde
 800cb3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cb48:	e005      	b.n	800cb56 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0e5      	beq.n	800cb22 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d016      	beq.n	800cb8e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	4798      	blx	r3
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d109      	bne.n	800cb86 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2206      	movs	r2, #6
 800cb76:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb7e:	2103      	movs	r1, #3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb84:	e073      	b.n	800cc6e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	220d      	movs	r2, #13
 800cb8a:	701a      	strb	r2, [r3, #0]
      break;
 800cb8c:	e06f      	b.n	800cc6e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	220d      	movs	r2, #13
 800cb92:	701a      	strb	r2, [r3, #0]
      break;
 800cb94:	e06b      	b.n	800cc6e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d017      	beq.n	800cbd0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	4798      	blx	r3
 800cbac:	4603      	mov	r3, r0
 800cbae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cbb0:	7bbb      	ldrb	r3, [r7, #14]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	220b      	movs	r2, #11
 800cbbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbbe:	e058      	b.n	800cc72 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d154      	bne.n	800cc72 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	220d      	movs	r2, #13
 800cbcc:	701a      	strb	r2, [r3, #0]
      break;
 800cbce:	e050      	b.n	800cc72 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	220d      	movs	r2, #13
 800cbd4:	701a      	strb	r2, [r3, #0]
      break;
 800cbd6:	e04c      	b.n	800cc72 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d049      	beq.n	800cc76 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	4798      	blx	r3
      }
      break;
 800cbee:	e042      	b.n	800cc76 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff fd67 	bl	800c6cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d009      	beq.n	800cc1c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d005      	beq.n	800cc32 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc2c:	2105      	movs	r1, #5
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d107      	bne.n	800cc4e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff fe20 	bl	800c88c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc4c:	e014      	b.n	800cc78 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f001 fb06 	bl	800e260 <USBH_LL_Start>
      break;
 800cc54:	e010      	b.n	800cc78 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800cc56:	bf00      	nop
 800cc58:	e00e      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc5a:	bf00      	nop
 800cc5c:	e00c      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc5e:	bf00      	nop
 800cc60:	e00a      	b.n	800cc78 <USBH_Process+0x3cc>
    break;
 800cc62:	bf00      	nop
 800cc64:	e008      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc66:	bf00      	nop
 800cc68:	e006      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc6a:	bf00      	nop
 800cc6c:	e004      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc6e:	bf00      	nop
 800cc70:	e002      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc72:	bf00      	nop
 800cc74:	e000      	b.n	800cc78 <USBH_Process+0x3cc>
      break;
 800cc76:	bf00      	nop
  }
  return USBH_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop

0800cc84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af04      	add	r7, sp, #16
 800cc8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cc90:	2301      	movs	r3, #1
 800cc92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	785b      	ldrb	r3, [r3, #1]
 800cc98:	2b07      	cmp	r3, #7
 800cc9a:	f200 81c1 	bhi.w	800d020 <USBH_HandleEnum+0x39c>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <USBH_HandleEnum+0x20>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccc5 	.word	0x0800ccc5
 800cca8:	0800cd83 	.word	0x0800cd83
 800ccac:	0800cded 	.word	0x0800cded
 800ccb0:	0800ce7b 	.word	0x0800ce7b
 800ccb4:	0800cee5 	.word	0x0800cee5
 800ccb8:	0800cf55 	.word	0x0800cf55
 800ccbc:	0800cf9b 	.word	0x0800cf9b
 800ccc0:	0800cfe1 	.word	0x0800cfe1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ccc4:	2108      	movs	r1, #8
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fa50 	bl	800d16c <USBH_Get_DevDesc>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d130      	bne.n	800cd38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7919      	ldrb	r1, [r3, #4]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ccfa:	b292      	uxth	r2, r2
 800ccfc:	9202      	str	r2, [sp, #8]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	4603      	mov	r3, r0
 800cd06:	2280      	movs	r2, #128	; 0x80
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 f865 	bl	800ddd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7959      	ldrb	r1, [r3, #5]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd22:	b292      	uxth	r2, r2
 800cd24:	9202      	str	r2, [sp, #8]
 800cd26:	2200      	movs	r2, #0
 800cd28:	9201      	str	r2, [sp, #4]
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2200      	movs	r2, #0
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 f851 	bl	800ddd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd36:	e175      	b.n	800d024 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	f040 8172 	bne.w	800d024 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd46:	3301      	adds	r3, #1
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d903      	bls.n	800cd62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	220d      	movs	r2, #13
 800cd5e:	701a      	strb	r2, [r3, #0]
      break;
 800cd60:	e160      	b.n	800d024 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	795b      	ldrb	r3, [r3, #5]
 800cd66:	4619      	mov	r1, r3
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f001 f885 	bl	800de78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	791b      	ldrb	r3, [r3, #4]
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f001 f87f 	bl	800de78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	701a      	strb	r2, [r3, #0]
      break;
 800cd80:	e150      	b.n	800d024 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cd82:	2112      	movs	r1, #18
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f9f1 	bl	800d16c <USBH_Get_DevDesc>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd8e:	7bbb      	ldrb	r3, [r7, #14]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d103      	bne.n	800cd9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd9a:	e145      	b.n	800d028 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	f040 8142 	bne.w	800d028 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdaa:	3301      	adds	r3, #1
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d903      	bls.n	800cdc6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	220d      	movs	r2, #13
 800cdc2:	701a      	strb	r2, [r3, #0]
      break;
 800cdc4:	e130      	b.n	800d028 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	795b      	ldrb	r3, [r3, #5]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 f853 	bl	800de78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	791b      	ldrb	r3, [r3, #4]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 f84d 	bl	800de78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	701a      	strb	r2, [r3, #0]
      break;
 800cdea:	e11d      	b.n	800d028 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cdec:	2101      	movs	r1, #1
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fa68 	bl	800d2c4 <USBH_SetAddress>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdf8:	7bbb      	ldrb	r3, [r7, #14]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d132      	bne.n	800ce64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cdfe:	2002      	movs	r0, #2
 800ce00:	f001 fbc2 	bl	800e588 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2203      	movs	r2, #3
 800ce10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7919      	ldrb	r1, [r3, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce26:	b292      	uxth	r2, r2
 800ce28:	9202      	str	r2, [sp, #8]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	9201      	str	r2, [sp, #4]
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	4603      	mov	r3, r0
 800ce32:	2280      	movs	r2, #128	; 0x80
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 ffcf 	bl	800ddd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7959      	ldrb	r1, [r3, #5]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	9202      	str	r2, [sp, #8]
 800ce52:	2200      	movs	r2, #0
 800ce54:	9201      	str	r2, [sp, #4]
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 ffbb 	bl	800ddd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce62:	e0e3      	b.n	800d02c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	f040 80e0 	bne.w	800d02c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	220d      	movs	r2, #13
 800ce70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	705a      	strb	r2, [r3, #1]
      break;
 800ce78:	e0d8      	b.n	800d02c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ce7a:	2109      	movs	r1, #9
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f99d 	bl	800d1bc <USBH_Get_CfgDesc>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce86:	7bbb      	ldrb	r3, [r7, #14]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d103      	bne.n	800ce94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2204      	movs	r2, #4
 800ce90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce92:	e0cd      	b.n	800d030 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	f040 80ca 	bne.w	800d030 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cea2:	3301      	adds	r3, #1
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d903      	bls.n	800cebe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	220d      	movs	r2, #13
 800ceba:	701a      	strb	r2, [r3, #0]
      break;
 800cebc:	e0b8      	b.n	800d030 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	795b      	ldrb	r3, [r3, #5]
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 ffd7 	bl	800de78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	791b      	ldrb	r3, [r3, #4]
 800cece:	4619      	mov	r1, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 ffd1 	bl	800de78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	701a      	strb	r2, [r3, #0]
      break;
 800cee2:	e0a5      	b.n	800d030 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f965 	bl	800d1bc <USBH_Get_CfgDesc>
 800cef2:	4603      	mov	r3, r0
 800cef4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d103      	bne.n	800cf04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2205      	movs	r2, #5
 800cf00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf02:	e097      	b.n	800d034 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	f040 8094 	bne.w	800d034 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf12:	3301      	adds	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d903      	bls.n	800cf2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	220d      	movs	r2, #13
 800cf2a:	701a      	strb	r2, [r3, #0]
      break;
 800cf2c:	e082      	b.n	800d034 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	795b      	ldrb	r3, [r3, #5]
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 ff9f 	bl	800de78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	791b      	ldrb	r3, [r3, #4]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 ff99 	bl	800de78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	701a      	strb	r2, [r3, #0]
      break;
 800cf52:	e06f      	b.n	800d034 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d019      	beq.n	800cf92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cf6a:	23ff      	movs	r3, #255	; 0xff
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f949 	bl	800d204 <USBH_Get_StringDesc>
 800cf72:	4603      	mov	r3, r0
 800cf74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2206      	movs	r2, #6
 800cf80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cf82:	e059      	b.n	800d038 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d156      	bne.n	800d038 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2206      	movs	r2, #6
 800cf8e:	705a      	strb	r2, [r3, #1]
      break;
 800cf90:	e052      	b.n	800d038 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2206      	movs	r2, #6
 800cf96:	705a      	strb	r2, [r3, #1]
      break;
 800cf98:	e04e      	b.n	800d038 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d019      	beq.n	800cfd8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cfb0:	23ff      	movs	r3, #255	; 0xff
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f926 	bl	800d204 <USBH_Get_StringDesc>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d103      	bne.n	800cfca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2207      	movs	r2, #7
 800cfc6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cfc8:	e038      	b.n	800d03c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d135      	bne.n	800d03c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2207      	movs	r2, #7
 800cfd4:	705a      	strb	r2, [r3, #1]
      break;
 800cfd6:	e031      	b.n	800d03c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2207      	movs	r2, #7
 800cfdc:	705a      	strb	r2, [r3, #1]
      break;
 800cfde:	e02d      	b.n	800d03c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d017      	beq.n	800d01a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cff6:	23ff      	movs	r3, #255	; 0xff
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f903 	bl	800d204 <USBH_Get_StringDesc>
 800cffe:	4603      	mov	r3, r0
 800d000:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d102      	bne.n	800d00e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d00c:	e018      	b.n	800d040 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	2b03      	cmp	r3, #3
 800d012:	d115      	bne.n	800d040 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73fb      	strb	r3, [r7, #15]
      break;
 800d018:	e012      	b.n	800d040 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73fb      	strb	r3, [r7, #15]
      break;
 800d01e:	e00f      	b.n	800d040 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d020:	bf00      	nop
 800d022:	e00e      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d024:	bf00      	nop
 800d026:	e00c      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d028:	bf00      	nop
 800d02a:	e00a      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d02c:	bf00      	nop
 800d02e:	e008      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d030:	bf00      	nop
 800d032:	e006      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d034:	bf00      	nop
 800d036:	e004      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d038:	bf00      	nop
 800d03a:	e002      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d03c:	bf00      	nop
 800d03e:	e000      	b.n	800d042 <USBH_HandleEnum+0x3be>
      break;
 800d040:	bf00      	nop
  }
  return Status;
 800d042:	7bfb      	ldrb	r3, [r7, #15]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f804 	bl	800d08e <USBH_HandleSof>
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b0b      	cmp	r3, #11
 800d09e:	d10a      	bne.n	800d0b6 <USBH_HandleSof+0x28>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	4798      	blx	r3
  }
}
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d0ce:	bf00      	nop
}
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d0ea:	bf00      	nop
}
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f8a6 	bl	800e296 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	791b      	ldrb	r3, [r3, #4]
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fe91 	bl	800de78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	795b      	ldrb	r3, [r3, #5]
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fe8b 	bl	800de78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af02      	add	r7, sp, #8
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	b29b      	uxth	r3, r3
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	4613      	mov	r3, r2
 800d186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d18a:	2100      	movs	r1, #0
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f864 	bl	800d25a <USBH_GetDescriptor>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d1a8:	78fa      	ldrb	r2, [r7, #3]
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f000 f918 	bl	800d3e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	331c      	adds	r3, #28
 800d1cc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d1ce:	887b      	ldrh	r3, [r7, #2]
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1d8:	2100      	movs	r1, #0
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f83d 	bl	800d25a <USBH_GetDescriptor>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d107      	bne.n	800d1fa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d1ea:	887b      	ldrh	r3, [r7, #2]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f987 	bl	800d504 <USBH_ParseCfgDesc>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b088      	sub	sp, #32
 800d208:	af02      	add	r7, sp, #8
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	607a      	str	r2, [r7, #4]
 800d20e:	461a      	mov	r2, r3
 800d210:	460b      	mov	r3, r1
 800d212:	72fb      	strb	r3, [r7, #11]
 800d214:	4613      	mov	r3, r2
 800d216:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800d218:	7afb      	ldrb	r3, [r7, #11]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d220:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d228:	893b      	ldrh	r3, [r7, #8]
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	460b      	mov	r3, r1
 800d22e:	2100      	movs	r1, #0
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f000 f812 	bl	800d25a <USBH_GetDescriptor>
 800d236:	4603      	mov	r3, r0
 800d238:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d23a:	7dfb      	ldrb	r3, [r7, #23]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d107      	bne.n	800d250 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d246:	893a      	ldrh	r2, [r7, #8]
 800d248:	6879      	ldr	r1, [r7, #4]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fb24 	bl	800d898 <USBH_ParseStringDesc>
  }

  return status;
 800d250:	7dfb      	ldrb	r3, [r7, #23]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	607b      	str	r3, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	72fb      	strb	r3, [r7, #11]
 800d268:	4613      	mov	r3, r2
 800d26a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	789b      	ldrb	r3, [r3, #2]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d11c      	bne.n	800d2ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d274:	7afb      	ldrb	r3, [r7, #11]
 800d276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2206      	movs	r2, #6
 800d284:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	893a      	ldrh	r2, [r7, #8]
 800d28a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d28c:	893b      	ldrh	r3, [r7, #8]
 800d28e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d296:	d104      	bne.n	800d2a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f240 4209 	movw	r2, #1033	; 0x409
 800d29e:	829a      	strh	r2, [r3, #20]
 800d2a0:	e002      	b.n	800d2a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	8b3a      	ldrh	r2, [r7, #24]
 800d2ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d2ae:	8b3b      	ldrh	r3, [r7, #24]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 fb3d 	bl	800d934 <USBH_CtlReq>
 800d2ba:	4603      	mov	r3, r0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	789b      	ldrb	r3, [r3, #2]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d10f      	bne.n	800d2f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2205      	movs	r2, #5
 800d2e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d2e4:	78fb      	ldrb	r3, [r7, #3]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fb19 	bl	800d934 <USBH_CtlReq>
 800d302:	4603      	mov	r3, r0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	789b      	ldrb	r3, [r3, #2]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d10e      	bne.n	800d33e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2209      	movs	r2, #9
 800d32a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	887a      	ldrh	r2, [r7, #2]
 800d330:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d33e:	2200      	movs	r2, #0
 800d340:	2100      	movs	r1, #0
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 faf6 	bl	800d934 <USBH_CtlReq>
 800d348:	4603      	mov	r3, r0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	789b      	ldrb	r3, [r3, #2]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d10f      	bne.n	800d386 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2203      	movs	r2, #3
 800d370:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	b29a      	uxth	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d386:	2200      	movs	r2, #0
 800d388:	2100      	movs	r1, #0
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fad2 	bl	800d934 <USBH_CtlReq>
 800d390:	4603      	mov	r3, r0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	789b      	ldrb	r3, [r3, #2]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d10f      	bne.n	800d3ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2202      	movs	r2, #2
 800d3b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 faae 	bl	800d934 <USBH_CtlReq>
 800d3d8:	4603      	mov	r3, r0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	781a      	ldrb	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	785a      	ldrb	r2, [r3, #1]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	3302      	adds	r3, #2
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b29a      	uxth	r2, r3
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	3303      	adds	r3, #3
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	021b      	lsls	r3, r3, #8
 800d412:	b29b      	uxth	r3, r3
 800d414:	4313      	orrs	r3, r2
 800d416:	b29a      	uxth	r2, r3
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	791a      	ldrb	r2, [r3, #4]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	795a      	ldrb	r2, [r3, #5]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	799a      	ldrb	r2, [r3, #6]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	79da      	ldrb	r2, [r3, #7]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	79db      	ldrb	r3, [r3, #7]
 800d440:	2b20      	cmp	r3, #32
 800d442:	dc11      	bgt.n	800d468 <USBH_ParseDevDesc+0x86>
 800d444:	2b08      	cmp	r3, #8
 800d446:	db16      	blt.n	800d476 <USBH_ParseDevDesc+0x94>
 800d448:	3b08      	subs	r3, #8
 800d44a:	2201      	movs	r2, #1
 800d44c:	fa02 f303 	lsl.w	r3, r2, r3
 800d450:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	bf14      	ite	ne
 800d45c:	2301      	movne	r3, #1
 800d45e:	2300      	moveq	r3, #0
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <USBH_ParseDevDesc+0x8a>
 800d466:	e006      	b.n	800d476 <USBH_ParseDevDesc+0x94>
 800d468:	2b40      	cmp	r3, #64	; 0x40
 800d46a:	d104      	bne.n	800d476 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	79da      	ldrb	r2, [r3, #7]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	71da      	strb	r2, [r3, #7]
      break;
 800d474:	e003      	b.n	800d47e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2240      	movs	r2, #64	; 0x40
 800d47a:	71da      	strb	r2, [r3, #7]
      break;
 800d47c:	bf00      	nop
  }

  if (length > 8U)
 800d47e:	88fb      	ldrh	r3, [r7, #6]
 800d480:	2b08      	cmp	r3, #8
 800d482:	d939      	bls.n	800d4f8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	3308      	adds	r3, #8
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	3309      	adds	r3, #9
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	b29b      	uxth	r3, r3
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	b29b      	uxth	r3, r3
 800d498:	4313      	orrs	r3, r2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	330a      	adds	r3, #10
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	330b      	adds	r3, #11
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	330c      	adds	r3, #12
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	330d      	adds	r3, #13
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	021b      	lsls	r3, r3, #8
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	7b9a      	ldrb	r2, [r3, #14]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	7bda      	ldrb	r2, [r3, #15]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	7c1a      	ldrb	r2, [r3, #16]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	7c5a      	ldrb	r2, [r3, #17]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	745a      	strb	r2, [r3, #17]
  }
}
 800d4f8:	bf00      	nop
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08c      	sub	sp, #48	; 0x30
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d518:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d524:	2300      	movs	r3, #0
 800d526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d52a:	2300      	movs	r3, #0
 800d52c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	781a      	ldrb	r2, [r3, #0]
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	785a      	ldrb	r2, [r3, #1]
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	3302      	adds	r3, #2
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	3303      	adds	r3, #3
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	b29b      	uxth	r3, r3
 800d554:	021b      	lsls	r3, r3, #8
 800d556:	b29b      	uxth	r3, r3
 800d558:	4313      	orrs	r3, r2
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d560:	bf28      	it	cs
 800d562:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d566:	b29a      	uxth	r2, r3
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	791a      	ldrb	r2, [r3, #4]
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	795a      	ldrb	r2, [r3, #5]
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	799a      	ldrb	r2, [r3, #6]
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	79da      	ldrb	r2, [r3, #7]
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	7a1a      	ldrb	r2, [r3, #8]
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b09      	cmp	r3, #9
 800d59a:	d002      	beq.n	800d5a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	2209      	movs	r2, #9
 800d5a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d5a2:	88fb      	ldrh	r3, [r7, #6]
 800d5a4:	2b09      	cmp	r3, #9
 800d5a6:	f240 809d 	bls.w	800d6e4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5aa:	2309      	movs	r3, #9
 800d5ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5b2:	e081      	b.n	800d6b8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5b4:	f107 0316 	add.w	r3, r7, #22
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5bc:	f000 f99f 	bl	800d8fe <USBH_GetNextDesc>
 800d5c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d176      	bne.n	800d6b8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	2b09      	cmp	r3, #9
 800d5d0:	d002      	beq.n	800d5d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	2209      	movs	r2, #9
 800d5d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5dc:	221a      	movs	r2, #26
 800d5de:	fb02 f303 	mul.w	r3, r2, r3
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	6a3a      	ldr	r2, [r7, #32]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5ee:	69f8      	ldr	r0, [r7, #28]
 800d5f0:	f000 f87e 	bl	800d6f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d5fe:	e043      	b.n	800d688 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d600:	f107 0316 	add.w	r3, r7, #22
 800d604:	4619      	mov	r1, r3
 800d606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d608:	f000 f979 	bl	800d8fe <USBH_GetNextDesc>
 800d60c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	785b      	ldrb	r3, [r3, #1]
 800d612:	2b05      	cmp	r3, #5
 800d614:	d138      	bne.n	800d688 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	795b      	ldrb	r3, [r3, #5]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d10f      	bne.n	800d63e <USBH_ParseCfgDesc+0x13a>
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	799b      	ldrb	r3, [r3, #6]
 800d622:	2b02      	cmp	r3, #2
 800d624:	d10b      	bne.n	800d63e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	79db      	ldrb	r3, [r3, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10f      	bne.n	800d64e <USBH_ParseCfgDesc+0x14a>
 800d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b09      	cmp	r3, #9
 800d634:	d00b      	beq.n	800d64e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d638:	2209      	movs	r2, #9
 800d63a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d63c:	e007      	b.n	800d64e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b07      	cmp	r3, #7
 800d644:	d004      	beq.n	800d650 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	2207      	movs	r2, #7
 800d64a:	701a      	strb	r2, [r3, #0]
 800d64c:	e000      	b.n	800d650 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d64e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d654:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d658:	3201      	adds	r2, #1
 800d65a:	00d2      	lsls	r2, r2, #3
 800d65c:	211a      	movs	r1, #26
 800d65e:	fb01 f303 	mul.w	r3, r1, r3
 800d662:	4413      	add	r3, r2
 800d664:	3308      	adds	r3, #8
 800d666:	6a3a      	ldr	r2, [r7, #32]
 800d668:	4413      	add	r3, r2
 800d66a:	3304      	adds	r3, #4
 800d66c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d670:	69b9      	ldr	r1, [r7, #24]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f86b 	bl	800d74e <USBH_ParseEPDesc>
 800d678:	4603      	mov	r3, r0
 800d67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d67e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d682:	3301      	adds	r3, #1
 800d684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	791b      	ldrb	r3, [r3, #4]
 800d68c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d690:	429a      	cmp	r2, r3
 800d692:	d204      	bcs.n	800d69e <USBH_ParseCfgDesc+0x19a>
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	885a      	ldrh	r2, [r3, #2]
 800d698:	8afb      	ldrh	r3, [r7, #22]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d8b0      	bhi.n	800d600 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	791b      	ldrb	r3, [r3, #4]
 800d6a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d201      	bcs.n	800d6ae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e01c      	b.n	800d6e8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d805      	bhi.n	800d6cc <USBH_ParseCfgDesc+0x1c8>
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	885a      	ldrh	r2, [r3, #2]
 800d6c4:	8afb      	ldrh	r3, [r7, #22]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	f63f af74 	bhi.w	800d5b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	791b      	ldrb	r3, [r3, #4]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	bf28      	it	cs
 800d6d4:	2302      	movcs	r3, #2
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d201      	bcs.n	800d6e4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e001      	b.n	800d6e8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3730      	adds	r7, #48	; 0x30
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	781a      	ldrb	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	785a      	ldrb	r2, [r3, #1]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	789a      	ldrb	r2, [r3, #2]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	78da      	ldrb	r2, [r3, #3]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	791a      	ldrb	r2, [r3, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	795a      	ldrb	r2, [r3, #5]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	799a      	ldrb	r2, [r3, #6]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	79da      	ldrb	r2, [r3, #7]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	7a1a      	ldrb	r2, [r3, #8]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	721a      	strb	r2, [r3, #8]
}
 800d742:	bf00      	nop
 800d744:	370c      	adds	r7, #12
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d74e:	b480      	push	{r7}
 800d750:	b087      	sub	sp, #28
 800d752:	af00      	add	r7, sp, #0
 800d754:	60f8      	str	r0, [r7, #12]
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	785a      	ldrb	r2, [r3, #1]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	789a      	ldrb	r2, [r3, #2]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	78da      	ldrb	r2, [r3, #3]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3304      	adds	r3, #4
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	b29a      	uxth	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	3305      	adds	r3, #5
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	021b      	lsls	r3, r3, #8
 800d790:	b29b      	uxth	r3, r3
 800d792:	4313      	orrs	r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	799a      	ldrb	r2, [r3, #6]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	889b      	ldrh	r3, [r3, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	75fb      	strb	r3, [r7, #23]
 800d7ae:	e033      	b.n	800d818 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	889b      	ldrh	r3, [r3, #4]
 800d7b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d7b8:	f023 0307 	bic.w	r3, r3, #7
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	889b      	ldrh	r3, [r3, #4]
 800d7c6:	b21a      	sxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	b299      	uxth	r1, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3305      	adds	r3, #5
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	021b      	lsls	r3, r3, #8
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	430b      	orrs	r3, r1
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d110      	bne.n	800d80a <USBH_ParseEPDesc+0xbc>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b299      	uxth	r1, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3305      	adds	r3, #5
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	021b      	lsls	r3, r3, #8
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	430b      	orrs	r3, r1
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	b21b      	sxth	r3, r3
 800d802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d806:	b21b      	sxth	r3, r3
 800d808:	e001      	b.n	800d80e <USBH_ParseEPDesc+0xc0>
 800d80a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d80e:	4313      	orrs	r3, r2
 800d810:	b21b      	sxth	r3, r3
 800d812:	b29a      	uxth	r2, r3
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d116      	bne.n	800d850 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	78db      	ldrb	r3, [r3, #3]
 800d826:	f003 0303 	and.w	r3, r3, #3
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d005      	beq.n	800d83a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	78db      	ldrb	r3, [r3, #3]
 800d832:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d836:	2b03      	cmp	r3, #3
 800d838:	d127      	bne.n	800d88a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	799b      	ldrb	r3, [r3, #6]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <USBH_ParseEPDesc+0xfc>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	799b      	ldrb	r3, [r3, #6]
 800d846:	2b10      	cmp	r3, #16
 800d848:	d91f      	bls.n	800d88a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d84a:	2303      	movs	r3, #3
 800d84c:	75fb      	strb	r3, [r7, #23]
 800d84e:	e01c      	b.n	800d88a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	78db      	ldrb	r3, [r3, #3]
 800d854:	f003 0303 	and.w	r3, r3, #3
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d10a      	bne.n	800d872 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	799b      	ldrb	r3, [r3, #6]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <USBH_ParseEPDesc+0x11e>
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	799b      	ldrb	r3, [r3, #6]
 800d868:	2b10      	cmp	r3, #16
 800d86a:	d90e      	bls.n	800d88a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d86c:	2303      	movs	r3, #3
 800d86e:	75fb      	strb	r3, [r7, #23]
 800d870:	e00b      	b.n	800d88a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	78db      	ldrb	r3, [r3, #3]
 800d876:	f003 0303 	and.w	r3, r3, #3
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d105      	bne.n	800d88a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	799b      	ldrb	r3, [r3, #6]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d886:	2303      	movs	r3, #3
 800d888:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	371c      	adds	r7, #28
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d898:	b480      	push	{r7}
 800d89a:	b087      	sub	sp, #28
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d120      	bne.n	800d8f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	1e9a      	subs	r2, r3, #2
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	bf28      	it	cs
 800d8bc:	4613      	movcs	r3, r2
 800d8be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3302      	adds	r3, #2
 800d8c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	82fb      	strh	r3, [r7, #22]
 800d8ca:	e00b      	b.n	800d8e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d8cc:	8afb      	ldrh	r3, [r7, #22]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	781a      	ldrb	r2, [r3, #0]
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d8de:	8afb      	ldrh	r3, [r7, #22]
 800d8e0:	3302      	adds	r3, #2
 800d8e2:	82fb      	strh	r3, [r7, #22]
 800d8e4:	8afa      	ldrh	r2, [r7, #22]
 800d8e6:	8abb      	ldrh	r3, [r7, #20]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d3ef      	bcc.n	800d8cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	701a      	strb	r2, [r3, #0]
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b085      	sub	sp, #20
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	881a      	ldrh	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	b29b      	uxth	r3, r3
 800d912:	4413      	add	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4413      	add	r3, r2
 800d924:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d926:	68fb      	ldr	r3, [r7, #12]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	4613      	mov	r3, r2
 800d940:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d942:	2301      	movs	r3, #1
 800d944:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	789b      	ldrb	r3, [r3, #2]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d002      	beq.n	800d954 <USBH_CtlReq+0x20>
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d00f      	beq.n	800d972 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d952:	e027      	b.n	800d9a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	88fa      	ldrh	r2, [r7, #6]
 800d95e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2201      	movs	r2, #1
 800d964:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2202      	movs	r2, #2
 800d96a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d96c:	2301      	movs	r3, #1
 800d96e:	75fb      	strb	r3, [r7, #23]
      break;
 800d970:	e018      	b.n	800d9a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 f81c 	bl	800d9b0 <USBH_HandleControl>
 800d978:	4603      	mov	r3, r0
 800d97a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d002      	beq.n	800d988 <USBH_CtlReq+0x54>
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d106      	bne.n	800d996 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	761a      	strb	r2, [r3, #24]
      break;
 800d994:	e005      	b.n	800d9a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d102      	bne.n	800d9a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	709a      	strb	r2, [r3, #2]
      break;
 800d9a2:	bf00      	nop
  }
  return status;
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af02      	add	r7, sp, #8
 800d9b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7e1b      	ldrb	r3, [r3, #24]
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	2b0a      	cmp	r3, #10
 800d9c8:	f200 8156 	bhi.w	800dc78 <USBH_HandleControl+0x2c8>
 800d9cc:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <USBH_HandleControl+0x24>)
 800d9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d2:	bf00      	nop
 800d9d4:	0800da01 	.word	0x0800da01
 800d9d8:	0800da1b 	.word	0x0800da1b
 800d9dc:	0800da85 	.word	0x0800da85
 800d9e0:	0800daab 	.word	0x0800daab
 800d9e4:	0800dae3 	.word	0x0800dae3
 800d9e8:	0800db0d 	.word	0x0800db0d
 800d9ec:	0800db5f 	.word	0x0800db5f
 800d9f0:	0800db81 	.word	0x0800db81
 800d9f4:	0800dbbd 	.word	0x0800dbbd
 800d9f8:	0800dbe3 	.word	0x0800dbe3
 800d9fc:	0800dc21 	.word	0x0800dc21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f103 0110 	add.w	r1, r3, #16
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	795b      	ldrb	r3, [r3, #5]
 800da0a:	461a      	mov	r2, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f943 	bl	800dc98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2202      	movs	r2, #2
 800da16:	761a      	strb	r2, [r3, #24]
      break;
 800da18:	e139      	b.n	800dc8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	795b      	ldrb	r3, [r3, #5]
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fd27 	bl	800e474 <USBH_LL_GetURBState>
 800da26:	4603      	mov	r3, r0
 800da28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800da2a:	7bbb      	ldrb	r3, [r7, #14]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d11e      	bne.n	800da6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	7c1b      	ldrb	r3, [r3, #16]
 800da34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	8adb      	ldrh	r3, [r3, #22]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00a      	beq.n	800da58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800da42:	7b7b      	ldrb	r3, [r7, #13]
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d103      	bne.n	800da50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2203      	movs	r2, #3
 800da4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800da4e:	e115      	b.n	800dc7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2205      	movs	r2, #5
 800da54:	761a      	strb	r2, [r3, #24]
      break;
 800da56:	e111      	b.n	800dc7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800da58:	7b7b      	ldrb	r3, [r7, #13]
 800da5a:	2b80      	cmp	r3, #128	; 0x80
 800da5c:	d103      	bne.n	800da66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2209      	movs	r2, #9
 800da62:	761a      	strb	r2, [r3, #24]
      break;
 800da64:	e10a      	b.n	800dc7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2207      	movs	r2, #7
 800da6a:	761a      	strb	r2, [r3, #24]
      break;
 800da6c:	e106      	b.n	800dc7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	2b04      	cmp	r3, #4
 800da72:	d003      	beq.n	800da7c <USBH_HandleControl+0xcc>
 800da74:	7bbb      	ldrb	r3, [r7, #14]
 800da76:	2b02      	cmp	r3, #2
 800da78:	f040 8100 	bne.w	800dc7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	220b      	movs	r2, #11
 800da80:	761a      	strb	r2, [r3, #24]
      break;
 800da82:	e0fb      	b.n	800dc7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6899      	ldr	r1, [r3, #8]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	899a      	ldrh	r2, [r3, #12]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	791b      	ldrb	r3, [r3, #4]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f93a 	bl	800dd16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2204      	movs	r2, #4
 800daa6:	761a      	strb	r2, [r3, #24]
      break;
 800daa8:	e0f1      	b.n	800dc8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fcdf 	bl	800e474 <USBH_LL_GetURBState>
 800dab6:	4603      	mov	r3, r0
 800dab8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d102      	bne.n	800dac6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2209      	movs	r2, #9
 800dac4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dac6:	7bbb      	ldrb	r3, [r7, #14]
 800dac8:	2b05      	cmp	r3, #5
 800daca:	d102      	bne.n	800dad2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dacc:	2303      	movs	r3, #3
 800dace:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dad0:	e0d6      	b.n	800dc80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dad2:	7bbb      	ldrb	r3, [r7, #14]
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	f040 80d3 	bne.w	800dc80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	220b      	movs	r2, #11
 800dade:	761a      	strb	r2, [r3, #24]
      break;
 800dae0:	e0ce      	b.n	800dc80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6899      	ldr	r1, [r3, #8]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	899a      	ldrh	r2, [r3, #12]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	795b      	ldrb	r3, [r3, #5]
 800daee:	2001      	movs	r0, #1
 800daf0:	9000      	str	r0, [sp, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f8ea 	bl	800dccc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2206      	movs	r2, #6
 800db08:	761a      	strb	r2, [r3, #24]
      break;
 800db0a:	e0c0      	b.n	800dc8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	795b      	ldrb	r3, [r3, #5]
 800db10:	4619      	mov	r1, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fcae 	bl	800e474 <USBH_LL_GetURBState>
 800db18:	4603      	mov	r3, r0
 800db1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d103      	bne.n	800db2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2207      	movs	r2, #7
 800db26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db28:	e0ac      	b.n	800dc84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	2b05      	cmp	r3, #5
 800db2e:	d105      	bne.n	800db3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	220c      	movs	r2, #12
 800db34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800db36:	2303      	movs	r3, #3
 800db38:	73fb      	strb	r3, [r7, #15]
      break;
 800db3a:	e0a3      	b.n	800dc84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d103      	bne.n	800db4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2205      	movs	r2, #5
 800db46:	761a      	strb	r2, [r3, #24]
      break;
 800db48:	e09c      	b.n	800dc84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	f040 8099 	bne.w	800dc84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	220b      	movs	r2, #11
 800db56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800db58:	2302      	movs	r3, #2
 800db5a:	73fb      	strb	r3, [r7, #15]
      break;
 800db5c:	e092      	b.n	800dc84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	791b      	ldrb	r3, [r3, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	2100      	movs	r1, #0
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f8d5 	bl	800dd16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2208      	movs	r2, #8
 800db7c:	761a      	strb	r2, [r3, #24]

      break;
 800db7e:	e086      	b.n	800dc8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	791b      	ldrb	r3, [r3, #4]
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 fc74 	bl	800e474 <USBH_LL_GetURBState>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db90:	7bbb      	ldrb	r3, [r7, #14]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d105      	bne.n	800dba2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	220d      	movs	r2, #13
 800db9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dba0:	e072      	b.n	800dc88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dba2:	7bbb      	ldrb	r3, [r7, #14]
 800dba4:	2b04      	cmp	r3, #4
 800dba6:	d103      	bne.n	800dbb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	220b      	movs	r2, #11
 800dbac:	761a      	strb	r2, [r3, #24]
      break;
 800dbae:	e06b      	b.n	800dc88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	d168      	bne.n	800dc88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800dbba:	e065      	b.n	800dc88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	795b      	ldrb	r3, [r3, #5]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	9200      	str	r2, [sp, #0]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f87f 	bl	800dccc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	220a      	movs	r2, #10
 800dbde:	761a      	strb	r2, [r3, #24]
      break;
 800dbe0:	e055      	b.n	800dc8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	795b      	ldrb	r3, [r3, #5]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fc43 	bl	800e474 <USBH_LL_GetURBState>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d105      	bne.n	800dc04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	220d      	movs	r2, #13
 800dc00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc02:	e043      	b.n	800dc8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dc04:	7bbb      	ldrb	r3, [r7, #14]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d103      	bne.n	800dc12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2209      	movs	r2, #9
 800dc0e:	761a      	strb	r2, [r3, #24]
      break;
 800dc10:	e03c      	b.n	800dc8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800dc12:	7bbb      	ldrb	r3, [r7, #14]
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d139      	bne.n	800dc8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	220b      	movs	r2, #11
 800dc1c:	761a      	strb	r2, [r3, #24]
      break;
 800dc1e:	e035      	b.n	800dc8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	7e5b      	ldrb	r3, [r3, #25]
 800dc24:	3301      	adds	r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	765a      	strb	r2, [r3, #25]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7e5b      	ldrb	r3, [r3, #25]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d806      	bhi.n	800dc42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dc40:	e025      	b.n	800dc8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc48:	2106      	movs	r1, #6
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	795b      	ldrb	r3, [r3, #5]
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f90c 	bl	800de78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	791b      	ldrb	r3, [r3, #4]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f906 	bl	800de78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dc72:	2302      	movs	r3, #2
 800dc74:	73fb      	strb	r3, [r7, #15]
      break;
 800dc76:	e00a      	b.n	800dc8e <USBH_HandleControl+0x2de>

    default:
      break;
 800dc78:	bf00      	nop
 800dc7a:	e008      	b.n	800dc8e <USBH_HandleControl+0x2de>
      break;
 800dc7c:	bf00      	nop
 800dc7e:	e006      	b.n	800dc8e <USBH_HandleControl+0x2de>
      break;
 800dc80:	bf00      	nop
 800dc82:	e004      	b.n	800dc8e <USBH_HandleControl+0x2de>
      break;
 800dc84:	bf00      	nop
 800dc86:	e002      	b.n	800dc8e <USBH_HandleControl+0x2de>
      break;
 800dc88:	bf00      	nop
 800dc8a:	e000      	b.n	800dc8e <USBH_HandleControl+0x2de>
      break;
 800dc8c:	bf00      	nop
  }

  return status;
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dca6:	79f9      	ldrb	r1, [r7, #7]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9303      	str	r3, [sp, #12]
 800dcac:	2308      	movs	r3, #8
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	2200      	movs	r2, #0
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f000 fba8 	bl	800e412 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af04      	add	r7, sp, #16
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	460b      	mov	r3, r1
 800dcdc:	80fb      	strh	r3, [r7, #6]
 800dcde:	4613      	mov	r3, r2
 800dce0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dcec:	2300      	movs	r3, #0
 800dcee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dcf0:	7979      	ldrb	r1, [r7, #5]
 800dcf2:	7e3b      	ldrb	r3, [r7, #24]
 800dcf4:	9303      	str	r3, [sp, #12]
 800dcf6:	88fb      	ldrh	r3, [r7, #6]
 800dcf8:	9302      	str	r3, [sp, #8]
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	2301      	movs	r3, #1
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	2300      	movs	r3, #0
 800dd04:	2200      	movs	r2, #0
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f000 fb83 	bl	800e412 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b088      	sub	sp, #32
 800dd1a:	af04      	add	r7, sp, #16
 800dd1c:	60f8      	str	r0, [r7, #12]
 800dd1e:	60b9      	str	r1, [r7, #8]
 800dd20:	4611      	mov	r1, r2
 800dd22:	461a      	mov	r2, r3
 800dd24:	460b      	mov	r3, r1
 800dd26:	80fb      	strh	r3, [r7, #6]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dd2c:	7979      	ldrb	r1, [r7, #5]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	9303      	str	r3, [sp, #12]
 800dd32:	88fb      	ldrh	r3, [r7, #6]
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2201      	movs	r2, #1
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f000 fb65 	bl	800e412 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dd48:	2300      	movs	r3, #0

}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b088      	sub	sp, #32
 800dd56:	af04      	add	r7, sp, #16
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	460b      	mov	r3, r1
 800dd62:	80fb      	strh	r3, [r7, #6]
 800dd64:	4613      	mov	r3, r2
 800dd66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dd72:	2300      	movs	r3, #0
 800dd74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dd76:	7979      	ldrb	r1, [r7, #5]
 800dd78:	7e3b      	ldrb	r3, [r7, #24]
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	9302      	str	r3, [sp, #8]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	9301      	str	r3, [sp, #4]
 800dd84:	2301      	movs	r3, #1
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	2302      	movs	r3, #2
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f000 fb40 	bl	800e412 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af04      	add	r7, sp, #16
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	4611      	mov	r1, r2
 800dda8:	461a      	mov	r2, r3
 800ddaa:	460b      	mov	r3, r1
 800ddac:	80fb      	strh	r3, [r7, #6]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ddb2:	7979      	ldrb	r1, [r7, #5]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	9303      	str	r3, [sp, #12]
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f000 fb22 	bl	800e412 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	4608      	mov	r0, r1
 800dde2:	4611      	mov	r1, r2
 800dde4:	461a      	mov	r2, r3
 800dde6:	4603      	mov	r3, r0
 800dde8:	70fb      	strb	r3, [r7, #3]
 800ddea:	460b      	mov	r3, r1
 800ddec:	70bb      	strb	r3, [r7, #2]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ddf2:	7878      	ldrb	r0, [r7, #1]
 800ddf4:	78ba      	ldrb	r2, [r7, #2]
 800ddf6:	78f9      	ldrb	r1, [r7, #3]
 800ddf8:	8b3b      	ldrh	r3, [r7, #24]
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	7d3b      	ldrb	r3, [r7, #20]
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	7c3b      	ldrb	r3, [r7, #16]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	4603      	mov	r3, r0
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fab5 	bl	800e376 <USBH_LL_OpenPipe>

  return USBH_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	460b      	mov	r3, r1
 800de20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800de22:	78fb      	ldrb	r3, [r7, #3]
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fad4 	bl	800e3d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	460b      	mov	r3, r1
 800de40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f836 	bl	800deb4 <USBH_GetFreePipe>
 800de48:	4603      	mov	r3, r0
 800de4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800de4c:	89fb      	ldrh	r3, [r7, #14]
 800de4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de52:	4293      	cmp	r3, r2
 800de54:	d00a      	beq.n	800de6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	33e0      	adds	r3, #224	; 0xe0
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	440b      	add	r3, r1
 800de6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800de6c:	89fb      	ldrh	r3, [r7, #14]
 800de6e:	b2db      	uxtb	r3, r3
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800de84:	78fb      	ldrb	r3, [r7, #3]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d80d      	bhi.n	800dea6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800de8a:	78fb      	ldrb	r3, [r7, #3]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	33e0      	adds	r3, #224	; 0xe0
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	78fb      	ldrb	r3, [r7, #3]
 800de98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	33e0      	adds	r3, #224	; 0xe0
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	440b      	add	r3, r1
 800dea4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800dec0:	2300      	movs	r3, #0
 800dec2:	73fb      	strb	r3, [r7, #15]
 800dec4:	e00f      	b.n	800dee6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	33e0      	adds	r3, #224	; 0xe0
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d102      	bne.n	800dee0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800deda:	7bfb      	ldrb	r3, [r7, #15]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	e007      	b.n	800def0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	3301      	adds	r3, #1
 800dee4:	73fb      	strb	r3, [r7, #15]
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	2b0f      	cmp	r3, #15
 800deea:	d9ec      	bls.n	800dec6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800deec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800defc:	b480      	push	{r7}
 800defe:	b087      	sub	sp, #28
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df0a:	2301      	movs	r3, #1
 800df0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df12:	4b1f      	ldr	r3, [pc, #124]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df14:	7a5b      	ldrb	r3, [r3, #9]
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d131      	bne.n	800df80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df1c:	4b1c      	ldr	r3, [pc, #112]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df1e:	7a5b      	ldrb	r3, [r3, #9]
 800df20:	b2db      	uxtb	r3, r3
 800df22:	461a      	mov	r2, r3
 800df24:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df26:	2100      	movs	r1, #0
 800df28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df2a:	4b19      	ldr	r3, [pc, #100]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df2c:	7a5b      	ldrb	r3, [r3, #9]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	4a17      	ldr	r2, [pc, #92]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df3a:	4b15      	ldr	r3, [pc, #84]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df3c:	7a5b      	ldrb	r3, [r3, #9]
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	461a      	mov	r2, r3
 800df42:	4b13      	ldr	r3, [pc, #76]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df44:	4413      	add	r3, r2
 800df46:	79fa      	ldrb	r2, [r7, #7]
 800df48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df4a:	4b11      	ldr	r3, [pc, #68]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df4c:	7a5b      	ldrb	r3, [r3, #9]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	b2d1      	uxtb	r1, r2
 800df54:	4a0e      	ldr	r2, [pc, #56]	; (800df90 <FATFS_LinkDriverEx+0x94>)
 800df56:	7251      	strb	r1, [r2, #9]
 800df58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df5a:	7dbb      	ldrb	r3, [r7, #22]
 800df5c:	3330      	adds	r3, #48	; 0x30
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	3301      	adds	r3, #1
 800df68:	223a      	movs	r2, #58	; 0x3a
 800df6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	3302      	adds	r3, #2
 800df70:	222f      	movs	r2, #47	; 0x2f
 800df72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	3303      	adds	r3, #3
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df80:	7dfb      	ldrb	r3, [r7, #23]
}
 800df82:	4618      	mov	r0, r3
 800df84:	371c      	adds	r7, #28
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	2000344c 	.word	0x2000344c

0800df94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df9e:	2200      	movs	r2, #0
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff ffaa 	bl	800defc <FATFS_LinkDriverEx>
 800dfa8:	4603      	mov	r3, r0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
	...

0800dfb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	490e      	ldr	r1, [pc, #56]	; (800dff4 <MX_USB_HOST_Init+0x40>)
 800dfbc:	480e      	ldr	r0, [pc, #56]	; (800dff8 <MX_USB_HOST_Init+0x44>)
 800dfbe:	f7fe fb4b 	bl	800c658 <USBH_Init>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dfc8:	f7f4 fb1c 	bl	8002604 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800dfcc:	490b      	ldr	r1, [pc, #44]	; (800dffc <MX_USB_HOST_Init+0x48>)
 800dfce:	480a      	ldr	r0, [pc, #40]	; (800dff8 <MX_USB_HOST_Init+0x44>)
 800dfd0:	f7fe fbd0 	bl	800c774 <USBH_RegisterClass>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dfda:	f7f4 fb13 	bl	8002604 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800dfde:	4806      	ldr	r0, [pc, #24]	; (800dff8 <MX_USB_HOST_Init+0x44>)
 800dfe0:	f7fe fc54 	bl	800c88c <USBH_Start>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dfea:	f7f4 fb0b 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dfee:	bf00      	nop
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	0800e015 	.word	0x0800e015
 800dff8:	20003458 	.word	0x20003458
 800dffc:	20000010 	.word	0x20000010

0800e000 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800e004:	4802      	ldr	r0, [pc, #8]	; (800e010 <MX_USB_HOST_Process+0x10>)
 800e006:	f7fe fc51 	bl	800c8ac <USBH_Process>
}
 800e00a:	bf00      	nop
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20003458 	.word	0x20003458

0800e014 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	3b01      	subs	r3, #1
 800e024:	2b04      	cmp	r3, #4
 800e026:	d819      	bhi.n	800e05c <USBH_UserProcess+0x48>
 800e028:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <USBH_UserProcess+0x1c>)
 800e02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02e:	bf00      	nop
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	0800e04d 	.word	0x0800e04d
 800e038:	0800e05d 	.word	0x0800e05d
 800e03c:	0800e055 	.word	0x0800e055
 800e040:	0800e045 	.word	0x0800e045
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e044:	4b09      	ldr	r3, [pc, #36]	; (800e06c <USBH_UserProcess+0x58>)
 800e046:	2203      	movs	r2, #3
 800e048:	701a      	strb	r2, [r3, #0]
  break;
 800e04a:	e008      	b.n	800e05e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e04c:	4b07      	ldr	r3, [pc, #28]	; (800e06c <USBH_UserProcess+0x58>)
 800e04e:	2202      	movs	r2, #2
 800e050:	701a      	strb	r2, [r3, #0]
  break;
 800e052:	e004      	b.n	800e05e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e054:	4b05      	ldr	r3, [pc, #20]	; (800e06c <USBH_UserProcess+0x58>)
 800e056:	2201      	movs	r2, #1
 800e058:	701a      	strb	r2, [r3, #0]
  break;
 800e05a:	e000      	b.n	800e05e <USBH_UserProcess+0x4a>

  default:
  break;
 800e05c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e05e:	bf00      	nop
 800e060:	370c      	adds	r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	20003830 	.word	0x20003830

0800e070 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08a      	sub	sp, #40	; 0x28
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e078:	f107 0314 	add.w	r3, r7, #20
 800e07c:	2200      	movs	r2, #0
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	605a      	str	r2, [r3, #4]
 800e082:	609a      	str	r2, [r3, #8]
 800e084:	60da      	str	r2, [r3, #12]
 800e086:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a24      	ldr	r2, [pc, #144]	; (800e120 <HAL_HCD_MspInit+0xb0>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d141      	bne.n	800e116 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]
 800e096:	4b23      	ldr	r3, [pc, #140]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09a:	4a22      	ldr	r2, [pc, #136]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e09c:	f043 0302 	orr.w	r3, r3, #2
 800e0a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e0a2:	4b20      	ldr	r3, [pc, #128]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a6:	f003 0302 	and.w	r3, r3, #2
 800e0aa:	613b      	str	r3, [r7, #16]
 800e0ac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e0ae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e0b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e0c0:	230c      	movs	r3, #12
 800e0c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0c4:	f107 0314 	add.w	r3, r7, #20
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4817      	ldr	r0, [pc, #92]	; (800e128 <HAL_HCD_MspInit+0xb8>)
 800e0cc:	f7f5 fd0a 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e0d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e0de:	f107 0314 	add.w	r3, r7, #20
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4810      	ldr	r0, [pc, #64]	; (800e128 <HAL_HCD_MspInit+0xb8>)
 800e0e6:	f7f5 fcfd 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60fb      	str	r3, [r7, #12]
 800e0ee:	4b0d      	ldr	r3, [pc, #52]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f2:	4a0c      	ldr	r2, [pc, #48]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e0f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0f8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0fa:	4b0a      	ldr	r3, [pc, #40]	; (800e124 <HAL_HCD_MspInit+0xb4>)
 800e0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e106:	2200      	movs	r2, #0
 800e108:	2100      	movs	r1, #0
 800e10a:	204d      	movs	r0, #77	; 0x4d
 800e10c:	f7f5 f91b 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e110:	204d      	movs	r0, #77	; 0x4d
 800e112:	f7f5 f934 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e116:	bf00      	nop
 800e118:	3728      	adds	r7, #40	; 0x28
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	40040000 	.word	0x40040000
 800e124:	40023800 	.word	0x40023800
 800e128:	40020400 	.word	0x40020400

0800e12c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe ff95 	bl	800d06a <USBH_LL_IncTimer>
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe ffcd 	bl	800d0f6 <USBH_LL_Connect>
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe ffd6 	bl	800d124 <USBH_LL_Disconnect>
}
 800e178:	bf00      	nop
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
 800e18c:	4613      	mov	r3, r2
 800e18e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fe ff87 	bl	800d0be <USBH_LL_PortEnabled>
}
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe ff87 	bl	800d0da <USBH_LL_PortDisabled>
}
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d132      	bne.n	800e24c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e1e6:	4a1c      	ldr	r2, [pc, #112]	; (800e258 <USBH_LL_Init+0x84>)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a19      	ldr	r2, [pc, #100]	; (800e258 <USBH_LL_Init+0x84>)
 800e1f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <USBH_LL_Init+0x84>)
 800e1f8:	4a18      	ldr	r2, [pc, #96]	; (800e25c <USBH_LL_Init+0x88>)
 800e1fa:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e1fc:	4b16      	ldr	r3, [pc, #88]	; (800e258 <USBH_LL_Init+0x84>)
 800e1fe:	220c      	movs	r2, #12
 800e200:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <USBH_LL_Init+0x84>)
 800e204:	2201      	movs	r2, #1
 800e206:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e208:	4b13      	ldr	r3, [pc, #76]	; (800e258 <USBH_LL_Init+0x84>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <USBH_LL_Init+0x84>)
 800e210:	2202      	movs	r2, #2
 800e212:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e214:	4b10      	ldr	r3, [pc, #64]	; (800e258 <USBH_LL_Init+0x84>)
 800e216:	2200      	movs	r2, #0
 800e218:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e21a:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <USBH_LL_Init+0x84>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e220:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <USBH_LL_Init+0x84>)
 800e222:	2200      	movs	r2, #0
 800e224:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e226:	4b0c      	ldr	r3, [pc, #48]	; (800e258 <USBH_LL_Init+0x84>)
 800e228:	2200      	movs	r2, #0
 800e22a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e22c:	480a      	ldr	r0, [pc, #40]	; (800e258 <USBH_LL_Init+0x84>)
 800e22e:	f7f5 fe1e 	bl	8003e6e <HAL_HCD_Init>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e238:	f7f4 f9e4 	bl	8002604 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e23c:	4806      	ldr	r0, [pc, #24]	; (800e258 <USBH_LL_Init+0x84>)
 800e23e:	f7f6 fa02 	bl	8004646 <HAL_HCD_GetCurrentFrame>
 800e242:	4603      	mov	r3, r0
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7fe ff00 	bl	800d04c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20003834 	.word	0x20003834
 800e25c:	40040000 	.word	0x40040000

0800e260 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e26c:	2300      	movs	r3, #0
 800e26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e276:	4618      	mov	r0, r3
 800e278:	f7f6 f96f 	bl	800455a <HAL_HCD_Start>
 800e27c:	4603      	mov	r3, r0
 800e27e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 f98c 	bl	800e5a0 <USBH_Get_USB_Status>
 800e288:	4603      	mov	r3, r0
 800e28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b084      	sub	sp, #16
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7f6 f977 	bl	80045a0 <HAL_HCD_Stop>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f000 f971 	bl	800e5a0 <USBH_Get_USB_Status>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f6 f9bf 	bl	8004662 <HAL_HCD_GetCurrentSpeed>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d00c      	beq.n	800e304 <USBH_LL_GetSpeed+0x38>
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d80d      	bhi.n	800e30a <USBH_LL_GetSpeed+0x3e>
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d002      	beq.n	800e2f8 <USBH_LL_GetSpeed+0x2c>
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d003      	beq.n	800e2fe <USBH_LL_GetSpeed+0x32>
 800e2f6:	e008      	b.n	800e30a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fc:	e008      	b.n	800e310 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e2fe:	2301      	movs	r3, #1
 800e300:	73fb      	strb	r3, [r7, #15]
    break;
 800e302:	e005      	b.n	800e310 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e304:	2302      	movs	r3, #2
 800e306:	73fb      	strb	r3, [r7, #15]
    break;
 800e308:	e002      	b.n	800e310 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e30a:	2301      	movs	r3, #1
 800e30c:	73fb      	strb	r3, [r7, #15]
    break;
 800e30e:	bf00      	nop
  }
  return  speed;
 800e310:	7bfb      	ldrb	r3, [r7, #15]
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b084      	sub	sp, #16
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e322:	2300      	movs	r3, #0
 800e324:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e326:	2300      	movs	r3, #0
 800e328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e330:	4618      	mov	r0, r3
 800e332:	f7f6 f952 	bl	80045da <HAL_HCD_ResetPort>
 800e336:	4603      	mov	r3, r0
 800e338:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 f92f 	bl	800e5a0 <USBH_Get_USB_Status>
 800e342:	4603      	mov	r3, r0
 800e344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e346:	7bbb      	ldrb	r3, [r7, #14]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e362:	78fa      	ldrb	r2, [r7, #3]
 800e364:	4611      	mov	r1, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f7f6 f959 	bl	800461e <HAL_HCD_HC_GetXferCount>
 800e36c:	4603      	mov	r3, r0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e376:	b590      	push	{r4, r7, lr}
 800e378:	b089      	sub	sp, #36	; 0x24
 800e37a:	af04      	add	r7, sp, #16
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	4608      	mov	r0, r1
 800e380:	4611      	mov	r1, r2
 800e382:	461a      	mov	r2, r3
 800e384:	4603      	mov	r3, r0
 800e386:	70fb      	strb	r3, [r7, #3]
 800e388:	460b      	mov	r3, r1
 800e38a:	70bb      	strb	r3, [r7, #2]
 800e38c:	4613      	mov	r3, r2
 800e38e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e39e:	787c      	ldrb	r4, [r7, #1]
 800e3a0:	78ba      	ldrb	r2, [r7, #2]
 800e3a2:	78f9      	ldrb	r1, [r7, #3]
 800e3a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3a6:	9302      	str	r3, [sp, #8]
 800e3a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4623      	mov	r3, r4
 800e3b6:	f7f5 fdbc 	bl	8003f32 <HAL_HCD_HC_Init>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 f8ed 	bl	800e5a0 <USBH_Get_USB_Status>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd90      	pop	{r4, r7, pc}

0800e3d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3ee:	78fa      	ldrb	r2, [r7, #3]
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f5 fe2c 	bl	8004050 <HAL_HCD_HC_Halt>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 f8ce 	bl	800e5a0 <USBH_Get_USB_Status>
 800e404:	4603      	mov	r3, r0
 800e406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e412:	b590      	push	{r4, r7, lr}
 800e414:	b089      	sub	sp, #36	; 0x24
 800e416:	af04      	add	r7, sp, #16
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	4608      	mov	r0, r1
 800e41c:	4611      	mov	r1, r2
 800e41e:	461a      	mov	r2, r3
 800e420:	4603      	mov	r3, r0
 800e422:	70fb      	strb	r3, [r7, #3]
 800e424:	460b      	mov	r3, r1
 800e426:	70bb      	strb	r3, [r7, #2]
 800e428:	4613      	mov	r3, r2
 800e42a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e430:	2300      	movs	r3, #0
 800e432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e43a:	787c      	ldrb	r4, [r7, #1]
 800e43c:	78ba      	ldrb	r2, [r7, #2]
 800e43e:	78f9      	ldrb	r1, [r7, #3]
 800e440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e444:	9303      	str	r3, [sp, #12]
 800e446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e448:	9302      	str	r3, [sp, #8]
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	4623      	mov	r3, r4
 800e456:	f7f5 fe1f 	bl	8004098 <HAL_HCD_HC_SubmitRequest>
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	4618      	mov	r0, r3
 800e462:	f000 f89d 	bl	800e5a0 <USBH_Get_USB_Status>
 800e466:	4603      	mov	r3, r0
 800e468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	bd90      	pop	{r4, r7, pc}

0800e474 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e486:	78fa      	ldrb	r2, [r7, #3]
 800e488:	4611      	mov	r1, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7f6 f8b3 	bl	80045f6 <HAL_HCD_HC_GetURBState>
 800e490:	4603      	mov	r3, r0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d103      	bne.n	800e4b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e4b0:	78fb      	ldrb	r3, [r7, #3]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f000 f8a0 	bl	800e5f8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e4b8:	20c8      	movs	r0, #200	; 0xc8
 800e4ba:	f7f4 fe45 	bl	8003148 <HAL_Delay>
  return USBH_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	212c      	movs	r1, #44	; 0x2c
 800e4e6:	fb01 f303 	mul.w	r3, r1, r3
 800e4ea:	4413      	add	r3, r2
 800e4ec:	333b      	adds	r3, #59	; 0x3b
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d009      	beq.n	800e508 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	212c      	movs	r1, #44	; 0x2c
 800e4fa:	fb01 f303 	mul.w	r3, r1, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	3354      	adds	r3, #84	; 0x54
 800e502:	78ba      	ldrb	r2, [r7, #2]
 800e504:	701a      	strb	r2, [r3, #0]
 800e506:	e008      	b.n	800e51a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e508:	78fb      	ldrb	r3, [r7, #3]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	212c      	movs	r1, #44	; 0x2c
 800e50e:	fb01 f303 	mul.w	r3, r1, r3
 800e512:	4413      	add	r3, r2
 800e514:	3355      	adds	r3, #85	; 0x55
 800e516:	78ba      	ldrb	r2, [r7, #2]
 800e518:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e53e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	212c      	movs	r1, #44	; 0x2c
 800e546:	fb01 f303 	mul.w	r3, r1, r3
 800e54a:	4413      	add	r3, r2
 800e54c:	333b      	adds	r3, #59	; 0x3b
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d009      	beq.n	800e568 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e554:	78fb      	ldrb	r3, [r7, #3]
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	212c      	movs	r1, #44	; 0x2c
 800e55a:	fb01 f303 	mul.w	r3, r1, r3
 800e55e:	4413      	add	r3, r2
 800e560:	3354      	adds	r3, #84	; 0x54
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	73fb      	strb	r3, [r7, #15]
 800e566:	e008      	b.n	800e57a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e568:	78fb      	ldrb	r3, [r7, #3]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	212c      	movs	r1, #44	; 0x2c
 800e56e:	fb01 f303 	mul.w	r3, r1, r3
 800e572:	4413      	add	r3, r2
 800e574:	3355      	adds	r3, #85	; 0x55
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7f4 fdd9 	bl	8003148 <HAL_Delay>
}
 800e596:	bf00      	nop
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
	...

0800e5a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d817      	bhi.n	800e5e4 <USBH_Get_USB_Status+0x44>
 800e5b4:	a201      	add	r2, pc, #4	; (adr r2, 800e5bc <USBH_Get_USB_Status+0x1c>)
 800e5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ba:	bf00      	nop
 800e5bc:	0800e5cd 	.word	0x0800e5cd
 800e5c0:	0800e5d3 	.word	0x0800e5d3
 800e5c4:	0800e5d9 	.word	0x0800e5d9
 800e5c8:	0800e5df 	.word	0x0800e5df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d0:	e00b      	b.n	800e5ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d6:	e008      	b.n	800e5ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	73fb      	strb	r3, [r7, #15]
    break;
 800e5dc:	e005      	b.n	800e5ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e5de:	2302      	movs	r3, #2
 800e5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e2:	e002      	b.n	800e5ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e8:	bf00      	nop
  }
  return usb_status;
 800e5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3714      	adds	r7, #20
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e60c:	2301      	movs	r3, #1
 800e60e:	73fb      	strb	r3, [r7, #15]
 800e610:	e001      	b.n	800e616 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e616:	7bfb      	ldrb	r3, [r7, #15]
 800e618:	461a      	mov	r2, r3
 800e61a:	2110      	movs	r1, #16
 800e61c:	4803      	ldr	r0, [pc, #12]	; (800e62c <MX_DriverVbusHS+0x34>)
 800e61e:	f7f5 fc0d 	bl	8003e3c <HAL_GPIO_WritePin>
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	40020800 	.word	0x40020800

0800e630 <atoi>:
 800e630:	220a      	movs	r2, #10
 800e632:	2100      	movs	r1, #0
 800e634:	f000 baa0 	b.w	800eb78 <strtol>

0800e638 <__errno>:
 800e638:	4b01      	ldr	r3, [pc, #4]	; (800e640 <__errno+0x8>)
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	20000030 	.word	0x20000030

0800e644 <__libc_init_array>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	4d0d      	ldr	r5, [pc, #52]	; (800e67c <__libc_init_array+0x38>)
 800e648:	4c0d      	ldr	r4, [pc, #52]	; (800e680 <__libc_init_array+0x3c>)
 800e64a:	1b64      	subs	r4, r4, r5
 800e64c:	10a4      	asrs	r4, r4, #2
 800e64e:	2600      	movs	r6, #0
 800e650:	42a6      	cmp	r6, r4
 800e652:	d109      	bne.n	800e668 <__libc_init_array+0x24>
 800e654:	4d0b      	ldr	r5, [pc, #44]	; (800e684 <__libc_init_array+0x40>)
 800e656:	4c0c      	ldr	r4, [pc, #48]	; (800e688 <__libc_init_array+0x44>)
 800e658:	f001 f91e 	bl	800f898 <_init>
 800e65c:	1b64      	subs	r4, r4, r5
 800e65e:	10a4      	asrs	r4, r4, #2
 800e660:	2600      	movs	r6, #0
 800e662:	42a6      	cmp	r6, r4
 800e664:	d105      	bne.n	800e672 <__libc_init_array+0x2e>
 800e666:	bd70      	pop	{r4, r5, r6, pc}
 800e668:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66c:	4798      	blx	r3
 800e66e:	3601      	adds	r6, #1
 800e670:	e7ee      	b.n	800e650 <__libc_init_array+0xc>
 800e672:	f855 3b04 	ldr.w	r3, [r5], #4
 800e676:	4798      	blx	r3
 800e678:	3601      	adds	r6, #1
 800e67a:	e7f2      	b.n	800e662 <__libc_init_array+0x1e>
 800e67c:	0800fe20 	.word	0x0800fe20
 800e680:	0800fe20 	.word	0x0800fe20
 800e684:	0800fe20 	.word	0x0800fe20
 800e688:	0800fe24 	.word	0x0800fe24

0800e68c <malloc>:
 800e68c:	4b02      	ldr	r3, [pc, #8]	; (800e698 <malloc+0xc>)
 800e68e:	4601      	mov	r1, r0
 800e690:	6818      	ldr	r0, [r3, #0]
 800e692:	f000 b88d 	b.w	800e7b0 <_malloc_r>
 800e696:	bf00      	nop
 800e698:	20000030 	.word	0x20000030

0800e69c <free>:
 800e69c:	4b02      	ldr	r3, [pc, #8]	; (800e6a8 <free+0xc>)
 800e69e:	4601      	mov	r1, r0
 800e6a0:	6818      	ldr	r0, [r3, #0]
 800e6a2:	f000 b819 	b.w	800e6d8 <_free_r>
 800e6a6:	bf00      	nop
 800e6a8:	20000030 	.word	0x20000030

0800e6ac <memcpy>:
 800e6ac:	440a      	add	r2, r1
 800e6ae:	4291      	cmp	r1, r2
 800e6b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e6b4:	d100      	bne.n	800e6b8 <memcpy+0xc>
 800e6b6:	4770      	bx	lr
 800e6b8:	b510      	push	{r4, lr}
 800e6ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6c2:	4291      	cmp	r1, r2
 800e6c4:	d1f9      	bne.n	800e6ba <memcpy+0xe>
 800e6c6:	bd10      	pop	{r4, pc}

0800e6c8 <memset>:
 800e6c8:	4402      	add	r2, r0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d100      	bne.n	800e6d2 <memset+0xa>
 800e6d0:	4770      	bx	lr
 800e6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e6d6:	e7f9      	b.n	800e6cc <memset+0x4>

0800e6d8 <_free_r>:
 800e6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6da:	2900      	cmp	r1, #0
 800e6dc:	d044      	beq.n	800e768 <_free_r+0x90>
 800e6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e2:	9001      	str	r0, [sp, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f1a1 0404 	sub.w	r4, r1, #4
 800e6ea:	bfb8      	it	lt
 800e6ec:	18e4      	addlt	r4, r4, r3
 800e6ee:	f000 fc6d 	bl	800efcc <__malloc_lock>
 800e6f2:	4a1e      	ldr	r2, [pc, #120]	; (800e76c <_free_r+0x94>)
 800e6f4:	9801      	ldr	r0, [sp, #4]
 800e6f6:	6813      	ldr	r3, [r2, #0]
 800e6f8:	b933      	cbnz	r3, 800e708 <_free_r+0x30>
 800e6fa:	6063      	str	r3, [r4, #4]
 800e6fc:	6014      	str	r4, [r2, #0]
 800e6fe:	b003      	add	sp, #12
 800e700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e704:	f000 bc68 	b.w	800efd8 <__malloc_unlock>
 800e708:	42a3      	cmp	r3, r4
 800e70a:	d908      	bls.n	800e71e <_free_r+0x46>
 800e70c:	6825      	ldr	r5, [r4, #0]
 800e70e:	1961      	adds	r1, r4, r5
 800e710:	428b      	cmp	r3, r1
 800e712:	bf01      	itttt	eq
 800e714:	6819      	ldreq	r1, [r3, #0]
 800e716:	685b      	ldreq	r3, [r3, #4]
 800e718:	1949      	addeq	r1, r1, r5
 800e71a:	6021      	streq	r1, [r4, #0]
 800e71c:	e7ed      	b.n	800e6fa <_free_r+0x22>
 800e71e:	461a      	mov	r2, r3
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	b10b      	cbz	r3, 800e728 <_free_r+0x50>
 800e724:	42a3      	cmp	r3, r4
 800e726:	d9fa      	bls.n	800e71e <_free_r+0x46>
 800e728:	6811      	ldr	r1, [r2, #0]
 800e72a:	1855      	adds	r5, r2, r1
 800e72c:	42a5      	cmp	r5, r4
 800e72e:	d10b      	bne.n	800e748 <_free_r+0x70>
 800e730:	6824      	ldr	r4, [r4, #0]
 800e732:	4421      	add	r1, r4
 800e734:	1854      	adds	r4, r2, r1
 800e736:	42a3      	cmp	r3, r4
 800e738:	6011      	str	r1, [r2, #0]
 800e73a:	d1e0      	bne.n	800e6fe <_free_r+0x26>
 800e73c:	681c      	ldr	r4, [r3, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	6053      	str	r3, [r2, #4]
 800e742:	4421      	add	r1, r4
 800e744:	6011      	str	r1, [r2, #0]
 800e746:	e7da      	b.n	800e6fe <_free_r+0x26>
 800e748:	d902      	bls.n	800e750 <_free_r+0x78>
 800e74a:	230c      	movs	r3, #12
 800e74c:	6003      	str	r3, [r0, #0]
 800e74e:	e7d6      	b.n	800e6fe <_free_r+0x26>
 800e750:	6825      	ldr	r5, [r4, #0]
 800e752:	1961      	adds	r1, r4, r5
 800e754:	428b      	cmp	r3, r1
 800e756:	bf04      	itt	eq
 800e758:	6819      	ldreq	r1, [r3, #0]
 800e75a:	685b      	ldreq	r3, [r3, #4]
 800e75c:	6063      	str	r3, [r4, #4]
 800e75e:	bf04      	itt	eq
 800e760:	1949      	addeq	r1, r1, r5
 800e762:	6021      	streq	r1, [r4, #0]
 800e764:	6054      	str	r4, [r2, #4]
 800e766:	e7ca      	b.n	800e6fe <_free_r+0x26>
 800e768:	b003      	add	sp, #12
 800e76a:	bd30      	pop	{r4, r5, pc}
 800e76c:	20003b38 	.word	0x20003b38

0800e770 <sbrk_aligned>:
 800e770:	b570      	push	{r4, r5, r6, lr}
 800e772:	4e0e      	ldr	r6, [pc, #56]	; (800e7ac <sbrk_aligned+0x3c>)
 800e774:	460c      	mov	r4, r1
 800e776:	6831      	ldr	r1, [r6, #0]
 800e778:	4605      	mov	r5, r0
 800e77a:	b911      	cbnz	r1, 800e782 <sbrk_aligned+0x12>
 800e77c:	f000 f8a4 	bl	800e8c8 <_sbrk_r>
 800e780:	6030      	str	r0, [r6, #0]
 800e782:	4621      	mov	r1, r4
 800e784:	4628      	mov	r0, r5
 800e786:	f000 f89f 	bl	800e8c8 <_sbrk_r>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	d00a      	beq.n	800e7a4 <sbrk_aligned+0x34>
 800e78e:	1cc4      	adds	r4, r0, #3
 800e790:	f024 0403 	bic.w	r4, r4, #3
 800e794:	42a0      	cmp	r0, r4
 800e796:	d007      	beq.n	800e7a8 <sbrk_aligned+0x38>
 800e798:	1a21      	subs	r1, r4, r0
 800e79a:	4628      	mov	r0, r5
 800e79c:	f000 f894 	bl	800e8c8 <_sbrk_r>
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	d101      	bne.n	800e7a8 <sbrk_aligned+0x38>
 800e7a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	20003b3c 	.word	0x20003b3c

0800e7b0 <_malloc_r>:
 800e7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b4:	1ccd      	adds	r5, r1, #3
 800e7b6:	f025 0503 	bic.w	r5, r5, #3
 800e7ba:	3508      	adds	r5, #8
 800e7bc:	2d0c      	cmp	r5, #12
 800e7be:	bf38      	it	cc
 800e7c0:	250c      	movcc	r5, #12
 800e7c2:	2d00      	cmp	r5, #0
 800e7c4:	4607      	mov	r7, r0
 800e7c6:	db01      	blt.n	800e7cc <_malloc_r+0x1c>
 800e7c8:	42a9      	cmp	r1, r5
 800e7ca:	d905      	bls.n	800e7d8 <_malloc_r+0x28>
 800e7cc:	230c      	movs	r3, #12
 800e7ce:	603b      	str	r3, [r7, #0]
 800e7d0:	2600      	movs	r6, #0
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d8:	4e2e      	ldr	r6, [pc, #184]	; (800e894 <_malloc_r+0xe4>)
 800e7da:	f000 fbf7 	bl	800efcc <__malloc_lock>
 800e7de:	6833      	ldr	r3, [r6, #0]
 800e7e0:	461c      	mov	r4, r3
 800e7e2:	bb34      	cbnz	r4, 800e832 <_malloc_r+0x82>
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	f7ff ffc2 	bl	800e770 <sbrk_aligned>
 800e7ec:	1c43      	adds	r3, r0, #1
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	d14d      	bne.n	800e88e <_malloc_r+0xde>
 800e7f2:	6834      	ldr	r4, [r6, #0]
 800e7f4:	4626      	mov	r6, r4
 800e7f6:	2e00      	cmp	r6, #0
 800e7f8:	d140      	bne.n	800e87c <_malloc_r+0xcc>
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4638      	mov	r0, r7
 800e800:	eb04 0803 	add.w	r8, r4, r3
 800e804:	f000 f860 	bl	800e8c8 <_sbrk_r>
 800e808:	4580      	cmp	r8, r0
 800e80a:	d13a      	bne.n	800e882 <_malloc_r+0xd2>
 800e80c:	6821      	ldr	r1, [r4, #0]
 800e80e:	3503      	adds	r5, #3
 800e810:	1a6d      	subs	r5, r5, r1
 800e812:	f025 0503 	bic.w	r5, r5, #3
 800e816:	3508      	adds	r5, #8
 800e818:	2d0c      	cmp	r5, #12
 800e81a:	bf38      	it	cc
 800e81c:	250c      	movcc	r5, #12
 800e81e:	4629      	mov	r1, r5
 800e820:	4638      	mov	r0, r7
 800e822:	f7ff ffa5 	bl	800e770 <sbrk_aligned>
 800e826:	3001      	adds	r0, #1
 800e828:	d02b      	beq.n	800e882 <_malloc_r+0xd2>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	442b      	add	r3, r5
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	e00e      	b.n	800e850 <_malloc_r+0xa0>
 800e832:	6822      	ldr	r2, [r4, #0]
 800e834:	1b52      	subs	r2, r2, r5
 800e836:	d41e      	bmi.n	800e876 <_malloc_r+0xc6>
 800e838:	2a0b      	cmp	r2, #11
 800e83a:	d916      	bls.n	800e86a <_malloc_r+0xba>
 800e83c:	1961      	adds	r1, r4, r5
 800e83e:	42a3      	cmp	r3, r4
 800e840:	6025      	str	r5, [r4, #0]
 800e842:	bf18      	it	ne
 800e844:	6059      	strne	r1, [r3, #4]
 800e846:	6863      	ldr	r3, [r4, #4]
 800e848:	bf08      	it	eq
 800e84a:	6031      	streq	r1, [r6, #0]
 800e84c:	5162      	str	r2, [r4, r5]
 800e84e:	604b      	str	r3, [r1, #4]
 800e850:	4638      	mov	r0, r7
 800e852:	f104 060b 	add.w	r6, r4, #11
 800e856:	f000 fbbf 	bl	800efd8 <__malloc_unlock>
 800e85a:	f026 0607 	bic.w	r6, r6, #7
 800e85e:	1d23      	adds	r3, r4, #4
 800e860:	1af2      	subs	r2, r6, r3
 800e862:	d0b6      	beq.n	800e7d2 <_malloc_r+0x22>
 800e864:	1b9b      	subs	r3, r3, r6
 800e866:	50a3      	str	r3, [r4, r2]
 800e868:	e7b3      	b.n	800e7d2 <_malloc_r+0x22>
 800e86a:	6862      	ldr	r2, [r4, #4]
 800e86c:	42a3      	cmp	r3, r4
 800e86e:	bf0c      	ite	eq
 800e870:	6032      	streq	r2, [r6, #0]
 800e872:	605a      	strne	r2, [r3, #4]
 800e874:	e7ec      	b.n	800e850 <_malloc_r+0xa0>
 800e876:	4623      	mov	r3, r4
 800e878:	6864      	ldr	r4, [r4, #4]
 800e87a:	e7b2      	b.n	800e7e2 <_malloc_r+0x32>
 800e87c:	4634      	mov	r4, r6
 800e87e:	6876      	ldr	r6, [r6, #4]
 800e880:	e7b9      	b.n	800e7f6 <_malloc_r+0x46>
 800e882:	230c      	movs	r3, #12
 800e884:	603b      	str	r3, [r7, #0]
 800e886:	4638      	mov	r0, r7
 800e888:	f000 fba6 	bl	800efd8 <__malloc_unlock>
 800e88c:	e7a1      	b.n	800e7d2 <_malloc_r+0x22>
 800e88e:	6025      	str	r5, [r4, #0]
 800e890:	e7de      	b.n	800e850 <_malloc_r+0xa0>
 800e892:	bf00      	nop
 800e894:	20003b38 	.word	0x20003b38

0800e898 <iprintf>:
 800e898:	b40f      	push	{r0, r1, r2, r3}
 800e89a:	4b0a      	ldr	r3, [pc, #40]	; (800e8c4 <iprintf+0x2c>)
 800e89c:	b513      	push	{r0, r1, r4, lr}
 800e89e:	681c      	ldr	r4, [r3, #0]
 800e8a0:	b124      	cbz	r4, 800e8ac <iprintf+0x14>
 800e8a2:	69a3      	ldr	r3, [r4, #24]
 800e8a4:	b913      	cbnz	r3, 800e8ac <iprintf+0x14>
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 fa8a 	bl	800edc0 <__sinit>
 800e8ac:	ab05      	add	r3, sp, #20
 800e8ae:	9a04      	ldr	r2, [sp, #16]
 800e8b0:	68a1      	ldr	r1, [r4, #8]
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f000 fbbf 	bl	800f038 <_vfiprintf_r>
 800e8ba:	b002      	add	sp, #8
 800e8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8c0:	b004      	add	sp, #16
 800e8c2:	4770      	bx	lr
 800e8c4:	20000030 	.word	0x20000030

0800e8c8 <_sbrk_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d06      	ldr	r5, [pc, #24]	; (800e8e4 <_sbrk_r+0x1c>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	602b      	str	r3, [r5, #0]
 800e8d4:	f7f4 fb54 	bl	8002f80 <_sbrk>
 800e8d8:	1c43      	adds	r3, r0, #1
 800e8da:	d102      	bne.n	800e8e2 <_sbrk_r+0x1a>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	b103      	cbz	r3, 800e8e2 <_sbrk_r+0x1a>
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	20003b44 	.word	0x20003b44

0800e8e8 <setvbuf>:
 800e8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8ec:	461d      	mov	r5, r3
 800e8ee:	4b5d      	ldr	r3, [pc, #372]	; (800ea64 <setvbuf+0x17c>)
 800e8f0:	681f      	ldr	r7, [r3, #0]
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	460e      	mov	r6, r1
 800e8f6:	4690      	mov	r8, r2
 800e8f8:	b127      	cbz	r7, 800e904 <setvbuf+0x1c>
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	b913      	cbnz	r3, 800e904 <setvbuf+0x1c>
 800e8fe:	4638      	mov	r0, r7
 800e900:	f000 fa5e 	bl	800edc0 <__sinit>
 800e904:	4b58      	ldr	r3, [pc, #352]	; (800ea68 <setvbuf+0x180>)
 800e906:	429c      	cmp	r4, r3
 800e908:	d167      	bne.n	800e9da <setvbuf+0xf2>
 800e90a:	687c      	ldr	r4, [r7, #4]
 800e90c:	f1b8 0f02 	cmp.w	r8, #2
 800e910:	d006      	beq.n	800e920 <setvbuf+0x38>
 800e912:	f1b8 0f01 	cmp.w	r8, #1
 800e916:	f200 809f 	bhi.w	800ea58 <setvbuf+0x170>
 800e91a:	2d00      	cmp	r5, #0
 800e91c:	f2c0 809c 	blt.w	800ea58 <setvbuf+0x170>
 800e920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e922:	07db      	lsls	r3, r3, #31
 800e924:	d405      	bmi.n	800e932 <setvbuf+0x4a>
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	0598      	lsls	r0, r3, #22
 800e92a:	d402      	bmi.n	800e932 <setvbuf+0x4a>
 800e92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e92e:	f000 fae5 	bl	800eefc <__retarget_lock_acquire_recursive>
 800e932:	4621      	mov	r1, r4
 800e934:	4638      	mov	r0, r7
 800e936:	f000 f9af 	bl	800ec98 <_fflush_r>
 800e93a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e93c:	b141      	cbz	r1, 800e950 <setvbuf+0x68>
 800e93e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e942:	4299      	cmp	r1, r3
 800e944:	d002      	beq.n	800e94c <setvbuf+0x64>
 800e946:	4638      	mov	r0, r7
 800e948:	f7ff fec6 	bl	800e6d8 <_free_r>
 800e94c:	2300      	movs	r3, #0
 800e94e:	6363      	str	r3, [r4, #52]	; 0x34
 800e950:	2300      	movs	r3, #0
 800e952:	61a3      	str	r3, [r4, #24]
 800e954:	6063      	str	r3, [r4, #4]
 800e956:	89a3      	ldrh	r3, [r4, #12]
 800e958:	0619      	lsls	r1, r3, #24
 800e95a:	d503      	bpl.n	800e964 <setvbuf+0x7c>
 800e95c:	6921      	ldr	r1, [r4, #16]
 800e95e:	4638      	mov	r0, r7
 800e960:	f7ff feba 	bl	800e6d8 <_free_r>
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e96a:	f023 0303 	bic.w	r3, r3, #3
 800e96e:	f1b8 0f02 	cmp.w	r8, #2
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	d06c      	beq.n	800ea50 <setvbuf+0x168>
 800e976:	ab01      	add	r3, sp, #4
 800e978:	466a      	mov	r2, sp
 800e97a:	4621      	mov	r1, r4
 800e97c:	4638      	mov	r0, r7
 800e97e:	f000 fabf 	bl	800ef00 <__swhatbuf_r>
 800e982:	89a3      	ldrh	r3, [r4, #12]
 800e984:	4318      	orrs	r0, r3
 800e986:	81a0      	strh	r0, [r4, #12]
 800e988:	2d00      	cmp	r5, #0
 800e98a:	d130      	bne.n	800e9ee <setvbuf+0x106>
 800e98c:	9d00      	ldr	r5, [sp, #0]
 800e98e:	4628      	mov	r0, r5
 800e990:	f7ff fe7c 	bl	800e68c <malloc>
 800e994:	4606      	mov	r6, r0
 800e996:	2800      	cmp	r0, #0
 800e998:	d155      	bne.n	800ea46 <setvbuf+0x15e>
 800e99a:	f8dd 9000 	ldr.w	r9, [sp]
 800e99e:	45a9      	cmp	r9, r5
 800e9a0:	d14a      	bne.n	800ea38 <setvbuf+0x150>
 800e9a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	60a2      	str	r2, [r4, #8]
 800e9aa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e9ae:	6022      	str	r2, [r4, #0]
 800e9b0:	6122      	str	r2, [r4, #16]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b8:	6162      	str	r2, [r4, #20]
 800e9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9bc:	f043 0302 	orr.w	r3, r3, #2
 800e9c0:	07d2      	lsls	r2, r2, #31
 800e9c2:	81a3      	strh	r3, [r4, #12]
 800e9c4:	d405      	bmi.n	800e9d2 <setvbuf+0xea>
 800e9c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e9ca:	d102      	bne.n	800e9d2 <setvbuf+0xea>
 800e9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9ce:	f000 fa96 	bl	800eefe <__retarget_lock_release_recursive>
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	b003      	add	sp, #12
 800e9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9da:	4b24      	ldr	r3, [pc, #144]	; (800ea6c <setvbuf+0x184>)
 800e9dc:	429c      	cmp	r4, r3
 800e9de:	d101      	bne.n	800e9e4 <setvbuf+0xfc>
 800e9e0:	68bc      	ldr	r4, [r7, #8]
 800e9e2:	e793      	b.n	800e90c <setvbuf+0x24>
 800e9e4:	4b22      	ldr	r3, [pc, #136]	; (800ea70 <setvbuf+0x188>)
 800e9e6:	429c      	cmp	r4, r3
 800e9e8:	bf08      	it	eq
 800e9ea:	68fc      	ldreq	r4, [r7, #12]
 800e9ec:	e78e      	b.n	800e90c <setvbuf+0x24>
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	d0cd      	beq.n	800e98e <setvbuf+0xa6>
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	b913      	cbnz	r3, 800e9fc <setvbuf+0x114>
 800e9f6:	4638      	mov	r0, r7
 800e9f8:	f000 f9e2 	bl	800edc0 <__sinit>
 800e9fc:	f1b8 0f01 	cmp.w	r8, #1
 800ea00:	bf08      	it	eq
 800ea02:	89a3      	ldrheq	r3, [r4, #12]
 800ea04:	6026      	str	r6, [r4, #0]
 800ea06:	bf04      	itt	eq
 800ea08:	f043 0301 	orreq.w	r3, r3, #1
 800ea0c:	81a3      	strheq	r3, [r4, #12]
 800ea0e:	89a2      	ldrh	r2, [r4, #12]
 800ea10:	f012 0308 	ands.w	r3, r2, #8
 800ea14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ea18:	d01c      	beq.n	800ea54 <setvbuf+0x16c>
 800ea1a:	07d3      	lsls	r3, r2, #31
 800ea1c:	bf41      	itttt	mi
 800ea1e:	2300      	movmi	r3, #0
 800ea20:	426d      	negmi	r5, r5
 800ea22:	60a3      	strmi	r3, [r4, #8]
 800ea24:	61a5      	strmi	r5, [r4, #24]
 800ea26:	bf58      	it	pl
 800ea28:	60a5      	strpl	r5, [r4, #8]
 800ea2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ea2c:	f015 0501 	ands.w	r5, r5, #1
 800ea30:	d115      	bne.n	800ea5e <setvbuf+0x176>
 800ea32:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ea36:	e7c8      	b.n	800e9ca <setvbuf+0xe2>
 800ea38:	4648      	mov	r0, r9
 800ea3a:	f7ff fe27 	bl	800e68c <malloc>
 800ea3e:	4606      	mov	r6, r0
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d0ae      	beq.n	800e9a2 <setvbuf+0xba>
 800ea44:	464d      	mov	r5, r9
 800ea46:	89a3      	ldrh	r3, [r4, #12]
 800ea48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea4c:	81a3      	strh	r3, [r4, #12]
 800ea4e:	e7d0      	b.n	800e9f2 <setvbuf+0x10a>
 800ea50:	2500      	movs	r5, #0
 800ea52:	e7a8      	b.n	800e9a6 <setvbuf+0xbe>
 800ea54:	60a3      	str	r3, [r4, #8]
 800ea56:	e7e8      	b.n	800ea2a <setvbuf+0x142>
 800ea58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ea5c:	e7b9      	b.n	800e9d2 <setvbuf+0xea>
 800ea5e:	2500      	movs	r5, #0
 800ea60:	e7b7      	b.n	800e9d2 <setvbuf+0xea>
 800ea62:	bf00      	nop
 800ea64:	20000030 	.word	0x20000030
 800ea68:	0800fda4 	.word	0x0800fda4
 800ea6c:	0800fdc4 	.word	0x0800fdc4
 800ea70:	0800fd84 	.word	0x0800fd84

0800ea74 <_strtol_l.constprop.0>:
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7a:	d001      	beq.n	800ea80 <_strtol_l.constprop.0+0xc>
 800ea7c:	2b24      	cmp	r3, #36	; 0x24
 800ea7e:	d906      	bls.n	800ea8e <_strtol_l.constprop.0+0x1a>
 800ea80:	f7ff fdda 	bl	800e638 <__errno>
 800ea84:	2316      	movs	r3, #22
 800ea86:	6003      	str	r3, [r0, #0]
 800ea88:	2000      	movs	r0, #0
 800ea8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eb74 <_strtol_l.constprop.0+0x100>
 800ea92:	460d      	mov	r5, r1
 800ea94:	462e      	mov	r6, r5
 800ea96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ea9e:	f017 0708 	ands.w	r7, r7, #8
 800eaa2:	d1f7      	bne.n	800ea94 <_strtol_l.constprop.0+0x20>
 800eaa4:	2c2d      	cmp	r4, #45	; 0x2d
 800eaa6:	d132      	bne.n	800eb0e <_strtol_l.constprop.0+0x9a>
 800eaa8:	782c      	ldrb	r4, [r5, #0]
 800eaaa:	2701      	movs	r7, #1
 800eaac:	1cb5      	adds	r5, r6, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d05b      	beq.n	800eb6a <_strtol_l.constprop.0+0xf6>
 800eab2:	2b10      	cmp	r3, #16
 800eab4:	d109      	bne.n	800eaca <_strtol_l.constprop.0+0x56>
 800eab6:	2c30      	cmp	r4, #48	; 0x30
 800eab8:	d107      	bne.n	800eaca <_strtol_l.constprop.0+0x56>
 800eaba:	782c      	ldrb	r4, [r5, #0]
 800eabc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eac0:	2c58      	cmp	r4, #88	; 0x58
 800eac2:	d14d      	bne.n	800eb60 <_strtol_l.constprop.0+0xec>
 800eac4:	786c      	ldrb	r4, [r5, #1]
 800eac6:	2310      	movs	r3, #16
 800eac8:	3502      	adds	r5, #2
 800eaca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eace:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ead2:	f04f 0c00 	mov.w	ip, #0
 800ead6:	fbb8 f9f3 	udiv	r9, r8, r3
 800eada:	4666      	mov	r6, ip
 800eadc:	fb03 8a19 	mls	sl, r3, r9, r8
 800eae0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eae4:	f1be 0f09 	cmp.w	lr, #9
 800eae8:	d816      	bhi.n	800eb18 <_strtol_l.constprop.0+0xa4>
 800eaea:	4674      	mov	r4, lr
 800eaec:	42a3      	cmp	r3, r4
 800eaee:	dd24      	ble.n	800eb3a <_strtol_l.constprop.0+0xc6>
 800eaf0:	f1bc 0f00 	cmp.w	ip, #0
 800eaf4:	db1e      	blt.n	800eb34 <_strtol_l.constprop.0+0xc0>
 800eaf6:	45b1      	cmp	r9, r6
 800eaf8:	d31c      	bcc.n	800eb34 <_strtol_l.constprop.0+0xc0>
 800eafa:	d101      	bne.n	800eb00 <_strtol_l.constprop.0+0x8c>
 800eafc:	45a2      	cmp	sl, r4
 800eafe:	db19      	blt.n	800eb34 <_strtol_l.constprop.0+0xc0>
 800eb00:	fb06 4603 	mla	r6, r6, r3, r4
 800eb04:	f04f 0c01 	mov.w	ip, #1
 800eb08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb0c:	e7e8      	b.n	800eae0 <_strtol_l.constprop.0+0x6c>
 800eb0e:	2c2b      	cmp	r4, #43	; 0x2b
 800eb10:	bf04      	itt	eq
 800eb12:	782c      	ldrbeq	r4, [r5, #0]
 800eb14:	1cb5      	addeq	r5, r6, #2
 800eb16:	e7ca      	b.n	800eaae <_strtol_l.constprop.0+0x3a>
 800eb18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eb1c:	f1be 0f19 	cmp.w	lr, #25
 800eb20:	d801      	bhi.n	800eb26 <_strtol_l.constprop.0+0xb2>
 800eb22:	3c37      	subs	r4, #55	; 0x37
 800eb24:	e7e2      	b.n	800eaec <_strtol_l.constprop.0+0x78>
 800eb26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eb2a:	f1be 0f19 	cmp.w	lr, #25
 800eb2e:	d804      	bhi.n	800eb3a <_strtol_l.constprop.0+0xc6>
 800eb30:	3c57      	subs	r4, #87	; 0x57
 800eb32:	e7db      	b.n	800eaec <_strtol_l.constprop.0+0x78>
 800eb34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800eb38:	e7e6      	b.n	800eb08 <_strtol_l.constprop.0+0x94>
 800eb3a:	f1bc 0f00 	cmp.w	ip, #0
 800eb3e:	da05      	bge.n	800eb4c <_strtol_l.constprop.0+0xd8>
 800eb40:	2322      	movs	r3, #34	; 0x22
 800eb42:	6003      	str	r3, [r0, #0]
 800eb44:	4646      	mov	r6, r8
 800eb46:	b942      	cbnz	r2, 800eb5a <_strtol_l.constprop.0+0xe6>
 800eb48:	4630      	mov	r0, r6
 800eb4a:	e79e      	b.n	800ea8a <_strtol_l.constprop.0+0x16>
 800eb4c:	b107      	cbz	r7, 800eb50 <_strtol_l.constprop.0+0xdc>
 800eb4e:	4276      	negs	r6, r6
 800eb50:	2a00      	cmp	r2, #0
 800eb52:	d0f9      	beq.n	800eb48 <_strtol_l.constprop.0+0xd4>
 800eb54:	f1bc 0f00 	cmp.w	ip, #0
 800eb58:	d000      	beq.n	800eb5c <_strtol_l.constprop.0+0xe8>
 800eb5a:	1e69      	subs	r1, r5, #1
 800eb5c:	6011      	str	r1, [r2, #0]
 800eb5e:	e7f3      	b.n	800eb48 <_strtol_l.constprop.0+0xd4>
 800eb60:	2430      	movs	r4, #48	; 0x30
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1b1      	bne.n	800eaca <_strtol_l.constprop.0+0x56>
 800eb66:	2308      	movs	r3, #8
 800eb68:	e7af      	b.n	800eaca <_strtol_l.constprop.0+0x56>
 800eb6a:	2c30      	cmp	r4, #48	; 0x30
 800eb6c:	d0a5      	beq.n	800eaba <_strtol_l.constprop.0+0x46>
 800eb6e:	230a      	movs	r3, #10
 800eb70:	e7ab      	b.n	800eaca <_strtol_l.constprop.0+0x56>
 800eb72:	bf00      	nop
 800eb74:	0800fc81 	.word	0x0800fc81

0800eb78 <strtol>:
 800eb78:	4613      	mov	r3, r2
 800eb7a:	460a      	mov	r2, r1
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	4802      	ldr	r0, [pc, #8]	; (800eb88 <strtol+0x10>)
 800eb80:	6800      	ldr	r0, [r0, #0]
 800eb82:	f7ff bf77 	b.w	800ea74 <_strtol_l.constprop.0>
 800eb86:	bf00      	nop
 800eb88:	20000030 	.word	0x20000030

0800eb8c <__sflush_r>:
 800eb8c:	898a      	ldrh	r2, [r1, #12]
 800eb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb92:	4605      	mov	r5, r0
 800eb94:	0710      	lsls	r0, r2, #28
 800eb96:	460c      	mov	r4, r1
 800eb98:	d458      	bmi.n	800ec4c <__sflush_r+0xc0>
 800eb9a:	684b      	ldr	r3, [r1, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	dc05      	bgt.n	800ebac <__sflush_r+0x20>
 800eba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	dc02      	bgt.n	800ebac <__sflush_r+0x20>
 800eba6:	2000      	movs	r0, #0
 800eba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebae:	2e00      	cmp	r6, #0
 800ebb0:	d0f9      	beq.n	800eba6 <__sflush_r+0x1a>
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebb8:	682f      	ldr	r7, [r5, #0]
 800ebba:	602b      	str	r3, [r5, #0]
 800ebbc:	d032      	beq.n	800ec24 <__sflush_r+0x98>
 800ebbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	075a      	lsls	r2, r3, #29
 800ebc4:	d505      	bpl.n	800ebd2 <__sflush_r+0x46>
 800ebc6:	6863      	ldr	r3, [r4, #4]
 800ebc8:	1ac0      	subs	r0, r0, r3
 800ebca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebcc:	b10b      	cbz	r3, 800ebd2 <__sflush_r+0x46>
 800ebce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebd0:	1ac0      	subs	r0, r0, r3
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebd8:	6a21      	ldr	r1, [r4, #32]
 800ebda:	4628      	mov	r0, r5
 800ebdc:	47b0      	blx	r6
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	d106      	bne.n	800ebf2 <__sflush_r+0x66>
 800ebe4:	6829      	ldr	r1, [r5, #0]
 800ebe6:	291d      	cmp	r1, #29
 800ebe8:	d82c      	bhi.n	800ec44 <__sflush_r+0xb8>
 800ebea:	4a2a      	ldr	r2, [pc, #168]	; (800ec94 <__sflush_r+0x108>)
 800ebec:	40ca      	lsrs	r2, r1
 800ebee:	07d6      	lsls	r6, r2, #31
 800ebf0:	d528      	bpl.n	800ec44 <__sflush_r+0xb8>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	6062      	str	r2, [r4, #4]
 800ebf6:	04d9      	lsls	r1, r3, #19
 800ebf8:	6922      	ldr	r2, [r4, #16]
 800ebfa:	6022      	str	r2, [r4, #0]
 800ebfc:	d504      	bpl.n	800ec08 <__sflush_r+0x7c>
 800ebfe:	1c42      	adds	r2, r0, #1
 800ec00:	d101      	bne.n	800ec06 <__sflush_r+0x7a>
 800ec02:	682b      	ldr	r3, [r5, #0]
 800ec04:	b903      	cbnz	r3, 800ec08 <__sflush_r+0x7c>
 800ec06:	6560      	str	r0, [r4, #84]	; 0x54
 800ec08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec0a:	602f      	str	r7, [r5, #0]
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	d0ca      	beq.n	800eba6 <__sflush_r+0x1a>
 800ec10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec14:	4299      	cmp	r1, r3
 800ec16:	d002      	beq.n	800ec1e <__sflush_r+0x92>
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f7ff fd5d 	bl	800e6d8 <_free_r>
 800ec1e:	2000      	movs	r0, #0
 800ec20:	6360      	str	r0, [r4, #52]	; 0x34
 800ec22:	e7c1      	b.n	800eba8 <__sflush_r+0x1c>
 800ec24:	6a21      	ldr	r1, [r4, #32]
 800ec26:	2301      	movs	r3, #1
 800ec28:	4628      	mov	r0, r5
 800ec2a:	47b0      	blx	r6
 800ec2c:	1c41      	adds	r1, r0, #1
 800ec2e:	d1c7      	bne.n	800ebc0 <__sflush_r+0x34>
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0c4      	beq.n	800ebc0 <__sflush_r+0x34>
 800ec36:	2b1d      	cmp	r3, #29
 800ec38:	d001      	beq.n	800ec3e <__sflush_r+0xb2>
 800ec3a:	2b16      	cmp	r3, #22
 800ec3c:	d101      	bne.n	800ec42 <__sflush_r+0xb6>
 800ec3e:	602f      	str	r7, [r5, #0]
 800ec40:	e7b1      	b.n	800eba6 <__sflush_r+0x1a>
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec48:	81a3      	strh	r3, [r4, #12]
 800ec4a:	e7ad      	b.n	800eba8 <__sflush_r+0x1c>
 800ec4c:	690f      	ldr	r7, [r1, #16]
 800ec4e:	2f00      	cmp	r7, #0
 800ec50:	d0a9      	beq.n	800eba6 <__sflush_r+0x1a>
 800ec52:	0793      	lsls	r3, r2, #30
 800ec54:	680e      	ldr	r6, [r1, #0]
 800ec56:	bf08      	it	eq
 800ec58:	694b      	ldreq	r3, [r1, #20]
 800ec5a:	600f      	str	r7, [r1, #0]
 800ec5c:	bf18      	it	ne
 800ec5e:	2300      	movne	r3, #0
 800ec60:	eba6 0807 	sub.w	r8, r6, r7
 800ec64:	608b      	str	r3, [r1, #8]
 800ec66:	f1b8 0f00 	cmp.w	r8, #0
 800ec6a:	dd9c      	ble.n	800eba6 <__sflush_r+0x1a>
 800ec6c:	6a21      	ldr	r1, [r4, #32]
 800ec6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec70:	4643      	mov	r3, r8
 800ec72:	463a      	mov	r2, r7
 800ec74:	4628      	mov	r0, r5
 800ec76:	47b0      	blx	r6
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	dc06      	bgt.n	800ec8a <__sflush_r+0xfe>
 800ec7c:	89a3      	ldrh	r3, [r4, #12]
 800ec7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec82:	81a3      	strh	r3, [r4, #12]
 800ec84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec88:	e78e      	b.n	800eba8 <__sflush_r+0x1c>
 800ec8a:	4407      	add	r7, r0
 800ec8c:	eba8 0800 	sub.w	r8, r8, r0
 800ec90:	e7e9      	b.n	800ec66 <__sflush_r+0xda>
 800ec92:	bf00      	nop
 800ec94:	20400001 	.word	0x20400001

0800ec98 <_fflush_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	690b      	ldr	r3, [r1, #16]
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	460c      	mov	r4, r1
 800eca0:	b913      	cbnz	r3, 800eca8 <_fflush_r+0x10>
 800eca2:	2500      	movs	r5, #0
 800eca4:	4628      	mov	r0, r5
 800eca6:	bd38      	pop	{r3, r4, r5, pc}
 800eca8:	b118      	cbz	r0, 800ecb2 <_fflush_r+0x1a>
 800ecaa:	6983      	ldr	r3, [r0, #24]
 800ecac:	b90b      	cbnz	r3, 800ecb2 <_fflush_r+0x1a>
 800ecae:	f000 f887 	bl	800edc0 <__sinit>
 800ecb2:	4b14      	ldr	r3, [pc, #80]	; (800ed04 <_fflush_r+0x6c>)
 800ecb4:	429c      	cmp	r4, r3
 800ecb6:	d11b      	bne.n	800ecf0 <_fflush_r+0x58>
 800ecb8:	686c      	ldr	r4, [r5, #4]
 800ecba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0ef      	beq.n	800eca2 <_fflush_r+0xa>
 800ecc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecc4:	07d0      	lsls	r0, r2, #31
 800ecc6:	d404      	bmi.n	800ecd2 <_fflush_r+0x3a>
 800ecc8:	0599      	lsls	r1, r3, #22
 800ecca:	d402      	bmi.n	800ecd2 <_fflush_r+0x3a>
 800eccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecce:	f000 f915 	bl	800eefc <__retarget_lock_acquire_recursive>
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	f7ff ff59 	bl	800eb8c <__sflush_r>
 800ecda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecdc:	07da      	lsls	r2, r3, #31
 800ecde:	4605      	mov	r5, r0
 800ece0:	d4e0      	bmi.n	800eca4 <_fflush_r+0xc>
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	059b      	lsls	r3, r3, #22
 800ece6:	d4dd      	bmi.n	800eca4 <_fflush_r+0xc>
 800ece8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecea:	f000 f908 	bl	800eefe <__retarget_lock_release_recursive>
 800ecee:	e7d9      	b.n	800eca4 <_fflush_r+0xc>
 800ecf0:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <_fflush_r+0x70>)
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d101      	bne.n	800ecfa <_fflush_r+0x62>
 800ecf6:	68ac      	ldr	r4, [r5, #8]
 800ecf8:	e7df      	b.n	800ecba <_fflush_r+0x22>
 800ecfa:	4b04      	ldr	r3, [pc, #16]	; (800ed0c <_fflush_r+0x74>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	bf08      	it	eq
 800ed00:	68ec      	ldreq	r4, [r5, #12]
 800ed02:	e7da      	b.n	800ecba <_fflush_r+0x22>
 800ed04:	0800fda4 	.word	0x0800fda4
 800ed08:	0800fdc4 	.word	0x0800fdc4
 800ed0c:	0800fd84 	.word	0x0800fd84

0800ed10 <std>:
 800ed10:	2300      	movs	r3, #0
 800ed12:	b510      	push	{r4, lr}
 800ed14:	4604      	mov	r4, r0
 800ed16:	e9c0 3300 	strd	r3, r3, [r0]
 800ed1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed1e:	6083      	str	r3, [r0, #8]
 800ed20:	8181      	strh	r1, [r0, #12]
 800ed22:	6643      	str	r3, [r0, #100]	; 0x64
 800ed24:	81c2      	strh	r2, [r0, #14]
 800ed26:	6183      	str	r3, [r0, #24]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	305c      	adds	r0, #92	; 0x5c
 800ed2e:	f7ff fccb 	bl	800e6c8 <memset>
 800ed32:	4b05      	ldr	r3, [pc, #20]	; (800ed48 <std+0x38>)
 800ed34:	6263      	str	r3, [r4, #36]	; 0x24
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <std+0x3c>)
 800ed38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x40>)
 800ed3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x44>)
 800ed40:	6224      	str	r4, [r4, #32]
 800ed42:	6323      	str	r3, [r4, #48]	; 0x30
 800ed44:	bd10      	pop	{r4, pc}
 800ed46:	bf00      	nop
 800ed48:	0800f5c1 	.word	0x0800f5c1
 800ed4c:	0800f5e3 	.word	0x0800f5e3
 800ed50:	0800f61b 	.word	0x0800f61b
 800ed54:	0800f63f 	.word	0x0800f63f

0800ed58 <_cleanup_r>:
 800ed58:	4901      	ldr	r1, [pc, #4]	; (800ed60 <_cleanup_r+0x8>)
 800ed5a:	f000 b8af 	b.w	800eebc <_fwalk_reent>
 800ed5e:	bf00      	nop
 800ed60:	0800ec99 	.word	0x0800ec99

0800ed64 <__sfmoreglue>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	2268      	movs	r2, #104	; 0x68
 800ed68:	1e4d      	subs	r5, r1, #1
 800ed6a:	4355      	muls	r5, r2
 800ed6c:	460e      	mov	r6, r1
 800ed6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed72:	f7ff fd1d 	bl	800e7b0 <_malloc_r>
 800ed76:	4604      	mov	r4, r0
 800ed78:	b140      	cbz	r0, 800ed8c <__sfmoreglue+0x28>
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed80:	300c      	adds	r0, #12
 800ed82:	60a0      	str	r0, [r4, #8]
 800ed84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed88:	f7ff fc9e 	bl	800e6c8 <memset>
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}

0800ed90 <__sfp_lock_acquire>:
 800ed90:	4801      	ldr	r0, [pc, #4]	; (800ed98 <__sfp_lock_acquire+0x8>)
 800ed92:	f000 b8b3 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800ed96:	bf00      	nop
 800ed98:	20003b41 	.word	0x20003b41

0800ed9c <__sfp_lock_release>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	; (800eda4 <__sfp_lock_release+0x8>)
 800ed9e:	f000 b8ae 	b.w	800eefe <__retarget_lock_release_recursive>
 800eda2:	bf00      	nop
 800eda4:	20003b41 	.word	0x20003b41

0800eda8 <__sinit_lock_acquire>:
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__sinit_lock_acquire+0x8>)
 800edaa:	f000 b8a7 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800edae:	bf00      	nop
 800edb0:	20003b42 	.word	0x20003b42

0800edb4 <__sinit_lock_release>:
 800edb4:	4801      	ldr	r0, [pc, #4]	; (800edbc <__sinit_lock_release+0x8>)
 800edb6:	f000 b8a2 	b.w	800eefe <__retarget_lock_release_recursive>
 800edba:	bf00      	nop
 800edbc:	20003b42 	.word	0x20003b42

0800edc0 <__sinit>:
 800edc0:	b510      	push	{r4, lr}
 800edc2:	4604      	mov	r4, r0
 800edc4:	f7ff fff0 	bl	800eda8 <__sinit_lock_acquire>
 800edc8:	69a3      	ldr	r3, [r4, #24]
 800edca:	b11b      	cbz	r3, 800edd4 <__sinit+0x14>
 800edcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd0:	f7ff bff0 	b.w	800edb4 <__sinit_lock_release>
 800edd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edd8:	6523      	str	r3, [r4, #80]	; 0x50
 800edda:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <__sinit+0x68>)
 800eddc:	4a13      	ldr	r2, [pc, #76]	; (800ee2c <__sinit+0x6c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	bf04      	itt	eq
 800ede6:	2301      	moveq	r3, #1
 800ede8:	61a3      	streq	r3, [r4, #24]
 800edea:	4620      	mov	r0, r4
 800edec:	f000 f820 	bl	800ee30 <__sfp>
 800edf0:	6060      	str	r0, [r4, #4]
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 f81c 	bl	800ee30 <__sfp>
 800edf8:	60a0      	str	r0, [r4, #8]
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 f818 	bl	800ee30 <__sfp>
 800ee00:	2200      	movs	r2, #0
 800ee02:	60e0      	str	r0, [r4, #12]
 800ee04:	2104      	movs	r1, #4
 800ee06:	6860      	ldr	r0, [r4, #4]
 800ee08:	f7ff ff82 	bl	800ed10 <std>
 800ee0c:	68a0      	ldr	r0, [r4, #8]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	2109      	movs	r1, #9
 800ee12:	f7ff ff7d 	bl	800ed10 <std>
 800ee16:	68e0      	ldr	r0, [r4, #12]
 800ee18:	2202      	movs	r2, #2
 800ee1a:	2112      	movs	r1, #18
 800ee1c:	f7ff ff78 	bl	800ed10 <std>
 800ee20:	2301      	movs	r3, #1
 800ee22:	61a3      	str	r3, [r4, #24]
 800ee24:	e7d2      	b.n	800edcc <__sinit+0xc>
 800ee26:	bf00      	nop
 800ee28:	0800fc7c 	.word	0x0800fc7c
 800ee2c:	0800ed59 	.word	0x0800ed59

0800ee30 <__sfp>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	4607      	mov	r7, r0
 800ee34:	f7ff ffac 	bl	800ed90 <__sfp_lock_acquire>
 800ee38:	4b1e      	ldr	r3, [pc, #120]	; (800eeb4 <__sfp+0x84>)
 800ee3a:	681e      	ldr	r6, [r3, #0]
 800ee3c:	69b3      	ldr	r3, [r6, #24]
 800ee3e:	b913      	cbnz	r3, 800ee46 <__sfp+0x16>
 800ee40:	4630      	mov	r0, r6
 800ee42:	f7ff ffbd 	bl	800edc0 <__sinit>
 800ee46:	3648      	adds	r6, #72	; 0x48
 800ee48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	d503      	bpl.n	800ee58 <__sfp+0x28>
 800ee50:	6833      	ldr	r3, [r6, #0]
 800ee52:	b30b      	cbz	r3, 800ee98 <__sfp+0x68>
 800ee54:	6836      	ldr	r6, [r6, #0]
 800ee56:	e7f7      	b.n	800ee48 <__sfp+0x18>
 800ee58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee5c:	b9d5      	cbnz	r5, 800ee94 <__sfp+0x64>
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <__sfp+0x88>)
 800ee60:	60e3      	str	r3, [r4, #12]
 800ee62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee66:	6665      	str	r5, [r4, #100]	; 0x64
 800ee68:	f000 f847 	bl	800eefa <__retarget_lock_init_recursive>
 800ee6c:	f7ff ff96 	bl	800ed9c <__sfp_lock_release>
 800ee70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee78:	6025      	str	r5, [r4, #0]
 800ee7a:	61a5      	str	r5, [r4, #24]
 800ee7c:	2208      	movs	r2, #8
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee84:	f7ff fc20 	bl	800e6c8 <memset>
 800ee88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee90:	4620      	mov	r0, r4
 800ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee94:	3468      	adds	r4, #104	; 0x68
 800ee96:	e7d9      	b.n	800ee4c <__sfp+0x1c>
 800ee98:	2104      	movs	r1, #4
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7ff ff62 	bl	800ed64 <__sfmoreglue>
 800eea0:	4604      	mov	r4, r0
 800eea2:	6030      	str	r0, [r6, #0]
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d1d5      	bne.n	800ee54 <__sfp+0x24>
 800eea8:	f7ff ff78 	bl	800ed9c <__sfp_lock_release>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	e7ee      	b.n	800ee90 <__sfp+0x60>
 800eeb2:	bf00      	nop
 800eeb4:	0800fc7c 	.word	0x0800fc7c
 800eeb8:	ffff0001 	.word	0xffff0001

0800eebc <_fwalk_reent>:
 800eebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec0:	4606      	mov	r6, r0
 800eec2:	4688      	mov	r8, r1
 800eec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eec8:	2700      	movs	r7, #0
 800eeca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eece:	f1b9 0901 	subs.w	r9, r9, #1
 800eed2:	d505      	bpl.n	800eee0 <_fwalk_reent+0x24>
 800eed4:	6824      	ldr	r4, [r4, #0]
 800eed6:	2c00      	cmp	r4, #0
 800eed8:	d1f7      	bne.n	800eeca <_fwalk_reent+0xe>
 800eeda:	4638      	mov	r0, r7
 800eedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee0:	89ab      	ldrh	r3, [r5, #12]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d907      	bls.n	800eef6 <_fwalk_reent+0x3a>
 800eee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeea:	3301      	adds	r3, #1
 800eeec:	d003      	beq.n	800eef6 <_fwalk_reent+0x3a>
 800eeee:	4629      	mov	r1, r5
 800eef0:	4630      	mov	r0, r6
 800eef2:	47c0      	blx	r8
 800eef4:	4307      	orrs	r7, r0
 800eef6:	3568      	adds	r5, #104	; 0x68
 800eef8:	e7e9      	b.n	800eece <_fwalk_reent+0x12>

0800eefa <__retarget_lock_init_recursive>:
 800eefa:	4770      	bx	lr

0800eefc <__retarget_lock_acquire_recursive>:
 800eefc:	4770      	bx	lr

0800eefe <__retarget_lock_release_recursive>:
 800eefe:	4770      	bx	lr

0800ef00 <__swhatbuf_r>:
 800ef00:	b570      	push	{r4, r5, r6, lr}
 800ef02:	460e      	mov	r6, r1
 800ef04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef08:	2900      	cmp	r1, #0
 800ef0a:	b096      	sub	sp, #88	; 0x58
 800ef0c:	4614      	mov	r4, r2
 800ef0e:	461d      	mov	r5, r3
 800ef10:	da08      	bge.n	800ef24 <__swhatbuf_r+0x24>
 800ef12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	602a      	str	r2, [r5, #0]
 800ef1a:	061a      	lsls	r2, r3, #24
 800ef1c:	d410      	bmi.n	800ef40 <__swhatbuf_r+0x40>
 800ef1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef22:	e00e      	b.n	800ef42 <__swhatbuf_r+0x42>
 800ef24:	466a      	mov	r2, sp
 800ef26:	f000 fc71 	bl	800f80c <_fstat_r>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	dbf1      	blt.n	800ef12 <__swhatbuf_r+0x12>
 800ef2e:	9a01      	ldr	r2, [sp, #4]
 800ef30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef38:	425a      	negs	r2, r3
 800ef3a:	415a      	adcs	r2, r3
 800ef3c:	602a      	str	r2, [r5, #0]
 800ef3e:	e7ee      	b.n	800ef1e <__swhatbuf_r+0x1e>
 800ef40:	2340      	movs	r3, #64	; 0x40
 800ef42:	2000      	movs	r0, #0
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	b016      	add	sp, #88	; 0x58
 800ef48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef4c <__smakebuf_r>:
 800ef4c:	898b      	ldrh	r3, [r1, #12]
 800ef4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef50:	079d      	lsls	r5, r3, #30
 800ef52:	4606      	mov	r6, r0
 800ef54:	460c      	mov	r4, r1
 800ef56:	d507      	bpl.n	800ef68 <__smakebuf_r+0x1c>
 800ef58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	6123      	str	r3, [r4, #16]
 800ef60:	2301      	movs	r3, #1
 800ef62:	6163      	str	r3, [r4, #20]
 800ef64:	b002      	add	sp, #8
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	ab01      	add	r3, sp, #4
 800ef6a:	466a      	mov	r2, sp
 800ef6c:	f7ff ffc8 	bl	800ef00 <__swhatbuf_r>
 800ef70:	9900      	ldr	r1, [sp, #0]
 800ef72:	4605      	mov	r5, r0
 800ef74:	4630      	mov	r0, r6
 800ef76:	f7ff fc1b 	bl	800e7b0 <_malloc_r>
 800ef7a:	b948      	cbnz	r0, 800ef90 <__smakebuf_r+0x44>
 800ef7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef80:	059a      	lsls	r2, r3, #22
 800ef82:	d4ef      	bmi.n	800ef64 <__smakebuf_r+0x18>
 800ef84:	f023 0303 	bic.w	r3, r3, #3
 800ef88:	f043 0302 	orr.w	r3, r3, #2
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	e7e3      	b.n	800ef58 <__smakebuf_r+0xc>
 800ef90:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <__smakebuf_r+0x7c>)
 800ef92:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	6020      	str	r0, [r4, #0]
 800ef98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef9c:	81a3      	strh	r3, [r4, #12]
 800ef9e:	9b00      	ldr	r3, [sp, #0]
 800efa0:	6163      	str	r3, [r4, #20]
 800efa2:	9b01      	ldr	r3, [sp, #4]
 800efa4:	6120      	str	r0, [r4, #16]
 800efa6:	b15b      	cbz	r3, 800efc0 <__smakebuf_r+0x74>
 800efa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efac:	4630      	mov	r0, r6
 800efae:	f000 fc3f 	bl	800f830 <_isatty_r>
 800efb2:	b128      	cbz	r0, 800efc0 <__smakebuf_r+0x74>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f023 0303 	bic.w	r3, r3, #3
 800efba:	f043 0301 	orr.w	r3, r3, #1
 800efbe:	81a3      	strh	r3, [r4, #12]
 800efc0:	89a0      	ldrh	r0, [r4, #12]
 800efc2:	4305      	orrs	r5, r0
 800efc4:	81a5      	strh	r5, [r4, #12]
 800efc6:	e7cd      	b.n	800ef64 <__smakebuf_r+0x18>
 800efc8:	0800ed59 	.word	0x0800ed59

0800efcc <__malloc_lock>:
 800efcc:	4801      	ldr	r0, [pc, #4]	; (800efd4 <__malloc_lock+0x8>)
 800efce:	f7ff bf95 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800efd2:	bf00      	nop
 800efd4:	20003b40 	.word	0x20003b40

0800efd8 <__malloc_unlock>:
 800efd8:	4801      	ldr	r0, [pc, #4]	; (800efe0 <__malloc_unlock+0x8>)
 800efda:	f7ff bf90 	b.w	800eefe <__retarget_lock_release_recursive>
 800efde:	bf00      	nop
 800efe0:	20003b40 	.word	0x20003b40

0800efe4 <__sfputc_r>:
 800efe4:	6893      	ldr	r3, [r2, #8]
 800efe6:	3b01      	subs	r3, #1
 800efe8:	2b00      	cmp	r3, #0
 800efea:	b410      	push	{r4}
 800efec:	6093      	str	r3, [r2, #8]
 800efee:	da08      	bge.n	800f002 <__sfputc_r+0x1e>
 800eff0:	6994      	ldr	r4, [r2, #24]
 800eff2:	42a3      	cmp	r3, r4
 800eff4:	db01      	blt.n	800effa <__sfputc_r+0x16>
 800eff6:	290a      	cmp	r1, #10
 800eff8:	d103      	bne.n	800f002 <__sfputc_r+0x1e>
 800effa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800effe:	f000 bb23 	b.w	800f648 <__swbuf_r>
 800f002:	6813      	ldr	r3, [r2, #0]
 800f004:	1c58      	adds	r0, r3, #1
 800f006:	6010      	str	r0, [r2, #0]
 800f008:	7019      	strb	r1, [r3, #0]
 800f00a:	4608      	mov	r0, r1
 800f00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f010:	4770      	bx	lr

0800f012 <__sfputs_r>:
 800f012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f014:	4606      	mov	r6, r0
 800f016:	460f      	mov	r7, r1
 800f018:	4614      	mov	r4, r2
 800f01a:	18d5      	adds	r5, r2, r3
 800f01c:	42ac      	cmp	r4, r5
 800f01e:	d101      	bne.n	800f024 <__sfputs_r+0x12>
 800f020:	2000      	movs	r0, #0
 800f022:	e007      	b.n	800f034 <__sfputs_r+0x22>
 800f024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f028:	463a      	mov	r2, r7
 800f02a:	4630      	mov	r0, r6
 800f02c:	f7ff ffda 	bl	800efe4 <__sfputc_r>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d1f3      	bne.n	800f01c <__sfputs_r+0xa>
 800f034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f038 <_vfiprintf_r>:
 800f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03c:	460d      	mov	r5, r1
 800f03e:	b09d      	sub	sp, #116	; 0x74
 800f040:	4614      	mov	r4, r2
 800f042:	4698      	mov	r8, r3
 800f044:	4606      	mov	r6, r0
 800f046:	b118      	cbz	r0, 800f050 <_vfiprintf_r+0x18>
 800f048:	6983      	ldr	r3, [r0, #24]
 800f04a:	b90b      	cbnz	r3, 800f050 <_vfiprintf_r+0x18>
 800f04c:	f7ff feb8 	bl	800edc0 <__sinit>
 800f050:	4b89      	ldr	r3, [pc, #548]	; (800f278 <_vfiprintf_r+0x240>)
 800f052:	429d      	cmp	r5, r3
 800f054:	d11b      	bne.n	800f08e <_vfiprintf_r+0x56>
 800f056:	6875      	ldr	r5, [r6, #4]
 800f058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f05a:	07d9      	lsls	r1, r3, #31
 800f05c:	d405      	bmi.n	800f06a <_vfiprintf_r+0x32>
 800f05e:	89ab      	ldrh	r3, [r5, #12]
 800f060:	059a      	lsls	r2, r3, #22
 800f062:	d402      	bmi.n	800f06a <_vfiprintf_r+0x32>
 800f064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f066:	f7ff ff49 	bl	800eefc <__retarget_lock_acquire_recursive>
 800f06a:	89ab      	ldrh	r3, [r5, #12]
 800f06c:	071b      	lsls	r3, r3, #28
 800f06e:	d501      	bpl.n	800f074 <_vfiprintf_r+0x3c>
 800f070:	692b      	ldr	r3, [r5, #16]
 800f072:	b9eb      	cbnz	r3, 800f0b0 <_vfiprintf_r+0x78>
 800f074:	4629      	mov	r1, r5
 800f076:	4630      	mov	r0, r6
 800f078:	f000 fb4a 	bl	800f710 <__swsetup_r>
 800f07c:	b1c0      	cbz	r0, 800f0b0 <_vfiprintf_r+0x78>
 800f07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f080:	07dc      	lsls	r4, r3, #31
 800f082:	d50e      	bpl.n	800f0a2 <_vfiprintf_r+0x6a>
 800f084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f088:	b01d      	add	sp, #116	; 0x74
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	4b7b      	ldr	r3, [pc, #492]	; (800f27c <_vfiprintf_r+0x244>)
 800f090:	429d      	cmp	r5, r3
 800f092:	d101      	bne.n	800f098 <_vfiprintf_r+0x60>
 800f094:	68b5      	ldr	r5, [r6, #8]
 800f096:	e7df      	b.n	800f058 <_vfiprintf_r+0x20>
 800f098:	4b79      	ldr	r3, [pc, #484]	; (800f280 <_vfiprintf_r+0x248>)
 800f09a:	429d      	cmp	r5, r3
 800f09c:	bf08      	it	eq
 800f09e:	68f5      	ldreq	r5, [r6, #12]
 800f0a0:	e7da      	b.n	800f058 <_vfiprintf_r+0x20>
 800f0a2:	89ab      	ldrh	r3, [r5, #12]
 800f0a4:	0598      	lsls	r0, r3, #22
 800f0a6:	d4ed      	bmi.n	800f084 <_vfiprintf_r+0x4c>
 800f0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0aa:	f7ff ff28 	bl	800eefe <__retarget_lock_release_recursive>
 800f0ae:	e7e9      	b.n	800f084 <_vfiprintf_r+0x4c>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b4:	2320      	movs	r3, #32
 800f0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0be:	2330      	movs	r3, #48	; 0x30
 800f0c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f284 <_vfiprintf_r+0x24c>
 800f0c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0c8:	f04f 0901 	mov.w	r9, #1
 800f0cc:	4623      	mov	r3, r4
 800f0ce:	469a      	mov	sl, r3
 800f0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0d4:	b10a      	cbz	r2, 800f0da <_vfiprintf_r+0xa2>
 800f0d6:	2a25      	cmp	r2, #37	; 0x25
 800f0d8:	d1f9      	bne.n	800f0ce <_vfiprintf_r+0x96>
 800f0da:	ebba 0b04 	subs.w	fp, sl, r4
 800f0de:	d00b      	beq.n	800f0f8 <_vfiprintf_r+0xc0>
 800f0e0:	465b      	mov	r3, fp
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7ff ff93 	bl	800f012 <__sfputs_r>
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	f000 80aa 	beq.w	800f246 <_vfiprintf_r+0x20e>
 800f0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f4:	445a      	add	r2, fp
 800f0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800f0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f000 80a2 	beq.w	800f246 <_vfiprintf_r+0x20e>
 800f102:	2300      	movs	r3, #0
 800f104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f10c:	f10a 0a01 	add.w	sl, sl, #1
 800f110:	9304      	str	r3, [sp, #16]
 800f112:	9307      	str	r3, [sp, #28]
 800f114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f118:	931a      	str	r3, [sp, #104]	; 0x68
 800f11a:	4654      	mov	r4, sl
 800f11c:	2205      	movs	r2, #5
 800f11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f122:	4858      	ldr	r0, [pc, #352]	; (800f284 <_vfiprintf_r+0x24c>)
 800f124:	f7f1 f864 	bl	80001f0 <memchr>
 800f128:	9a04      	ldr	r2, [sp, #16]
 800f12a:	b9d8      	cbnz	r0, 800f164 <_vfiprintf_r+0x12c>
 800f12c:	06d1      	lsls	r1, r2, #27
 800f12e:	bf44      	itt	mi
 800f130:	2320      	movmi	r3, #32
 800f132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f136:	0713      	lsls	r3, r2, #28
 800f138:	bf44      	itt	mi
 800f13a:	232b      	movmi	r3, #43	; 0x2b
 800f13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f140:	f89a 3000 	ldrb.w	r3, [sl]
 800f144:	2b2a      	cmp	r3, #42	; 0x2a
 800f146:	d015      	beq.n	800f174 <_vfiprintf_r+0x13c>
 800f148:	9a07      	ldr	r2, [sp, #28]
 800f14a:	4654      	mov	r4, sl
 800f14c:	2000      	movs	r0, #0
 800f14e:	f04f 0c0a 	mov.w	ip, #10
 800f152:	4621      	mov	r1, r4
 800f154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f158:	3b30      	subs	r3, #48	; 0x30
 800f15a:	2b09      	cmp	r3, #9
 800f15c:	d94e      	bls.n	800f1fc <_vfiprintf_r+0x1c4>
 800f15e:	b1b0      	cbz	r0, 800f18e <_vfiprintf_r+0x156>
 800f160:	9207      	str	r2, [sp, #28]
 800f162:	e014      	b.n	800f18e <_vfiprintf_r+0x156>
 800f164:	eba0 0308 	sub.w	r3, r0, r8
 800f168:	fa09 f303 	lsl.w	r3, r9, r3
 800f16c:	4313      	orrs	r3, r2
 800f16e:	9304      	str	r3, [sp, #16]
 800f170:	46a2      	mov	sl, r4
 800f172:	e7d2      	b.n	800f11a <_vfiprintf_r+0xe2>
 800f174:	9b03      	ldr	r3, [sp, #12]
 800f176:	1d19      	adds	r1, r3, #4
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	9103      	str	r1, [sp, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	bfbb      	ittet	lt
 800f180:	425b      	neglt	r3, r3
 800f182:	f042 0202 	orrlt.w	r2, r2, #2
 800f186:	9307      	strge	r3, [sp, #28]
 800f188:	9307      	strlt	r3, [sp, #28]
 800f18a:	bfb8      	it	lt
 800f18c:	9204      	strlt	r2, [sp, #16]
 800f18e:	7823      	ldrb	r3, [r4, #0]
 800f190:	2b2e      	cmp	r3, #46	; 0x2e
 800f192:	d10c      	bne.n	800f1ae <_vfiprintf_r+0x176>
 800f194:	7863      	ldrb	r3, [r4, #1]
 800f196:	2b2a      	cmp	r3, #42	; 0x2a
 800f198:	d135      	bne.n	800f206 <_vfiprintf_r+0x1ce>
 800f19a:	9b03      	ldr	r3, [sp, #12]
 800f19c:	1d1a      	adds	r2, r3, #4
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	9203      	str	r2, [sp, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	bfb8      	it	lt
 800f1a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f1aa:	3402      	adds	r4, #2
 800f1ac:	9305      	str	r3, [sp, #20]
 800f1ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f294 <_vfiprintf_r+0x25c>
 800f1b2:	7821      	ldrb	r1, [r4, #0]
 800f1b4:	2203      	movs	r2, #3
 800f1b6:	4650      	mov	r0, sl
 800f1b8:	f7f1 f81a 	bl	80001f0 <memchr>
 800f1bc:	b140      	cbz	r0, 800f1d0 <_vfiprintf_r+0x198>
 800f1be:	2340      	movs	r3, #64	; 0x40
 800f1c0:	eba0 000a 	sub.w	r0, r0, sl
 800f1c4:	fa03 f000 	lsl.w	r0, r3, r0
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	4303      	orrs	r3, r0
 800f1cc:	3401      	adds	r4, #1
 800f1ce:	9304      	str	r3, [sp, #16]
 800f1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d4:	482c      	ldr	r0, [pc, #176]	; (800f288 <_vfiprintf_r+0x250>)
 800f1d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1da:	2206      	movs	r2, #6
 800f1dc:	f7f1 f808 	bl	80001f0 <memchr>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d03f      	beq.n	800f264 <_vfiprintf_r+0x22c>
 800f1e4:	4b29      	ldr	r3, [pc, #164]	; (800f28c <_vfiprintf_r+0x254>)
 800f1e6:	bb1b      	cbnz	r3, 800f230 <_vfiprintf_r+0x1f8>
 800f1e8:	9b03      	ldr	r3, [sp, #12]
 800f1ea:	3307      	adds	r3, #7
 800f1ec:	f023 0307 	bic.w	r3, r3, #7
 800f1f0:	3308      	adds	r3, #8
 800f1f2:	9303      	str	r3, [sp, #12]
 800f1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f6:	443b      	add	r3, r7
 800f1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1fa:	e767      	b.n	800f0cc <_vfiprintf_r+0x94>
 800f1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f200:	460c      	mov	r4, r1
 800f202:	2001      	movs	r0, #1
 800f204:	e7a5      	b.n	800f152 <_vfiprintf_r+0x11a>
 800f206:	2300      	movs	r3, #0
 800f208:	3401      	adds	r4, #1
 800f20a:	9305      	str	r3, [sp, #20]
 800f20c:	4619      	mov	r1, r3
 800f20e:	f04f 0c0a 	mov.w	ip, #10
 800f212:	4620      	mov	r0, r4
 800f214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f218:	3a30      	subs	r2, #48	; 0x30
 800f21a:	2a09      	cmp	r2, #9
 800f21c:	d903      	bls.n	800f226 <_vfiprintf_r+0x1ee>
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d0c5      	beq.n	800f1ae <_vfiprintf_r+0x176>
 800f222:	9105      	str	r1, [sp, #20]
 800f224:	e7c3      	b.n	800f1ae <_vfiprintf_r+0x176>
 800f226:	fb0c 2101 	mla	r1, ip, r1, r2
 800f22a:	4604      	mov	r4, r0
 800f22c:	2301      	movs	r3, #1
 800f22e:	e7f0      	b.n	800f212 <_vfiprintf_r+0x1da>
 800f230:	ab03      	add	r3, sp, #12
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	462a      	mov	r2, r5
 800f236:	4b16      	ldr	r3, [pc, #88]	; (800f290 <_vfiprintf_r+0x258>)
 800f238:	a904      	add	r1, sp, #16
 800f23a:	4630      	mov	r0, r6
 800f23c:	f3af 8000 	nop.w
 800f240:	4607      	mov	r7, r0
 800f242:	1c78      	adds	r0, r7, #1
 800f244:	d1d6      	bne.n	800f1f4 <_vfiprintf_r+0x1bc>
 800f246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f248:	07d9      	lsls	r1, r3, #31
 800f24a:	d405      	bmi.n	800f258 <_vfiprintf_r+0x220>
 800f24c:	89ab      	ldrh	r3, [r5, #12]
 800f24e:	059a      	lsls	r2, r3, #22
 800f250:	d402      	bmi.n	800f258 <_vfiprintf_r+0x220>
 800f252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f254:	f7ff fe53 	bl	800eefe <__retarget_lock_release_recursive>
 800f258:	89ab      	ldrh	r3, [r5, #12]
 800f25a:	065b      	lsls	r3, r3, #25
 800f25c:	f53f af12 	bmi.w	800f084 <_vfiprintf_r+0x4c>
 800f260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f262:	e711      	b.n	800f088 <_vfiprintf_r+0x50>
 800f264:	ab03      	add	r3, sp, #12
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	462a      	mov	r2, r5
 800f26a:	4b09      	ldr	r3, [pc, #36]	; (800f290 <_vfiprintf_r+0x258>)
 800f26c:	a904      	add	r1, sp, #16
 800f26e:	4630      	mov	r0, r6
 800f270:	f000 f880 	bl	800f374 <_printf_i>
 800f274:	e7e4      	b.n	800f240 <_vfiprintf_r+0x208>
 800f276:	bf00      	nop
 800f278:	0800fda4 	.word	0x0800fda4
 800f27c:	0800fdc4 	.word	0x0800fdc4
 800f280:	0800fd84 	.word	0x0800fd84
 800f284:	0800fde4 	.word	0x0800fde4
 800f288:	0800fdee 	.word	0x0800fdee
 800f28c:	00000000 	.word	0x00000000
 800f290:	0800f013 	.word	0x0800f013
 800f294:	0800fdea 	.word	0x0800fdea

0800f298 <_printf_common>:
 800f298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f29c:	4616      	mov	r6, r2
 800f29e:	4699      	mov	r9, r3
 800f2a0:	688a      	ldr	r2, [r1, #8]
 800f2a2:	690b      	ldr	r3, [r1, #16]
 800f2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	bfb8      	it	lt
 800f2ac:	4613      	movlt	r3, r2
 800f2ae:	6033      	str	r3, [r6, #0]
 800f2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2b4:	4607      	mov	r7, r0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	b10a      	cbz	r2, 800f2be <_printf_common+0x26>
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6033      	str	r3, [r6, #0]
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	0699      	lsls	r1, r3, #26
 800f2c2:	bf42      	ittt	mi
 800f2c4:	6833      	ldrmi	r3, [r6, #0]
 800f2c6:	3302      	addmi	r3, #2
 800f2c8:	6033      	strmi	r3, [r6, #0]
 800f2ca:	6825      	ldr	r5, [r4, #0]
 800f2cc:	f015 0506 	ands.w	r5, r5, #6
 800f2d0:	d106      	bne.n	800f2e0 <_printf_common+0x48>
 800f2d2:	f104 0a19 	add.w	sl, r4, #25
 800f2d6:	68e3      	ldr	r3, [r4, #12]
 800f2d8:	6832      	ldr	r2, [r6, #0]
 800f2da:	1a9b      	subs	r3, r3, r2
 800f2dc:	42ab      	cmp	r3, r5
 800f2de:	dc26      	bgt.n	800f32e <_printf_common+0x96>
 800f2e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2e4:	1e13      	subs	r3, r2, #0
 800f2e6:	6822      	ldr	r2, [r4, #0]
 800f2e8:	bf18      	it	ne
 800f2ea:	2301      	movne	r3, #1
 800f2ec:	0692      	lsls	r2, r2, #26
 800f2ee:	d42b      	bmi.n	800f348 <_printf_common+0xb0>
 800f2f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2f4:	4649      	mov	r1, r9
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	47c0      	blx	r8
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	d01e      	beq.n	800f33c <_printf_common+0xa4>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	68e5      	ldr	r5, [r4, #12]
 800f302:	6832      	ldr	r2, [r6, #0]
 800f304:	f003 0306 	and.w	r3, r3, #6
 800f308:	2b04      	cmp	r3, #4
 800f30a:	bf08      	it	eq
 800f30c:	1aad      	subeq	r5, r5, r2
 800f30e:	68a3      	ldr	r3, [r4, #8]
 800f310:	6922      	ldr	r2, [r4, #16]
 800f312:	bf0c      	ite	eq
 800f314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f318:	2500      	movne	r5, #0
 800f31a:	4293      	cmp	r3, r2
 800f31c:	bfc4      	itt	gt
 800f31e:	1a9b      	subgt	r3, r3, r2
 800f320:	18ed      	addgt	r5, r5, r3
 800f322:	2600      	movs	r6, #0
 800f324:	341a      	adds	r4, #26
 800f326:	42b5      	cmp	r5, r6
 800f328:	d11a      	bne.n	800f360 <_printf_common+0xc8>
 800f32a:	2000      	movs	r0, #0
 800f32c:	e008      	b.n	800f340 <_printf_common+0xa8>
 800f32e:	2301      	movs	r3, #1
 800f330:	4652      	mov	r2, sl
 800f332:	4649      	mov	r1, r9
 800f334:	4638      	mov	r0, r7
 800f336:	47c0      	blx	r8
 800f338:	3001      	adds	r0, #1
 800f33a:	d103      	bne.n	800f344 <_printf_common+0xac>
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f344:	3501      	adds	r5, #1
 800f346:	e7c6      	b.n	800f2d6 <_printf_common+0x3e>
 800f348:	18e1      	adds	r1, r4, r3
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	2030      	movs	r0, #48	; 0x30
 800f34e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f352:	4422      	add	r2, r4
 800f354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f35c:	3302      	adds	r3, #2
 800f35e:	e7c7      	b.n	800f2f0 <_printf_common+0x58>
 800f360:	2301      	movs	r3, #1
 800f362:	4622      	mov	r2, r4
 800f364:	4649      	mov	r1, r9
 800f366:	4638      	mov	r0, r7
 800f368:	47c0      	blx	r8
 800f36a:	3001      	adds	r0, #1
 800f36c:	d0e6      	beq.n	800f33c <_printf_common+0xa4>
 800f36e:	3601      	adds	r6, #1
 800f370:	e7d9      	b.n	800f326 <_printf_common+0x8e>
	...

0800f374 <_printf_i>:
 800f374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	7e0f      	ldrb	r7, [r1, #24]
 800f37a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f37c:	2f78      	cmp	r7, #120	; 0x78
 800f37e:	4691      	mov	r9, r2
 800f380:	4680      	mov	r8, r0
 800f382:	460c      	mov	r4, r1
 800f384:	469a      	mov	sl, r3
 800f386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f38a:	d807      	bhi.n	800f39c <_printf_i+0x28>
 800f38c:	2f62      	cmp	r7, #98	; 0x62
 800f38e:	d80a      	bhi.n	800f3a6 <_printf_i+0x32>
 800f390:	2f00      	cmp	r7, #0
 800f392:	f000 80d8 	beq.w	800f546 <_printf_i+0x1d2>
 800f396:	2f58      	cmp	r7, #88	; 0x58
 800f398:	f000 80a3 	beq.w	800f4e2 <_printf_i+0x16e>
 800f39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3a4:	e03a      	b.n	800f41c <_printf_i+0xa8>
 800f3a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3aa:	2b15      	cmp	r3, #21
 800f3ac:	d8f6      	bhi.n	800f39c <_printf_i+0x28>
 800f3ae:	a101      	add	r1, pc, #4	; (adr r1, 800f3b4 <_printf_i+0x40>)
 800f3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3b4:	0800f40d 	.word	0x0800f40d
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f39d 	.word	0x0800f39d
 800f3c0:	0800f39d 	.word	0x0800f39d
 800f3c4:	0800f39d 	.word	0x0800f39d
 800f3c8:	0800f39d 	.word	0x0800f39d
 800f3cc:	0800f421 	.word	0x0800f421
 800f3d0:	0800f39d 	.word	0x0800f39d
 800f3d4:	0800f39d 	.word	0x0800f39d
 800f3d8:	0800f39d 	.word	0x0800f39d
 800f3dc:	0800f39d 	.word	0x0800f39d
 800f3e0:	0800f52d 	.word	0x0800f52d
 800f3e4:	0800f451 	.word	0x0800f451
 800f3e8:	0800f50f 	.word	0x0800f50f
 800f3ec:	0800f39d 	.word	0x0800f39d
 800f3f0:	0800f39d 	.word	0x0800f39d
 800f3f4:	0800f54f 	.word	0x0800f54f
 800f3f8:	0800f39d 	.word	0x0800f39d
 800f3fc:	0800f451 	.word	0x0800f451
 800f400:	0800f39d 	.word	0x0800f39d
 800f404:	0800f39d 	.word	0x0800f39d
 800f408:	0800f517 	.word	0x0800f517
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	602a      	str	r2, [r5, #0]
 800f414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f41c:	2301      	movs	r3, #1
 800f41e:	e0a3      	b.n	800f568 <_printf_i+0x1f4>
 800f420:	6820      	ldr	r0, [r4, #0]
 800f422:	6829      	ldr	r1, [r5, #0]
 800f424:	0606      	lsls	r6, r0, #24
 800f426:	f101 0304 	add.w	r3, r1, #4
 800f42a:	d50a      	bpl.n	800f442 <_printf_i+0xce>
 800f42c:	680e      	ldr	r6, [r1, #0]
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	2e00      	cmp	r6, #0
 800f432:	da03      	bge.n	800f43c <_printf_i+0xc8>
 800f434:	232d      	movs	r3, #45	; 0x2d
 800f436:	4276      	negs	r6, r6
 800f438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f43c:	485e      	ldr	r0, [pc, #376]	; (800f5b8 <_printf_i+0x244>)
 800f43e:	230a      	movs	r3, #10
 800f440:	e019      	b.n	800f476 <_printf_i+0x102>
 800f442:	680e      	ldr	r6, [r1, #0]
 800f444:	602b      	str	r3, [r5, #0]
 800f446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f44a:	bf18      	it	ne
 800f44c:	b236      	sxthne	r6, r6
 800f44e:	e7ef      	b.n	800f430 <_printf_i+0xbc>
 800f450:	682b      	ldr	r3, [r5, #0]
 800f452:	6820      	ldr	r0, [r4, #0]
 800f454:	1d19      	adds	r1, r3, #4
 800f456:	6029      	str	r1, [r5, #0]
 800f458:	0601      	lsls	r1, r0, #24
 800f45a:	d501      	bpl.n	800f460 <_printf_i+0xec>
 800f45c:	681e      	ldr	r6, [r3, #0]
 800f45e:	e002      	b.n	800f466 <_printf_i+0xf2>
 800f460:	0646      	lsls	r6, r0, #25
 800f462:	d5fb      	bpl.n	800f45c <_printf_i+0xe8>
 800f464:	881e      	ldrh	r6, [r3, #0]
 800f466:	4854      	ldr	r0, [pc, #336]	; (800f5b8 <_printf_i+0x244>)
 800f468:	2f6f      	cmp	r7, #111	; 0x6f
 800f46a:	bf0c      	ite	eq
 800f46c:	2308      	moveq	r3, #8
 800f46e:	230a      	movne	r3, #10
 800f470:	2100      	movs	r1, #0
 800f472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f476:	6865      	ldr	r5, [r4, #4]
 800f478:	60a5      	str	r5, [r4, #8]
 800f47a:	2d00      	cmp	r5, #0
 800f47c:	bfa2      	ittt	ge
 800f47e:	6821      	ldrge	r1, [r4, #0]
 800f480:	f021 0104 	bicge.w	r1, r1, #4
 800f484:	6021      	strge	r1, [r4, #0]
 800f486:	b90e      	cbnz	r6, 800f48c <_printf_i+0x118>
 800f488:	2d00      	cmp	r5, #0
 800f48a:	d04d      	beq.n	800f528 <_printf_i+0x1b4>
 800f48c:	4615      	mov	r5, r2
 800f48e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f492:	fb03 6711 	mls	r7, r3, r1, r6
 800f496:	5dc7      	ldrb	r7, [r0, r7]
 800f498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f49c:	4637      	mov	r7, r6
 800f49e:	42bb      	cmp	r3, r7
 800f4a0:	460e      	mov	r6, r1
 800f4a2:	d9f4      	bls.n	800f48e <_printf_i+0x11a>
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	d10b      	bne.n	800f4c0 <_printf_i+0x14c>
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	07de      	lsls	r6, r3, #31
 800f4ac:	d508      	bpl.n	800f4c0 <_printf_i+0x14c>
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	6861      	ldr	r1, [r4, #4]
 800f4b2:	4299      	cmp	r1, r3
 800f4b4:	bfde      	ittt	le
 800f4b6:	2330      	movle	r3, #48	; 0x30
 800f4b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f4c0:	1b52      	subs	r2, r2, r5
 800f4c2:	6122      	str	r2, [r4, #16]
 800f4c4:	f8cd a000 	str.w	sl, [sp]
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	aa03      	add	r2, sp, #12
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	4640      	mov	r0, r8
 800f4d0:	f7ff fee2 	bl	800f298 <_printf_common>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	d14c      	bne.n	800f572 <_printf_i+0x1fe>
 800f4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4dc:	b004      	add	sp, #16
 800f4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e2:	4835      	ldr	r0, [pc, #212]	; (800f5b8 <_printf_i+0x244>)
 800f4e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f4e8:	6829      	ldr	r1, [r5, #0]
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4f0:	6029      	str	r1, [r5, #0]
 800f4f2:	061d      	lsls	r5, r3, #24
 800f4f4:	d514      	bpl.n	800f520 <_printf_i+0x1ac>
 800f4f6:	07df      	lsls	r7, r3, #31
 800f4f8:	bf44      	itt	mi
 800f4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800f4fe:	6023      	strmi	r3, [r4, #0]
 800f500:	b91e      	cbnz	r6, 800f50a <_printf_i+0x196>
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	f023 0320 	bic.w	r3, r3, #32
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	2310      	movs	r3, #16
 800f50c:	e7b0      	b.n	800f470 <_printf_i+0xfc>
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	f043 0320 	orr.w	r3, r3, #32
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	2378      	movs	r3, #120	; 0x78
 800f518:	4828      	ldr	r0, [pc, #160]	; (800f5bc <_printf_i+0x248>)
 800f51a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f51e:	e7e3      	b.n	800f4e8 <_printf_i+0x174>
 800f520:	0659      	lsls	r1, r3, #25
 800f522:	bf48      	it	mi
 800f524:	b2b6      	uxthmi	r6, r6
 800f526:	e7e6      	b.n	800f4f6 <_printf_i+0x182>
 800f528:	4615      	mov	r5, r2
 800f52a:	e7bb      	b.n	800f4a4 <_printf_i+0x130>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	6826      	ldr	r6, [r4, #0]
 800f530:	6961      	ldr	r1, [r4, #20]
 800f532:	1d18      	adds	r0, r3, #4
 800f534:	6028      	str	r0, [r5, #0]
 800f536:	0635      	lsls	r5, r6, #24
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	d501      	bpl.n	800f540 <_printf_i+0x1cc>
 800f53c:	6019      	str	r1, [r3, #0]
 800f53e:	e002      	b.n	800f546 <_printf_i+0x1d2>
 800f540:	0670      	lsls	r0, r6, #25
 800f542:	d5fb      	bpl.n	800f53c <_printf_i+0x1c8>
 800f544:	8019      	strh	r1, [r3, #0]
 800f546:	2300      	movs	r3, #0
 800f548:	6123      	str	r3, [r4, #16]
 800f54a:	4615      	mov	r5, r2
 800f54c:	e7ba      	b.n	800f4c4 <_printf_i+0x150>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	1d1a      	adds	r2, r3, #4
 800f552:	602a      	str	r2, [r5, #0]
 800f554:	681d      	ldr	r5, [r3, #0]
 800f556:	6862      	ldr	r2, [r4, #4]
 800f558:	2100      	movs	r1, #0
 800f55a:	4628      	mov	r0, r5
 800f55c:	f7f0 fe48 	bl	80001f0 <memchr>
 800f560:	b108      	cbz	r0, 800f566 <_printf_i+0x1f2>
 800f562:	1b40      	subs	r0, r0, r5
 800f564:	6060      	str	r0, [r4, #4]
 800f566:	6863      	ldr	r3, [r4, #4]
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	2300      	movs	r3, #0
 800f56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f570:	e7a8      	b.n	800f4c4 <_printf_i+0x150>
 800f572:	6923      	ldr	r3, [r4, #16]
 800f574:	462a      	mov	r2, r5
 800f576:	4649      	mov	r1, r9
 800f578:	4640      	mov	r0, r8
 800f57a:	47d0      	blx	sl
 800f57c:	3001      	adds	r0, #1
 800f57e:	d0ab      	beq.n	800f4d8 <_printf_i+0x164>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	079b      	lsls	r3, r3, #30
 800f584:	d413      	bmi.n	800f5ae <_printf_i+0x23a>
 800f586:	68e0      	ldr	r0, [r4, #12]
 800f588:	9b03      	ldr	r3, [sp, #12]
 800f58a:	4298      	cmp	r0, r3
 800f58c:	bfb8      	it	lt
 800f58e:	4618      	movlt	r0, r3
 800f590:	e7a4      	b.n	800f4dc <_printf_i+0x168>
 800f592:	2301      	movs	r3, #1
 800f594:	4632      	mov	r2, r6
 800f596:	4649      	mov	r1, r9
 800f598:	4640      	mov	r0, r8
 800f59a:	47d0      	blx	sl
 800f59c:	3001      	adds	r0, #1
 800f59e:	d09b      	beq.n	800f4d8 <_printf_i+0x164>
 800f5a0:	3501      	adds	r5, #1
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	9903      	ldr	r1, [sp, #12]
 800f5a6:	1a5b      	subs	r3, r3, r1
 800f5a8:	42ab      	cmp	r3, r5
 800f5aa:	dcf2      	bgt.n	800f592 <_printf_i+0x21e>
 800f5ac:	e7eb      	b.n	800f586 <_printf_i+0x212>
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	f104 0619 	add.w	r6, r4, #25
 800f5b4:	e7f5      	b.n	800f5a2 <_printf_i+0x22e>
 800f5b6:	bf00      	nop
 800f5b8:	0800fdf5 	.word	0x0800fdf5
 800f5bc:	0800fe06 	.word	0x0800fe06

0800f5c0 <__sread>:
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c8:	f000 f954 	bl	800f874 <_read_r>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	bfab      	itete	ge
 800f5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f5d4:	181b      	addge	r3, r3, r0
 800f5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5da:	bfac      	ite	ge
 800f5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5de:	81a3      	strhlt	r3, [r4, #12]
 800f5e0:	bd10      	pop	{r4, pc}

0800f5e2 <__swrite>:
 800f5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e6:	461f      	mov	r7, r3
 800f5e8:	898b      	ldrh	r3, [r1, #12]
 800f5ea:	05db      	lsls	r3, r3, #23
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	4616      	mov	r6, r2
 800f5f2:	d505      	bpl.n	800f600 <__swrite+0x1e>
 800f5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f000 f928 	bl	800f850 <_lseek_r>
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f60a:	81a3      	strh	r3, [r4, #12]
 800f60c:	4632      	mov	r2, r6
 800f60e:	463b      	mov	r3, r7
 800f610:	4628      	mov	r0, r5
 800f612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f616:	f000 b869 	b.w	800f6ec <_write_r>

0800f61a <__sseek>:
 800f61a:	b510      	push	{r4, lr}
 800f61c:	460c      	mov	r4, r1
 800f61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f622:	f000 f915 	bl	800f850 <_lseek_r>
 800f626:	1c43      	adds	r3, r0, #1
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	bf15      	itete	ne
 800f62c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f636:	81a3      	strheq	r3, [r4, #12]
 800f638:	bf18      	it	ne
 800f63a:	81a3      	strhne	r3, [r4, #12]
 800f63c:	bd10      	pop	{r4, pc}

0800f63e <__sclose>:
 800f63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f642:	f000 b8d3 	b.w	800f7ec <_close_r>
	...

0800f648 <__swbuf_r>:
 800f648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64a:	460e      	mov	r6, r1
 800f64c:	4614      	mov	r4, r2
 800f64e:	4605      	mov	r5, r0
 800f650:	b118      	cbz	r0, 800f65a <__swbuf_r+0x12>
 800f652:	6983      	ldr	r3, [r0, #24]
 800f654:	b90b      	cbnz	r3, 800f65a <__swbuf_r+0x12>
 800f656:	f7ff fbb3 	bl	800edc0 <__sinit>
 800f65a:	4b21      	ldr	r3, [pc, #132]	; (800f6e0 <__swbuf_r+0x98>)
 800f65c:	429c      	cmp	r4, r3
 800f65e:	d12b      	bne.n	800f6b8 <__swbuf_r+0x70>
 800f660:	686c      	ldr	r4, [r5, #4]
 800f662:	69a3      	ldr	r3, [r4, #24]
 800f664:	60a3      	str	r3, [r4, #8]
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	071a      	lsls	r2, r3, #28
 800f66a:	d52f      	bpl.n	800f6cc <__swbuf_r+0x84>
 800f66c:	6923      	ldr	r3, [r4, #16]
 800f66e:	b36b      	cbz	r3, 800f6cc <__swbuf_r+0x84>
 800f670:	6923      	ldr	r3, [r4, #16]
 800f672:	6820      	ldr	r0, [r4, #0]
 800f674:	1ac0      	subs	r0, r0, r3
 800f676:	6963      	ldr	r3, [r4, #20]
 800f678:	b2f6      	uxtb	r6, r6
 800f67a:	4283      	cmp	r3, r0
 800f67c:	4637      	mov	r7, r6
 800f67e:	dc04      	bgt.n	800f68a <__swbuf_r+0x42>
 800f680:	4621      	mov	r1, r4
 800f682:	4628      	mov	r0, r5
 800f684:	f7ff fb08 	bl	800ec98 <_fflush_r>
 800f688:	bb30      	cbnz	r0, 800f6d8 <__swbuf_r+0x90>
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	60a3      	str	r3, [r4, #8]
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	6022      	str	r2, [r4, #0]
 800f696:	701e      	strb	r6, [r3, #0]
 800f698:	6963      	ldr	r3, [r4, #20]
 800f69a:	3001      	adds	r0, #1
 800f69c:	4283      	cmp	r3, r0
 800f69e:	d004      	beq.n	800f6aa <__swbuf_r+0x62>
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	07db      	lsls	r3, r3, #31
 800f6a4:	d506      	bpl.n	800f6b4 <__swbuf_r+0x6c>
 800f6a6:	2e0a      	cmp	r6, #10
 800f6a8:	d104      	bne.n	800f6b4 <__swbuf_r+0x6c>
 800f6aa:	4621      	mov	r1, r4
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7ff faf3 	bl	800ec98 <_fflush_r>
 800f6b2:	b988      	cbnz	r0, 800f6d8 <__swbuf_r+0x90>
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <__swbuf_r+0x9c>)
 800f6ba:	429c      	cmp	r4, r3
 800f6bc:	d101      	bne.n	800f6c2 <__swbuf_r+0x7a>
 800f6be:	68ac      	ldr	r4, [r5, #8]
 800f6c0:	e7cf      	b.n	800f662 <__swbuf_r+0x1a>
 800f6c2:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <__swbuf_r+0xa0>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	bf08      	it	eq
 800f6c8:	68ec      	ldreq	r4, [r5, #12]
 800f6ca:	e7ca      	b.n	800f662 <__swbuf_r+0x1a>
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f000 f81e 	bl	800f710 <__swsetup_r>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d0cb      	beq.n	800f670 <__swbuf_r+0x28>
 800f6d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f6dc:	e7ea      	b.n	800f6b4 <__swbuf_r+0x6c>
 800f6de:	bf00      	nop
 800f6e0:	0800fda4 	.word	0x0800fda4
 800f6e4:	0800fdc4 	.word	0x0800fdc4
 800f6e8:	0800fd84 	.word	0x0800fd84

0800f6ec <_write_r>:
 800f6ec:	b538      	push	{r3, r4, r5, lr}
 800f6ee:	4d07      	ldr	r5, [pc, #28]	; (800f70c <_write_r+0x20>)
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	4608      	mov	r0, r1
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	602a      	str	r2, [r5, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f7f2 ffb6 	bl	800266c <_write>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_write_r+0x1e>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_write_r+0x1e>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	20003b44 	.word	0x20003b44

0800f710 <__swsetup_r>:
 800f710:	4b32      	ldr	r3, [pc, #200]	; (800f7dc <__swsetup_r+0xcc>)
 800f712:	b570      	push	{r4, r5, r6, lr}
 800f714:	681d      	ldr	r5, [r3, #0]
 800f716:	4606      	mov	r6, r0
 800f718:	460c      	mov	r4, r1
 800f71a:	b125      	cbz	r5, 800f726 <__swsetup_r+0x16>
 800f71c:	69ab      	ldr	r3, [r5, #24]
 800f71e:	b913      	cbnz	r3, 800f726 <__swsetup_r+0x16>
 800f720:	4628      	mov	r0, r5
 800f722:	f7ff fb4d 	bl	800edc0 <__sinit>
 800f726:	4b2e      	ldr	r3, [pc, #184]	; (800f7e0 <__swsetup_r+0xd0>)
 800f728:	429c      	cmp	r4, r3
 800f72a:	d10f      	bne.n	800f74c <__swsetup_r+0x3c>
 800f72c:	686c      	ldr	r4, [r5, #4]
 800f72e:	89a3      	ldrh	r3, [r4, #12]
 800f730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f734:	0719      	lsls	r1, r3, #28
 800f736:	d42c      	bmi.n	800f792 <__swsetup_r+0x82>
 800f738:	06dd      	lsls	r5, r3, #27
 800f73a:	d411      	bmi.n	800f760 <__swsetup_r+0x50>
 800f73c:	2309      	movs	r3, #9
 800f73e:	6033      	str	r3, [r6, #0]
 800f740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f744:	81a3      	strh	r3, [r4, #12]
 800f746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f74a:	e03e      	b.n	800f7ca <__swsetup_r+0xba>
 800f74c:	4b25      	ldr	r3, [pc, #148]	; (800f7e4 <__swsetup_r+0xd4>)
 800f74e:	429c      	cmp	r4, r3
 800f750:	d101      	bne.n	800f756 <__swsetup_r+0x46>
 800f752:	68ac      	ldr	r4, [r5, #8]
 800f754:	e7eb      	b.n	800f72e <__swsetup_r+0x1e>
 800f756:	4b24      	ldr	r3, [pc, #144]	; (800f7e8 <__swsetup_r+0xd8>)
 800f758:	429c      	cmp	r4, r3
 800f75a:	bf08      	it	eq
 800f75c:	68ec      	ldreq	r4, [r5, #12]
 800f75e:	e7e6      	b.n	800f72e <__swsetup_r+0x1e>
 800f760:	0758      	lsls	r0, r3, #29
 800f762:	d512      	bpl.n	800f78a <__swsetup_r+0x7a>
 800f764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f766:	b141      	cbz	r1, 800f77a <__swsetup_r+0x6a>
 800f768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f76c:	4299      	cmp	r1, r3
 800f76e:	d002      	beq.n	800f776 <__swsetup_r+0x66>
 800f770:	4630      	mov	r0, r6
 800f772:	f7fe ffb1 	bl	800e6d8 <_free_r>
 800f776:	2300      	movs	r3, #0
 800f778:	6363      	str	r3, [r4, #52]	; 0x34
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	2300      	movs	r3, #0
 800f784:	6063      	str	r3, [r4, #4]
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	f043 0308 	orr.w	r3, r3, #8
 800f790:	81a3      	strh	r3, [r4, #12]
 800f792:	6923      	ldr	r3, [r4, #16]
 800f794:	b94b      	cbnz	r3, 800f7aa <__swsetup_r+0x9a>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7a0:	d003      	beq.n	800f7aa <__swsetup_r+0x9a>
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7ff fbd1 	bl	800ef4c <__smakebuf_r>
 800f7aa:	89a0      	ldrh	r0, [r4, #12]
 800f7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7b0:	f010 0301 	ands.w	r3, r0, #1
 800f7b4:	d00a      	beq.n	800f7cc <__swsetup_r+0xbc>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60a3      	str	r3, [r4, #8]
 800f7ba:	6963      	ldr	r3, [r4, #20]
 800f7bc:	425b      	negs	r3, r3
 800f7be:	61a3      	str	r3, [r4, #24]
 800f7c0:	6923      	ldr	r3, [r4, #16]
 800f7c2:	b943      	cbnz	r3, 800f7d6 <__swsetup_r+0xc6>
 800f7c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7c8:	d1ba      	bne.n	800f740 <__swsetup_r+0x30>
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	0781      	lsls	r1, r0, #30
 800f7ce:	bf58      	it	pl
 800f7d0:	6963      	ldrpl	r3, [r4, #20]
 800f7d2:	60a3      	str	r3, [r4, #8]
 800f7d4:	e7f4      	b.n	800f7c0 <__swsetup_r+0xb0>
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	e7f7      	b.n	800f7ca <__swsetup_r+0xba>
 800f7da:	bf00      	nop
 800f7dc:	20000030 	.word	0x20000030
 800f7e0:	0800fda4 	.word	0x0800fda4
 800f7e4:	0800fdc4 	.word	0x0800fdc4
 800f7e8:	0800fd84 	.word	0x0800fd84

0800f7ec <_close_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d06      	ldr	r5, [pc, #24]	; (800f808 <_close_r+0x1c>)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f2 ff64 	bl	80026c4 <_close>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_close_r+0x1a>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_close_r+0x1a>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	20003b44 	.word	0x20003b44

0800f80c <_fstat_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4d07      	ldr	r5, [pc, #28]	; (800f82c <_fstat_r+0x20>)
 800f810:	2300      	movs	r3, #0
 800f812:	4604      	mov	r4, r0
 800f814:	4608      	mov	r0, r1
 800f816:	4611      	mov	r1, r2
 800f818:	602b      	str	r3, [r5, #0]
 800f81a:	f7f2 ffa3 	bl	8002764 <_fstat>
 800f81e:	1c43      	adds	r3, r0, #1
 800f820:	d102      	bne.n	800f828 <_fstat_r+0x1c>
 800f822:	682b      	ldr	r3, [r5, #0]
 800f824:	b103      	cbz	r3, 800f828 <_fstat_r+0x1c>
 800f826:	6023      	str	r3, [r4, #0]
 800f828:	bd38      	pop	{r3, r4, r5, pc}
 800f82a:	bf00      	nop
 800f82c:	20003b44 	.word	0x20003b44

0800f830 <_isatty_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d06      	ldr	r5, [pc, #24]	; (800f84c <_isatty_r+0x1c>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	602b      	str	r3, [r5, #0]
 800f83c:	f7f2 ff00 	bl	8002640 <_isatty>
 800f840:	1c43      	adds	r3, r0, #1
 800f842:	d102      	bne.n	800f84a <_isatty_r+0x1a>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	b103      	cbz	r3, 800f84a <_isatty_r+0x1a>
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	bd38      	pop	{r3, r4, r5, pc}
 800f84c:	20003b44 	.word	0x20003b44

0800f850 <_lseek_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4d07      	ldr	r5, [pc, #28]	; (800f870 <_lseek_r+0x20>)
 800f854:	4604      	mov	r4, r0
 800f856:	4608      	mov	r0, r1
 800f858:	4611      	mov	r1, r2
 800f85a:	2200      	movs	r2, #0
 800f85c:	602a      	str	r2, [r5, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	f7f2 ff47 	bl	80026f2 <_lseek>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_lseek_r+0x1e>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_lseek_r+0x1e>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	20003b44 	.word	0x20003b44

0800f874 <_read_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_read_r+0x20>)
 800f878:	4604      	mov	r4, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	4611      	mov	r1, r2
 800f87e:	2200      	movs	r2, #0
 800f880:	602a      	str	r2, [r5, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f7f2 ff46 	bl	8002714 <_read>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_read_r+0x1e>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_read_r+0x1e>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	20003b44 	.word	0x20003b44

0800f898 <_init>:
 800f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89a:	bf00      	nop
 800f89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f89e:	bc08      	pop	{r3}
 800f8a0:	469e      	mov	lr, r3
 800f8a2:	4770      	bx	lr

0800f8a4 <_fini>:
 800f8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a6:	bf00      	nop
 800f8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8aa:	bc08      	pop	{r3}
 800f8ac:	469e      	mov	lr, r3
 800f8ae:	4770      	bx	lr
