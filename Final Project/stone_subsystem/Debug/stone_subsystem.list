
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f220  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800f3d0  0800f3d0  0001f3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f938  0800f938  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f938  0800f938  0001f938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f940  0800f940  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f940  0800f940  0001f940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003ab0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003b44  20003b44  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002691b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000582f  00000000  00000000  000469df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  0004c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001948  00000000  00000000  0004dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bad3  00000000  00000000  0004f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027bfe  00000000  00000000  0007b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e766d  00000000  00000000  000a2da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018a40e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a94  00000000  00000000  0018a460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f3b8 	.word	0x0800f3b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800f3b8 	.word	0x0800f3b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800f3d0 	.word	0x0800f3d0
 8000738:	0800f41c 	.word	0x0800f41c
 800073c:	0800f420 	.word	0x0800f420
 8000740:	200001b0 	.word	0x200001b0
 8000744:	200000b0 	.word	0x200000b0

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	0800f424 	.word	0x0800f424
 80008b0:	0800f42c 	.word	0x0800f42c
 80008b4:	0800f41c 	.word	0x0800f41c
 80008b8:	0800f434 	.word	0x0800f434
 80008bc:	0800f420 	.word	0x0800f420

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00d fbc2 	bl	800e150 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800f4e0 	.word	0x0800f4e0
 8000d0c:	0800f490 	.word	0x0800f490
 8000d10:	0800f494 	.word	0x0800f494

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800f498 	.word	0x0800f498
 8000dc0:	0800f4a8 	.word	0x0800f4a8
 8000dc4:	0800f4b0 	.word	0x0800f4b0
 8000dc8:	0800f494 	.word	0x0800f494

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800f4b4 	.word	0x0800f4b4
 8000e10:	0800f494 	.word	0x0800f494

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800f4c4 	.word	0x0800f4c4
 8000e3c:	0800f494 	.word	0x0800f494

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800f4e0 	.word	0x0800f4e0

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c0 	.word	0x200001c0
 8000e74:	200001bc 	.word	0x200001bc

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fd2d 	bl	80088ee <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b8 	.word	0x200001b8
 8000ea4:	200001ce 	.word	0x200001ce

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00d fa60 	bl	800e3b8 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	0800f4d8 	.word	0x0800f4d8

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00d fa44 	bl	800e3b8 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800f4d8 	.word	0x0800f4d8

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 fcba 	bl	80088ee <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	200001ce 	.word	0x200001ce
 8000f8c:	200001c4 	.word	0x200001c4
 8000f90:	200001bc 	.word	0x200001bc
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <I3G450D_Init+0x164>)
 8000fa2:	f002 fe81 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f002 f804 	bl	8002fb4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4852      	ldr	r0, [pc, #328]	; (80010fc <I3G450D_Init+0x164>)
 8000fb2:	f002 fe79 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f001 fffc 	bl	8002fb4 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <I3G450D_Init+0x168>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <I3G450D_Init+0x168>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	494c      	ldr	r1, [pc, #304]	; (8001100 <I3G450D_Init+0x168>)
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <I3G450D_Init+0x16c>)
 8000fd0:	f005 fe19 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4848      	ldr	r0, [pc, #288]	; (80010fc <I3G450D_Init+0x164>)
 8000fda:	f002 fe65 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 ffe8 	bl	8002fb4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <I3G450D_Init+0x164>)
 8000fea:	f002 fe5d 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 ffe0 	bl	8002fb4 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <I3G450D_Init+0x168>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <I3G450D_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	493e      	ldr	r1, [pc, #248]	; (8001100 <I3G450D_Init+0x168>)
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <I3G450D_Init+0x16c>)
 8001008:	f005 fdfd 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	483a      	ldr	r0, [pc, #232]	; (80010fc <I3G450D_Init+0x164>)
 8001012:	f002 fe49 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 ffcc 	bl	8002fb4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4836      	ldr	r0, [pc, #216]	; (80010fc <I3G450D_Init+0x164>)
 8001022:	f002 fe41 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 ffc4 	bl	8002fb4 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <I3G450D_Init+0x168>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <I3G450D_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4930      	ldr	r1, [pc, #192]	; (8001100 <I3G450D_Init+0x168>)
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <I3G450D_Init+0x16c>)
 8001040:	f005 fde1 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <I3G450D_Init+0x164>)
 800104a:	f002 fe2d 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 ffb0 	bl	8002fb4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4828      	ldr	r0, [pc, #160]	; (80010fc <I3G450D_Init+0x164>)
 800105a:	f002 fe25 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 ffa8 	bl	8002fb4 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <I3G450D_Init+0x168>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <I3G450D_Init+0x168>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4922      	ldr	r1, [pc, #136]	; (8001100 <I3G450D_Init+0x168>)
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <I3G450D_Init+0x16c>)
 8001078:	f005 fdc5 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <I3G450D_Init+0x164>)
 8001082:	f002 fe11 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 ff94 	bl	8002fb4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <I3G450D_Init+0x164>)
 8001092:	f002 fe09 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 ff8c 	bl	8002fb4 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <I3G450D_Init+0x168>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <I3G450D_Init+0x168>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <I3G450D_Init+0x168>)
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <I3G450D_Init+0x16c>)
 80010b0:	f005 fda9 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <I3G450D_Init+0x164>)
 80010ba:	f002 fdf5 	bl	8003ca8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 ff78 	bl	8002fb4 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <I3G450D_Init+0x164>)
 80010ca:	f002 fded 	bl	8003ca8 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <I3G450D_Init+0x168>)
 80010d0:	228f      	movs	r2, #143	; 0x8f
 80010d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	2201      	movs	r2, #1
 80010d8:	4909      	ldr	r1, [pc, #36]	; (8001100 <I3G450D_Init+0x168>)
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <I3G450D_Init+0x16c>)
 80010dc:	f005 fd93 	bl	8006c06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2201      	movs	r2, #1
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <I3G450D_Init+0x170>)
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <I3G450D_Init+0x16c>)
 80010e8:	f005 fec9 	bl	8006e7e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <I3G450D_Init+0x164>)
 80010f2:	f002 fdd9 	bl	8003ca8 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800
 8001100:	20003108 	.word	0x20003108
 8001104:	2000321c 	.word	0x2000321c
 8001108:	2000310d 	.word	0x2000310d

0800110c <I3G450D_loop>:

void I3G450D_loop(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	; 0x60
 8001110:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800111e:	2300      	movs	r3, #0
 8001120:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <I3G450D_loop+0x1b0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <I3G450D_loop+0x6a>
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 80ba 	beq.w	80012e8 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001174:	e36d      	b.n	8001852 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <I3G450D_loop+0x1b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 8368 	bne.w	8001850 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001186:	f002 fd8f 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <I3G450D_loop+0x1bc>)
 800118c:	22a8      	movs	r2, #168	; 0xa8
 800118e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	2201      	movs	r2, #1
 8001194:	494c      	ldr	r1, [pc, #304]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001196:	484d      	ldr	r0, [pc, #308]	; (80012cc <I3G450D_loop+0x1c0>)
 8001198:	f005 fd35 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	2201      	movs	r2, #1
 80011a0:	494b      	ldr	r1, [pc, #300]	; (80012d0 <I3G450D_loop+0x1c4>)
 80011a2:	484a      	ldr	r0, [pc, #296]	; (80012cc <I3G450D_loop+0x1c0>)
 80011a4:	f005 fe6b 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ae:	f002 fd7b 	bl	8003ca8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4843      	ldr	r0, [pc, #268]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011b8:	f002 fd76 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011be:	22a9      	movs	r2, #169	; 0xa9
 80011c0:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	2201      	movs	r2, #1
 80011c6:	4940      	ldr	r1, [pc, #256]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011c8:	4840      	ldr	r0, [pc, #256]	; (80012cc <I3G450D_loop+0x1c0>)
 80011ca:	f005 fd1c 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80011ce:	2332      	movs	r3, #50	; 0x32
 80011d0:	2201      	movs	r2, #1
 80011d2:	4940      	ldr	r1, [pc, #256]	; (80012d4 <I3G450D_loop+0x1c8>)
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <I3G450D_loop+0x1c0>)
 80011d6:	f005 fe52 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2102      	movs	r1, #2
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011e0:	f002 fd62 	bl	8003ca8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	4836      	ldr	r0, [pc, #216]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ea:	f002 fd5d 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011f4:	2332      	movs	r3, #50	; 0x32
 80011f6:	2201      	movs	r2, #1
 80011f8:	4933      	ldr	r1, [pc, #204]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011fa:	4834      	ldr	r0, [pc, #208]	; (80012cc <I3G450D_loop+0x1c0>)
 80011fc:	f005 fd03 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8001200:	2332      	movs	r3, #50	; 0x32
 8001202:	2201      	movs	r2, #1
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <I3G450D_loop+0x1cc>)
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <I3G450D_loop+0x1c0>)
 8001208:	f005 fe39 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001212:	f002 fd49 	bl	8003ca8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	482a      	ldr	r0, [pc, #168]	; (80012c4 <I3G450D_loop+0x1b8>)
 800121c:	f002 fd44 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001222:	22ab      	movs	r2, #171	; 0xab
 8001224:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	2201      	movs	r2, #1
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <I3G450D_loop+0x1bc>)
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <I3G450D_loop+0x1c0>)
 800122e:	f005 fcea 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	2201      	movs	r2, #1
 8001236:	4929      	ldr	r1, [pc, #164]	; (80012dc <I3G450D_loop+0x1d0>)
 8001238:	4824      	ldr	r0, [pc, #144]	; (80012cc <I3G450D_loop+0x1c0>)
 800123a:	f005 fe20 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001244:	f002 fd30 	bl	8003ca8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <I3G450D_loop+0x1b8>)
 800124e:	f002 fd2b 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001254:	22ac      	movs	r2, #172	; 0xac
 8001256:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001258:	2332      	movs	r3, #50	; 0x32
 800125a:	2201      	movs	r2, #1
 800125c:	491a      	ldr	r1, [pc, #104]	; (80012c8 <I3G450D_loop+0x1bc>)
 800125e:	481b      	ldr	r0, [pc, #108]	; (80012cc <I3G450D_loop+0x1c0>)
 8001260:	f005 fcd1 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	491d      	ldr	r1, [pc, #116]	; (80012e0 <I3G450D_loop+0x1d4>)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <I3G450D_loop+0x1c0>)
 800126c:	f005 fe07 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001276:	f002 fd17 	bl	8003ca8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001280:	f002 fd12 	bl	8003ca8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001286:	22ad      	movs	r2, #173	; 0xad
 8001288:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800128a:	2332      	movs	r3, #50	; 0x32
 800128c:	2201      	movs	r2, #1
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <I3G450D_loop+0x1c0>)
 8001292:	f005 fcb8 	bl	8006c06 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	2201      	movs	r2, #1
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <I3G450D_loop+0x1d8>)
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <I3G450D_loop+0x1c0>)
 800129e:	f005 fdee 	bl	8006e7e <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <I3G450D_loop+0x1b8>)
 80012a8:	f002 fcfe 	bl	8003ca8 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <I3G450D_loop+0x1b0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <I3G450D_loop+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
				break;
 80012b8:	e2ca      	b.n	8001850 <I3G450D_loop+0x744>
 80012ba:	bf00      	nop
 80012bc:	200001d0 	.word	0x200001d0
 80012c0:	20000000 	.word	0x20000000
 80012c4:	40020800 	.word	0x40020800
 80012c8:	20003108 	.word	0x20003108
 80012cc:	2000321c 	.word	0x2000321c
 80012d0:	2000310d 	.word	0x2000310d
 80012d4:	2000310e 	.word	0x2000310e
 80012d8:	2000310f 	.word	0x2000310f
 80012dc:	20003110 	.word	0x20003110
 80012e0:	20003111 	.word	0x20003111
 80012e4:	20003112 	.word	0x20003112
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80012e8:	4ba0      	ldr	r3, [pc, #640]	; (800156c <I3G450D_loop+0x460>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b9e      	ldr	r3, [pc, #632]	; (800156c <I3G450D_loop+0x460>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80012fe:	4b9b      	ldr	r3, [pc, #620]	; (800156c <I3G450D_loop+0x460>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <I3G450D_loop+0x460>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001314:	4b95      	ldr	r3, [pc, #596]	; (800156c <I3G450D_loop+0x460>)
 8001316:	799b      	ldrb	r3, [r3, #6]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <I3G450D_loop+0x460>)
 800131e:	795b      	ldrb	r3, [r3, #5]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <I3G450D_loop+0x464>)
 8001330:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <I3G450D_loop+0x468>)
 800133a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800133c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <I3G450D_loop+0x46c>)
 8001342:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001344:	4b8d      	ldr	r3, [pc, #564]	; (800157c <I3G450D_loop+0x470>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80d5 	bne.w	80014f8 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 800134e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <I3G450D_loop+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001584 <I3G450D_loop+0x478>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <I3G450D_loop+0x47c>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	b21b      	sxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <I3G450D_loop+0x480>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001584 <I3G450D_loop+0x478>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <I3G450D_loop+0x484>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001398:	b21b      	sxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <I3G450D_loop+0x488>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001584 <I3G450D_loop+0x478>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b79      	ldr	r3, [pc, #484]	; (8001598 <I3G450D_loop+0x48c>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <I3G450D_loop+0x490>)
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80013bc:	4b72      	ldr	r3, [pc, #456]	; (8001588 <I3G450D_loop+0x47c>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <I3G450D_loop+0x494>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dc0c      	bgt.n	80013ec <I3G450D_loop+0x2e0>
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <I3G450D_loop+0x494>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb1 7a67 	vneg.f32	s14, s15
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <I3G450D_loop+0x47c>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd1b      	ble.n	8001424 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <I3G450D_loop+0x47c>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <I3G450D_loop+0x498>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <I3G450D_loop+0x49c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <I3G450D_loop+0x49c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <I3G450D_loop+0x47c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <I3G450D_loop+0x498>)
 8001422:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001424:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <I3G450D_loop+0x484>)
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <I3G450D_loop+0x4a0>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dc0c      	bgt.n	8001454 <I3G450D_loop+0x348>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <I3G450D_loop+0x4a0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eeb1 7a67 	vneg.f32	s14, s15
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <I3G450D_loop+0x484>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd1b      	ble.n	800148c <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <I3G450D_loop+0x484>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <I3G450D_loop+0x4a4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <I3G450D_loop+0x484>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <I3G450D_loop+0x4a4>)
 800148a:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <I3G450D_loop+0x48c>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <I3G450D_loop+0x4ac>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dc0d      	bgt.n	80014be <I3G450D_loop+0x3b2>
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <I3G450D_loop+0x4ac>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eeb1 7a67 	vneg.f32	s14, s15
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <I3G450D_loop+0x48c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	f340 81c2 	ble.w	8001842 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <I3G450D_loop+0x48c>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <I3G450D_loop+0x4b0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <I3G450D_loop+0x48c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <I3G450D_loop+0x4b0>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e1a4      	b.n	8001842 <I3G450D_loop+0x736>
				switch(currentcalistate)
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <I3G450D_loop+0x470>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 819b 	beq.w	8001838 <I3G450D_loop+0x72c>
 8001502:	2b02      	cmp	r3, #2
 8001504:	f300 819a 	bgt.w	800183c <I3G450D_loop+0x730>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <I3G450D_loop+0x406>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d029      	beq.n	8001564 <I3G450D_loop+0x458>
						break;
 8001510:	e194      	b.n	800183c <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800151a:	b211      	sxth	r1, r2
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <I3G450D_loop+0x4bc>)
 800151e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800152a:	b211      	sxth	r1, r2
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <I3G450D_loop+0x4c0>)
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001538:	b211      	sxth	r1, r2
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <I3G450D_loop+0x4c4>)
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001548:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <I3G450D_loop+0x4b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001552:	f0c0 8175 	bcc.w	8001840 <I3G450D_loop+0x734>
							caliCounter=0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <I3G450D_loop+0x470>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
						break;
 8001562:	e16d      	b.n	8001840 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001568:	e0a5      	b.n	80016b6 <I3G450D_loop+0x5aa>
 800156a:	bf00      	nop
 800156c:	2000310c 	.word	0x2000310c
 8001570:	2000021c 	.word	0x2000021c
 8001574:	2000021e 	.word	0x2000021e
 8001578:	20000220 	.word	0x20000220
 800157c:	200001cf 	.word	0x200001cf
 8001580:	200001e0 	.word	0x200001e0
 8001584:	3d8f5c29 	.word	0x3d8f5c29
 8001588:	200001d4 	.word	0x200001d4
 800158c:	200001e4 	.word	0x200001e4
 8001590:	200001d8 	.word	0x200001d8
 8001594:	200001e8 	.word	0x200001e8
 8001598:	200001dc 	.word	0x200001dc
 800159c:	3b449ba6 	.word	0x3b449ba6
 80015a0:	200001ec 	.word	0x200001ec
 80015a4:	20000204 	.word	0x20000204
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	200001f0 	.word	0x200001f0
 80015b0:	20000208 	.word	0x20000208
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	200001f4 	.word	0x200001f4
 80015bc:	2000020c 	.word	0x2000020c
 80015c0:	20000200 	.word	0x20000200
 80015c4:	20000224 	.word	0x20000224
 80015c8:	20000228 	.word	0x20000228
 80015cc:	200011c8 	.word	0x200011c8
 80015d0:	20002168 	.word	0x20002168
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	443b      	add	r3, r7
 80015dc:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	499d      	ldr	r1, [pc, #628]	; (800185c <I3G450D_loop+0x750>)
 80015e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ea:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015ee:	4413      	add	r3, r2
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3360      	adds	r3, #96	; 0x60
 80015f8:	443b      	add	r3, r7
 80015fa:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80015fe:	461a      	mov	r2, r3
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	4996      	ldr	r1, [pc, #600]	; (8001860 <I3G450D_loop+0x754>)
 8001606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001608:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800160c:	4413      	add	r3, r2
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	443b      	add	r3, r7
 8001618:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800161c:	461a      	mov	r2, r3
 800161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <I3G450D_loop+0x758>)
 8001624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001626:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800162a:	4413      	add	r3, r2
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800162e:	4a8b      	ldr	r2, [pc, #556]	; (800185c <I3G450D_loop+0x750>)
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	443b      	add	r3, r7
 800163e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <I3G450D_loop+0x754>)
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800164a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	443b      	add	r3, r7
 8001652:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001656:	4a83      	ldr	r2, [pc, #524]	; (8001864 <I3G450D_loop+0x758>)
 8001658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800165e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3360      	adds	r3, #96	; 0x60
 8001664:	443b      	add	r3, r7
 8001666:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <I3G450D_loop+0x75c>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a7c      	ldr	r2, [pc, #496]	; (800186c <I3G450D_loop+0x760>)
 800167a:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <I3G450D_loop+0x75c>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1092      	asrs	r2, r2, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <I3G450D_loop+0x764>)
 800168c:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	4a75      	ldr	r2, [pc, #468]	; (8001868 <I3G450D_loop+0x75c>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1092      	asrs	r2, r2, #2
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a75      	ldr	r2, [pc, #468]	; (8001874 <I3G450D_loop+0x768>)
 800169e:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	3301      	adds	r3, #1
 80016a4:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80016a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d901      	bls.n	80016b0 <I3G450D_loop+0x5a4>
									windowPosition=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	3301      	adds	r3, #1
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016bc:	d38a      	bcc.n	80015d4 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c2:	e089      	b.n	80017d8 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <I3G450D_loop+0x750>)
 80016c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <I3G450D_loop+0x760>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <I3G450D_loop+0x76c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd0a      	ble.n	80016f2 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <I3G450D_loop+0x750>)
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <I3G450D_loop+0x760>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a62      	ldr	r2, [pc, #392]	; (8001878 <I3G450D_loop+0x76c>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e015      	b.n	800171e <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <I3G450D_loop+0x750>)
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <I3G450D_loop+0x760>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <I3G450D_loop+0x76c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	425b      	negs	r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	da08      	bge.n	800171e <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <I3G450D_loop+0x760>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4952      	ldr	r1, [pc, #328]	; (800185c <I3G450D_loop+0x750>)
 8001712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001714:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <I3G450D_loop+0x76c>)
 800171c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800171e:	4a50      	ldr	r2, [pc, #320]	; (8001860 <I3G450D_loop+0x754>)
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001726:	461a      	mov	r2, r3
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <I3G450D_loop+0x764>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <I3G450D_loop+0x770>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	dd0a      	ble.n	800174c <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <I3G450D_loop+0x754>)
 8001738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800173e:	461a      	mov	r2, r3
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <I3G450D_loop+0x764>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <I3G450D_loop+0x770>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e015      	b.n	8001778 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <I3G450D_loop+0x754>)
 800174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001754:	461a      	mov	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <I3G450D_loop+0x764>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <I3G450D_loop+0x770>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	425b      	negs	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	da08      	bge.n	8001778 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <I3G450D_loop+0x764>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	493d      	ldr	r1, [pc, #244]	; (8001860 <I3G450D_loop+0x754>)
 800176c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800176e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <I3G450D_loop+0x770>)
 8001776:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <I3G450D_loop+0x758>)
 800177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	461a      	mov	r2, r3
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <I3G450D_loop+0x768>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <I3G450D_loop+0x774>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd0a      	ble.n	80017a6 <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <I3G450D_loop+0x758>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001798:	461a      	mov	r2, r3
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <I3G450D_loop+0x768>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <I3G450D_loop+0x774>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e015      	b.n	80017d2 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <I3G450D_loop+0x758>)
 80017a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <I3G450D_loop+0x768>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <I3G450D_loop+0x774>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	425b      	negs	r3, r3
 80017bc:	429a      	cmp	r2, r3
 80017be:	da08      	bge.n	80017d2 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <I3G450D_loop+0x768>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4927      	ldr	r1, [pc, #156]	; (8001864 <I3G450D_loop+0x758>)
 80017c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <I3G450D_loop+0x774>)
 80017d0:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d4:	3301      	adds	r3, #1
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017de:	f4ff af71 	bcc.w	80016c4 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <I3G450D_loop+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001884 <I3G450D_loop+0x778>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <I3G450D_loop+0x77c>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <I3G450D_loop+0x770>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001884 <I3G450D_loop+0x778>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <I3G450D_loop+0x780>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <I3G450D_loop+0x774>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001884 <I3G450D_loop+0x778>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <I3G450D_loop+0x784>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <I3G450D_loop+0x788>)
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
							break;
 8001836:	e004      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001838:	bf00      	nop
 800183a:	e002      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001840:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <I3G450D_loop+0x78c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <I3G450D_loop+0x790>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e000      	b.n	8001852 <I3G450D_loop+0x746>
				break;
 8001850:	bf00      	nop

		}
}
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	; 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000228 	.word	0x20000228
 8001860:	200011c8 	.word	0x200011c8
 8001864:	20002168 	.word	0x20002168
 8001868:	66666667 	.word	0x66666667
 800186c:	200001e0 	.word	0x200001e0
 8001870:	200001e4 	.word	0x200001e4
 8001874:	200001e8 	.word	0x200001e8
 8001878:	20000210 	.word	0x20000210
 800187c:	20000214 	.word	0x20000214
 8001880:	20000218 	.word	0x20000218
 8001884:	3d8f5c29 	.word	0x3d8f5c29
 8001888:	200001ec 	.word	0x200001ec
 800188c:	200001f0 	.word	0x200001f0
 8001890:	200001f4 	.word	0x200001f4
 8001894:	200001cf 	.word	0x200001cf
 8001898:	200001d0 	.word	0x200001d0
 800189c:	20000000 	.word	0x20000000

080018a0 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cx){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	6078      	str	r0, [r7, #4]
	uint8_t ctrl_reg =LIS3DH_readReg(0x20);
	uint8_t who_am_i = LIS3DH_readReg(0x0f);
	*/
	uint8_t check;
	uint8_t Data;
	HAL_I2C_Mem_Read(I2Cx, LIS3DH_ADDR, WHO_AM_I, 1, &check, 1, i2c_timeout);
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	2301      	movs	r3, #1
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	220f      	movs	r2, #15
 80018ba:	2119      	movs	r1, #25
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f003 ff5b 	bl	8005778 <HAL_I2C_Mem_Read>





}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d2:	f001 fafd 	bl	8002ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d6:	f000 f859 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018da:	f000 fafd 	bl	8001ed8 <MX_GPIO_Init>
  MX_CRC_Init();
 80018de:	f000 f8bf 	bl	8001a60 <MX_CRC_Init>
  MX_I2C3_Init();
 80018e2:	f000 f911 	bl	8001b08 <MX_I2C3_Init>
  MX_SPI5_Init();
 80018e6:	f000 f985 	bl	8001bf4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80018ea:	f000 f9b9 	bl	8001c60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80018ee:	f000 fa7f 	bl	8001df0 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80018f2:	f000 fad1 	bl	8001e98 <MX_DMA_Init>
  MX_TIM2_Init();
 80018f6:	f000 fa07 	bl	8001d08 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80018fa:	f000 faa3 	bl	8001e44 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80018fe:	f000 f943 	bl	8001b88 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001902:	f008 ff73 	bl	800a7ec <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001906:	f00c f8e5 	bl	800dad4 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 800190a:	f000 f8bd 	bl	8001a88 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 800190e:	f7ff fb43 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <main+0xb8>)
 8001914:	f000 fdb2 	bl	800247c <RetargetInit>
  ConsoleInit(&huart1);
 8001918:	481a      	ldr	r0, [pc, #104]	; (8001984 <main+0xb8>)
 800191a:	f7fe fee5 	bl	80006e8 <ConsoleInit>
  Lis3dhInit(&hi2c2);
 800191e:	481a      	ldr	r0, [pc, #104]	; (8001988 <main+0xbc>)
 8001920:	f7ff ffbe 	bl	80018a0 <Lis3dhInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8001928:	230b      	movs	r3, #11
 800192a:	717b      	strb	r3, [r7, #5]
  hi2c2;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800192c:	f00c f8f8 	bl	800db20 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	71bb      	strb	r3, [r7, #6]
 8001934:	e01b      	b.n	800196e <main+0xa2>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001936:	79ba      	ldrb	r2, [r7, #6]
 8001938:	797b      	ldrb	r3, [r7, #5]
 800193a:	fb12 f303 	smulbb	r3, r2, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4413      	add	r3, r2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	227f      	movs	r2, #127	; 0x7f
 8001948:	21ff      	movs	r1, #255	; 0xff
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fcca 	bl	80022e4 <hsl_to_rgb>
 8001950:	6038      	str	r0, [r7, #0]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	b2d9      	uxtb	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b2da      	uxtb	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	79b8      	ldrb	r0, [r7, #6]
 8001964:	f000 fe64 	bl	8002630 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	3301      	adds	r3, #1
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d9e0      	bls.n	8001936 <main+0x6a>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	3301      	adds	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
	  		//led_render();
	  		// Some delay*/


	  		ConsoleProcess();
 800197a:	f7fe fee5 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 800197e:	f7ff fbc5 	bl	800110c <I3G450D_loop>
    MX_USB_HOST_Process();
 8001982:	e7d3      	b.n	800192c <main+0x60>
 8001984:	20003364 	.word	0x20003364
 8001988:	2000311c 	.word	0x2000311c

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	; 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	; 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f00c fc24 	bl	800e1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <SystemClock_Config+0xcc>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	; 0x40
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d8:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <SystemClock_Config+0xd0>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <SystemClock_Config+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a04:	2348      	movs	r3, #72	; 0x48
 8001a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 fbd5 	bl	80061c4 <HAL_RCC_OscConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a20:	f000 fd26 	bl	8002470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fe37 	bl	80066b4 <HAL_RCC_ClockConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a4c:	f000 fd10 	bl	8002470 <Error_Handler>
  }
}
 8001a50:	bf00      	nop
 8001a52:	3750      	adds	r7, #80	; 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_CRC_Init+0x20>)
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <MX_CRC_Init+0x24>)
 8001a68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_CRC_Init+0x20>)
 8001a6c:	f001 fbd7 	bl	800321e <HAL_CRC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001a76:	f000 fcfb 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20003114 	.word	0x20003114
 8001a84:	40023000 	.word	0x40023000

08001a88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_I2C2_Init+0x74>)
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <MX_I2C2_Init+0x78>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_I2C2_Init+0x74>)
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <MX_I2C2_Init+0x7c>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_I2C2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_I2C2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_I2C2_Init+0x74>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_I2C2_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_I2C2_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_I2C2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_I2C2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <MX_I2C2_Init+0x74>)
 8001ac6:	f003 fd13 	bl	80054f0 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 fcce 	bl	8002470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <MX_I2C2_Init+0x74>)
 8001ad8:	f004 faf8 	bl	80060cc <HAL_I2CEx_ConfigAnalogFilter>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001ae2:	f000 fcc5 	bl	8002470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_I2C2_Init+0x74>)
 8001aea:	f004 fb2b 	bl	8006144 <HAL_I2CEx_ConfigDigitalFilter>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001af4:	f000 fcbc 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000311c 	.word	0x2000311c
 8001b00:	40005800 	.word	0x40005800
 8001b04:	000186a0 	.word	0x000186a0

08001b08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MX_I2C3_Init+0x78>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <MX_I2C3_Init+0x7c>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b46:	f003 fcd3 	bl	80054f0 <HAL_I2C_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b50:	f000 fc8e 	bl	8002470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b58:	f004 fab8 	bl	80060cc <HAL_I2CEx_ConfigAnalogFilter>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b62:	f000 fc85 	bl	8002470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C3_Init+0x74>)
 8001b6a:	f004 faeb 	bl	8006144 <HAL_I2CEx_ConfigDigitalFilter>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b74:	f000 fc7c 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20003170 	.word	0x20003170
 8001b80:	40005c00 	.word	0x40005c00
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_SPI3_Init+0x64>)
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_SPI3_Init+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI3_Init+0x64>)
 8001b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI3_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_SPI3_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI3_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_SPI3_Init+0x64>)
 8001bda:	f004 ff8b 	bl	8006af4 <HAL_SPI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001be4:	f000 fc44 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200031c4 	.word	0x200031c4
 8001bf0:	40003c00 	.word	0x40003c00

08001bf4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <MX_SPI5_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c28:	2218      	movs	r2, #24
 8001c2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_SPI5_Init+0x64>)
 8001c46:	f004 ff55 	bl	8006af4 <HAL_SPI_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c50:	f000 fc0e 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000321c 	.word	0x2000321c
 8001c5c:	40015000 	.word	0x40015000

08001c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <MX_TIM1_Init+0xa4>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ca8:	4815      	ldr	r0, [pc, #84]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001caa:	f005 fccb 	bl	8007644 <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cb4:	f000 fbdc 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001cc6:	f006 f801 	bl	8007ccc <HAL_TIM_ConfigClockSource>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cd0:	f000 fbce 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001ce2:	f006 fbf3 	bl	80084cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cec:	f000 fbc0 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM1_Init+0xa0>)
 8001cf2:	f000 fef3 	bl	8002adc <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20003274 	.word	0x20003274
 8001d04:	40010000 	.word	0x40010000

08001d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d4e:	223b      	movs	r2, #59	; 0x3b
 8001d50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d5e:	4823      	ldr	r0, [pc, #140]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d60:	f005 fc70 	bl	8007644 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001d6a:	f000 fb81 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481c      	ldr	r0, [pc, #112]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d7c:	f005 ffa6 	bl	8007ccc <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001d86:	f000 fb73 	bl	8002470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d8a:	4818      	ldr	r0, [pc, #96]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001d8c:	f005 fca9 	bl	80076e2 <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001d96:	f000 fb6b 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	4619      	mov	r1, r3
 8001da8:	4810      	ldr	r0, [pc, #64]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001daa:	f006 fb8f 	bl	80084cc <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001db4:	f000 fb5c 	bl	8002470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001dd0:	f005 feba 	bl	8007b48 <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001dda:	f000 fb49 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM2_Init+0xe4>)
 8001de0:	f000 feec 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 8001de4:	bf00      	nop
 8001de6:	3738      	adds	r7, #56	; 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200032bc 	.word	0x200032bc

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_USART1_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e28:	f006 fbe0 	bl	80085ec <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f000 fb1d 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20003364 	.word	0x20003364
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <MX_USART2_UART_Init+0x50>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e50:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f006 fbb6 	bl	80085ec <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e86:	f000 faf3 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200033a8 	.word	0x200033a8
 8001e94:	40004400 	.word	0x40004400

08001e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_DMA_Init+0x3c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <MX_DMA_Init+0x3c>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_DMA_Init+0x3c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2010      	movs	r0, #16
 8001ec0:	f001 f977 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ec4:	2010      	movs	r0, #16
 8001ec6:	f001 f990 	bl	80031ea <HAL_NVIC_EnableIRQ>

}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	4bb2      	ldr	r3, [pc, #712]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4ab1      	ldr	r2, [pc, #708]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4baf      	ldr	r3, [pc, #700]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	4bab      	ldr	r3, [pc, #684]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4aaa      	ldr	r2, [pc, #680]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4ba8      	ldr	r3, [pc, #672]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	4ba4      	ldr	r3, [pc, #656]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4aa3      	ldr	r2, [pc, #652]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4ba1      	ldr	r3, [pc, #644]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	4b9d      	ldr	r3, [pc, #628]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a9c      	ldr	r2, [pc, #624]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b96      	ldr	r3, [pc, #600]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a95      	ldr	r2, [pc, #596]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b93      	ldr	r3, [pc, #588]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b8f      	ldr	r3, [pc, #572]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a8e      	ldr	r2, [pc, #568]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b8c      	ldr	r3, [pc, #560]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a80      	ldr	r2, [pc, #512]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <MX_GPIO_Init+0x2e4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2116      	movs	r1, #22
 8001fd2:	487b      	ldr	r0, [pc, #492]	; (80021c0 <MX_GPIO_Init+0x2e8>)
 8001fd4:	f001 fe68 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	4879      	ldr	r0, [pc, #484]	; (80021c4 <MX_GPIO_Init+0x2ec>)
 8001fde:	f001 fe63 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f243 0104 	movw	r1, #12292	; 0x3004
 8001fe8:	4877      	ldr	r0, [pc, #476]	; (80021c8 <MX_GPIO_Init+0x2f0>)
 8001fea:	f001 fe5d 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ff4:	4875      	ldr	r0, [pc, #468]	; (80021cc <MX_GPIO_Init+0x2f4>)
 8001ff6:	f001 fe57 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 8001ffa:	f64f 0338 	movw	r3, #63544	; 0xf838
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800200c:	230c      	movs	r3, #12
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	486e      	ldr	r0, [pc, #440]	; (80021d0 <MX_GPIO_Init+0x2f8>)
 8002018:	f001 fc9a 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800201c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800202e:	230e      	movs	r3, #14
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	4865      	ldr	r0, [pc, #404]	; (80021d0 <MX_GPIO_Init+0x2f8>)
 800203a:	f001 fc89 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800203e:	2301      	movs	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800204e:	230c      	movs	r3, #12
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4859      	ldr	r0, [pc, #356]	; (80021c0 <MX_GPIO_Init+0x2e8>)
 800205a:	f001 fc79 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800205e:	2316      	movs	r3, #22
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	4619      	mov	r1, r3
 8002074:	4852      	ldr	r0, [pc, #328]	; (80021c0 <MX_GPIO_Init+0x2e8>)
 8002076:	f001 fc6b 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800207a:	2307      	movs	r3, #7
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800207e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	484d      	ldr	r0, [pc, #308]	; (80021c4 <MX_GPIO_Init+0x2ec>)
 8002090:	f001 fc5e 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002094:	f641 0358 	movw	r3, #6232	; 0x1858
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a6:	230e      	movs	r3, #14
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4844      	ldr	r0, [pc, #272]	; (80021c4 <MX_GPIO_Init+0x2ec>)
 80020b2:	f001 fc4d 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	483d      	ldr	r0, [pc, #244]	; (80021c4 <MX_GPIO_Init+0x2ec>)
 80020ce:	f001 fc3f 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80020d2:	2320      	movs	r3, #32
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	4836      	ldr	r0, [pc, #216]	; (80021c0 <MX_GPIO_Init+0x2e8>)
 80020e8:	f001 fc32 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80020ec:	2303      	movs	r3, #3
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020fc:	2309      	movs	r3, #9
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	4833      	ldr	r0, [pc, #204]	; (80021d4 <MX_GPIO_Init+0x2fc>)
 8002108:	f001 fc22 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800210c:	2304      	movs	r3, #4
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	482d      	ldr	r0, [pc, #180]	; (80021d4 <MX_GPIO_Init+0x2fc>)
 8002120:	f001 fc16 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002124:	f248 1333 	movw	r3, #33075	; 0x8133
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002136:	230c      	movs	r3, #12
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4822      	ldr	r0, [pc, #136]	; (80021cc <MX_GPIO_Init+0x2f4>)
 8002142:	f001 fc05 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002146:	f64f 7383 	movw	r3, #65411	; 0xff83
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002158:	230c      	movs	r3, #12
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	481d      	ldr	r0, [pc, #116]	; (80021d8 <MX_GPIO_Init+0x300>)
 8002164:	f001 fbf4 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002168:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800217a:	230e      	movs	r3, #14
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4813      	ldr	r0, [pc, #76]	; (80021d4 <MX_GPIO_Init+0x2fc>)
 8002186:	f001 fbe3 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800218a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800219c:	230c      	movs	r3, #12
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4808      	ldr	r0, [pc, #32]	; (80021c8 <MX_GPIO_Init+0x2f0>)
 80021a8:	f001 fbd2 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80021ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e010      	b.n	80021dc <MX_GPIO_Init+0x304>
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021400 	.word	0x40021400
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40021000 	.word	0x40021000
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	483b      	ldr	r0, [pc, #236]	; (80022d4 <MX_GPIO_Init+0x3fc>)
 80021e6:	f001 fbb3 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 80021ea:	f243 0304 	movw	r3, #12292	; 0x3004
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4834      	ldr	r0, [pc, #208]	; (80022d4 <MX_GPIO_Init+0x3fc>)
 8002204:	f001 fba4 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002208:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221a:	230e      	movs	r3, #14
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	482c      	ldr	r0, [pc, #176]	; (80022d8 <MX_GPIO_Init+0x400>)
 8002226:	f001 fb93 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 800222a:	23c0      	movs	r3, #192	; 0xc0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223a:	230e      	movs	r3, #14
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4825      	ldr	r0, [pc, #148]	; (80022dc <MX_GPIO_Init+0x404>)
 8002246:	f001 fb83 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 800224a:	2308      	movs	r3, #8
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800225a:	230e      	movs	r3, #14
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4619      	mov	r1, r3
 8002264:	481b      	ldr	r0, [pc, #108]	; (80022d4 <MX_GPIO_Init+0x3fc>)
 8002266:	f001 fb73 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800226a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800227c:	2309      	movs	r3, #9
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <MX_GPIO_Init+0x400>)
 8002288:	f001 fb62 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800228c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MX_GPIO_Init+0x400>)
 80022a6:	f001 fb53 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80022aa:	2360      	movs	r3, #96	; 0x60
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022ba:	230c      	movs	r3, #12
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4806      	ldr	r0, [pc, #24]	; (80022e0 <MX_GPIO_Init+0x408>)
 80022c6:	f001 fb43 	bl	8003950 <HAL_GPIO_Init>

}
 80022ca:	bf00      	nop
 80022cc:	3738      	adds	r7, #56	; 0x38
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020400 	.word	0x40020400

080022e4 <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	460b      	mov	r3, r1
 80022f0:	71bb      	strb	r3, [r7, #6]
 80022f2:	4613      	mov	r3, r2
 80022f4:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 80022f6:	797b      	ldrb	r3, [r7, #5]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <hsl_to_rgb+0x1c>
 80022fc:	2300      	movs	r3, #0
 80022fe:	e0b1      	b.n	8002464 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002300:	797b      	ldrb	r3, [r7, #5]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800230a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db09      	blt.n	8002326 <hsl_to_rgb+0x42>
 8002312:	89bb      	ldrh	r3, [r7, #12]
 8002314:	b29b      	uxth	r3, r3
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	79ba      	ldrb	r2, [r7, #6]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	121b      	asrs	r3, r3, #8
 8002320:	b2db      	uxtb	r3, r3
 8002322:	74fb      	strb	r3, [r7, #19]
 8002324:	e00a      	b.n	800233c <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8002326:	89bb      	ldrh	r3, [r7, #12]
 8002328:	b29b      	uxth	r3, r3
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002330:	79ba      	ldrb	r2, [r7, #6]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	121b      	asrs	r3, r3, #8
 8002338:	b2db      	uxtb	r3, r3
 800233a:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	0052      	lsls	r2, r2, #1
 8002344:	4413      	add	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	b29b      	uxth	r3, r3
 800234a:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 800234c:	897b      	ldrh	r3, [r7, #10]
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8002354:	7d3b      	ldrb	r3, [r7, #20]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b29b      	uxth	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	b29b      	uxth	r3, r3
 800235e:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8002360:	897b      	ldrh	r3, [r7, #10]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <hsl_to_rgb+0x9c>
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	b29b      	uxth	r3, r3
 8002370:	7cfa      	ldrb	r2, [r7, #19]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	121b      	asrs	r3, r3, #8
 800237a:	b2db      	uxtb	r3, r3
 800237c:	74bb      	strb	r3, [r7, #18]
 800237e:	e00a      	b.n	8002396 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002388:	7cfa      	ldrb	r2, [r7, #19]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	121b      	asrs	r3, r3, #8
 8002392:	b2db      	uxtb	r3, r3
 8002394:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	797a      	ldrb	r2, [r7, #5]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d839      	bhi.n	8002426 <hsl_to_rgb+0x142>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <hsl_to_rgb+0xd4>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023cd 	.word	0x080023cd
 80023bc:	080023df 	.word	0x080023df
 80023c0:	080023f1 	.word	0x080023f1
 80023c4:	08002403 	.word	0x08002403
 80023c8:	08002415 	.word	0x08002415
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	75fb      	strb	r3, [r7, #23]
 80023d2:	7cbb      	ldrb	r3, [r7, #18]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	75bb      	strb	r3, [r7, #22]
 80023d8:	2300      	movs	r3, #0
 80023da:	757b      	strb	r3, [r7, #21]
 80023dc:	e02c      	b.n	8002438 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80023de:	7cbb      	ldrb	r3, [r7, #18]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	75bb      	strb	r3, [r7, #22]
 80023ea:	2300      	movs	r3, #0
 80023ec:	757b      	strb	r3, [r7, #21]
 80023ee:	e023      	b.n	8002438 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	75bb      	strb	r3, [r7, #22]
 80023fa:	7cbb      	ldrb	r3, [r7, #18]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	757b      	strb	r3, [r7, #21]
 8002400:	e01a      	b.n	8002438 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
 8002406:	7cbb      	ldrb	r3, [r7, #18]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	75bb      	strb	r3, [r7, #22]
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	757b      	strb	r3, [r7, #21]
 8002412:	e011      	b.n	8002438 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8002414:	7cbb      	ldrb	r3, [r7, #18]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	75fb      	strb	r3, [r7, #23]
 800241a:	2300      	movs	r3, #0
 800241c:	75bb      	strb	r3, [r7, #22]
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	757b      	strb	r3, [r7, #21]
 8002424:	e008      	b.n	8002438 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	75fb      	strb	r3, [r7, #23]
 800242c:	2300      	movs	r3, #0
 800242e:	75bb      	strb	r3, [r7, #22]
 8002430:	7cbb      	ldrb	r3, [r7, #18]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	757b      	strb	r3, [r7, #21]
 8002436:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	7c7b      	ldrb	r3, [r7, #17]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4413      	add	r3, r2
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	7dbb      	ldrb	r3, [r7, #22]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4619      	mov	r1, r3
 800244c:	7c7b      	ldrb	r3, [r7, #17]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	440b      	add	r3, r1
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	431a      	orrs	r2, r3
 8002456:	7d7b      	ldrb	r3, [r7, #21]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	7c7b      	ldrb	r3, [r7, #17]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	440b      	add	r3, r1
 8002462:	4313      	orrs	r3, r2
}
 8002464:	4618      	mov	r0, r3
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>
	...

0800247c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <RetargetInit+0x28>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <RetargetInit+0x2c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	2300      	movs	r3, #0
 8002492:	2202      	movs	r2, #2
 8002494:	2100      	movs	r1, #0
 8002496:	f00b ffb7 	bl	800e408 <setvbuf>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200033ec 	.word	0x200033ec
 80024a8:	20000030 	.word	0x20000030

080024ac <_isatty>:

int _isatty(int fd) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db04      	blt.n	80024c4 <_isatty+0x18>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	dc01      	bgt.n	80024c4 <_isatty+0x18>
    return 1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e005      	b.n	80024d0 <_isatty+0x24>

  errno = EBADF;
 80024c4:	f00b fe48 	bl	800e158 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2209      	movs	r2, #9
 80024cc:	601a      	str	r2, [r3, #0]
  return 0;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_write>:

int _write(int fd, char* ptr, int len) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d002      	beq.n	80024f0 <_write+0x18>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d111      	bne.n	8002514 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <_write+0x54>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	f006 f8c2 	bl	8008686 <HAL_UART_Transmit>
 8002502:	4603      	mov	r3, r0
 8002504:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <_write+0x38>
      return len;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	e008      	b.n	8002522 <_write+0x4a>
    else
      return EIO;
 8002510:	2305      	movs	r3, #5
 8002512:	e006      	b.n	8002522 <_write+0x4a>
  }
  errno = EBADF;
 8002514:	f00b fe20 	bl	800e158 <__errno>
 8002518:	4603      	mov	r3, r0
 800251a:	2209      	movs	r2, #9
 800251c:	601a      	str	r2, [r3, #0]
  return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200033ec 	.word	0x200033ec

08002530 <_close>:

int _close(int fd) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db04      	blt.n	8002548 <_close+0x18>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	dc01      	bgt.n	8002548 <_close+0x18>
    return 0;
 8002544:	2300      	movs	r3, #0
 8002546:	e006      	b.n	8002556 <_close+0x26>

  errno = EBADF;
 8002548:	f00b fe06 	bl	800e158 <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	2209      	movs	r2, #9
 8002550:	601a      	str	r2, [r3, #0]
  return -1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800256a:	f00b fdf5 	bl	800e158 <__errno>
 800256e:	4603      	mov	r3, r0
 8002570:	2209      	movs	r2, #9
 8002572:	601a      	str	r2, [r3, #0]
  return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_read>:

int _read(int fd, char* ptr, int len) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d110      	bne.n	80025b4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <_read+0x4c>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259a:	2201      	movs	r2, #1
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	f006 f904 	bl	80087aa <HAL_UART_Receive>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <_read+0x30>
      return 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e008      	b.n	80025c2 <_read+0x42>
    else
      return EIO;
 80025b0:	2305      	movs	r3, #5
 80025b2:	e006      	b.n	80025c2 <_read+0x42>
  }
  errno = EBADF;
 80025b4:	f00b fdd0 	bl	800e158 <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2209      	movs	r2, #9
 80025bc:	601a      	str	r2, [r3, #0]
  return -1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200033ec 	.word	0x200033ec

080025d0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db08      	blt.n	80025f2 <_fstat+0x22>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	dc05      	bgt.n	80025f2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ec:	605a      	str	r2, [r3, #4]
    return 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e005      	b.n	80025fe <_fstat+0x2e>
  }

  errno = EBADF;
 80025f2:	f00b fdb1 	bl	800e158 <__errno>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2209      	movs	r2, #9
 80025fa:	601a      	str	r2, [r3, #0]
  return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	460a      	mov	r2, r1
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	4613      	mov	r3, r2
 8002614:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	79ba      	ldrb	r2, [r7, #6]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	121b      	asrs	r3, r3, #8
 8002620:	b2db      	uxtb	r3, r3
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4623      	mov	r3, r4
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	4603      	mov	r3, r0
 8002644:	71bb      	strb	r3, [r7, #6]
 8002646:	460b      	mov	r3, r1
 8002648:	717b      	strb	r3, [r7, #5]
 800264a:	4613      	mov	r3, r2
 800264c:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 800264e:	79fa      	ldrb	r2, [r7, #7]
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	189c      	adds	r4, r3, r2
 8002656:	797b      	ldrb	r3, [r7, #5]
 8002658:	21b0      	movs	r1, #176	; 0xb0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ffd3 	bl	8002606 <scale8>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <led_set_RGB+0x6c>)
 8002666:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3301      	adds	r3, #1
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <led_set_RGB+0x6c>)
 8002674:	79ba      	ldrb	r2, [r7, #6]
 8002676:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	1c9c      	adds	r4, r3, #2
 8002682:	793b      	ldrb	r3, [r7, #4]
 8002684:	21f0      	movs	r1, #240	; 0xf0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffbd 	bl	8002606 <scale8>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <led_set_RGB+0x6c>)
 8002692:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	200033f0 	.word	0x200033f0

080026a0 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80026a8:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d852      	bhi.n	8002756 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e046      	b.n	8002744 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	dd01      	ble.n	80026d8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80026d4:	2126      	movs	r1, #38	; 0x26
 80026d6:	e000      	b.n	80026da <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80026d8:	2113      	movs	r1, #19
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3318      	adds	r3, #24
 80026de:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80026e0:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	dd01      	ble.n	8002706 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002702:	2126      	movs	r1, #38	; 0x26
 8002704:	e000      	b.n	8002708 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002706:	2113      	movs	r1, #19
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3320      	adds	r3, #32
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800270e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	3302      	adds	r3, #2
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	dd01      	ble.n	8002734 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002730:	2126      	movs	r1, #38	; 0x26
 8002732:	e000      	b.n	8002736 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002734:	2113      	movs	r1, #19
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3328      	adds	r3, #40	; 0x28
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800273c:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d9b5      	bls.n	80026b6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002752:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8002754:	e01d      	b.n	8002792 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d812      	bhi.n	8002784 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800275e:	2318      	movs	r3, #24
 8002760:	72fb      	strb	r3, [r7, #11]
 8002762:	e006      	b.n	8002772 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002768:	2100      	movs	r1, #0
 800276a:	54d1      	strb	r1, [r2, r3]
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	3301      	adds	r3, #1
 8002770:	72fb      	strb	r3, [r7, #11]
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	2b2f      	cmp	r3, #47	; 0x2f
 8002776:	d9f5      	bls.n	8002764 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	e006      	b.n	8002792 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800278a:	2100      	movs	r1, #0
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800278e:	f005 f801 	bl	8007794 <HAL_TIM_PWM_Stop_DMA>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20003434 	.word	0x20003434
 80027a0:	200033f0 	.word	0x200033f0
 80027a4:	20003404 	.word	0x20003404
 80027a8:	200032bc 	.word	0x200032bc

080027ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_MspInit+0x68>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_MspInit+0x68>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_MspInit+0x68>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_MspInit+0x68>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_MspInit+0x68>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_MspInit+0x68>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	2005      	movs	r0, #5
 80027f0:	f000 fcdf 	bl	80031b2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80027f4:	2005      	movs	r0, #5
 80027f6:	f000 fcf8 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2005      	movs	r0, #5
 8002800:	f000 fcd7 	bl	80031b2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002804:	2005      	movs	r0, #5
 8002806:	f000 fcf0 	bl	80031ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_CRC_MspInit+0x3c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_CRC_MspInit+0x40>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_CRC_MspInit+0x40>)
 8002834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_CRC_MspInit+0x40>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023000 	.word	0x40023000
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_I2C_MspInit+0x128>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12c      	bne.n	80028d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800289a:	2303      	movs	r3, #3
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289e:	2312      	movs	r3, #18
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028aa:	2304      	movs	r3, #4
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4835      	ldr	r0, [pc, #212]	; (800298c <HAL_I2C_MspInit+0x130>)
 80028b6:	f001 f84b 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028d6:	e050      	b.n	800297a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <HAL_I2C_MspInit+0x134>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d14b      	bne.n	800297a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a27      	ldr	r2, [pc, #156]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800291a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800292c:	2304      	movs	r3, #4
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4817      	ldr	r0, [pc, #92]	; (8002994 <HAL_I2C_MspInit+0x138>)
 8002938:	f001 f80a 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800293c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002942:	2312      	movs	r3, #18
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002946:	2301      	movs	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800294e:	2304      	movs	r3, #4
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <HAL_I2C_MspInit+0x13c>)
 800295a:	f000 fff9 	bl	8003950 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
}
 800297a:	bf00      	nop
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40005800 	.word	0x40005800
 8002988:	40023800 	.word	0x40023800
 800298c:	40021400 	.word	0x40021400
 8002990:	40005c00 	.word	0x40005c00
 8002994:	40020800 	.word	0x40020800
 8002998:	40020000 	.word	0x40020000

0800299c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <HAL_SPI_MspInit+0x128>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d14c      	bne.n	8002a58 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a39      	ldr	r2, [pc, #228]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a24:	2306      	movs	r3, #6
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4827      	ldr	r0, [pc, #156]	; (8002acc <HAL_SPI_MspInit+0x130>)
 8002a30:	f000 ff8e 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a46:	2306      	movs	r3, #6
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481f      	ldr	r0, [pc, #124]	; (8002ad0 <HAL_SPI_MspInit+0x134>)
 8002a52:	f000 ff7d 	bl	8003950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002a56:	e031      	b.n	8002abc <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_SPI_MspInit+0x138>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12c      	bne.n	8002abc <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_SPI_MspInit+0x12c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002aac:	2305      	movs	r3, #5
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <HAL_SPI_MspInit+0x13c>)
 8002ab8:	f000 ff4a 	bl	8003950 <HAL_GPIO_Init>
}
 8002abc:	bf00      	nop
 8002abe:	3730      	adds	r7, #48	; 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40003c00 	.word	0x40003c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40015000 	.word	0x40015000
 8002ad8:	40021400 	.word	0x40021400

08002adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a30      	ldr	r2, [pc, #192]	; (8002bac <HAL_TIM_Base_MspInit+0xd0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b0a:	e04a      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d145      	bne.n	8002ba2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <HAL_TIM_Base_MspInit+0xdc>)
 8002b36:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b3a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b52:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b66:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b76:	480f      	ldr	r0, [pc, #60]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b78:	f000 fb6e 	bl	8003258 <HAL_DMA_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002b82:	f7ff fc75 	bl	8002470 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8c:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	201c      	movs	r0, #28
 8002b98:	f000 fb0b 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b9c:	201c      	movs	r0, #28
 8002b9e:	f000 fb24 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	20003304 	.word	0x20003304
 8002bb8:	40026088 	.word	0x40026088

08002bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d11d      	bne.n	8002c1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_TIM_MspPostInit+0x68>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIM_MspPostInit+0x68>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_MspPostInit+0x68>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <HAL_TIM_MspPostInit+0x6c>)
 8002c16:	f000 fe9b 	bl	8003950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_UART_MspInit+0xf8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d135      	bne.n	8002cba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4822      	ldr	r0, [pc, #136]	; (8002d2c <HAL_UART_MspInit+0x100>)
 8002ca4:	f000 fe54 	bl	8003950 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	2025      	movs	r0, #37	; 0x25
 8002cae:	f000 fa80 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb2:	2025      	movs	r0, #37	; 0x25
 8002cb4:	f000 fa99 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cb8:	e030      	b.n	8002d1c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_UART_MspInit+0x104>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d12b      	bne.n	8002d1c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_UART_MspInit+0xfc>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cfc:	2360      	movs	r3, #96	; 0x60
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4619      	mov	r1, r3
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <HAL_UART_MspInit+0x108>)
 8002d18:	f000 fe1a 	bl	8003950 <HAL_GPIO_Init>
}
 8002d1c:	bf00      	nop
 8002d1e:	3730      	adds	r7, #48	; 0x30
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40004400 	.word	0x40004400
 8002d34:	40020c00 	.word	0x40020c00

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <NMI_Handler+0x4>

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d84:	f000 f8f6 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Stream5_IRQHandler+0x10>)
 8002da2:	f000 fb99 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20003304 	.word	0x20003304

08002db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <TIM2_IRQHandler+0x10>)
 8002db6:	f004 fdbf 	bl	8007938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200032bc 	.word	0x200032bc

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART1_IRQHandler+0x10>)
 8002dca:	f005 fdc1 	bl	8008950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20003364 	.word	0x20003364

08002dd8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <OTG_HS_IRQHandler+0x10>)
 8002dde:	f001 f9e7 	bl	80041b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20003830 	.word	0x20003830

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f00b f99c 	bl	800e158 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20030000 	.word	0x20030000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20003438 	.word	0x20003438
 8002e54:	20003b48 	.word	0x20003b48

08002e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e82:	490e      	ldr	r1, [pc, #56]	; (8002ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e98:	4c0b      	ldr	r4, [pc, #44]	; (8002ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea6:	f7ff ffd7 	bl	8002e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f00b f95b 	bl	800e164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7fe fd0d 	bl	80018cc <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002eb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002ec0:	0800f948 	.word	0x0800f948
  ldr r2, =_sbss
 8002ec4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002ec8:	20003b44 	.word	0x20003b44

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f000 f94f 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	200f      	movs	r0, #15
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fc52 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f967 	bl	8003206 <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f50:	f000 f92f 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000004 	.word	0x20000004
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	20000008 	.word	0x20000008

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	2000343c 	.word	0x2000343c

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	2000343c 	.word	0x2000343c

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff3e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff31 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffa2 	bl	8003158 <SysTick_Config>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e00e      	b.n	800324e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	795b      	ldrb	r3, [r3, #5]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fae9 	bl	8002818 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fe9a 	bl	8002f9c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e099      	b.n	80033a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003294:	e00f      	b.n	80032b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003296:	f7ff fe81 	bl	8002f9c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d908      	bls.n	80032b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e078      	b.n	80033a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e8      	bne.n	8003296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_DMA_Init+0x158>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4313      	orrs	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b04      	cmp	r3, #4
 8003348:	d117      	bne.n	800337a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fa7b 	bl	8003858 <DMA_CheckFifoParam>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003376:	2301      	movs	r3, #1
 8003378:	e016      	b.n	80033a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa32 	bl	80037ec <DMA_CalcBaseAndBitshift>
 8003388:	4603      	mov	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	223f      	movs	r2, #63	; 0x3f
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	f010803f 	.word	0xf010803f

080033b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033c2:	f7ff fdeb 	bl	8002f9c <HAL_GetTick>
 80033c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e052      	b.n	800348c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0216 	bic.w	r2, r2, #22
 80033f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003404:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_DMA_Abort+0x62>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003436:	e013      	b.n	8003460 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003438:	f7ff fdb0 	bl	8002f9c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b05      	cmp	r3, #5
 8003444:	d90c      	bls.n	8003460 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2203      	movs	r2, #3
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e015      	b.n	800348c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e4      	bne.n	8003438 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	223f      	movs	r2, #63	; 0x3f
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00c      	b.n	80034cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2205      	movs	r2, #5
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034e4:	4b8e      	ldr	r3, [pc, #568]	; (8003720 <HAL_DMA_IRQHandler+0x248>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a8e      	ldr	r2, [pc, #568]	; (8003724 <HAL_DMA_IRQHandler+0x24c>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2208      	movs	r2, #8
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	2208      	movs	r2, #8
 8003532:	409a      	lsls	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	2201      	movs	r2, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2204      	movs	r2, #4
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	2210      	movs	r2, #16
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d043      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03c      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2210      	movs	r2, #16
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d024      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
 8003606:	e01f      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e016      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0208 	bic.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2220      	movs	r2, #32
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 808f 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8087 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2220      	movs	r2, #32
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d136      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0216 	bic.w	r2, r2, #22
 8003690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_DMA_IRQHandler+0x1da>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0208 	bic.w	r2, r2, #8
 80036c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07e      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
        }
        return;
 80036ee:	e079      	b.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d031      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e02c      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
 800371e:	bf00      	nop
 8003720:	20000004 	.word	0x20000004
 8003724:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e01e      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0210 	bic.w	r2, r2, #16
 8003756:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2205      	movs	r2, #5
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d307      	bcc.n	80037c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f2      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x2cc>
 80037be:	e000      	b.n	80037c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037e4:	bf00      	nop
    }
  }
}
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3b10      	subs	r3, #16
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <DMA_CalcBaseAndBitshift+0x64>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d909      	bls.n	800382e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	659a      	str	r2, [r3, #88]	; 0x58
 800382c:	e007      	b.n	800383e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	aaaaaaab 	.word	0xaaaaaaab
 8003854:	0800f780 	.word	0x0800f780

08003858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11f      	bne.n	80038b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d856      	bhi.n	8003926 <DMA_CheckFifoParam+0xce>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x28>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a3 	.word	0x080038a3
 8003888:	08003891 	.word	0x08003891
 800388c:	08003927 	.word	0x08003927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d046      	beq.n	800392a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e043      	b.n	800392a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038aa:	d140      	bne.n	800392e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e03d      	b.n	800392e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	d121      	bne.n	8003900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d837      	bhi.n	8003932 <DMA_CheckFifoParam+0xda>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x70>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038df 	.word	0x080038df
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	080038f1 	.word	0x080038f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e030      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d025      	beq.n	8003936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e022      	b.n	8003936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038fe:	e01c      	b.n	800393a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d903      	bls.n	800390e <DMA_CheckFifoParam+0xb6>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d003      	beq.n	8003914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800390c:	e018      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      break;
 8003912:	e015      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e00b      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003926:	bf00      	nop
 8003928:	e00a      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e008      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e006      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;   
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
    }
  } 
  
  return status; 
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e177      	b.n	8003c5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 8166 	bne.w	8003c56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d005      	beq.n	80039a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d130      	bne.n	8003a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80c0 	beq.w	8003c56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_GPIO_Init+0x324>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af2:	4a61      	ldr	r2, [pc, #388]	; (8003c78 <HAL_GPIO_Init+0x328>)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_GPIO_Init+0x32c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d037      	beq.n	8003b8e <HAL_GPIO_Init+0x23e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a57      	ldr	r2, [pc, #348]	; (8003c80 <HAL_GPIO_Init+0x330>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_GPIO_Init+0x23a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a56      	ldr	r2, [pc, #344]	; (8003c84 <HAL_GPIO_Init+0x334>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02b      	beq.n	8003b86 <HAL_GPIO_Init+0x236>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <HAL_GPIO_Init+0x338>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d025      	beq.n	8003b82 <HAL_GPIO_Init+0x232>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_GPIO_Init+0x33c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01f      	beq.n	8003b7e <HAL_GPIO_Init+0x22e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a53      	ldr	r2, [pc, #332]	; (8003c90 <HAL_GPIO_Init+0x340>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d019      	beq.n	8003b7a <HAL_GPIO_Init+0x22a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_GPIO_Init+0x344>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_GPIO_Init+0x226>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a51      	ldr	r2, [pc, #324]	; (8003c98 <HAL_GPIO_Init+0x348>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00d      	beq.n	8003b72 <HAL_GPIO_Init+0x222>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_GPIO_Init+0x34c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <HAL_GPIO_Init+0x21e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_GPIO_Init+0x350>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_GPIO_Init+0x21a>
 8003b66:	2309      	movs	r3, #9
 8003b68:	e012      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	e010      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	e00e      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b72:	2307      	movs	r3, #7
 8003b74:	e00c      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b76:	2306      	movs	r3, #6
 8003b78:	e00a      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	e008      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x240>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f002 0203 	and.w	r2, r2, #3
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x328>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <HAL_GPIO_Init+0x354>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	f67f ae84 	bls.w	800396c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40021400 	.word	0x40021400
 8003c94:	40021800 	.word	0x40021800
 8003c98:	40021c00 	.word	0x40021c00
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	40022400 	.word	0x40022400
 8003ca4:	40013c00 	.word	0x40013c00

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cc4:	e003      	b.n	8003cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	041a      	lsls	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cdc:	b08f      	sub	sp, #60	; 0x3c
 8003cde:	af0a      	add	r7, sp, #40	; 0x28
 8003ce0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e054      	b.n	8003d96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f009 ff42 	bl	800db90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 fdea 	bl	8009904 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	687e      	ldr	r6, [r7, #4]
 8003d38:	466d      	mov	r5, sp
 8003d3a:	f106 0410 	add.w	r4, r6, #16
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4e:	1d33      	adds	r3, r6, #4
 8003d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f005 fd64 	bl	8009820 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 fde1 	bl	8009926 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	687e      	ldr	r6, [r7, #4]
 8003d6c:	466d      	mov	r5, sp
 8003d6e:	f106 0410 	add.w	r4, r6, #16
 8003d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d82:	1d33      	adds	r3, r6, #4
 8003d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f005 ff6a 	bl	8009c60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d9e:	b590      	push	{r4, r7, lr}
 8003da0:	b089      	sub	sp, #36	; 0x24
 8003da2:	af04      	add	r7, sp, #16
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	4608      	mov	r0, r1
 8003da8:	4611      	mov	r1, r2
 8003daa:	461a      	mov	r2, r3
 8003dac:	4603      	mov	r3, r0
 8003dae:	70fb      	strb	r3, [r7, #3]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70bb      	strb	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_HCD_HC_Init+0x28>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e076      	b.n	8003eb4 <HAL_HCD_HC_Init+0x116>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	333d      	adds	r3, #61	; 0x3d
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3338      	adds	r3, #56	; 0x38
 8003dee:	787a      	ldrb	r2, [r7, #1]
 8003df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3340      	adds	r3, #64	; 0x40
 8003e00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3339      	adds	r3, #57	; 0x39
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	333f      	adds	r3, #63	; 0x3f
 8003e24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	78ba      	ldrb	r2, [r7, #2]
 8003e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e32:	b2d0      	uxtb	r0, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	333a      	adds	r3, #58	; 0x3a
 8003e40:	4602      	mov	r2, r0
 8003e42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da09      	bge.n	8003e60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	333b      	adds	r3, #59	; 0x3b
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e008      	b.n	8003e72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	333b      	adds	r3, #59	; 0x3b
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	333c      	adds	r3, #60	; 0x3c
 8003e80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	787c      	ldrb	r4, [r7, #1]
 8003e8c:	78ba      	ldrb	r2, [r7, #2]
 8003e8e:	78f9      	ldrb	r1, [r7, #3]
 8003e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	f006 f863 	bl	8009f6c <USB_HC_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}

08003ebc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_HCD_HC_Halt+0x1e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e00f      	b.n	8003efa <HAL_HCD_HC_Halt+0x3e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f006 fab3 	bl	800a456 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	70fb      	strb	r3, [r7, #3]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70bb      	strb	r3, [r7, #2]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	333b      	adds	r3, #59	; 0x3b
 8003f2c:	78ba      	ldrb	r2, [r7, #2]
 8003f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	333f      	adds	r3, #63	; 0x3f
 8003f3e:	787a      	ldrb	r2, [r7, #1]
 8003f40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f42:	7c3b      	ldrb	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d112      	bne.n	8003f6e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3342      	adds	r3, #66	; 0x42
 8003f56:	2203      	movs	r2, #3
 8003f58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	333d      	adds	r3, #61	; 0x3d
 8003f68:	7f3a      	ldrb	r2, [r7, #28]
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e008      	b.n	8003f80 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3342      	adds	r3, #66	; 0x42
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	f200 80c6 	bhi.w	8004114 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08004101 	.word	0x08004101
 8003f98:	08004005 	.word	0x08004005
 8003f9c:	08004083 	.word	0x08004083
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003fa0:	7c3b      	ldrb	r3, [r7, #16]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	f040 80b8 	bne.w	8004118 <HAL_HCD_HC_SubmitRequest+0x214>
 8003fa8:	78bb      	ldrb	r3, [r7, #2]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 80b4 	bne.w	8004118 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003fb0:	8b3b      	ldrh	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3355      	adds	r3, #85	; 0x55
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3355      	adds	r3, #85	; 0x55
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3342      	adds	r3, #66	; 0x42
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fee:	e093      	b.n	8004118 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3342      	adds	r3, #66	; 0x42
 8003ffe:	2202      	movs	r2, #2
 8004000:	701a      	strb	r2, [r3, #0]
      break;
 8004002:	e089      	b.n	8004118 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004004:	78bb      	ldrb	r3, [r7, #2]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11d      	bne.n	8004046 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3355      	adds	r3, #85	; 0x55
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3342      	adds	r3, #66	; 0x42
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004030:	e073      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3342      	adds	r3, #66	; 0x42
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]
      break;
 8004044:	e069      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3354      	adds	r3, #84	; 0x54
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3342      	adds	r3, #66	; 0x42
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
      break;
 800406c:	e055      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3342      	adds	r3, #66	; 0x42
 800407c:	2202      	movs	r2, #2
 800407e:	701a      	strb	r2, [r3, #0]
      break;
 8004080:	e04b      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004082:	78bb      	ldrb	r3, [r7, #2]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11d      	bne.n	80040c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	3355      	adds	r3, #85	; 0x55
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	3342      	adds	r3, #66	; 0x42
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040ae:	e034      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3342      	adds	r3, #66	; 0x42
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	e02a      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3354      	adds	r3, #84	; 0x54
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3342      	adds	r3, #66	; 0x42
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e016      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3342      	adds	r3, #66	; 0x42
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e00c      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3342      	adds	r3, #66	; 0x42
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e002      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004118:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3344      	adds	r3, #68	; 0x44
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	8b3a      	ldrh	r2, [r7, #24]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	202c      	movs	r0, #44	; 0x2c
 8004134:	fb00 f303 	mul.w	r3, r0, r3
 8004138:	440b      	add	r3, r1
 800413a:	334c      	adds	r3, #76	; 0x4c
 800413c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	3350      	adds	r3, #80	; 0x50
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3339      	adds	r3, #57	; 0x39
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3361      	adds	r3, #97	; 0x61
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	222c      	movs	r2, #44	; 0x2c
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	3338      	adds	r3, #56	; 0x38
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	18d1      	adds	r1, r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	f006 f806 	bl	800a1b0 <USB_HC_StartXfer>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 fd07 	bl	8009bda <USB_GetMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f040 80f6 	bne.w	80043c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f005 fceb 	bl	8009bb4 <USB_ReadInterrupts>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80ec 	beq.w	80043be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f005 fce2 	bl	8009bb4 <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041fa:	d104      	bne.n	8004206 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004204:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f005 fcd2 	bl	8009bb4 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d104      	bne.n	8004226 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f005 fcc2 	bl	8009bb4 <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423a:	d104      	bne.n	8004246 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f005 fcb2 	bl	8009bb4 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d103      	bne.n	8004262 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2202      	movs	r2, #2
 8004260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f005 fca4 	bl	8009bb4 <USB_ReadInterrupts>
 800426c:	4603      	mov	r3, r0
 800426e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004276:	d11c      	bne.n	80042b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004280:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004292:	2110      	movs	r1, #16
 8004294:	6938      	ldr	r0, [r7, #16]
 8004296:	f005 fb93 	bl	80099c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800429a:	6938      	ldr	r0, [r7, #16]
 800429c:	f005 fbc4 	bl	8009a28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f005 fd9a 	bl	8009de0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f009 fce9 	bl	800dc84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f005 fc7c 	bl	8009bb4 <USB_ReadInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c6:	d102      	bne.n	80042ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f001 f89e 	bl	800540a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f005 fc6e 	bl	8009bb4 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d106      	bne.n	80042f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f009 fcb2 	bl	800dc4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2208      	movs	r2, #8
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f005 fc5d 	bl	8009bb4 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d101      	bne.n	8004308 <HAL_HCD_IRQHandler+0x158>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_HCD_IRQHandler+0x15a>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ffa1 	bl	8005266 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0210 	orr.w	r2, r2, #16
 8004332:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fc3b 	bl	8009bb4 <USB_ReadInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004348:	d13a      	bne.n	80043c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f006 f870 	bl	800a434 <USB_HC_ReadInterrupt>
 8004354:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e025      	b.n	80043a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d018      	beq.n	80043a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004386:	d106      	bne.n	8004396 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8ab 	bl	80044ea <HCD_HC_IN_IRQHandler>
 8004394:	e005      	b.n	80043a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fbf9 	bl	8004b94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3301      	adds	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3d4      	bcc.n	800435c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ba:	615a      	str	r2, [r3, #20]
 80043bc:	e000      	b.n	80043c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80043be:	bf00      	nop
    }
  }
}
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_HCD_Start+0x16>
 80043d8:	2302      	movs	r3, #2
 80043da:	e013      	b.n	8004404 <HAL_HCD_Start+0x3e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f005 fd5c 	bl	8009ea8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f005 fa74 	bl	80098e2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_HCD_Stop+0x16>
 800441e:	2302      	movs	r3, #2
 8004420:	e00d      	b.n	800443e <HAL_HCD_Stop+0x32>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f006 f94a 	bl	800a6c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f005 fcfe 	bl	8009e54 <USB_ResetPort>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3360      	adds	r3, #96	; 0x60
 800447c:	781b      	ldrb	r3, [r3, #0]
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3350      	adds	r3, #80	; 0x50
 80044a4:	681b      	ldr	r3, [r3, #0]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f005 fd42 	bl	8009f48 <USB_GetCurrentFrame>
 80044c4:	4603      	mov	r3, r0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fd1d 	bl	8009f1a <USB_GetHostSpeed>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d11a      	bne.n	8004550 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4413      	add	r3, r2
 8004522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004526:	461a      	mov	r2, r3
 8004528:	2304      	movs	r3, #4
 800452a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3361      	adds	r3, #97	; 0x61
 800453a:	2206      	movs	r2, #6
 800453c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f005 ff84 	bl	800a456 <USB_HC_Halt>
 800454e:	e0af      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d11b      	bne.n	80045a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3361      	adds	r3, #97	; 0x61
 800458a:	2207      	movs	r2, #7
 800458c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f005 ff5c 	bl	800a456 <USB_HC_Halt>
 800459e:	e087      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d109      	bne.n	80045ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	2320      	movs	r3, #32
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	e072      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d11a      	bne.n	8004616 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	461a      	mov	r2, r3
 80045ee:	2308      	movs	r3, #8
 80045f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	212c      	movs	r1, #44	; 0x2c
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	4413      	add	r3, r2
 80045fe:	3361      	adds	r3, #97	; 0x61
 8004600:	2205      	movs	r2, #5
 8004602:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f005 ff21 	bl	800a456 <USB_HC_Halt>
 8004614:	e04c      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462c:	d11b      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	461a      	mov	r2, r3
 800463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004640:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	3361      	adds	r3, #97	; 0x61
 8004650:	2208      	movs	r2, #8
 8004652:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f005 fef9 	bl	800a456 <USB_HC_Halt>
 8004664:	e024      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d119      	bne.n	80046b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	461a      	mov	r2, r3
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3361      	adds	r3, #97	; 0x61
 800469c:	2206      	movs	r2, #6
 800469e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f005 fed3 	bl	800a456 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c6:	d112      	bne.n	80046ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f005 febf 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	461a      	mov	r2, r3
 80046e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80046ec:	e24e      	b.n	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80df 	bne.w	80048c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d019      	beq.n	8004742 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3348      	adds	r3, #72	; 0x48
 800471c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0159      	lsls	r1, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	440b      	add	r3, r1
 8004726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004730:	1ad2      	subs	r2, r2, r3
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	202c      	movs	r0, #44	; 0x2c
 8004738:	fb00 f303 	mul.w	r3, r0, r3
 800473c:	440b      	add	r3, r1
 800473e:	3350      	adds	r3, #80	; 0x50
 8004740:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3361      	adds	r3, #97	; 0x61
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	335c      	adds	r3, #92	; 0x5c
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	461a      	mov	r2, r3
 8004774:	2301      	movs	r3, #1
 8004776:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	333f      	adds	r3, #63	; 0x3f
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	333f      	adds	r3, #63	; 0x3f
 800479a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800479c:	2b02      	cmp	r3, #2
 800479e:	d111      	bne.n	80047c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f005 fe53 	bl	800a456 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	2310      	movs	r3, #16
 80047c0:	6093      	str	r3, [r2, #8]
 80047c2:	e03a      	b.n	800483a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	333f      	adds	r3, #63	; 0x3f
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d009      	beq.n	80047ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	333f      	adds	r3, #63	; 0x3f
 80047e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d126      	bne.n	800483a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800480a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3360      	adds	r3, #96	; 0x60
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	b2d9      	uxtb	r1, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	202c      	movs	r0, #44	; 0x2c
 8004828:	fb00 f303 	mul.w	r3, r0, r3
 800482c:	4413      	add	r3, r2
 800482e:	3360      	adds	r3, #96	; 0x60
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f009 fa33 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d12b      	bne.n	800489a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3348      	adds	r3, #72	; 0x48
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	202c      	movs	r0, #44	; 0x2c
 8004858:	fb00 f202 	mul.w	r2, r0, r2
 800485c:	440a      	add	r2, r1
 800485e:	3240      	adds	r2, #64	; 0x40
 8004860:	8812      	ldrh	r2, [r2, #0]
 8004862:	fbb3 f3f2 	udiv	r3, r3, r2
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 818e 	beq.w	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	212c      	movs	r1, #44	; 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3354      	adds	r3, #84	; 0x54
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f083 0301 	eor.w	r3, r3, #1
 8004884:	b2d8      	uxtb	r0, r3
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3354      	adds	r3, #84	; 0x54
 8004894:	4602      	mov	r2, r0
 8004896:	701a      	strb	r2, [r3, #0]
}
 8004898:	e178      	b.n	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3354      	adds	r3, #84	; 0x54
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2d8      	uxtb	r0, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3354      	adds	r3, #84	; 0x54
 80048be:	4602      	mov	r2, r0
 80048c0:	701a      	strb	r2, [r3, #0]
}
 80048c2:	e163      	b.n	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	f040 80f6 	bne.w	8004ac8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3361      	adds	r3, #97	; 0x61
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d109      	bne.n	8004904 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3360      	adds	r3, #96	; 0x60
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e0c9      	b.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	3361      	adds	r3, #97	; 0x61
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d109      	bne.n	800492c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3360      	adds	r3, #96	; 0x60
 8004926:	2205      	movs	r2, #5
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e0b5      	b.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3361      	adds	r3, #97	; 0x61
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d009      	beq.n	8004954 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004950:	2b08      	cmp	r3, #8
 8004952:	d150      	bne.n	80049f6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	335c      	adds	r3, #92	; 0x5c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	202c      	movs	r0, #44	; 0x2c
 800496c:	fb00 f303 	mul.w	r3, r0, r3
 8004970:	440b      	add	r3, r1
 8004972:	335c      	adds	r3, #92	; 0x5c
 8004974:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d912      	bls.n	80049b0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	335c      	adds	r3, #92	; 0x5c
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3360      	adds	r3, #96	; 0x60
 80049aa:	2204      	movs	r2, #4
 80049ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ae:	e073      	b.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3360      	adds	r3, #96	; 0x60
 80049be:	2202      	movs	r2, #2
 80049c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049f4:	e050      	b.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3361      	adds	r3, #97	; 0x61
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d122      	bne.n	8004a50 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3360      	adds	r3, #96	; 0x60
 8004a18:	2202      	movs	r2, #2
 8004a1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e023      	b.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3361      	adds	r3, #97	; 0x61
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	d119      	bne.n	8004a98 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	335c      	adds	r3, #92	; 0x5c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	202c      	movs	r0, #44	; 0x2c
 8004a7c:	fb00 f303 	mul.w	r3, r0, r3
 8004a80:	440b      	add	r3, r1
 8004a82:	335c      	adds	r3, #92	; 0x5c
 8004a84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3360      	adds	r3, #96	; 0x60
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	b2d9      	uxtb	r1, r3
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	202c      	movs	r0, #44	; 0x2c
 8004ab4:	fb00 f303 	mul.w	r3, r0, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3360      	adds	r3, #96	; 0x60
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f009 f8ed 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ac6:	e061      	b.n	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d156      	bne.n	8004b8c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	333f      	adds	r3, #63	; 0x3f
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d111      	bne.n	8004b16 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 fca1 	bl	800a456 <USB_HC_Halt>
 8004b14:	e031      	b.n	8004b7a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333f      	adds	r3, #63	; 0x3f
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333f      	adds	r3, #63	; 0x3f
 8004b38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d11d      	bne.n	8004b7a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	335c      	adds	r3, #92	; 0x5c
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d110      	bne.n	8004b7a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3361      	adds	r3, #97	; 0x61
 8004b66:	2203      	movs	r2, #3
 8004b68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f005 fc6e 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	2310      	movs	r3, #16
 8004b8a:	6093      	str	r3, [r2, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11a      	bne.n	8004bfa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	212c      	movs	r1, #44	; 0x2c
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	3361      	adds	r3, #97	; 0x61
 8004be4:	2206      	movs	r2, #6
 8004be6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f005 fc2f 	bl	800a456 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004bf8:	e331      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d12e      	bne.n	8004c6e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2320      	movs	r3, #32
 8004c20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	333d      	adds	r3, #61	; 0x3d
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 8313 	bne.w	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	333d      	adds	r3, #61	; 0x3d
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3360      	adds	r3, #96	; 0x60
 8004c58:	2202      	movs	r2, #2
 8004c5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f005 fbf5 	bl	800a456 <USB_HC_Halt>
}
 8004c6c:	e2f7      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d112      	bne.n	8004cac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f005 fbd6 	bl	800a456 <USB_HC_Halt>
}
 8004caa:	e2d8      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d140      	bne.n	8004d44 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	335c      	adds	r3, #92	; 0x5c
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d111      	bne.n	8004d0e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	212c      	movs	r1, #44	; 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	333d      	adds	r3, #61	; 0x3d
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	212c      	movs	r1, #44	; 0x2c
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3361      	adds	r3, #97	; 0x61
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f005 fb8a 	bl	800a456 <USB_HC_Halt>
}
 8004d42:	e28c      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d12c      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	212c      	movs	r1, #44	; 0x2c
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	3361      	adds	r3, #97	; 0x61
 8004d68:	2204      	movs	r2, #4
 8004d6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	333d      	adds	r3, #61	; 0x3d
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	335c      	adds	r3, #92	; 0x5c
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f005 fb5b 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	461a      	mov	r2, r3
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	6093      	str	r3, [r2, #8]
}
 8004db2:	e254      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d11a      	bne.n	8004e00 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2308      	movs	r3, #8
 8004dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	212c      	movs	r1, #44	; 0x2c
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	3361      	adds	r3, #97	; 0x61
 8004dea:	2205      	movs	r2, #5
 8004dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f005 fb2c 	bl	800a456 <USB_HC_Halt>
}
 8004dfe:	e22e      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d140      	bne.n	8004e98 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	335c      	adds	r3, #92	; 0x5c
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3361      	adds	r3, #97	; 0x61
 8004e36:	2203      	movs	r2, #3
 8004e38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	333d      	adds	r3, #61	; 0x3d
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d112      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	333c      	adds	r3, #60	; 0x3c
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	333d      	adds	r3, #61	; 0x3d
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fae9 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	461a      	mov	r2, r3
 8004e92:	2310      	movs	r3, #16
 8004e94:	6093      	str	r3, [r2, #8]
}
 8004e96:	e1e2      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d164      	bne.n	8004f78 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d111      	bne.n	8004eda <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3361      	adds	r3, #97	; 0x61
 8004ec4:	2206      	movs	r2, #6
 8004ec6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f005 fabf 	bl	800a456 <USB_HC_Halt>
 8004ed8:	e044      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	335c      	adds	r3, #92	; 0x5c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	202c      	movs	r0, #44	; 0x2c
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	335c      	adds	r3, #92	; 0x5c
 8004efa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	335c      	adds	r3, #92	; 0x5c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d920      	bls.n	8004f52 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	335c      	adds	r3, #92	; 0x5c
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3360      	adds	r3, #96	; 0x60
 8004f30:	2204      	movs	r2, #4
 8004f32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	b2d9      	uxtb	r1, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	202c      	movs	r0, #44	; 0x2c
 8004f3e:	fb00 f303 	mul.w	r3, r0, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3360      	adds	r3, #96	; 0x60
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f008 fea8 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f50:	e008      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	212c      	movs	r1, #44	; 0x2c
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3360      	adds	r3, #96	; 0x60
 8004f60:	2202      	movs	r2, #2
 8004f62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	461a      	mov	r2, r3
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	6093      	str	r3, [r2, #8]
}
 8004f76:	e172      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	d11b      	bne.n	8004fc8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3361      	adds	r3, #97	; 0x61
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f005 fa52 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc4:	6093      	str	r3, [r2, #8]
}
 8004fc6:	e14a      	b.n	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	f040 813f 	bne.w	800525e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	3361      	adds	r3, #97	; 0x61
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d17d      	bne.n	80050f0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	212c      	movs	r1, #44	; 0x2c
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	3360      	adds	r3, #96	; 0x60
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	212c      	movs	r1, #44	; 0x2c
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	4413      	add	r3, r2
 8005012:	333f      	adds	r3, #63	; 0x3f
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d00a      	beq.n	8005030 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	212c      	movs	r1, #44	; 0x2c
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	4413      	add	r3, r2
 8005026:	333f      	adds	r3, #63	; 0x3f
 8005028:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800502a:	2b03      	cmp	r3, #3
 800502c:	f040 8100 	bne.w	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d113      	bne.n	8005060 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3355      	adds	r3, #85	; 0x55
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2d8      	uxtb	r0, r3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	3355      	adds	r3, #85	; 0x55
 800505c:	4602      	mov	r2, r0
 800505e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 80e3 	bne.w	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	212c      	movs	r1, #44	; 0x2c
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	334c      	adds	r3, #76	; 0x4c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80d8 	beq.w	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	212c      	movs	r1, #44	; 0x2c
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	4413      	add	r3, r2
 800508c:	334c      	adds	r3, #76	; 0x4c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	202c      	movs	r0, #44	; 0x2c
 8005096:	fb00 f202 	mul.w	r2, r0, r2
 800509a:	440a      	add	r2, r1
 800509c:	3240      	adds	r2, #64	; 0x40
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	202c      	movs	r0, #44	; 0x2c
 80050aa:	fb00 f202 	mul.w	r2, r0, r2
 80050ae:	440a      	add	r2, r1
 80050b0:	3240      	adds	r2, #64	; 0x40
 80050b2:	8812      	ldrh	r2, [r2, #0]
 80050b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80b5 	beq.w	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	3355      	adds	r3, #85	; 0x55
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2d8      	uxtb	r0, r3
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	212c      	movs	r1, #44	; 0x2c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	3355      	adds	r3, #85	; 0x55
 80050ea:	4602      	mov	r2, r0
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e09f      	b.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3361      	adds	r3, #97	; 0x61
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d109      	bne.n	8005118 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3360      	adds	r3, #96	; 0x60
 8005112:	2202      	movs	r2, #2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	e08b      	b.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3361      	adds	r3, #97	; 0x61
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d109      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	212c      	movs	r1, #44	; 0x2c
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	4413      	add	r3, r2
 8005138:	3360      	adds	r3, #96	; 0x60
 800513a:	2202      	movs	r2, #2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e077      	b.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3361      	adds	r3, #97	; 0x61
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d109      	bne.n	8005168 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3360      	adds	r3, #96	; 0x60
 8005162:	2205      	movs	r2, #5
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e063      	b.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3361      	adds	r3, #97	; 0x61
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d009      	beq.n	8005190 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3361      	adds	r3, #97	; 0x61
 800518a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800518c:	2b08      	cmp	r3, #8
 800518e:	d14f      	bne.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	335c      	adds	r3, #92	; 0x5c
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	202c      	movs	r0, #44	; 0x2c
 80051a8:	fb00 f303 	mul.w	r3, r0, r3
 80051ac:	440b      	add	r3, r1
 80051ae:	335c      	adds	r3, #92	; 0x5c
 80051b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	335c      	adds	r3, #92	; 0x5c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d912      	bls.n	80051ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	212c      	movs	r1, #44	; 0x2c
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	335c      	adds	r3, #92	; 0x5c
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	3360      	adds	r3, #96	; 0x60
 80051e6:	2204      	movs	r2, #4
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e021      	b.n	8005230 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	3360      	adds	r3, #96	; 0x60
 80051fa:	2202      	movs	r2, #2
 80051fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005214:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	461a      	mov	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2302      	movs	r3, #2
 8005240:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	b2d9      	uxtb	r1, r3
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	202c      	movs	r0, #44	; 0x2c
 800524c:	fb00 f303 	mul.w	r3, r0, r3
 8005250:	4413      	add	r3, r2
 8005252:	3360      	adds	r3, #96	; 0x60
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f008 fd21 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800525e:	bf00      	nop
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08a      	sub	sp, #40	; 0x28
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	0c5b      	lsrs	r3, r3, #17
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <HCD_RXQLVL_IRQHandler+0x46>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	f000 80a9 	beq.w	80053fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052aa:	e0aa      	b.n	8005402 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80a6 	beq.w	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	212c      	movs	r1, #44	; 0x2c
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	3344      	adds	r3, #68	; 0x44
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 809b 	beq.w	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	212c      	movs	r1, #44	; 0x2c
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	3350      	adds	r3, #80	; 0x50
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	441a      	add	r2, r3
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	202c      	movs	r0, #44	; 0x2c
 80052e4:	fb00 f303 	mul.w	r3, r0, r3
 80052e8:	440b      	add	r3, r1
 80052ea:	334c      	adds	r3, #76	; 0x4c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d87a      	bhi.n	80053e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	3344      	adds	r3, #68	; 0x44
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	b292      	uxth	r2, r2
 800530a:	4619      	mov	r1, r3
 800530c:	f004 fbfa 	bl	8009b04 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	212c      	movs	r1, #44	; 0x2c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	3344      	adds	r3, #68	; 0x44
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	441a      	add	r2, r3
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	202c      	movs	r0, #44	; 0x2c
 800532a:	fb00 f303 	mul.w	r3, r0, r3
 800532e:	440b      	add	r3, r1
 8005330:	3344      	adds	r3, #68	; 0x44
 8005332:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3350      	adds	r3, #80	; 0x50
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	441a      	add	r2, r3
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	202c      	movs	r0, #44	; 0x2c
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	440b      	add	r3, r1
 8005354:	3350      	adds	r3, #80	; 0x50
 8005356:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	0cdb      	lsrs	r3, r3, #19
 8005368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	212c      	movs	r1, #44	; 0x2c
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	4413      	add	r3, r2
 800537a:	3340      	adds	r3, #64	; 0x40
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4293      	cmp	r3, r2
 8005384:	d13c      	bne.n	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d039      	beq.n	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3354      	adds	r3, #84	; 0x54
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f083 0301 	eor.w	r3, r3, #1
 80053d2:	b2d8      	uxtb	r0, r3
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	212c      	movs	r1, #44	; 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	3354      	adds	r3, #84	; 0x54
 80053e2:	4602      	mov	r2, r0
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e00b      	b.n	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3360      	adds	r3, #96	; 0x60
 80053f6:	2204      	movs	r2, #4
 80053f8:	701a      	strb	r2, [r3, #0]
      break;
 80053fa:	e001      	b.n	8005400 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005400:	bf00      	nop
  }
}
 8005402:	bf00      	nop
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005436:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d10b      	bne.n	800545a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d102      	bne.n	8005452 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f008 fc0b 	bl	800dc68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d132      	bne.n	80054ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f043 0308 	orr.w	r3, r3, #8
 800546a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b04      	cmp	r3, #4
 8005474:	d126      	bne.n	80054c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d113      	bne.n	80054a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005488:	d106      	bne.n	8005498 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f004 fca5 	bl	8009de0 <USB_InitFSLSPClkSel>
 8005496:	e011      	b.n	80054bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fc9e 	bl	8009de0 <USB_InitFSLSPClkSel>
 80054a4:	e00a      	b.n	80054bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d106      	bne.n	80054bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b4:	461a      	mov	r2, r3
 80054b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f008 fbfd 	bl	800dcbc <HAL_HCD_PortEnabled_Callback>
 80054c2:	e002      	b.n	80054ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f008 fc07 	bl	800dcd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d103      	bne.n	80054dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f043 0320 	orr.w	r3, r3, #32
 80054da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6013      	str	r3, [r2, #0]
}
 80054e8:	bf00      	nop
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e12b      	b.n	800575a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd f9a0 	bl	800285c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005554:	f001 faa6 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 8005558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4a81      	ldr	r2, [pc, #516]	; (8005764 <HAL_I2C_Init+0x274>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d807      	bhi.n	8005574 <HAL_I2C_Init+0x84>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a80      	ldr	r2, [pc, #512]	; (8005768 <HAL_I2C_Init+0x278>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf94      	ite	ls
 800556c:	2301      	movls	r3, #1
 800556e:	2300      	movhi	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e006      	b.n	8005582 <HAL_I2C_Init+0x92>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a7d      	ldr	r2, [pc, #500]	; (800576c <HAL_I2C_Init+0x27c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	bf94      	ite	ls
 800557c:	2301      	movls	r3, #1
 800557e:	2300      	movhi	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0e7      	b.n	800575a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a78      	ldr	r2, [pc, #480]	; (8005770 <HAL_I2C_Init+0x280>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0c9b      	lsrs	r3, r3, #18
 8005594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a6a      	ldr	r2, [pc, #424]	; (8005764 <HAL_I2C_Init+0x274>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d802      	bhi.n	80055c4 <HAL_I2C_Init+0xd4>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3301      	adds	r3, #1
 80055c2:	e009      	b.n	80055d8 <HAL_I2C_Init+0xe8>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	4a69      	ldr	r2, [pc, #420]	; (8005774 <HAL_I2C_Init+0x284>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	3301      	adds	r3, #1
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	495c      	ldr	r1, [pc, #368]	; (8005764 <HAL_I2C_Init+0x274>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d819      	bhi.n	800562c <HAL_I2C_Init+0x13c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e59      	subs	r1, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fbb1 f3f3 	udiv	r3, r1, r3
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800560c:	400b      	ands	r3, r1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_I2C_Init+0x138>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1e59      	subs	r1, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005626:	e051      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005628:	2304      	movs	r3, #4
 800562a:	e04f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <HAL_I2C_Init+0x168>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e012      	b.n	800567e <HAL_I2C_Init+0x18e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1e58      	subs	r0, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	0099      	lsls	r1, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	fbb0 f3f3 	udiv	r3, r0, r3
 800566e:	3301      	adds	r3, #1
 8005670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Init+0x196>
 8005682:	2301      	movs	r3, #1
 8005684:	e022      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <HAL_I2C_Init+0x1bc>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1e58      	subs	r0, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	440b      	add	r3, r1
 800569c:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a0:	3301      	adds	r3, #1
 80056a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056aa:	e00f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1e58      	subs	r0, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	0099      	lsls	r1, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c2:	3301      	adds	r3, #1
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	6809      	ldr	r1, [r1, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6911      	ldr	r1, [r2, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68d2      	ldr	r2, [r2, #12]
 8005706:	4311      	orrs	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	430b      	orrs	r3, r1
 800570e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	000186a0 	.word	0x000186a0
 8005768:	001e847f 	.word	0x001e847f
 800576c:	003d08ff 	.word	0x003d08ff
 8005770:	431bde83 	.word	0x431bde83
 8005774:	10624dd3 	.word	0x10624dd3

08005778 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08c      	sub	sp, #48	; 0x30
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	817b      	strh	r3, [r7, #10]
 800578a:	460b      	mov	r3, r1
 800578c:	813b      	strh	r3, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005792:	f7fd fc03 	bl	8002f9c <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	f040 8208 	bne.w	8005bb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2319      	movs	r3, #25
 80057ac:	2201      	movs	r2, #1
 80057ae:	497b      	ldr	r1, [pc, #492]	; (800599c <HAL_I2C_Mem_Read+0x224>)
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 faef 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	e1fb      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_I2C_Mem_Read+0x56>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e1f4      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d007      	beq.n	80057f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2222      	movs	r2, #34	; 0x22
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a5b      	ldr	r2, [pc, #364]	; (80059a0 <HAL_I2C_Mem_Read+0x228>)
 8005834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005836:	88f8      	ldrh	r0, [r7, #6]
 8005838:	893a      	ldrh	r2, [r7, #8]
 800583a:	8979      	ldrh	r1, [r7, #10]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	4603      	mov	r3, r0
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f9bc 	bl	8005bc4 <I2C_RequestMemoryRead>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e1b0      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e184      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	2b01      	cmp	r3, #1
 800588c:	d11b      	bne.n	80058c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e164      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11b      	bne.n	8005906 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	e144      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800591c:	e138      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	2b03      	cmp	r3, #3
 8005924:	f200 80f1 	bhi.w	8005b0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592c:	2b01      	cmp	r3, #1
 800592e:	d123      	bne.n	8005978 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fb44 	bl	8005fc2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e139      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005976:	e10b      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	2b02      	cmp	r3, #2
 800597e:	d14e      	bne.n	8005a1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	2200      	movs	r2, #0
 8005988:	4906      	ldr	r1, [pc, #24]	; (80059a4 <HAL_I2C_Mem_Read+0x22c>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fa02 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e10e      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
 800599a:	bf00      	nop
 800599c:	00100002 	.word	0x00100002
 80059a0:	ffff0000 	.word	0xffff0000
 80059a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a1c:	e0b8      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2200      	movs	r2, #0
 8005a26:	4966      	ldr	r1, [pc, #408]	; (8005bc0 <HAL_I2C_Mem_Read+0x448>)
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f9b3 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0bf      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2200      	movs	r2, #0
 8005a82:	494f      	ldr	r1, [pc, #316]	; (8005bc0 <HAL_I2C_Mem_Read+0x448>)
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f985 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e091      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b08:	e042      	b.n	8005b90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa57 	bl	8005fc2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e04c      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d118      	bne.n	8005b90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f aec2 	bne.w	800591e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010004 	.word	0x00010004

08005bc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	817b      	strh	r3, [r7, #10]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	813b      	strh	r3, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f8c2 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c24:	d103      	bne.n	8005c2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0aa      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	4952      	ldr	r1, [pc, #328]	; (8005d90 <I2C_RequestMemoryRead+0x1cc>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f8fa 	bl	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e097      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f964 	bl	8005f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e076      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca0:	893b      	ldrh	r3, [r7, #8]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	e021      	b.n	8005cf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f93e 	bl	8005f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d107      	bne.n	8005ce2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e050      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	6a39      	ldr	r1, [r7, #32]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f923 	bl	8005f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d107      	bne.n	8005d18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e035      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f82b 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d52:	d103      	bne.n	8005d5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e013      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d60:	897b      	ldrh	r3, [r7, #10]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	4906      	ldr	r1, [pc, #24]	; (8005d90 <I2C_RequestMemoryRead+0x1cc>)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f863 	bl	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	00010002 	.word	0x00010002

08005d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da4:	e025      	b.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dac:	d021      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fd f8f5 	bl	8002f9c <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d116      	bne.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e023      	b.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10d      	bne.n	8005e18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	e00c      	b.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4013      	ands	r3, r2
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d0b6      	beq.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e50:	e051      	b.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e60:	d123      	bne.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e046      	b.n	8005f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb0:	d021      	beq.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fd f873 	bl	8002f9c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d116      	bne.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e020      	b.n	8005f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10c      	bne.n	8005f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	43da      	mvns	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e00b      	b.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	43da      	mvns	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4013      	ands	r3, r2
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d18d      	bne.n	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f4c:	e02d      	b.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f88d 	bl	800606e <I2C_IsAcknowledgeFailed>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e02d      	b.n	8005fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f64:	d021      	beq.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fd f819 	bl	8002f9c <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d116      	bne.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e007      	b.n	8005fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d1ca      	bne.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fce:	e042      	b.n	8006056 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d119      	bne.n	8006012 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0210 	mvn.w	r2, #16
 8005fe6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e029      	b.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fc ffc3 	bl	8002f9c <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d116      	bne.n	8006056 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f043 0220 	orr.w	r2, r3, #32
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e007      	b.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d1b5      	bne.n	8005fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006084:	d11b      	bne.n	80060be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800608e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f043 0204 	orr.w	r2, r3, #4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d129      	bne.n	8006136 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	; 0x24
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0210 	bic.w	r2, r2, #16
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b20      	cmp	r3, #32
 800615c:	d12a      	bne.n	80061b4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2224      	movs	r2, #36	; 0x24
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	f023 030f 	bic.w	r3, r3, #15
 8006184:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	4313      	orrs	r3, r2
 800618e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	89fa      	ldrh	r2, [r7, #14]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e267      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061e2:	4b88      	ldr	r3, [pc, #544]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d00c      	beq.n	8006208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ee:	4b85      	ldr	r3, [pc, #532]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d112      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b82      	ldr	r3, [pc, #520]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006206:	d10b      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006208:	4b7e      	ldr	r3, [pc, #504]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05b      	beq.n	80062cc <HAL_RCC_OscConfig+0x108>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d157      	bne.n	80062cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e242      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d106      	bne.n	8006238 <HAL_RCC_OscConfig+0x74>
 800622a:	4b76      	ldr	r3, [pc, #472]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a75      	ldr	r2, [pc, #468]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e01d      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x98>
 8006242:	4b70      	ldr	r3, [pc, #448]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a6f      	ldr	r2, [pc, #444]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b6d      	ldr	r3, [pc, #436]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6c      	ldr	r2, [pc, #432]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 800625c:	4b69      	ldr	r3, [pc, #420]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a68      	ldr	r2, [pc, #416]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b66      	ldr	r3, [pc, #408]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a65      	ldr	r2, [pc, #404]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fc fe8e 	bl	8002f9c <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006284:	f7fc fe8a 	bl	8002f9c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	; 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e207      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b5b      	ldr	r3, [pc, #364]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0xc0>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fc fe7a 	bl	8002f9c <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fc fe76 	bl	8002f9c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e1f3      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	4b51      	ldr	r3, [pc, #324]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0xe8>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062da:	4b4a      	ldr	r3, [pc, #296]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e6:	4b47      	ldr	r3, [pc, #284]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d11c      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b44      	ldr	r3, [pc, #272]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	4b41      	ldr	r3, [pc, #260]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e1c7      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4937      	ldr	r1, [pc, #220]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	e03a      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006334:	4b34      	ldr	r3, [pc, #208]	; (8006408 <HAL_RCC_OscConfig+0x244>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fc fe2f 	bl	8002f9c <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006342:	f7fc fe2b 	bl	8002f9c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e1a8      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	4b2b      	ldr	r3, [pc, #172]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4925      	ldr	r1, [pc, #148]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]
 8006374:	e015      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <HAL_RCC_OscConfig+0x244>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fc fe0e 	bl	8002f9c <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006384:	f7fc fe0a 	bl	8002f9c <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e187      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d036      	beq.n	800641c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b6:	4b15      	ldr	r3, [pc, #84]	; (800640c <HAL_RCC_OscConfig+0x248>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fc fdee 	bl	8002f9c <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fc fdea 	bl	8002f9c <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e167      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_OscConfig+0x240>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x200>
 80063e2:	e01b      	b.n	800641c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e4:	4b09      	ldr	r3, [pc, #36]	; (800640c <HAL_RCC_OscConfig+0x248>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fc fdd7 	bl	8002f9c <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f0:	e00e      	b.n	8006410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f2:	f7fc fdd3 	bl	8002f9c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d907      	bls.n	8006410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e150      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006404:	40023800 	.word	0x40023800
 8006408:	42470000 	.word	0x42470000
 800640c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	4b88      	ldr	r3, [pc, #544]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ea      	bne.n	80063f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8097 	beq.w	8006558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b81      	ldr	r3, [pc, #516]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	4b7d      	ldr	r3, [pc, #500]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	4a7c      	ldr	r2, [pc, #496]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	; 0x40
 800644a:	4b7a      	ldr	r3, [pc, #488]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645a:	4b77      	ldr	r3, [pc, #476]	; (8006638 <HAL_RCC_OscConfig+0x474>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d118      	bne.n	8006498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006466:	4b74      	ldr	r3, [pc, #464]	; (8006638 <HAL_RCC_OscConfig+0x474>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	; (8006638 <HAL_RCC_OscConfig+0x474>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006472:	f7fc fd93 	bl	8002f9c <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647a:	f7fc fd8f 	bl	8002f9c <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e10c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	4b6a      	ldr	r3, [pc, #424]	; (8006638 <HAL_RCC_OscConfig+0x474>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x2ea>
 80064a0:	4b64      	ldr	r3, [pc, #400]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4a63      	ldr	r2, [pc, #396]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	; 0x70
 80064ac:	e01c      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x30c>
 80064b6:	4b5f      	ldr	r3, [pc, #380]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a5e      	ldr	r2, [pc, #376]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064bc:	f043 0304 	orr.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
 80064c2:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a5b      	ldr	r2, [pc, #364]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064d0:	4b58      	ldr	r3, [pc, #352]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d4:	4a57      	ldr	r2, [pc, #348]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	; 0x70
 80064dc:	4b55      	ldr	r3, [pc, #340]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a54      	ldr	r2, [pc, #336]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f023 0304 	bic.w	r3, r3, #4
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fc fd54 	bl	8002f9c <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	e00a      	b.n	800650e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fc fd50 	bl	8002f9c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	; 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e0cb      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	4b49      	ldr	r3, [pc, #292]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <HAL_RCC_OscConfig+0x334>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651c:	f7fc fd3e 	bl	8002f9c <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fc fd3a 	bl	8002f9c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0b5      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ee      	bne.n	8006524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d105      	bne.n	8006558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654c:	4b39      	ldr	r3, [pc, #228]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	4a38      	ldr	r2, [pc, #224]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80a1 	beq.w	80066a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006562:	4b34      	ldr	r3, [pc, #208]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b08      	cmp	r3, #8
 800656c:	d05c      	beq.n	8006628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d141      	bne.n	80065fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCC_OscConfig+0x478>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc fd0e 	bl	8002f9c <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006584:	f7fc fd0a 	bl	8002f9c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e087      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	4b27      	ldr	r3, [pc, #156]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	019b      	lsls	r3, r3, #6
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	491b      	ldr	r1, [pc, #108]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065cc:	4b1b      	ldr	r3, [pc, #108]	; (800663c <HAL_RCC_OscConfig+0x478>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fc fce3 	bl	8002f9c <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065da:	f7fc fcdf 	bl	8002f9c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e05c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x416>
 80065f8:	e054      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <HAL_RCC_OscConfig+0x478>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fc fccc 	bl	8002f9c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006608:	f7fc fcc8 	bl	8002f9c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e045      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <HAL_RCC_OscConfig+0x470>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f0      	bne.n	8006608 <HAL_RCC_OscConfig+0x444>
 8006626:	e03d      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e038      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006634:	40023800 	.word	0x40023800
 8006638:	40007000 	.word	0x40007000
 800663c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_RCC_OscConfig+0x4ec>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d028      	beq.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d11a      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006678:	4293      	cmp	r3, r2
 800667a:	d111      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d001      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0cc      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b68      	ldr	r3, [pc, #416]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90c      	bls.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b65      	ldr	r3, [pc, #404]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b63      	ldr	r3, [pc, #396]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0b8      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006708:	4b59      	ldr	r3, [pc, #356]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a58      	ldr	r2, [pc, #352]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006720:	4b53      	ldr	r3, [pc, #332]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a52      	ldr	r2, [pc, #328]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800672a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800672c:	4b50      	ldr	r3, [pc, #320]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	494d      	ldr	r1, [pc, #308]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d044      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b47      	ldr	r3, [pc, #284]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d119      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d003      	beq.n	8006772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e06f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006782:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e067      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006792:	4b37      	ldr	r3, [pc, #220]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 0203 	bic.w	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4934      	ldr	r1, [pc, #208]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a4:	f7fc fbfa 	bl	8002f9c <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ac:	f7fc fbf6 	bl	8002f9c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e04f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 020c 	and.w	r2, r3, #12
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d1eb      	bne.n	80067ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d20c      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b22      	ldr	r3, [pc, #136]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b20      	ldr	r3, [pc, #128]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e032      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006808:	4b19      	ldr	r3, [pc, #100]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4916      	ldr	r1, [pc, #88]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	490e      	ldr	r1, [pc, #56]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800683a:	f000 f821 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 800683e:	4602      	mov	r2, r0
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	490a      	ldr	r1, [pc, #40]	; (8006874 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	5ccb      	ldrb	r3, [r1, r3]
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_RCC_ClockConfig+0x1c8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fc fb5a 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023c00 	.word	0x40023c00
 8006870:	40023800 	.word	0x40023800
 8006874:	0800f768 	.word	0x0800f768
 8006878:	20000004 	.word	0x20000004
 800687c:	20000008 	.word	0x20000008

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006884:	b094      	sub	sp, #80	; 0x50
 8006886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	647b      	str	r3, [r7, #68]	; 0x44
 800688c:	2300      	movs	r3, #0
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006890:	2300      	movs	r3, #0
 8006892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006898:	4b79      	ldr	r3, [pc, #484]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d00d      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x40>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	f200 80e1 	bhi.w	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x3a>
 80068b2:	e0db      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b73      	ldr	r3, [pc, #460]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068b8:	e0db      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ba:	4b73      	ldr	r3, [pc, #460]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80068bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068be:	e0d8      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c0:	4b6f      	ldr	r3, [pc, #444]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ca:	4b6d      	ldr	r3, [pc, #436]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d063      	beq.n	800699e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d6:	4b6a      	ldr	r3, [pc, #424]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	2200      	movs	r2, #0
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
 80068e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f04f 0000 	mov.w	r0, #0
 80068fa:	f04f 0100 	mov.w	r1, #0
 80068fe:	0159      	lsls	r1, r3, #5
 8006900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006904:	0150      	lsls	r0, r2, #5
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4621      	mov	r1, r4
 800690c:	1a51      	subs	r1, r2, r1
 800690e:	6139      	str	r1, [r7, #16]
 8006910:	4629      	mov	r1, r5
 8006912:	eb63 0301 	sbc.w	r3, r3, r1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006924:	4659      	mov	r1, fp
 8006926:	018b      	lsls	r3, r1, #6
 8006928:	4651      	mov	r1, sl
 800692a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800692e:	4651      	mov	r1, sl
 8006930:	018a      	lsls	r2, r1, #6
 8006932:	4651      	mov	r1, sl
 8006934:	ebb2 0801 	subs.w	r8, r2, r1
 8006938:	4659      	mov	r1, fp
 800693a:	eb63 0901 	sbc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	462b      	mov	r3, r5
 8006960:	eb49 0303 	adc.w	r3, r9, r3
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006972:	4629      	mov	r1, r5
 8006974:	024b      	lsls	r3, r1, #9
 8006976:	4621      	mov	r1, r4
 8006978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800697c:	4621      	mov	r1, r4
 800697e:	024a      	lsls	r2, r1, #9
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006986:	2200      	movs	r2, #0
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
 800698a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800698c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006990:	f7f9 fc7e 	bl	8000290 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4613      	mov	r3, r2
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699c:	e058      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b38      	ldr	r3, [pc, #224]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	4611      	mov	r1, r2
 80069aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
 80069b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ca:	0150      	lsls	r0, r2, #5
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4641      	mov	r1, r8
 80069d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d6:	4649      	mov	r1, r9
 80069d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069f0:	ebb2 040a 	subs.w	r4, r2, sl
 80069f4:	eb63 050b 	sbc.w	r5, r3, fp
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	00eb      	lsls	r3, r5, #3
 8006a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a06:	00e2      	lsls	r2, r4, #3
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	18e3      	adds	r3, r4, r3
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	464b      	mov	r3, r9
 8006a14:	eb45 0303 	adc.w	r3, r5, r3
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a26:	4629      	mov	r1, r5
 8006a28:	028b      	lsls	r3, r1, #10
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a30:	4621      	mov	r1, r4
 8006a32:	028a      	lsls	r2, r1, #10
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	61fa      	str	r2, [r7, #28]
 8006a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a44:	f7f9 fc24 	bl	8000290 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a6a:	e002      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3750      	adds	r7, #80	; 0x50
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	007a1200 	.word	0x007a1200

08006a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a92:	681b      	ldr	r3, [r3, #0]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000004 	.word	0x20000004

08006aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006aa8:	f7ff fff0 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0a9b      	lsrs	r3, r3, #10
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	; (8006ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	0800f778 	.word	0x0800f778

08006acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ad0:	f7ff ffdc 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0b5b      	lsrs	r3, r3, #13
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4903      	ldr	r1, [pc, #12]	; (8006af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40023800 	.word	0x40023800
 8006af0:	0800f778 	.word	0x0800f778

08006af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e07b      	b.n	8006bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d108      	bne.n	8006b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b16:	d009      	beq.n	8006b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	61da      	str	r2, [r3, #28]
 8006b1e:	e005      	b.n	8006b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fb ff28 	bl	800299c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	ea42 0103 	orr.w	r1, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	f003 0104 	and.w	r1, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0210 	and.w	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_SPI_Transmit+0x22>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e126      	b.n	8006e76 <HAL_SPI_Transmit+0x270>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c30:	f7fc f9b4 	bl	8002f9c <HAL_GetTick>
 8006c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c4a:	e10b      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_SPI_Transmit+0x52>
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c5c:	e102      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2203      	movs	r2, #3
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca4:	d10f      	bne.n	8006cc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d007      	beq.n	8006ce4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cec:	d14b      	bne.n	8006d86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Transmit+0xf6>
 8006cf6:	8afb      	ldrh	r3, [r7, #22]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d13e      	bne.n	8006d7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	1c9a      	adds	r2, r3, #2
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d20:	e02b      	b.n	8006d7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d112      	bne.n	8006d56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d54:	e011      	b.n	8006d7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d56:	f7fc f921 	bl	8002f9c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <HAL_SPI_Transmit+0x168>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_Transmit+0x16e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d78:	e074      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1ce      	bne.n	8006d22 <HAL_SPI_Transmit+0x11c>
 8006d84:	e04c      	b.n	8006e20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_SPI_Transmit+0x18e>
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d140      	bne.n	8006e16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dba:	e02c      	b.n	8006e16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d113      	bne.n	8006df2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	86da      	strh	r2, [r3, #54]	; 0x36
 8006df0:	e011      	b.n	8006e16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df2:	f7fc f8d3 	bl	8002f9c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d803      	bhi.n	8006e0a <HAL_SPI_Transmit+0x204>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e08:	d102      	bne.n	8006e10 <HAL_SPI_Transmit+0x20a>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e14:	e026      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1cd      	bne.n	8006dbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fbcb 	bl	80075c0 <SPI_EndRxTxTransaction>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e000      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b088      	sub	sp, #32
 8006e82:	af02      	add	r7, sp, #8
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9a:	d112      	bne.n	8006ec2 <HAL_SPI_Receive+0x44>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10e      	bne.n	8006ec2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006eac:	88fa      	ldrh	r2, [r7, #6]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f8f1 	bl	80070a0 <HAL_SPI_TransmitReceive>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	e0ea      	b.n	8007098 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Receive+0x52>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e0e3      	b.n	8007098 <HAL_SPI_Receive+0x21a>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed8:	f7fc f860 	bl	8002f9c <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
 8006eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eee:	e0ca      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Receive+0x7e>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f00:	e0c1      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f48:	d10f      	bne.n	8006f6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d007      	beq.n	8006f88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d162      	bne.n	8007056 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f90:	e02e      	b.n	8006ff0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d115      	bne.n	8006fcc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f103 020c 	add.w	r2, r3, #12
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fca:	e011      	b.n	8006ff0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fcc:	f7fb ffe6 	bl	8002f9c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d803      	bhi.n	8006fe4 <HAL_SPI_Receive+0x166>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d102      	bne.n	8006fea <HAL_SPI_Receive+0x16c>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fee:	e04a      	b.n	8007086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cb      	bne.n	8006f92 <HAL_SPI_Receive+0x114>
 8006ffa:	e031      	b.n	8007060 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d113      	bne.n	8007032 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	b292      	uxth	r2, r2
 8007016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007030:	e011      	b.n	8007056 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007032:	f7fb ffb3 	bl	8002f9c <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d803      	bhi.n	800704a <HAL_SPI_Receive+0x1cc>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007048:	d102      	bne.n	8007050 <HAL_SPI_Receive+0x1d2>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007054:	e017      	b.n	8007086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1cd      	bne.n	8006ffc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fa45 	bl	80074f4 <SPI_EndRxTransaction>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
 8007082:	e000      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

error :
 8007084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070ae:	2301      	movs	r3, #1
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_SPI_TransmitReceive+0x26>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e18a      	b.n	80073dc <HAL_SPI_TransmitReceive+0x33c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ce:	f7fb ff65 	bl	8002f9c <HAL_GetTick>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d00f      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x70>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d107      	bne.n	8007108 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <HAL_SPI_TransmitReceive+0x68>
 8007100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007104:	2b04      	cmp	r3, #4
 8007106:	d003      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800710e:	e15b      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_SPI_TransmitReceive+0x82>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_TransmitReceive+0x82>
 800711c:	887b      	ldrh	r3, [r7, #2]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007128:	e14e      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b04      	cmp	r3, #4
 8007134:	d003      	beq.n	800713e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2205      	movs	r2, #5
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	887a      	ldrh	r2, [r7, #2]
 800714e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	887a      	ldrh	r2, [r7, #2]
 8007154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	887a      	ldrh	r2, [r7, #2]
 8007160:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	887a      	ldrh	r2, [r7, #2]
 8007166:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b40      	cmp	r3, #64	; 0x40
 8007180:	d007      	beq.n	8007192 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719a:	d178      	bne.n	800728e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_SPI_TransmitReceive+0x10a>
 80071a4:	8b7b      	ldrh	r3, [r7, #26]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d166      	bne.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ce:	e053      	b.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d11b      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x176>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d016      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x176>
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d113      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d119      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x1b8>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d014      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	b292      	uxth	r2, r2
 800723a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007258:	f7fb fea0 	bl	8002f9c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007264:	429a      	cmp	r2, r3
 8007266:	d807      	bhi.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726e:	d003      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007276:	e0a7      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1a6      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x130>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1a1      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x130>
 800728c:	e07c      	b.n	8007388 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_TransmitReceive+0x1fc>
 8007296:	8b7b      	ldrh	r3, [r7, #26]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d16b      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c2:	e057      	b.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d11c      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26c>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <HAL_SPI_TransmitReceive+0x26c>
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d114      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d119      	bne.n	800734e <HAL_SPI_TransmitReceive+0x2ae>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d014      	beq.n	800734e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800734a:	2301      	movs	r3, #1
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800734e:	f7fb fe25 	bl	8002f9c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735a:	429a      	cmp	r2, r3
 800735c:	d803      	bhi.n	8007366 <HAL_SPI_TransmitReceive+0x2c6>
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007364:	d102      	bne.n	800736c <HAL_SPI_TransmitReceive+0x2cc>
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007372:	e029      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1a2      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x224>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d19d      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f917 	bl	80075c0 <SPI_EndRxTxTransaction>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80073a4:	e010      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	e000      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80073c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3730      	adds	r7, #48	; 0x30
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073f4:	f7fb fdd2 	bl	8002f9c <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	4413      	add	r3, r2
 8007402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007404:	f7fb fdca 	bl	8002f9c <HAL_GetTick>
 8007408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	015b      	lsls	r3, r3, #5
 8007410:	0d1b      	lsrs	r3, r3, #20
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800741a:	e054      	b.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d050      	beq.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007424:	f7fb fdba 	bl	8002f9c <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	429a      	cmp	r2, r3
 8007432:	d902      	bls.n	800743a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d13d      	bne.n	80074b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007452:	d111      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745c:	d004      	beq.n	8007468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007466:	d107      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007480:	d10f      	bne.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e017      	b.n	80074e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4013      	ands	r3, r2
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	bf0c      	ite	eq
 80074d6:	2301      	moveq	r3, #1
 80074d8:	2300      	movne	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d19b      	bne.n	800741c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000004 	.word	0x20000004

080074f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007508:	d111      	bne.n	800752e <SPI_EndRxTransaction+0x3a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007512:	d004      	beq.n	800751e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751c:	d107      	bne.n	800752e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007536:	d12a      	bne.n	800758e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007540:	d012      	beq.n	8007568 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2200      	movs	r2, #0
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff ff49 	bl	80073e4 <SPI_WaitFlagStateUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d02d      	beq.n	80075b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e026      	b.n	80075b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	2101      	movs	r1, #1
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff ff36 	bl	80073e4 <SPI_WaitFlagStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01a      	beq.n	80075b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e013      	b.n	80075b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	2101      	movs	r1, #1
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff ff23 	bl	80073e4 <SPI_WaitFlagStateUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	f043 0220 	orr.w	r2, r3, #32
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e000      	b.n	80075b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075cc:	4b1b      	ldr	r3, [pc, #108]	; (800763c <SPI_EndRxTxTransaction+0x7c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <SPI_EndRxTxTransaction+0x80>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	0d5b      	lsrs	r3, r3, #21
 80075d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075dc:	fb02 f303 	mul.w	r3, r2, r3
 80075e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ea:	d112      	bne.n	8007612 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fef4 	bl	80073e4 <SPI_WaitFlagStateUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d016      	beq.n	8007630 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e00f      	b.n	8007632 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3b01      	subs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d0f2      	beq.n	8007612 <SPI_EndRxTxTransaction+0x52>
 800762c:	e000      	b.n	8007630 <SPI_EndRxTxTransaction+0x70>
        break;
 800762e:	bf00      	nop
  }

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000004 	.word	0x20000004
 8007640:	165e9f81 	.word	0x165e9f81

08007644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e041      	b.n	80076da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fb fa36 	bl	8002adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f000 fc12 	bl	8007eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e041      	b.n	8007778 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f839 	bl	8007780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f000 fbc3 	bl	8007eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b0c      	cmp	r3, #12
 80077a6:	d855      	bhi.n	8007854 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077e5 	.word	0x080077e5
 80077b4:	08007855 	.word	0x08007855
 80077b8:	08007855 	.word	0x08007855
 80077bc:	08007855 	.word	0x08007855
 80077c0:	08007801 	.word	0x08007801
 80077c4:	08007855 	.word	0x08007855
 80077c8:	08007855 	.word	0x08007855
 80077cc:	08007855 	.word	0x08007855
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	08007855 	.word	0x08007855
 80077d8:	08007855 	.word	0x08007855
 80077dc:	08007855 	.word	0x08007855
 80077e0:	08007839 	.word	0x08007839
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fb fe4b 	bl	8003494 <HAL_DMA_Abort_IT>
      break;
 80077fe:	e02c      	b.n	800785a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	4618      	mov	r0, r3
 8007816:	f7fb fe3d 	bl	8003494 <HAL_DMA_Abort_IT>
      break;
 800781a:	e01e      	b.n	800785a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800782a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	4618      	mov	r0, r3
 8007832:	f7fb fe2f 	bl	8003494 <HAL_DMA_Abort_IT>
      break;
 8007836:	e010      	b.n	800785a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007846:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	4618      	mov	r0, r3
 800784e:	f7fb fe21 	bl	8003494 <HAL_DMA_Abort_IT>
      break;
 8007852:	e002      	b.n	800785a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
      break;
 8007858:	bf00      	nop
  }

  if (status == HAL_OK)
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d161      	bne.n	8007924 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2200      	movs	r2, #0
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fe09 	bl	8008480 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIM_PWM_Stop_DMA+0xee>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d101      	bne.n	8007886 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	f241 1311 	movw	r3, #4369	; 0x1111
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <HAL_TIM_PWM_Stop_DMA+0x128>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a1a      	ldr	r2, [r3, #32]
 80078a2:	f240 4344 	movw	r3, #1092	; 0x444
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d107      	bne.n	80078bc <HAL_TIM_PWM_Stop_DMA+0x128>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6a1a      	ldr	r2, [r3, #32]
 80078c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <HAL_TIM_PWM_Stop_DMA+0x158>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	f240 4344 	movw	r3, #1092	; 0x444
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <HAL_TIM_PWM_Stop_DMA+0x158>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d104      	bne.n	80078fc <HAL_TIM_PWM_Stop_DMA+0x168>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078fa:	e013      	b.n	8007924 <HAL_TIM_PWM_Stop_DMA+0x190>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d104      	bne.n	800790c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800790a:	e00b      	b.n	8007924 <HAL_TIM_PWM_Stop_DMA+0x190>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b08      	cmp	r3, #8
 8007910:	d104      	bne.n	800791c <HAL_TIM_PWM_Stop_DMA+0x188>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791a:	e003      	b.n	8007924 <HAL_TIM_PWM_Stop_DMA+0x190>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d122      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b02      	cmp	r3, #2
 800795a:	d11b      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0202 	mvn.w	r2, #2
 8007964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa81 	bl	8007e82 <HAL_TIM_IC_CaptureCallback>
 8007980:	e005      	b.n	800798e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa73 	bl	8007e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fa fe89 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d122      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0204 	mvn.w	r2, #4
 80079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa57 	bl	8007e82 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa49 	bl	8007e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fa fe5f 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d122      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0208 	mvn.w	r2, #8
 8007a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa2d 	bl	8007e82 <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa1f 	bl	8007e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fa fe35 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d122      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0210 	mvn.w	r2, #16
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2208      	movs	r2, #8
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa03 	bl	8007e82 <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9f5 	bl	8007e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fa fe0b 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10e      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d107      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0201 	mvn.w	r2, #1
 8007ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9cf 	bl	8007e5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd78 	bl	80085d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d10e      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d107      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9c1 	bl	8007e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d107      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0220 	mvn.w	r2, #32
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fd42 	bl	80085c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e0ae      	b.n	8007cc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b0c      	cmp	r3, #12
 8007b72:	f200 809f 	bhi.w	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007cb5 	.word	0x08007cb5
 8007b84:	08007cb5 	.word	0x08007cb5
 8007b88:	08007cb5 	.word	0x08007cb5
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007cb5 	.word	0x08007cb5
 8007b94:	08007cb5 	.word	0x08007cb5
 8007b98:	08007cb5 	.word	0x08007cb5
 8007b9c:	08007c33 	.word	0x08007c33
 8007ba0:	08007cb5 	.word	0x08007cb5
 8007ba4:	08007cb5 	.word	0x08007cb5
 8007ba8:	08007cb5 	.word	0x08007cb5
 8007bac:	08007c73 	.word	0x08007c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fa18 	bl	8007fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0208 	orr.w	r2, r2, #8
 8007bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0204 	bic.w	r2, r2, #4
 8007bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6999      	ldr	r1, [r3, #24]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	619a      	str	r2, [r3, #24]
      break;
 8007bee:	e064      	b.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fa68 	bl	80080cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6999      	ldr	r1, [r3, #24]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	021a      	lsls	r2, r3, #8
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	619a      	str	r2, [r3, #24]
      break;
 8007c30:	e043      	b.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fabd 	bl	80081b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0208 	orr.w	r2, r2, #8
 8007c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0204 	bic.w	r2, r2, #4
 8007c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69d9      	ldr	r1, [r3, #28]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	61da      	str	r2, [r3, #28]
      break;
 8007c70:	e023      	b.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fb11 	bl	80082a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69d9      	ldr	r1, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	021a      	lsls	r2, r3, #8
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	61da      	str	r2, [r3, #28]
      break;
 8007cb2:	e002      	b.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e0b4      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x186>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d20:	d03e      	beq.n	8007da0 <HAL_TIM_ConfigClockSource+0xd4>
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d26:	f200 8087 	bhi.w	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	f000 8086 	beq.w	8007e3e <HAL_TIM_ConfigClockSource+0x172>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	d87f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d38:	2b70      	cmp	r3, #112	; 0x70
 8007d3a:	d01a      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0xa6>
 8007d3c:	2b70      	cmp	r3, #112	; 0x70
 8007d3e:	d87b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d40:	2b60      	cmp	r3, #96	; 0x60
 8007d42:	d050      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x11a>
 8007d44:	2b60      	cmp	r3, #96	; 0x60
 8007d46:	d877      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d48:	2b50      	cmp	r3, #80	; 0x50
 8007d4a:	d03c      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d873      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d058      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x13a>
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d86f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d58:	2b30      	cmp	r3, #48	; 0x30
 8007d5a:	d064      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15a>
 8007d5c:	2b30      	cmp	r3, #48	; 0x30
 8007d5e:	d86b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d060      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15a>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d867      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15a>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d05a      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15a>
 8007d70:	e062      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	6899      	ldr	r1, [r3, #8]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f000 fb5d 	bl	8008440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	609a      	str	r2, [r3, #8]
      break;
 8007d9e:	e04f      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6899      	ldr	r1, [r3, #8]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f000 fb46 	bl	8008440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc2:	609a      	str	r2, [r3, #8]
      break;
 8007dc4:	e03c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f000 faba 	bl	800834c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2150      	movs	r1, #80	; 0x50
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fb13 	bl	800840a <TIM_ITRx_SetConfig>
      break;
 8007de4:	e02c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fad9 	bl	80083aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2160      	movs	r1, #96	; 0x60
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fb03 	bl	800840a <TIM_ITRx_SetConfig>
      break;
 8007e04:	e01c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f000 fa9a 	bl	800834c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2140      	movs	r1, #64	; 0x40
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 faf3 	bl	800840a <TIM_ITRx_SetConfig>
      break;
 8007e24:	e00c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 faea 	bl	800840a <TIM_ITRx_SetConfig>
      break;
 8007e36:	e003      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e000      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
	...

08007eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a40      	ldr	r2, [pc, #256]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eca:	d00f      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a3d      	ldr	r2, [pc, #244]	; (8007fc4 <TIM_Base_SetConfig+0x118>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3c      	ldr	r2, [pc, #240]	; (8007fc8 <TIM_Base_SetConfig+0x11c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d007      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3b      	ldr	r2, [pc, #236]	; (8007fcc <TIM_Base_SetConfig+0x120>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d003      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d108      	bne.n	8007efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a2f      	ldr	r2, [pc, #188]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d02b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0c:	d027      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2c      	ldr	r2, [pc, #176]	; (8007fc4 <TIM_Base_SetConfig+0x118>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d023      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <TIM_Base_SetConfig+0x11c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01f      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <TIM_Base_SetConfig+0x120>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d017      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <TIM_Base_SetConfig+0x128>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a27      	ldr	r2, [pc, #156]	; (8007fd8 <TIM_Base_SetConfig+0x12c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <TIM_Base_SetConfig+0x130>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <TIM_Base_SetConfig+0x134>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <TIM_Base_SetConfig+0x138>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <TIM_Base_SetConfig+0x13c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_Base_SetConfig+0xf8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d103      	bne.n	8007fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	615a      	str	r2, [r3, #20]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40000800 	.word	0x40000800
 8007fcc:	40000c00 	.word	0x40000c00
 8007fd0:	40010400 	.word	0x40010400
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	40014400 	.word	0x40014400
 8007fdc:	40014800 	.word	0x40014800
 8007fe0:	40001800 	.word	0x40001800
 8007fe4:	40001c00 	.word	0x40001c00
 8007fe8:	40002000 	.word	0x40002000

08007fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a20      	ldr	r2, [pc, #128]	; (80080c4 <TIM_OC1_SetConfig+0xd8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_OC1_SetConfig+0x64>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1f      	ldr	r2, [pc, #124]	; (80080c8 <TIM_OC1_SetConfig+0xdc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10c      	bne.n	800806a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0308 	bic.w	r3, r3, #8
 8008056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 0304 	bic.w	r3, r3, #4
 8008068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <TIM_OC1_SetConfig+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_OC1_SetConfig+0x8e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <TIM_OC1_SetConfig+0xdc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d111      	bne.n	800809e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40010000 	.word	0x40010000
 80080c8:	40010400 	.word	0x40010400

080080cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	f023 0210 	bic.w	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0320 	bic.w	r3, r3, #32
 8008116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <TIM_OC2_SetConfig+0xe4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_OC2_SetConfig+0x68>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a21      	ldr	r2, [pc, #132]	; (80081b4 <TIM_OC2_SetConfig+0xe8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d10d      	bne.n	8008150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <TIM_OC2_SetConfig+0xe4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_OC2_SetConfig+0x94>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <TIM_OC2_SetConfig+0xe8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d113      	bne.n	8008188 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800816e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40010000 	.word	0x40010000
 80081b4:	40010400 	.word	0x40010400

080081b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <TIM_OC3_SetConfig+0xe0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_OC3_SetConfig+0x66>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a20      	ldr	r2, [pc, #128]	; (800829c <TIM_OC3_SetConfig+0xe4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d10d      	bne.n	800823a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a16      	ldr	r2, [pc, #88]	; (8008298 <TIM_OC3_SetConfig+0xe0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_OC3_SetConfig+0x92>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a15      	ldr	r2, [pc, #84]	; (800829c <TIM_OC3_SetConfig+0xe4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d113      	bne.n	8008272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	621a      	str	r2, [r3, #32]
}
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	40010000 	.word	0x40010000
 800829c:	40010400 	.word	0x40010400

080082a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	031b      	lsls	r3, r3, #12
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a12      	ldr	r2, [pc, #72]	; (8008344 <TIM_OC4_SetConfig+0xa4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC4_SetConfig+0x68>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a11      	ldr	r2, [pc, #68]	; (8008348 <TIM_OC4_SetConfig+0xa8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d109      	bne.n	800831c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800830e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	019b      	lsls	r3, r3, #6
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400

0800834c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 030a 	bic.w	r3, r3, #10
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f023 0210 	bic.w	r2, r3, #16
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	031b      	lsls	r3, r3, #12
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	621a      	str	r2, [r3, #32]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	f043 0307 	orr.w	r3, r3, #7
 800842c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	609a      	str	r2, [r3, #8]
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800845a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	021a      	lsls	r2, r3, #8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	431a      	orrs	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4313      	orrs	r3, r2
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	609a      	str	r2, [r3, #8]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	2201      	movs	r2, #1
 8008494:	fa02 f303 	lsl.w	r3, r2, r3
 8008498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1a      	ldr	r2, [r3, #32]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	401a      	ands	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	fa01 f303 	lsl.w	r3, r1, r3
 80084b8:	431a      	orrs	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e05a      	b.n	800859a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a21      	ldr	r2, [pc, #132]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d022      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d01d      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d018      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1a      	ldr	r2, [pc, #104]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00e      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d009      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a17      	ldr	r2, [pc, #92]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d004      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d10c      	bne.n	8008588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4313      	orrs	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40010000 	.word	0x40010000
 80085ac:	40000400 	.word	0x40000400
 80085b0:	40000800 	.word	0x40000800
 80085b4:	40000c00 	.word	0x40000c00
 80085b8:	40010400 	.word	0x40010400
 80085bc:	40014000 	.word	0x40014000
 80085c0:	40001800 	.word	0x40001800

080085c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e03f      	b.n	800867e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7fa fb0a 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	; 0x24
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800862e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fe81 	bl	8009338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b08a      	sub	sp, #40	; 0x28
 800868a:	af02      	add	r7, sp, #8
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d17c      	bne.n	80087a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <HAL_UART_Transmit+0x2c>
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e075      	b.n	80087a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_UART_Transmit+0x3e>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e06e      	b.n	80087a2 <HAL_UART_Transmit+0x11c>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2221      	movs	r2, #33	; 0x21
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086da:	f7fa fc5f 	bl	8002f9c <HAL_GetTick>
 80086de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	88fa      	ldrh	r2, [r7, #6]
 80086e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f4:	d108      	bne.n	8008708 <HAL_UART_Transmit+0x82>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	e003      	b.n	8008710 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800870c:	2300      	movs	r3, #0
 800870e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008718:	e02a      	b.n	8008770 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	2180      	movs	r1, #128	; 0x80
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fbc1 	bl	8008eac <UART_WaitOnFlagUntilTimeout>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e036      	b.n	80087a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	3302      	adds	r3, #2
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	e007      	b.n	8008762 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	781a      	ldrb	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	3301      	adds	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008766:	b29b      	uxth	r3, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1cf      	bne.n	800871a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	2140      	movs	r1, #64	; 0x40
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fb91 	bl	8008eac <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e006      	b.n	80087a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	e000      	b.n	80087a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087a0:	2302      	movs	r3, #2
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af02      	add	r7, sp, #8
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4613      	mov	r3, r2
 80087b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	f040 808c 	bne.w	80088e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_UART_Receive+0x2e>
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e084      	b.n	80088e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_UART_Receive+0x40>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e07d      	b.n	80088e6 <HAL_UART_Receive+0x13c>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2222      	movs	r2, #34	; 0x22
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008806:	f7fa fbc9 	bl	8002f9c <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	88fa      	ldrh	r2, [r7, #6]
 8008810:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008820:	d108      	bne.n	8008834 <HAL_UART_Receive+0x8a>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e003      	b.n	800883c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008844:	e043      	b.n	80088ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2200      	movs	r2, #0
 800884e:	2120      	movs	r1, #32
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fb2b 	bl	8008eac <UART_WaitOnFlagUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e042      	b.n	80088e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10c      	bne.n	8008880 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	b29a      	uxth	r2, r3
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	3302      	adds	r3, #2
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	e01f      	b.n	80088c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008888:	d007      	beq.n	800889a <HAL_UART_Receive+0xf0>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <HAL_UART_Receive+0xfe>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	e008      	b.n	80088ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	3301      	adds	r3, #1
 80088be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1b6      	bne.n	8008846 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	4613      	mov	r3, r2
 80088fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b20      	cmp	r3, #32
 8008906:	d11d      	bne.n	8008944 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <HAL_UART_Receive_IT+0x26>
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e016      	b.n	8008946 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_UART_Receive_IT+0x38>
 8008922:	2302      	movs	r3, #2
 8008924:	e00f      	b.n	8008946 <HAL_UART_Receive_IT+0x58>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	461a      	mov	r2, r3
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fb24 	bl	8008f88 <UART_Start_Receive_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	e000      	b.n	8008946 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008944:	2302      	movs	r3, #2
  }
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b0ba      	sub	sp, #232	; 0xe8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008976:	2300      	movs	r3, #0
 8008978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800897c:	2300      	movs	r3, #0
 800897e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800898e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10f      	bne.n	80089b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d009      	beq.n	80089b6 <HAL_UART_IRQHandler+0x66>
 80089a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc07 	bl	80091c2 <UART_Receive_IT>
      return;
 80089b4:	e256      	b.n	8008e64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80089b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80de 	beq.w	8008b7c <HAL_UART_IRQHandler+0x22c>
 80089c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80d1 	beq.w	8008b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <HAL_UART_IRQHandler+0xae>
 80089e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	f043 0201 	orr.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <HAL_UART_IRQHandler+0xd2>
 8008a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f043 0202 	orr.w	r2, r3, #2
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <HAL_UART_IRQHandler+0xf6>
 8008a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f043 0204 	orr.w	r2, r3, #4
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4a:	f003 0308 	and.w	r3, r3, #8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d011      	beq.n	8008a76 <HAL_UART_IRQHandler+0x126>
 8008a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d005      	beq.n	8008a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	f043 0208 	orr.w	r2, r3, #8
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 81ed 	beq.w	8008e5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a84:	f003 0320 	and.w	r3, r3, #32
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_UART_IRQHandler+0x14e>
 8008a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fb92 	bl	80091c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	bf0c      	ite	eq
 8008aac:	2301      	moveq	r3, #1
 8008aae:	2300      	movne	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <HAL_UART_IRQHandler+0x17a>
 8008ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d04f      	beq.n	8008b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa9a 	bl	8009004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d141      	bne.n	8008b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3314      	adds	r3, #20
 8008b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1d9      	bne.n	8008ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d013      	beq.n	8008b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	4a7d      	ldr	r2, [pc, #500]	; (8008d2c <HAL_UART_IRQHandler+0x3dc>)
 8008b38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fa fca8 	bl	8003494 <HAL_DMA_Abort_IT>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d016      	beq.n	8008b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b54:	4610      	mov	r0, r2
 8008b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b58:	e00e      	b.n	8008b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f990 	bl	8008e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b60:	e00a      	b.n	8008b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f98c 	bl	8008e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b68:	e006      	b.n	8008b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f988 	bl	8008e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b76:	e170      	b.n	8008e5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b78:	bf00      	nop
    return;
 8008b7a:	e16e      	b.n	8008e5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	f040 814a 	bne.w	8008e1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b8a:	f003 0310 	and.w	r3, r3, #16
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 8143 	beq.w	8008e1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 813c 	beq.w	8008e1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60bb      	str	r3, [r7, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60bb      	str	r3, [r7, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	60bb      	str	r3, [r7, #8]
 8008bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc2:	2b40      	cmp	r3, #64	; 0x40
 8008bc4:	f040 80b4 	bne.w	8008d30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8140 	beq.w	8008e5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008be6:	429a      	cmp	r2, r3
 8008be8:	f080 8139 	bcs.w	8008e5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfe:	f000 8088 	beq.w	8008d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	330c      	adds	r3, #12
 8008c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1d9      	bne.n	8008c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3314      	adds	r3, #20
 8008c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3314      	adds	r3, #20
 8008c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e1      	bne.n	8008c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3314      	adds	r3, #20
 8008c90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e3      	bne.n	8008c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	330c      	adds	r3, #12
 8008cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce2:	f023 0310 	bic.w	r3, r3, #16
 8008ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	330c      	adds	r3, #12
 8008cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e3      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fa fb51 	bl	80033b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8b6 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d28:	e099      	b.n	8008e5e <HAL_UART_IRQHandler+0x50e>
 8008d2a:	bf00      	nop
 8008d2c:	080090cb 	.word	0x080090cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 808b 	beq.w	8008e62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8086 	beq.w	8008e62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3314      	adds	r3, #20
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	f023 0301 	bic.w	r3, r3, #1
 8008da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3314      	adds	r3, #20
 8008dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008db2:	633a      	str	r2, [r7, #48]	; 0x30
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e3      	bne.n	8008d8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0310 	bic.w	r3, r3, #16
 8008dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008df8:	61fa      	str	r2, [r7, #28]
 8008dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69b9      	ldr	r1, [r7, #24]
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	617b      	str	r3, [r7, #20]
   return(result);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e3      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f83e 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e18:	e023      	b.n	8008e62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <HAL_UART_IRQHandler+0x4ea>
 8008e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f95d 	bl	80090f2 <UART_Transmit_IT>
    return;
 8008e38:	e014      	b.n	8008e64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <HAL_UART_IRQHandler+0x514>
 8008e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f99d 	bl	8009192 <UART_EndTransmit_IT>
    return;
 8008e58:	e004      	b.n	8008e64 <HAL_UART_IRQHandler+0x514>
    return;
 8008e5a:	bf00      	nop
 8008e5c:	e002      	b.n	8008e64 <HAL_UART_IRQHandler+0x514>
      return;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_UART_IRQHandler+0x514>
      return;
 8008e62:	bf00      	nop
  }
}
 8008e64:	37e8      	adds	r7, #232	; 0xe8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop

08008e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b090      	sub	sp, #64	; 0x40
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebc:	e050      	b.n	8008f60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec4:	d04c      	beq.n	8008f60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ecc:	f7fa f866 	bl	8002f9c <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d241      	bcs.n	8008f60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	330c      	adds	r3, #12
 8008efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008efc:	637a      	str	r2, [r7, #52]	; 0x34
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e5      	bne.n	8008edc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3314      	adds	r3, #20
 8008f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3314      	adds	r3, #20
 8008f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f30:	623a      	str	r2, [r7, #32]
 8008f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	69f9      	ldr	r1, [r7, #28]
 8008f36:	6a3a      	ldr	r2, [r7, #32]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e5      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e00f      	b.n	8008f80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d09f      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3740      	adds	r7, #64	; 0x40
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2222      	movs	r2, #34	; 0x22
 8008fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d007      	beq.n	8008fd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695a      	ldr	r2, [r3, #20]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 0201 	orr.w	r2, r2, #1
 8008fe4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0220 	orr.w	r2, r2, #32
 8008ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b095      	sub	sp, #84	; 0x54
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	330c      	adds	r3, #12
 800902a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800902c:	643a      	str	r2, [r7, #64]	; 0x40
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e5      	bne.n	800900c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3314      	adds	r3, #20
 8009046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f023 0301 	bic.w	r3, r3, #1
 8009056:	64bb      	str	r3, [r7, #72]	; 0x48
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3314      	adds	r3, #20
 800905e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e5      	bne.n	8009040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	2b01      	cmp	r3, #1
 800907a:	d119      	bne.n	80090b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	330c      	adds	r3, #12
 8009082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	60bb      	str	r3, [r7, #8]
   return(result);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f023 0310 	bic.w	r3, r3, #16
 8009092:	647b      	str	r3, [r7, #68]	; 0x44
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800909c:	61ba      	str	r2, [r7, #24]
 800909e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6979      	ldr	r1, [r7, #20]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	613b      	str	r3, [r7, #16]
   return(result);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e5      	bne.n	800907c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090be:	bf00      	nop
 80090c0:	3754      	adds	r7, #84	; 0x54
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff fecb 	bl	8008e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b21      	cmp	r3, #33	; 0x21
 8009104:	d13e      	bne.n	8009184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910e:	d114      	bne.n	800913a <UART_Transmit_IT+0x48>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d110      	bne.n	800913a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800912c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	1c9a      	adds	r2, r3, #2
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	621a      	str	r2, [r3, #32]
 8009138:	e008      	b.n	800914c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	1c59      	adds	r1, r3, #1
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6211      	str	r1, [r2, #32]
 8009144:	781a      	ldrb	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4619      	mov	r1, r3
 800915a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10f      	bne.n	8009180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800916e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800917e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	e000      	b.n	8009186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009184:	2302      	movs	r3, #2
  }
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fe5a 	bl	8008e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b08c      	sub	sp, #48	; 0x30
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b22      	cmp	r3, #34	; 0x22
 80091d4:	f040 80ab 	bne.w	800932e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e0:	d117      	bne.n	8009212 <UART_Receive_IT+0x50>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d113      	bne.n	8009212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009200:	b29a      	uxth	r2, r3
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	1c9a      	adds	r2, r3, #2
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	629a      	str	r2, [r3, #40]	; 0x28
 8009210:	e026      	b.n	8009260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009218:	2300      	movs	r3, #0
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009224:	d007      	beq.n	8009236 <UART_Receive_IT+0x74>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <UART_Receive_IT+0x82>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	b2da      	uxtb	r2, r3
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e008      	b.n	8009256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009250:	b2da      	uxtb	r2, r3
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009264:	b29b      	uxth	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	4619      	mov	r1, r3
 800926e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009270:	2b00      	cmp	r3, #0
 8009272:	d15a      	bne.n	800932a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0220 	bic.w	r2, r2, #32
 8009282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695a      	ldr	r2, [r3, #20]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0201 	bic.w	r2, r2, #1
 80092a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d135      	bne.n	8009320 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	613b      	str	r3, [r7, #16]
   return(result);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f023 0310 	bic.w	r3, r3, #16
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	330c      	adds	r3, #12
 80092d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092da:	623a      	str	r2, [r7, #32]
 80092dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	69f9      	ldr	r1, [r7, #28]
 80092e0:	6a3a      	ldr	r2, [r7, #32]
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e5      	bne.n	80092ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d10a      	bne.n	8009312 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff fdbb 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
 800931e:	e002      	b.n	8009326 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7f7 fe0d 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	e002      	b.n	8009330 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e000      	b.n	8009330 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800932e:	2302      	movs	r3, #2
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3730      	adds	r7, #48	; 0x30
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800933c:	b0c0      	sub	sp, #256	; 0x100
 800933e:	af00      	add	r7, sp, #0
 8009340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	68d9      	ldr	r1, [r3, #12]
 8009356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	ea40 0301 	orr.w	r3, r0, r1
 8009360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	431a      	orrs	r2, r3
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	431a      	orrs	r2, r3
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009390:	f021 010c 	bic.w	r1, r1, #12
 8009394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800939e:	430b      	orrs	r3, r1
 80093a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	6999      	ldr	r1, [r3, #24]
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	ea40 0301 	orr.w	r3, r0, r1
 80093be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4b8f      	ldr	r3, [pc, #572]	; (8009604 <UART_SetConfig+0x2cc>)
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d005      	beq.n	80093d8 <UART_SetConfig+0xa0>
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b8d      	ldr	r3, [pc, #564]	; (8009608 <UART_SetConfig+0x2d0>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d104      	bne.n	80093e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093d8:	f7fd fb78 	bl	8006acc <HAL_RCC_GetPCLK2Freq>
 80093dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093e0:	e003      	b.n	80093ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093e2:	f7fd fb5f 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 80093e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f4:	f040 810c 	bne.w	8009610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800940a:	4622      	mov	r2, r4
 800940c:	462b      	mov	r3, r5
 800940e:	1891      	adds	r1, r2, r2
 8009410:	65b9      	str	r1, [r7, #88]	; 0x58
 8009412:	415b      	adcs	r3, r3
 8009414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800941a:	4621      	mov	r1, r4
 800941c:	eb12 0801 	adds.w	r8, r2, r1
 8009420:	4629      	mov	r1, r5
 8009422:	eb43 0901 	adc.w	r9, r3, r1
 8009426:	f04f 0200 	mov.w	r2, #0
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800943a:	4690      	mov	r8, r2
 800943c:	4699      	mov	r9, r3
 800943e:	4623      	mov	r3, r4
 8009440:	eb18 0303 	adds.w	r3, r8, r3
 8009444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009448:	462b      	mov	r3, r5
 800944a:	eb49 0303 	adc.w	r3, r9, r3
 800944e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800945e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009466:	460b      	mov	r3, r1
 8009468:	18db      	adds	r3, r3, r3
 800946a:	653b      	str	r3, [r7, #80]	; 0x50
 800946c:	4613      	mov	r3, r2
 800946e:	eb42 0303 	adc.w	r3, r2, r3
 8009472:	657b      	str	r3, [r7, #84]	; 0x54
 8009474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800947c:	f7f6 ff08 	bl	8000290 <__aeabi_uldivmod>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4b61      	ldr	r3, [pc, #388]	; (800960c <UART_SetConfig+0x2d4>)
 8009486:	fba3 2302 	umull	r2, r3, r3, r2
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	011c      	lsls	r4, r3, #4
 800948e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009492:	2200      	movs	r2, #0
 8009494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800949c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	1891      	adds	r1, r2, r2
 80094a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80094a8:	415b      	adcs	r3, r3
 80094aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094b0:	4641      	mov	r1, r8
 80094b2:	eb12 0a01 	adds.w	sl, r2, r1
 80094b6:	4649      	mov	r1, r9
 80094b8:	eb43 0b01 	adc.w	fp, r3, r1
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d0:	4692      	mov	sl, r2
 80094d2:	469b      	mov	fp, r3
 80094d4:	4643      	mov	r3, r8
 80094d6:	eb1a 0303 	adds.w	r3, sl, r3
 80094da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094de:	464b      	mov	r3, r9
 80094e0:	eb4b 0303 	adc.w	r3, fp, r3
 80094e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094fc:	460b      	mov	r3, r1
 80094fe:	18db      	adds	r3, r3, r3
 8009500:	643b      	str	r3, [r7, #64]	; 0x40
 8009502:	4613      	mov	r3, r2
 8009504:	eb42 0303 	adc.w	r3, r2, r3
 8009508:	647b      	str	r3, [r7, #68]	; 0x44
 800950a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800950e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009512:	f7f6 febd 	bl	8000290 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4611      	mov	r1, r2
 800951c:	4b3b      	ldr	r3, [pc, #236]	; (800960c <UART_SetConfig+0x2d4>)
 800951e:	fba3 2301 	umull	r2, r3, r3, r1
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	2264      	movs	r2, #100	; 0x64
 8009526:	fb02 f303 	mul.w	r3, r2, r3
 800952a:	1acb      	subs	r3, r1, r3
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009532:	4b36      	ldr	r3, [pc, #216]	; (800960c <UART_SetConfig+0x2d4>)
 8009534:	fba3 2302 	umull	r2, r3, r3, r2
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009540:	441c      	add	r4, r3
 8009542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009546:	2200      	movs	r2, #0
 8009548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800954c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009554:	4642      	mov	r2, r8
 8009556:	464b      	mov	r3, r9
 8009558:	1891      	adds	r1, r2, r2
 800955a:	63b9      	str	r1, [r7, #56]	; 0x38
 800955c:	415b      	adcs	r3, r3
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009564:	4641      	mov	r1, r8
 8009566:	1851      	adds	r1, r2, r1
 8009568:	6339      	str	r1, [r7, #48]	; 0x30
 800956a:	4649      	mov	r1, r9
 800956c:	414b      	adcs	r3, r1
 800956e:	637b      	str	r3, [r7, #52]	; 0x34
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800957c:	4659      	mov	r1, fp
 800957e:	00cb      	lsls	r3, r1, #3
 8009580:	4651      	mov	r1, sl
 8009582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009586:	4651      	mov	r1, sl
 8009588:	00ca      	lsls	r2, r1, #3
 800958a:	4610      	mov	r0, r2
 800958c:	4619      	mov	r1, r3
 800958e:	4603      	mov	r3, r0
 8009590:	4642      	mov	r2, r8
 8009592:	189b      	adds	r3, r3, r2
 8009594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009598:	464b      	mov	r3, r9
 800959a:	460a      	mov	r2, r1
 800959c:	eb42 0303 	adc.w	r3, r2, r3
 80095a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095b8:	460b      	mov	r3, r1
 80095ba:	18db      	adds	r3, r3, r3
 80095bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80095be:	4613      	mov	r3, r2
 80095c0:	eb42 0303 	adc.w	r3, r2, r3
 80095c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095ce:	f7f6 fe5f 	bl	8000290 <__aeabi_uldivmod>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4b0d      	ldr	r3, [pc, #52]	; (800960c <UART_SetConfig+0x2d4>)
 80095d8:	fba3 1302 	umull	r1, r3, r3, r2
 80095dc:	095b      	lsrs	r3, r3, #5
 80095de:	2164      	movs	r1, #100	; 0x64
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	3332      	adds	r3, #50	; 0x32
 80095ea:	4a08      	ldr	r2, [pc, #32]	; (800960c <UART_SetConfig+0x2d4>)
 80095ec:	fba2 2303 	umull	r2, r3, r2, r3
 80095f0:	095b      	lsrs	r3, r3, #5
 80095f2:	f003 0207 	and.w	r2, r3, #7
 80095f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4422      	add	r2, r4
 80095fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009600:	e105      	b.n	800980e <UART_SetConfig+0x4d6>
 8009602:	bf00      	nop
 8009604:	40011000 	.word	0x40011000
 8009608:	40011400 	.word	0x40011400
 800960c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009614:	2200      	movs	r2, #0
 8009616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800961a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800961e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	1891      	adds	r1, r2, r2
 8009628:	6239      	str	r1, [r7, #32]
 800962a:	415b      	adcs	r3, r3
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
 800962e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009632:	4641      	mov	r1, r8
 8009634:	1854      	adds	r4, r2, r1
 8009636:	4649      	mov	r1, r9
 8009638:	eb43 0501 	adc.w	r5, r3, r1
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	00eb      	lsls	r3, r5, #3
 8009646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800964a:	00e2      	lsls	r2, r4, #3
 800964c:	4614      	mov	r4, r2
 800964e:	461d      	mov	r5, r3
 8009650:	4643      	mov	r3, r8
 8009652:	18e3      	adds	r3, r4, r3
 8009654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009658:	464b      	mov	r3, r9
 800965a:	eb45 0303 	adc.w	r3, r5, r3
 800965e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800966e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800967e:	4629      	mov	r1, r5
 8009680:	008b      	lsls	r3, r1, #2
 8009682:	4621      	mov	r1, r4
 8009684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009688:	4621      	mov	r1, r4
 800968a:	008a      	lsls	r2, r1, #2
 800968c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009690:	f7f6 fdfe 	bl	8000290 <__aeabi_uldivmod>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4b60      	ldr	r3, [pc, #384]	; (800981c <UART_SetConfig+0x4e4>)
 800969a:	fba3 2302 	umull	r2, r3, r3, r2
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	011c      	lsls	r4, r3, #4
 80096a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	1891      	adds	r1, r2, r2
 80096ba:	61b9      	str	r1, [r7, #24]
 80096bc:	415b      	adcs	r3, r3
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096c4:	4641      	mov	r1, r8
 80096c6:	1851      	adds	r1, r2, r1
 80096c8:	6139      	str	r1, [r7, #16]
 80096ca:	4649      	mov	r1, r9
 80096cc:	414b      	adcs	r3, r1
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096dc:	4659      	mov	r1, fp
 80096de:	00cb      	lsls	r3, r1, #3
 80096e0:	4651      	mov	r1, sl
 80096e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096e6:	4651      	mov	r1, sl
 80096e8:	00ca      	lsls	r2, r1, #3
 80096ea:	4610      	mov	r0, r2
 80096ec:	4619      	mov	r1, r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	4642      	mov	r2, r8
 80096f2:	189b      	adds	r3, r3, r2
 80096f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096f8:	464b      	mov	r3, r9
 80096fa:	460a      	mov	r2, r1
 80096fc:	eb42 0303 	adc.w	r3, r2, r3
 8009700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	67bb      	str	r3, [r7, #120]	; 0x78
 800970e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800971c:	4649      	mov	r1, r9
 800971e:	008b      	lsls	r3, r1, #2
 8009720:	4641      	mov	r1, r8
 8009722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009726:	4641      	mov	r1, r8
 8009728:	008a      	lsls	r2, r1, #2
 800972a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800972e:	f7f6 fdaf 	bl	8000290 <__aeabi_uldivmod>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4b39      	ldr	r3, [pc, #228]	; (800981c <UART_SetConfig+0x4e4>)
 8009738:	fba3 1302 	umull	r1, r3, r3, r2
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	2164      	movs	r1, #100	; 0x64
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	011b      	lsls	r3, r3, #4
 8009748:	3332      	adds	r3, #50	; 0x32
 800974a:	4a34      	ldr	r2, [pc, #208]	; (800981c <UART_SetConfig+0x4e4>)
 800974c:	fba2 2303 	umull	r2, r3, r2, r3
 8009750:	095b      	lsrs	r3, r3, #5
 8009752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009756:	441c      	add	r4, r3
 8009758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800975c:	2200      	movs	r2, #0
 800975e:	673b      	str	r3, [r7, #112]	; 0x70
 8009760:	677a      	str	r2, [r7, #116]	; 0x74
 8009762:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009766:	4642      	mov	r2, r8
 8009768:	464b      	mov	r3, r9
 800976a:	1891      	adds	r1, r2, r2
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	415b      	adcs	r3, r3
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009776:	4641      	mov	r1, r8
 8009778:	1851      	adds	r1, r2, r1
 800977a:	6039      	str	r1, [r7, #0]
 800977c:	4649      	mov	r1, r9
 800977e:	414b      	adcs	r3, r1
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	f04f 0300 	mov.w	r3, #0
 800978a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800978e:	4659      	mov	r1, fp
 8009790:	00cb      	lsls	r3, r1, #3
 8009792:	4651      	mov	r1, sl
 8009794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009798:	4651      	mov	r1, sl
 800979a:	00ca      	lsls	r2, r1, #3
 800979c:	4610      	mov	r0, r2
 800979e:	4619      	mov	r1, r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	4642      	mov	r2, r8
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80097a8:	464b      	mov	r3, r9
 80097aa:	460a      	mov	r2, r1
 80097ac:	eb42 0303 	adc.w	r3, r2, r3
 80097b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	663b      	str	r3, [r7, #96]	; 0x60
 80097bc:	667a      	str	r2, [r7, #100]	; 0x64
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097ca:	4649      	mov	r1, r9
 80097cc:	008b      	lsls	r3, r1, #2
 80097ce:	4641      	mov	r1, r8
 80097d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097d4:	4641      	mov	r1, r8
 80097d6:	008a      	lsls	r2, r1, #2
 80097d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097dc:	f7f6 fd58 	bl	8000290 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <UART_SetConfig+0x4e4>)
 80097e6:	fba3 1302 	umull	r1, r3, r3, r2
 80097ea:	095b      	lsrs	r3, r3, #5
 80097ec:	2164      	movs	r1, #100	; 0x64
 80097ee:	fb01 f303 	mul.w	r3, r1, r3
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	3332      	adds	r3, #50	; 0x32
 80097f8:	4a08      	ldr	r2, [pc, #32]	; (800981c <UART_SetConfig+0x4e4>)
 80097fa:	fba2 2303 	umull	r2, r3, r2, r3
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	f003 020f 	and.w	r2, r3, #15
 8009804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4422      	add	r2, r4
 800980c:	609a      	str	r2, [r3, #8]
}
 800980e:	bf00      	nop
 8009810:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009814:	46bd      	mov	sp, r7
 8009816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981a:	bf00      	nop
 800981c:	51eb851f 	.word	0x51eb851f

08009820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009820:	b084      	sub	sp, #16
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	f107 001c 	add.w	r0, r7, #28
 800982e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	2b01      	cmp	r3, #1
 8009836:	d122      	bne.n	800987e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800984c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d105      	bne.n	8009872 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f9c0 	bl	8009bf8 <USB_CoreReset>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
 800987c:	e01a      	b.n	80098b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f9b4 	bl	8009bf8 <USB_CoreReset>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38
 80098a6:	e005      	b.n	80098b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d10b      	bne.n	80098d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f043 0206 	orr.w	r2, r3, #6
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098de:	b004      	add	sp, #16
 80098e0:	4770      	bx	lr

080098e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f043 0201 	orr.w	r2, r3, #1
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f023 0201 	bic.w	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009942:	78fb      	ldrb	r3, [r7, #3]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d115      	bne.n	8009974 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009954:	2001      	movs	r0, #1
 8009956:	f7f9 fb2d 	bl	8002fb4 <HAL_Delay>
      ms++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f93a 	bl	8009bda <USB_GetMode>
 8009966:	4603      	mov	r3, r0
 8009968:	2b01      	cmp	r3, #1
 800996a:	d01e      	beq.n	80099aa <USB_SetCurrentMode+0x84>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b31      	cmp	r3, #49	; 0x31
 8009970:	d9f0      	bls.n	8009954 <USB_SetCurrentMode+0x2e>
 8009972:	e01a      	b.n	80099aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009974:	78fb      	ldrb	r3, [r7, #3]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d115      	bne.n	80099a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009986:	2001      	movs	r0, #1
 8009988:	f7f9 fb14 	bl	8002fb4 <HAL_Delay>
      ms++;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f921 	bl	8009bda <USB_GetMode>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <USB_SetCurrentMode+0x84>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b31      	cmp	r3, #49	; 0x31
 80099a2:	d9f0      	bls.n	8009986 <USB_SetCurrentMode+0x60>
 80099a4:	e001      	b.n	80099aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e005      	b.n	80099b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b32      	cmp	r3, #50	; 0x32
 80099ae:	d101      	bne.n	80099b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e000      	b.n	80099b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a13      	ldr	r2, [pc, #76]	; (8009a24 <USB_FlushTxFifo+0x64>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d901      	bls.n	80099e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e01b      	b.n	8009a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	daf2      	bge.n	80099ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	019b      	lsls	r3, r3, #6
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4a08      	ldr	r2, [pc, #32]	; (8009a24 <USB_FlushTxFifo+0x64>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d901      	bls.n	8009a0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e006      	b.n	8009a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d0f0      	beq.n	80099f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	00030d40 	.word	0x00030d40

08009a28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <USB_FlushRxFifo+0x5c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d901      	bls.n	8009a46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e018      	b.n	8009a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	daf2      	bge.n	8009a34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2210      	movs	r2, #16
 8009a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4a08      	ldr	r2, [pc, #32]	; (8009a84 <USB_FlushRxFifo+0x5c>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d901      	bls.n	8009a6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e006      	b.n	8009a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f003 0310 	and.w	r3, r3, #16
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d0f0      	beq.n	8009a58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	00030d40 	.word	0x00030d40

08009a88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b089      	sub	sp, #36	; 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	4611      	mov	r1, r2
 8009a94:	461a      	mov	r2, r3
 8009a96:	460b      	mov	r3, r1
 8009a98:	71fb      	strb	r3, [r7, #7]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d123      	bne.n	8009af6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009aae:	88bb      	ldrh	r3, [r7, #4]
 8009ab0:	3303      	adds	r3, #3
 8009ab2:	089b      	lsrs	r3, r3, #2
 8009ab4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	e018      	b.n	8009aee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	031a      	lsls	r2, r3, #12
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac8:	461a      	mov	r2, r3
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	3301      	adds	r3, #1
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d3e2      	bcc.n	8009abc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3724      	adds	r7, #36	; 0x24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b08b      	sub	sp, #44	; 0x2c
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	089b      	lsrs	r3, r3, #2
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	f003 0303 	and.w	r3, r3, #3
 8009b28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	623b      	str	r3, [r7, #32]
 8009b2e:	e014      	b.n	8009b5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	3301      	adds	r3, #1
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	3301      	adds	r3, #1
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	3301      	adds	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	3301      	adds	r3, #1
 8009b58:	623b      	str	r3, [r7, #32]
 8009b5a:	6a3a      	ldr	r2, [r7, #32]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d3e6      	bcc.n	8009b30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b62:	8bfb      	ldrh	r3, [r7, #30]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01e      	beq.n	8009ba6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b72:	461a      	mov	r2, r3
 8009b74:	f107 0310 	add.w	r3, r7, #16
 8009b78:	6812      	ldr	r2, [r2, #0]
 8009b7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	701a      	strb	r2, [r3, #0]
      i++;
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	3301      	adds	r3, #1
 8009b92:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	3301      	adds	r3, #1
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b9a:	8bfb      	ldrh	r3, [r7, #30]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ba0:	8bfb      	ldrh	r3, [r7, #30]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1ea      	bne.n	8009b7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	372c      	adds	r7, #44	; 0x2c
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b083      	sub	sp, #12
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	f003 0301 	and.w	r3, r3, #1
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4a13      	ldr	r2, [pc, #76]	; (8009c5c <USB_CoreReset+0x64>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d901      	bls.n	8009c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e01b      	b.n	8009c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	daf2      	bge.n	8009c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f043 0201 	orr.w	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <USB_CoreReset+0x64>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d901      	bls.n	8009c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e006      	b.n	8009c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d0f0      	beq.n	8009c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	00030d40 	.word	0x00030d40

08009c60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c60:	b084      	sub	sp, #16
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c80:	461a      	mov	r2, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d10a      	bne.n	8009cd2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cca:	f043 0304 	orr.w	r3, r3, #4
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	e014      	b.n	8009cfc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ce0:	f023 0304 	bic.w	r3, r3, #4
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e009      	b.n	8009cfc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cf6:	f023 0304 	bic.w	r3, r3, #4
 8009cfa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cfc:	2110      	movs	r1, #16
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fe5e 	bl	80099c0 <USB_FlushTxFifo>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fe8a 	bl	8009a28 <USB_FlushRxFifo>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	e015      	b.n	8009d50 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d30:	461a      	mov	r2, r3
 8009d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d44:	461a      	mov	r2, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d3e5      	bcc.n	8009d24 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d64:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <USB_HostInit+0x16c>)
 8009d7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a13      	ldr	r2, [pc, #76]	; (8009dd0 <USB_HostInit+0x170>)
 8009d84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d88:	e009      	b.n	8009d9e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2280      	movs	r2, #128	; 0x80
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a10      	ldr	r2, [pc, #64]	; (8009dd4 <USB_HostInit+0x174>)
 8009d94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a0f      	ldr	r2, [pc, #60]	; (8009dd8 <USB_HostInit+0x178>)
 8009d9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d105      	bne.n	8009db0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	f043 0210 	orr.w	r2, r3, #16
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699a      	ldr	r2, [r3, #24]
 8009db4:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <USB_HostInit+0x17c>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dc8:	b004      	add	sp, #16
 8009dca:	4770      	bx	lr
 8009dcc:	01000200 	.word	0x01000200
 8009dd0:	00e00300 	.word	0x00e00300
 8009dd4:	00600080 	.word	0x00600080
 8009dd8:	004000e0 	.word	0x004000e0
 8009ddc:	a3200008 	.word	0xa3200008

08009de0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d107      	bne.n	8009e32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e2e:	6053      	str	r3, [r2, #4]
 8009e30:	e009      	b.n	8009e46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009e32:	78fb      	ldrb	r3, [r7, #3]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d106      	bne.n	8009e46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009e84:	2064      	movs	r0, #100	; 0x64
 8009e86:	f7f9 f895 	bl	8002fb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009e98:	200a      	movs	r0, #10
 8009e9a:	f7f9 f88b 	bl	8002fb4 <HAL_Delay>

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ecc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <USB_DriveVbus+0x44>
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d106      	bne.n	8009eec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009eea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef6:	d109      	bne.n	8009f0c <USB_DriveVbus+0x64>
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	0c5b      	lsrs	r3, r3, #17
 8009f38:	f003 0303 	and.w	r3, r3, #3
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	b29b      	uxth	r3, r3
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
	...

08009f6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	70fb      	strb	r3, [r7, #3]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70bb      	strb	r3, [r7, #2]
 8009f82:	4613      	mov	r3, r2
 8009f84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009fa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d87e      	bhi.n	800a0a8 <USB_HC_Init+0x13c>
 8009faa:	a201      	add	r2, pc, #4	; (adr r2, 8009fb0 <USB_HC_Init+0x44>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fc1 	.word	0x08009fc1
 8009fb4:	0800a06b 	.word	0x0800a06b
 8009fb8:	08009fc1 	.word	0x08009fc1
 8009fbc:	0800a02d 	.word	0x0800a02d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f240 439d 	movw	r3, #1181	; 0x49d
 8009fd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009fd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da10      	bge.n	8009ffe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ffc:	e057      	b.n	800a0ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a006:	2b00      	cmp	r3, #0
 800a008:	d051      	beq.n	800a0ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	4413      	add	r3, r2
 800a012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	78fa      	ldrb	r2, [r7, #3]
 800a01a:	0151      	lsls	r1, r2, #5
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	440a      	add	r2, r1
 800a020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a028:	60d3      	str	r3, [r2, #12]
      break;
 800a02a:	e040      	b.n	800a0ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	4413      	add	r3, r2
 800a034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a038:	461a      	mov	r2, r3
 800a03a:	f240 639d 	movw	r3, #1693	; 0x69d
 800a03e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a040:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a044:	2b00      	cmp	r3, #0
 800a046:	da34      	bge.n	800a0b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	78fa      	ldrb	r2, [r7, #3]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a066:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a068:	e023      	b.n	800a0b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4413      	add	r3, r2
 800a072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a076:	461a      	mov	r2, r3
 800a078:	f240 2325 	movw	r3, #549	; 0x225
 800a07c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a07e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a082:	2b00      	cmp	r3, #0
 800a084:	da17      	bge.n	800a0b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a0a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a0a6:	e006      	b.n	800a0b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	77fb      	strb	r3, [r7, #31]
      break;
 800a0ac:	e004      	b.n	800a0b8 <USB_HC_Init+0x14c>
      break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <USB_HC_Init+0x14c>
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <USB_HC_Init+0x14c>
      break;
 800a0b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d2:	f043 0302 	orr.w	r3, r3, #2
 800a0d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0de:	699a      	ldr	r2, [r3, #24]
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	f003 030f 	and.w	r3, r3, #15
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ec:	6939      	ldr	r1, [r7, #16]
 800a0ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a102:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a106:	2b00      	cmp	r3, #0
 800a108:	da03      	bge.n	800a112 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10e:	61bb      	str	r3, [r7, #24]
 800a110:	e001      	b.n	800a116 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff feff 	bl	8009f1a <USB_GetHostSpeed>
 800a11c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a11e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a122:	2b02      	cmp	r3, #2
 800a124:	d106      	bne.n	800a134 <USB_HC_Init+0x1c8>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d003      	beq.n	800a134 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a12c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	e001      	b.n	800a138 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a138:	787b      	ldrb	r3, [r7, #1]
 800a13a:	059b      	lsls	r3, r3, #22
 800a13c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a140:	78bb      	ldrb	r3, [r7, #2]
 800a142:	02db      	lsls	r3, r3, #11
 800a144:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a148:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a14a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a14e:	049b      	lsls	r3, r3, #18
 800a150:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a154:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a156:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a158:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a15c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	0159      	lsls	r1, r3, #5
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	440b      	add	r3, r1
 800a16a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a16e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a174:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a176:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d003      	beq.n	800a186 <USB_HC_Init+0x21a>
 800a17e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10f      	bne.n	800a1a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	0151      	lsls	r1, r2, #5
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	440a      	add	r2, r1
 800a19c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a1a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	; 0x30
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a1c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02d      	beq.n	800a236 <USB_HC_StartXfer+0x86>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	791b      	ldrb	r3, [r3, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d129      	bne.n	800a236 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d117      	bne.n	800a218 <USB_HC_StartXfer+0x68>
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	79db      	ldrb	r3, [r3, #7]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <USB_HC_StartXfer+0x48>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	79db      	ldrb	r3, [r3, #7]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d10f      	bne.n	800a218 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a216:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10b      	bne.n	800a236 <USB_HC_StartXfer+0x86>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	795b      	ldrb	r3, [r3, #5]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d107      	bne.n	800a236 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 fa0f 	bl	800a650 <USB_DoPing>
      return HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	e0f8      	b.n	800a428 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d018      	beq.n	800a270 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	8912      	ldrh	r2, [r2, #8]
 800a246:	4413      	add	r3, r2
 800a248:	3b01      	subs	r3, #1
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	8912      	ldrh	r2, [r2, #8]
 800a24e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a252:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a254:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a256:	8b7b      	ldrh	r3, [r7, #26]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d90b      	bls.n	800a274 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a25c:	8b7b      	ldrh	r3, [r7, #26]
 800a25e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	8912      	ldrh	r2, [r2, #8]
 800a266:	fb03 f202 	mul.w	r2, r3, r2
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	611a      	str	r2, [r3, #16]
 800a26e:	e001      	b.n	800a274 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a270:	2301      	movs	r3, #1
 800a272:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	78db      	ldrb	r3, [r3, #3]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a27c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	8912      	ldrh	r2, [r2, #8]
 800a282:	fb03 f202 	mul.w	r2, r3, r2
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	611a      	str	r2, [r3, #16]
 800a28a:	e003      	b.n	800a294 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	695a      	ldr	r2, [r3, #20]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a29e:	04d9      	lsls	r1, r3, #19
 800a2a0:	4b63      	ldr	r3, [pc, #396]	; (800a430 <USB_HC_StartXfer+0x280>)
 800a2a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	7a9b      	ldrb	r3, [r3, #10]
 800a2aa:	075b      	lsls	r3, r3, #29
 800a2ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2b0:	69f9      	ldr	r1, [r7, #28]
 800a2b2:	0148      	lsls	r0, r1, #5
 800a2b4:	6a39      	ldr	r1, [r7, #32]
 800a2b6:	4401      	add	r1, r0
 800a2b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	68d9      	ldr	r1, [r3, #12]
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d6:	460a      	mov	r2, r1
 800a2d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	bf0c      	ite	eq
 800a2ea:	2301      	moveq	r3, #1
 800a2ec:	2300      	movne	r3, #0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	0151      	lsls	r1, r2, #5
 800a304:	6a3a      	ldr	r2, [r7, #32]
 800a306:	440a      	add	r2, r1
 800a308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a30c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a310:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	7e7b      	ldrb	r3, [r7, #25]
 800a322:	075b      	lsls	r3, r3, #29
 800a324:	69f9      	ldr	r1, [r7, #28]
 800a326:	0148      	lsls	r0, r1, #5
 800a328:	6a39      	ldr	r1, [r7, #32]
 800a32a:	4401      	add	r1, r0
 800a32c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a330:	4313      	orrs	r3, r2
 800a332:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a34a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	78db      	ldrb	r3, [r3, #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d004      	beq.n	800a35e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	e003      	b.n	800a366 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a364:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a36c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	4413      	add	r3, r2
 800a376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a37a:	461a      	mov	r2, r3
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	e04e      	b.n	800a428 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	78db      	ldrb	r3, [r3, #3]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d149      	bne.n	800a426 <USB_HC_StartXfer+0x276>
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d045      	beq.n	800a426 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	79db      	ldrb	r3, [r3, #7]
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d830      	bhi.n	800a404 <USB_HC_StartXfer+0x254>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <USB_HC_StartXfer+0x1f8>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3dd 	.word	0x0800a3dd
 800a3b0:	0800a3b9 	.word	0x0800a3b9
 800a3b4:	0800a3dd 	.word	0x0800a3dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	3303      	adds	r3, #3
 800a3be:	089b      	lsrs	r3, r3, #2
 800a3c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3c2:	8afa      	ldrh	r2, [r7, #22]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d91c      	bls.n	800a408 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	f043 0220 	orr.w	r2, r3, #32
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3da:	e015      	b.n	800a408 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	3303      	adds	r3, #3
 800a3e2:	089b      	lsrs	r3, r3, #2
 800a3e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3e6:	8afa      	ldrh	r2, [r7, #22]
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d90a      	bls.n	800a40c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	619a      	str	r2, [r3, #24]
        }
        break;
 800a402:	e003      	b.n	800a40c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a404:	bf00      	nop
 800a406:	e002      	b.n	800a40e <USB_HC_StartXfer+0x25e>
        break;
 800a408:	bf00      	nop
 800a40a:	e000      	b.n	800a40e <USB_HC_StartXfer+0x25e>
        break;
 800a40c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	68d9      	ldr	r1, [r3, #12]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	785a      	ldrb	r2, [r3, #1]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2000      	movs	r0, #0
 800a41e:	9000      	str	r0, [sp, #0]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fb31 	bl	8009a88 <USB_WritePacket>
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3728      	adds	r7, #40	; 0x28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	1ff80000 	.word	0x1ff80000

0800a434 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	b29b      	uxth	r3, r3
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a456:	b480      	push	{r7}
 800a458:	b089      	sub	sp, #36	; 0x24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	0c9b      	lsrs	r3, r3, #18
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	0fdb      	lsrs	r3, r3, #31
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d104      	bne.n	800a4b0 <USB_HC_Halt+0x5a>
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d101      	bne.n	800a4b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e0c8      	b.n	800a642 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <USB_HC_Halt+0x66>
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d163      	bne.n	800a584 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 80ab 	bne.w	800a640 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d133      	bne.n	800a55e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	69fa      	ldr	r2, [r7, #28]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a514:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	0151      	lsls	r1, r2, #5
 800a528:	69fa      	ldr	r2, [r7, #28]
 800a52a:	440a      	add	r2, r1
 800a52c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a534:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a542:	d81d      	bhi.n	800a580 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a55a:	d0ec      	beq.n	800a536 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a55c:	e070      	b.n	800a640 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	4413      	add	r3, r2
 800a566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	440a      	add	r2, r1
 800a574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a57e:	e05f      	b.n	800a640 <USB_HC_Halt+0x1ea>
            break;
 800a580:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a582:	e05d      	b.n	800a640 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a59e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d133      	bne.n	800a61c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	0151      	lsls	r1, r2, #5
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	440a      	add	r2, r1
 800a5ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a600:	d81d      	bhi.n	800a63e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a618:	d0ec      	beq.n	800a5f4 <USB_HC_Halt+0x19e>
 800a61a:	e011      	b.n	800a640 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	4413      	add	r3, r2
 800a624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	0151      	lsls	r1, r2, #5
 800a62e:	69fa      	ldr	r2, [r7, #28]
 800a630:	440a      	add	r2, r1
 800a632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	e000      	b.n	800a640 <USB_HC_Halt+0x1ea>
          break;
 800a63e:	bf00      	nop
    }
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3724      	adds	r7, #36	; 0x24
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
	...

0800a650 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a664:	2301      	movs	r3, #1
 800a666:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	04da      	lsls	r2, r3, #19
 800a66c:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <USB_DoPing+0x74>)
 800a66e:	4013      	ands	r3, r2
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	440a      	add	r2, r1
 800a678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a67c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a680:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a698:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	371c      	adds	r7, #28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	1ff80000 	.word	0x1ff80000

0800a6c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff f911 	bl	8009904 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6e2:	2110      	movs	r1, #16
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff f96b 	bl	80099c0 <USB_FlushTxFifo>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff f997 	bl	8009a28 <USB_FlushRxFifo>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a704:	2300      	movs	r3, #0
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	e01f      	b.n	800a74a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a720:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a728:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a730:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a73e:	461a      	mov	r2, r3
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	3301      	adds	r3, #1
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b0f      	cmp	r3, #15
 800a74e:	d9dc      	bls.n	800a70a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a750:	2300      	movs	r3, #0
 800a752:	61bb      	str	r3, [r7, #24]
 800a754:	e034      	b.n	800a7c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a76c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a774:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a77c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4413      	add	r3, r2
 800a786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78a:	461a      	mov	r2, r3
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a79c:	d80c      	bhi.n	800a7b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7b4:	d0ec      	beq.n	800a790 <USB_StopHost+0xc8>
 800a7b6:	e000      	b.n	800a7ba <USB_StopHost+0xf2>
        break;
 800a7b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b0f      	cmp	r3, #15
 800a7c4:	d9c7      	bls.n	800a756 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff f880 	bl	80098e2 <USB_EnableGlobalInt>

  return ret;
 800a7e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a7f0:	4904      	ldr	r1, [pc, #16]	; (800a804 <MX_FATFS_Init+0x18>)
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <MX_FATFS_Init+0x1c>)
 800a7f4:	f003 f95e 	bl	800dab4 <FATFS_LinkDriver>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b03      	ldr	r3, [pc, #12]	; (800a80c <MX_FATFS_Init+0x20>)
 800a7fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a800:	bf00      	nop
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20003444 	.word	0x20003444
 800a808:	0800f788 	.word	0x0800f788
 800a80c:	20003440 	.word	0x20003440

0800a810 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	4619      	mov	r1, r3
 800a83a:	4808      	ldr	r0, [pc, #32]	; (800a85c <USBH_status+0x34>)
 800a83c:	f000 fe32 	bl	800b4a4 <USBH_MSC_UnitIsReady>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <USBH_status+0x24>
  {
    res = RES_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	e001      	b.n	800a850 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20003454 	.word	0x20003454

0800a860 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b094      	sub	sp, #80	; 0x50
 800a864:	af02      	add	r7, sp, #8
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a876:	7bf9      	ldrb	r1, [r7, #15]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4813      	ldr	r0, [pc, #76]	; (800a8d0 <USBH_read+0x70>)
 800a882:	f000 fe59 	bl	800b538 <USBH_MSC_Read>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d103      	bne.n	800a894 <USBH_read+0x34>
  {
    res = RES_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a892:	e017      	b.n	800a8c4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a894:	f107 0210 	add.w	r2, r7, #16
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	4619      	mov	r1, r3
 800a89c:	480c      	ldr	r0, [pc, #48]	; (800a8d0 <USBH_read+0x70>)
 800a89e:	f000 fe27 	bl	800b4f0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a8a2:	7f7b      	ldrb	r3, [r7, #29]
 800a8a4:	2b3a      	cmp	r3, #58	; 0x3a
 800a8a6:	d005      	beq.n	800a8b4 <USBH_read+0x54>
 800a8a8:	2b3a      	cmp	r3, #58	; 0x3a
 800a8aa:	dc07      	bgt.n	800a8bc <USBH_read+0x5c>
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d001      	beq.n	800a8b4 <USBH_read+0x54>
 800a8b0:	2b28      	cmp	r3, #40	; 0x28
 800a8b2:	d103      	bne.n	800a8bc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8ba:	e003      	b.n	800a8c4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8c2:	bf00      	nop
    }
  }

  return res;
 800a8c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3748      	adds	r7, #72	; 0x48
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20003454 	.word	0x20003454

0800a8d4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b094      	sub	sp, #80	; 0x50
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a8ea:	7bf9      	ldrb	r1, [r7, #15]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4817      	ldr	r0, [pc, #92]	; (800a954 <USBH_write+0x80>)
 800a8f6:	f000 fe88 	bl	800b60a <USBH_MSC_Write>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <USBH_write+0x34>
  {
    res = RES_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a906:	e01f      	b.n	800a948 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a908:	f107 0210 	add.w	r2, r7, #16
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4619      	mov	r1, r3
 800a910:	4810      	ldr	r0, [pc, #64]	; (800a954 <USBH_write+0x80>)
 800a912:	f000 fded 	bl	800b4f0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a916:	7f7b      	ldrb	r3, [r7, #29]
 800a918:	2b3a      	cmp	r3, #58	; 0x3a
 800a91a:	d00d      	beq.n	800a938 <USBH_write+0x64>
 800a91c:	2b3a      	cmp	r3, #58	; 0x3a
 800a91e:	dc0f      	bgt.n	800a940 <USBH_write+0x6c>
 800a920:	2b28      	cmp	r3, #40	; 0x28
 800a922:	d009      	beq.n	800a938 <USBH_write+0x64>
 800a924:	2b28      	cmp	r3, #40	; 0x28
 800a926:	dc0b      	bgt.n	800a940 <USBH_write+0x6c>
 800a928:	2b04      	cmp	r3, #4
 800a92a:	d005      	beq.n	800a938 <USBH_write+0x64>
 800a92c:	2b27      	cmp	r3, #39	; 0x27
 800a92e:	d107      	bne.n	800a940 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a930:	2302      	movs	r3, #2
 800a932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a936:	e007      	b.n	800a948 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a938:	2303      	movs	r3, #3
 800a93a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a93e:	e003      	b.n	800a948 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a946:	bf00      	nop
    }
  }

  return res;
 800a948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3748      	adds	r7, #72	; 0x48
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20003454 	.word	0x20003454

0800a958 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b090      	sub	sp, #64	; 0x40
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	603a      	str	r2, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
 800a964:	460b      	mov	r3, r1
 800a966:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a96e:	79bb      	ldrb	r3, [r7, #6]
 800a970:	2b03      	cmp	r3, #3
 800a972:	d852      	bhi.n	800aa1a <USBH_ioctl+0xc2>
 800a974:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <USBH_ioctl+0x24>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800a98d 	.word	0x0800a98d
 800a980:	0800a995 	.word	0x0800a995
 800a984:	0800a9bf 	.word	0x0800a9bf
 800a988:	0800a9eb 	.word	0x0800a9eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a992:	e045      	b.n	800aa20 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a994:	f107 0208 	add.w	r2, r7, #8
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	4619      	mov	r1, r3
 800a99c:	4823      	ldr	r0, [pc, #140]	; (800aa2c <USBH_ioctl+0xd4>)
 800a99e:	f000 fda7 	bl	800b4f0 <USBH_MSC_GetLUNInfo>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a9b4:	e034      	b.n	800aa20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a9bc:	e030      	b.n	800aa20 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a9be:	f107 0208 	add.w	r2, r7, #8
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4819      	ldr	r0, [pc, #100]	; (800aa2c <USBH_ioctl+0xd4>)
 800a9c8:	f000 fd92 	bl	800b4f0 <USBH_MSC_GetLUNInfo>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d107      	bne.n	800a9e2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a9d2:	8a3b      	ldrh	r3, [r7, #16]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a9e0:	e01e      	b.n	800aa20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a9e8:	e01a      	b.n	800aa20 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a9ea:	f107 0208 	add.w	r2, r7, #8
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	480e      	ldr	r0, [pc, #56]	; (800aa2c <USBH_ioctl+0xd4>)
 800a9f4:	f000 fd7c 	bl	800b4f0 <USBH_MSC_GetLUNInfo>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a9fe:	8a3b      	ldrh	r3, [r7, #16]
 800aa00:	0a5b      	lsrs	r3, r3, #9
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa10:	e006      	b.n	800aa20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa18:	e002      	b.n	800aa20 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aa1a:	2304      	movs	r3, #4
 800aa1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aa20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3740      	adds	r7, #64	; 0x40
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20003454 	.word	0x20003454

0800aa30 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aa30:	b590      	push	{r4, r7, lr}
 800aa32:	b089      	sub	sp, #36	; 0x24
 800aa34:	af04      	add	r7, sp, #16
 800aa36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa3e:	7919      	ldrb	r1, [r3, #4]
 800aa40:	2350      	movs	r3, #80	; 0x50
 800aa42:	2206      	movs	r2, #6
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 fc6b 	bl	800c320 <USBH_FindInterface>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2bff      	cmp	r3, #255	; 0xff
 800aa52:	d002      	beq.n	800aa5a <USBH_MSC_InterfaceInit+0x2a>
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d901      	bls.n	800aa5e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e106      	b.n	800ac6c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 fc40 	bl	800c2e8 <USBH_SelectInterface>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800aa72:	2302      	movs	r3, #2
 800aa74:	e0fa      	b.n	800ac6c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800aa7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa80:	f003 fb94 	bl	800e1ac <malloc>
 800aa84:	4603      	mov	r3, r0
 800aa86:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	e0e7      	b.n	800ac6c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800aa9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	68b8      	ldr	r0, [r7, #8]
 800aaa4:	f003 fba0 	bl	800e1e8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	211a      	movs	r1, #26
 800aaae:	fb01 f303 	mul.w	r3, r1, r3
 800aab2:	4413      	add	r3, r2
 800aab4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	b25b      	sxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	da16      	bge.n	800aaee <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	211a      	movs	r1, #26
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	4413      	add	r3, r2
 800aacc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	211a      	movs	r1, #26
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aae6:	881a      	ldrh	r2, [r3, #0]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	815a      	strh	r2, [r3, #10]
 800aaec:	e015      	b.n	800ab1a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	211a      	movs	r1, #26
 800aaf4:	fb01 f303 	mul.w	r3, r1, r3
 800aaf8:	4413      	add	r3, r2
 800aafa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	211a      	movs	r1, #26
 800ab0a:	fb01 f303 	mul.w	r3, r1, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab14:	881a      	ldrh	r2, [r3, #0]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	211a      	movs	r1, #26
 800ab20:	fb01 f303 	mul.w	r3, r1, r3
 800ab24:	4413      	add	r3, r2
 800ab26:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	b25b      	sxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da16      	bge.n	800ab60 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	211a      	movs	r1, #26
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	211a      	movs	r1, #26
 800ab4e:	fb01 f303 	mul.w	r3, r1, r3
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab58:	881a      	ldrh	r2, [r3, #0]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	815a      	strh	r2, [r3, #10]
 800ab5e:	e015      	b.n	800ab8c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	211a      	movs	r1, #26
 800ab66:	fb01 f303 	mul.w	r3, r1, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab70:	781a      	ldrb	r2, [r3, #0]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	211a      	movs	r1, #26
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab86:	881a      	ldrh	r2, [r3, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2200      	movs	r2, #0
 800ab96:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	799b      	ldrb	r3, [r3, #6]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 fed6 	bl	800d956 <USBH_AllocPipe>
 800abaa:	4603      	mov	r3, r0
 800abac:	461a      	mov	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	79db      	ldrb	r3, [r3, #7]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f002 fecc 	bl	800d956 <USBH_AllocPipe>
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fdc4 	bl	800b754 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	799b      	ldrb	r3, [r3, #6]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01e      	beq.n	800ac12 <USBH_MSC_InterfaceInit+0x1e2>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	891b      	ldrh	r3, [r3, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01a      	beq.n	800ac12 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	7959      	ldrb	r1, [r3, #5]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	7998      	ldrb	r0, [r3, #6]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	8912      	ldrh	r2, [r2, #8]
 800abf4:	9202      	str	r2, [sp, #8]
 800abf6:	2202      	movs	r2, #2
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4623      	mov	r3, r4
 800abfe:	4602      	mov	r2, r0
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f002 fe79 	bl	800d8f8 <USBH_OpenPipe>
 800ac06:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	79db      	ldrb	r3, [r3, #7]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d02c      	beq.n	800ac6a <USBH_MSC_InterfaceInit+0x23a>
 800ac10:	e001      	b.n	800ac16 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e02a      	b.n	800ac6c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	895b      	ldrh	r3, [r3, #10]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d025      	beq.n	800ac6a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	7919      	ldrb	r1, [r3, #4]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	79d8      	ldrb	r0, [r3, #7]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	8952      	ldrh	r2, [r2, #10]
 800ac36:	9202      	str	r2, [sp, #8]
 800ac38:	2202      	movs	r2, #2
 800ac3a:	9201      	str	r2, [sp, #4]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	4623      	mov	r3, r4
 800ac40:	4602      	mov	r2, r0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f002 fe58 	bl	800d8f8 <USBH_OpenPipe>
 800ac48:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	791b      	ldrb	r3, [r3, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f003 f9c8 	bl	800dfe8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	795b      	ldrb	r3, [r3, #5]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f003 f9c1 	bl	800dfe8 <USBH_LL_SetToggle>

  return USBH_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e000      	b.n	800ac6c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800ac6a:	2303      	movs	r3, #3
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}

0800ac74 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	795b      	ldrb	r3, [r3, #5]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00e      	beq.n	800acac <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	795b      	ldrb	r3, [r3, #5]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f002 fe4e 	bl	800d936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	795b      	ldrb	r3, [r3, #5]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f002 fe79 	bl	800d998 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	791b      	ldrb	r3, [r3, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00e      	beq.n	800acd2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	791b      	ldrb	r3, [r3, #4]
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f002 fe3b 	bl	800d936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	791b      	ldrb	r3, [r3, #4]
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f002 fe66 	bl	800d998 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f003 fa68 	bl	800e1bc <free>
    phost->pActiveClass->pData = 0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf2:	2200      	movs	r2, #0
 800acf4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad12:	2301      	movs	r3, #1
 800ad14:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	7b9b      	ldrb	r3, [r3, #14]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d041      	beq.n	800ada2 <USBH_MSC_ClassRequest+0xa2>
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	dc4b      	bgt.n	800adba <USBH_MSC_ClassRequest+0xba>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <USBH_MSC_ClassRequest+0x2a>
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d147      	bne.n	800adba <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fcf1 	bl	800b716 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800ad38:	7bfb      	ldrb	r3, [r7, #15]
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d104      	bne.n	800ad48 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d137      	bne.n	800adbe <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d804      	bhi.n	800ad60 <USBH_MSC_ClassRequest+0x60>
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	e000      	b.n	800ad62 <USBH_MSC_ClassRequest+0x62>
 800ad60:	2202      	movs	r2, #2
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ad66:	2300      	movs	r3, #0
 800ad68:	73bb      	strb	r3, [r7, #14]
 800ad6a:	e014      	b.n	800ad96 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	2134      	movs	r1, #52	; 0x34
 800ad72:	fb01 f303 	mul.w	r3, r1, r3
 800ad76:	4413      	add	r3, r2
 800ad78:	3392      	adds	r3, #146	; 0x92
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	2134      	movs	r1, #52	; 0x34
 800ad84:	fb01 f303 	mul.w	r3, r1, r3
 800ad88:	4413      	add	r3, r2
 800ad8a:	33c1      	adds	r3, #193	; 0xc1
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	3301      	adds	r3, #1
 800ad94:	73bb      	strb	r3, [r7, #14]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	7bba      	ldrb	r2, [r7, #14]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d3e5      	bcc.n	800ad6c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ada0:	e00d      	b.n	800adbe <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ada2:	2100      	movs	r1, #0
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f002 f888 	bl	800ceba <USBH_ClrFeature>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	7bda      	ldrb	r2, [r3, #15]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	739a      	strb	r2, [r3, #14]
      }
      break;
 800adb8:	e003      	b.n	800adc2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800adba:	bf00      	nop
 800adbc:	e002      	b.n	800adc4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800adbe:	bf00      	nop
 800adc0:	e000      	b.n	800adc4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800adc2:	bf00      	nop
  }

  return status;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ade2:	2301      	movs	r3, #1
 800ade4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ade6:	2301      	movs	r3, #1
 800ade8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800adea:	2301      	movs	r3, #1
 800adec:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	7b1b      	ldrb	r3, [r3, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <USBH_MSC_Process+0x2e>
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	f000 8271 	beq.w	800b2de <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800adfc:	e272      	b.n	800b2e4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	f080 824f 	bcs.w	800b2ae <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae16:	4619      	mov	r1, r3
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	2334      	movs	r3, #52	; 0x34
 800ae1c:	fb01 f303 	mul.w	r3, r1, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	3391      	adds	r3, #145	; 0x91
 800ae24:	2201      	movs	r2, #1
 800ae26:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae2e:	4619      	mov	r1, r3
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	2334      	movs	r3, #52	; 0x34
 800ae34:	fb01 f303 	mul.w	r3, r1, r3
 800ae38:	4413      	add	r3, r2
 800ae3a:	3390      	adds	r3, #144	; 0x90
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b08      	cmp	r3, #8
 800ae40:	f200 8243 	bhi.w	800b2ca <USBH_MSC_Process+0x4fa>
 800ae44:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <USBH_MSC_Process+0x7c>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800b2cb 	.word	0x0800b2cb
 800ae54:	0800af39 	.word	0x0800af39
 800ae58:	0800b0bd 	.word	0x0800b0bd
 800ae5c:	0800ae97 	.word	0x0800ae97
 800ae60:	0800b189 	.word	0x0800b189
 800ae64:	0800b2cb 	.word	0x0800b2cb
 800ae68:	0800b2cb 	.word	0x0800b2cb
 800ae6c:	0800b29d 	.word	0x0800b29d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae76:	4619      	mov	r1, r3
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	2334      	movs	r3, #52	; 0x34
 800ae7c:	fb01 f303 	mul.w	r3, r1, r3
 800ae80:	4413      	add	r3, r2
 800ae82:	3390      	adds	r3, #144	; 0x90
 800ae84:	2204      	movs	r2, #4
 800ae86:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ae94:	e222      	b.n	800b2dc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae9c:	b2d9      	uxtb	r1, r3
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aea4:	461a      	mov	r2, r3
 800aea6:	2334      	movs	r3, #52	; 0x34
 800aea8:	fb02 f303 	mul.w	r3, r2, r3
 800aeac:	3398      	adds	r3, #152	; 0x98
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3307      	adds	r3, #7
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 ff6a 	bl	800bd90 <USBH_MSC_SCSI_Inquiry>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10b      	bne.n	800aede <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aecc:	4619      	mov	r1, r3
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	2334      	movs	r3, #52	; 0x34
 800aed2:	fb01 f303 	mul.w	r3, r1, r3
 800aed6:	4413      	add	r3, r2
 800aed8:	3390      	adds	r3, #144	; 0x90
 800aeda:	2202      	movs	r2, #2
 800aedc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d10c      	bne.n	800aefe <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeea:	4619      	mov	r1, r3
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	2334      	movs	r3, #52	; 0x34
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	4413      	add	r3, r2
 800aef6:	3390      	adds	r3, #144	; 0x90
 800aef8:	2205      	movs	r2, #5
 800aefa:	701a      	strb	r2, [r3, #0]
            break;
 800aefc:	e1e7      	b.n	800b2ce <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b04      	cmp	r3, #4
 800af02:	f040 81e4 	bne.w	800b2ce <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af0c:	4619      	mov	r1, r3
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	2334      	movs	r3, #52	; 0x34
 800af12:	fb01 f303 	mul.w	r3, r1, r3
 800af16:	4413      	add	r3, r2
 800af18:	3390      	adds	r3, #144	; 0x90
 800af1a:	2201      	movs	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af24:	4619      	mov	r1, r3
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	2334      	movs	r3, #52	; 0x34
 800af2a:	fb01 f303 	mul.w	r3, r1, r3
 800af2e:	4413      	add	r3, r2
 800af30:	3391      	adds	r3, #145	; 0x91
 800af32:	2202      	movs	r2, #2
 800af34:	701a      	strb	r2, [r3, #0]
            break;
 800af36:	e1ca      	b.n	800b2ce <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fe66 	bl	800bc14 <USBH_MSC_SCSI_TestUnitReady>
 800af48:	4603      	mov	r3, r0
 800af4a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d149      	bne.n	800afe6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af58:	4619      	mov	r1, r3
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	2334      	movs	r3, #52	; 0x34
 800af5e:	fb01 f303 	mul.w	r3, r1, r3
 800af62:	4413      	add	r3, r2
 800af64:	3392      	adds	r3, #146	; 0x92
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00c      	beq.n	800af86 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af72:	4619      	mov	r1, r3
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	2334      	movs	r3, #52	; 0x34
 800af78:	fb01 f303 	mul.w	r3, r1, r3
 800af7c:	4413      	add	r3, r2
 800af7e:	33c1      	adds	r3, #193	; 0xc1
 800af80:	2201      	movs	r2, #1
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	e00b      	b.n	800af9e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af8c:	4619      	mov	r1, r3
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	2334      	movs	r3, #52	; 0x34
 800af92:	fb01 f303 	mul.w	r3, r1, r3
 800af96:	4413      	add	r3, r2
 800af98:	33c1      	adds	r3, #193	; 0xc1
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa4:	4619      	mov	r1, r3
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	2334      	movs	r3, #52	; 0x34
 800afaa:	fb01 f303 	mul.w	r3, r1, r3
 800afae:	4413      	add	r3, r2
 800afb0:	3390      	adds	r3, #144	; 0x90
 800afb2:	2203      	movs	r2, #3
 800afb4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afbc:	4619      	mov	r1, r3
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	2334      	movs	r3, #52	; 0x34
 800afc2:	fb01 f303 	mul.w	r3, r1, r3
 800afc6:	4413      	add	r3, r2
 800afc8:	3391      	adds	r3, #145	; 0x91
 800afca:	2200      	movs	r2, #0
 800afcc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afd4:	4619      	mov	r1, r3
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	2334      	movs	r3, #52	; 0x34
 800afda:	fb01 f303 	mul.w	r3, r1, r3
 800afde:	4413      	add	r3, r2
 800afe0:	3392      	adds	r3, #146	; 0x92
 800afe2:	2200      	movs	r2, #0
 800afe4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d14a      	bne.n	800b082 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff2:	4619      	mov	r1, r3
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	2334      	movs	r3, #52	; 0x34
 800aff8:	fb01 f303 	mul.w	r3, r1, r3
 800affc:	4413      	add	r3, r2
 800affe:	3392      	adds	r3, #146	; 0x92
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d00c      	beq.n	800b020 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b00c:	4619      	mov	r1, r3
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	2334      	movs	r3, #52	; 0x34
 800b012:	fb01 f303 	mul.w	r3, r1, r3
 800b016:	4413      	add	r3, r2
 800b018:	33c1      	adds	r3, #193	; 0xc1
 800b01a:	2201      	movs	r2, #1
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	e00b      	b.n	800b038 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b026:	4619      	mov	r1, r3
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	2334      	movs	r3, #52	; 0x34
 800b02c:	fb01 f303 	mul.w	r3, r1, r3
 800b030:	4413      	add	r3, r2
 800b032:	33c1      	adds	r3, #193	; 0xc1
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b03e:	4619      	mov	r1, r3
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	2334      	movs	r3, #52	; 0x34
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	4413      	add	r3, r2
 800b04a:	3390      	adds	r3, #144	; 0x90
 800b04c:	2205      	movs	r2, #5
 800b04e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b056:	4619      	mov	r1, r3
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	2334      	movs	r3, #52	; 0x34
 800b05c:	fb01 f303 	mul.w	r3, r1, r3
 800b060:	4413      	add	r3, r2
 800b062:	3391      	adds	r3, #145	; 0x91
 800b064:	2201      	movs	r2, #1
 800b066:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b06e:	4619      	mov	r1, r3
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	2334      	movs	r3, #52	; 0x34
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	4413      	add	r3, r2
 800b07a:	3392      	adds	r3, #146	; 0x92
 800b07c:	2202      	movs	r2, #2
 800b07e:	701a      	strb	r2, [r3, #0]
            break;
 800b080:	e127      	b.n	800b2d2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	2b04      	cmp	r3, #4
 800b086:	f040 8124 	bne.w	800b2d2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b090:	4619      	mov	r1, r3
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	2334      	movs	r3, #52	; 0x34
 800b096:	fb01 f303 	mul.w	r3, r1, r3
 800b09a:	4413      	add	r3, r2
 800b09c:	3390      	adds	r3, #144	; 0x90
 800b09e:	2201      	movs	r2, #1
 800b0a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	2334      	movs	r3, #52	; 0x34
 800b0ae:	fb01 f303 	mul.w	r3, r1, r3
 800b0b2:	4413      	add	r3, r2
 800b0b4:	3391      	adds	r3, #145	; 0x91
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	701a      	strb	r2, [r3, #0]
            break;
 800b0ba:	e10a      	b.n	800b2d2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0c2:	b2d9      	uxtb	r1, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	2334      	movs	r3, #52	; 0x34
 800b0ce:	fb02 f303 	mul.w	r3, r2, r3
 800b0d2:	3390      	adds	r3, #144	; 0x90
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3304      	adds	r3, #4
 800b0da:	461a      	mov	r2, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fddc 	bl	800bc9a <USBH_MSC_SCSI_ReadCapacity>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d120      	bne.n	800b12e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	2334      	movs	r3, #52	; 0x34
 800b0f8:	fb01 f303 	mul.w	r3, r1, r3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	3390      	adds	r3, #144	; 0x90
 800b100:	2201      	movs	r2, #1
 800b102:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b10a:	4619      	mov	r1, r3
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	2334      	movs	r3, #52	; 0x34
 800b110:	fb01 f303 	mul.w	r3, r1, r3
 800b114:	4413      	add	r3, r2
 800b116:	3391      	adds	r3, #145	; 0x91
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b122:	3301      	adds	r3, #1
 800b124:	b29a      	uxth	r2, r3
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b12c:	e0d3      	b.n	800b2d6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	2b02      	cmp	r3, #2
 800b132:	d10c      	bne.n	800b14e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b13a:	4619      	mov	r1, r3
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	2334      	movs	r3, #52	; 0x34
 800b140:	fb01 f303 	mul.w	r3, r1, r3
 800b144:	4413      	add	r3, r2
 800b146:	3390      	adds	r3, #144	; 0x90
 800b148:	2205      	movs	r2, #5
 800b14a:	701a      	strb	r2, [r3, #0]
            break;
 800b14c:	e0c3      	b.n	800b2d6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b04      	cmp	r3, #4
 800b152:	f040 80c0 	bne.w	800b2d6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b15c:	4619      	mov	r1, r3
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	2334      	movs	r3, #52	; 0x34
 800b162:	fb01 f303 	mul.w	r3, r1, r3
 800b166:	4413      	add	r3, r2
 800b168:	3390      	adds	r3, #144	; 0x90
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b174:	4619      	mov	r1, r3
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	2334      	movs	r3, #52	; 0x34
 800b17a:	fb01 f303 	mul.w	r3, r1, r3
 800b17e:	4413      	add	r3, r2
 800b180:	3391      	adds	r3, #145	; 0x91
 800b182:	2202      	movs	r2, #2
 800b184:	701a      	strb	r2, [r3, #0]
            break;
 800b186:	e0a6      	b.n	800b2d6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b18e:	b2d9      	uxtb	r1, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b196:	461a      	mov	r2, r3
 800b198:	2334      	movs	r3, #52	; 0x34
 800b19a:	fb02 f303 	mul.w	r3, r2, r3
 800b19e:	3398      	adds	r3, #152	; 0x98
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fe96 	bl	800beda <USBH_MSC_SCSI_RequestSense>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d145      	bne.n	800b244 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	2334      	movs	r3, #52	; 0x34
 800b1c4:	fb01 f303 	mul.w	r3, r1, r3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	339c      	adds	r3, #156	; 0x9c
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d00c      	beq.n	800b1ec <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1d8:	4619      	mov	r1, r3
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	2334      	movs	r3, #52	; 0x34
 800b1de:	fb01 f303 	mul.w	r3, r1, r3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	339c      	adds	r3, #156	; 0x9c
 800b1e6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d117      	bne.n	800b21c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	f242 720f 	movw	r2, #9999	; 0x270f
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d80c      	bhi.n	800b21c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b208:	4619      	mov	r1, r3
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	2334      	movs	r3, #52	; 0x34
 800b20e:	fb01 f303 	mul.w	r3, r1, r3
 800b212:	4413      	add	r3, r2
 800b214:	3390      	adds	r3, #144	; 0x90
 800b216:	2202      	movs	r2, #2
 800b218:	701a      	strb	r2, [r3, #0]
                  break;
 800b21a:	e05f      	b.n	800b2dc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b222:	4619      	mov	r1, r3
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	2334      	movs	r3, #52	; 0x34
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	4413      	add	r3, r2
 800b22e:	3390      	adds	r3, #144	; 0x90
 800b230:	2201      	movs	r2, #1
 800b232:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b23a:	3301      	adds	r3, #1
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d10c      	bne.n	800b264 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b250:	4619      	mov	r1, r3
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	2334      	movs	r3, #52	; 0x34
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	4413      	add	r3, r2
 800b25c:	3390      	adds	r3, #144	; 0x90
 800b25e:	2208      	movs	r2, #8
 800b260:	701a      	strb	r2, [r3, #0]
            break;
 800b262:	e03a      	b.n	800b2da <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	2b04      	cmp	r3, #4
 800b268:	d137      	bne.n	800b2da <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b270:	4619      	mov	r1, r3
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	2334      	movs	r3, #52	; 0x34
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	3390      	adds	r3, #144	; 0x90
 800b27e:	2201      	movs	r2, #1
 800b280:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b288:	4619      	mov	r1, r3
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	2334      	movs	r3, #52	; 0x34
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	4413      	add	r3, r2
 800b294:	3391      	adds	r3, #145	; 0x91
 800b296:	2202      	movs	r2, #2
 800b298:	701a      	strb	r2, [r3, #0]
            break;
 800b29a:	e01e      	b.n	800b2da <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b2ac:	e016      	b.n	800b2dc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
      break;
 800b2c8:	e00c      	b.n	800b2e4 <USBH_MSC_Process+0x514>
            break;
 800b2ca:	bf00      	nop
 800b2cc:	e00a      	b.n	800b2e4 <USBH_MSC_Process+0x514>
            break;
 800b2ce:	bf00      	nop
 800b2d0:	e008      	b.n	800b2e4 <USBH_MSC_Process+0x514>
            break;
 800b2d2:	bf00      	nop
 800b2d4:	e006      	b.n	800b2e4 <USBH_MSC_Process+0x514>
            break;
 800b2d6:	bf00      	nop
 800b2d8:	e004      	b.n	800b2e4 <USBH_MSC_Process+0x514>
            break;
 800b2da:	bf00      	nop
      break;
 800b2dc:	e002      	b.n	800b2e4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e2:	bf00      	nop
  }
  return error;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b088      	sub	sp, #32
 800b30a:	af02      	add	r7, sp, #8
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b31c:	2301      	movs	r3, #1
 800b31e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	2134      	movs	r1, #52	; 0x34
 800b32a:	fb01 f303 	mul.w	r3, r1, r3
 800b32e:	4413      	add	r3, r2
 800b330:	3390      	adds	r3, #144	; 0x90
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b07      	cmp	r3, #7
 800b336:	d03c      	beq.n	800b3b2 <USBH_MSC_RdWrProcess+0xac>
 800b338:	2b07      	cmp	r3, #7
 800b33a:	f300 80a7 	bgt.w	800b48c <USBH_MSC_RdWrProcess+0x186>
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d06c      	beq.n	800b41c <USBH_MSC_RdWrProcess+0x116>
 800b342:	2b06      	cmp	r3, #6
 800b344:	f040 80a2 	bne.w	800b48c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b348:	78f9      	ldrb	r1, [r7, #3]
 800b34a:	2300      	movs	r3, #0
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	2200      	movs	r2, #0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fea5 	bl	800c0a2 <USBH_MSC_SCSI_Read>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b362:	78fb      	ldrb	r3, [r7, #3]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	2134      	movs	r1, #52	; 0x34
 800b368:	fb01 f303 	mul.w	r3, r1, r3
 800b36c:	4413      	add	r3, r2
 800b36e:	3390      	adds	r3, #144	; 0x90
 800b370:	2201      	movs	r2, #1
 800b372:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b378:	e08a      	b.n	800b490 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d109      	bne.n	800b394 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	2134      	movs	r1, #52	; 0x34
 800b386:	fb01 f303 	mul.w	r3, r1, r3
 800b38a:	4413      	add	r3, r2
 800b38c:	3390      	adds	r3, #144	; 0x90
 800b38e:	2205      	movs	r2, #5
 800b390:	701a      	strb	r2, [r3, #0]
      break;
 800b392:	e07d      	b.n	800b490 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	2b04      	cmp	r3, #4
 800b398:	d17a      	bne.n	800b490 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	2134      	movs	r1, #52	; 0x34
 800b3a0:	fb01 f303 	mul.w	r3, r1, r3
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3390      	adds	r3, #144	; 0x90
 800b3a8:	2208      	movs	r2, #8
 800b3aa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b0:	e06e      	b.n	800b490 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b3b2:	78f9      	ldrb	r1, [r7, #3]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fe05 	bl	800bfcc <USBH_MSC_SCSI_Write>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	2134      	movs	r1, #52	; 0x34
 800b3d2:	fb01 f303 	mul.w	r3, r1, r3
 800b3d6:	4413      	add	r3, r2
 800b3d8:	3390      	adds	r3, #144	; 0x90
 800b3da:	2201      	movs	r2, #1
 800b3dc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b3e2:	e057      	b.n	800b494 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d109      	bne.n	800b3fe <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	2134      	movs	r1, #52	; 0x34
 800b3f0:	fb01 f303 	mul.w	r3, r1, r3
 800b3f4:	4413      	add	r3, r2
 800b3f6:	3390      	adds	r3, #144	; 0x90
 800b3f8:	2205      	movs	r2, #5
 800b3fa:	701a      	strb	r2, [r3, #0]
      break;
 800b3fc:	e04a      	b.n	800b494 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b04      	cmp	r3, #4
 800b402:	d147      	bne.n	800b494 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	2134      	movs	r1, #52	; 0x34
 800b40a:	fb01 f303 	mul.w	r3, r1, r3
 800b40e:	4413      	add	r3, r2
 800b410:	3390      	adds	r3, #144	; 0x90
 800b412:	2208      	movs	r2, #8
 800b414:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b416:	2302      	movs	r3, #2
 800b418:	75fb      	strb	r3, [r7, #23]
      break;
 800b41a:	e03b      	b.n	800b494 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	2234      	movs	r2, #52	; 0x34
 800b420:	fb02 f303 	mul.w	r3, r2, r3
 800b424:	3398      	adds	r3, #152	; 0x98
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4413      	add	r3, r2
 800b42a:	1d1a      	adds	r2, r3, #4
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fd52 	bl	800beda <USBH_MSC_SCSI_RequestSense>
 800b436:	4603      	mov	r3, r0
 800b438:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d113      	bne.n	800b468 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	2134      	movs	r1, #52	; 0x34
 800b446:	fb01 f303 	mul.w	r3, r1, r3
 800b44a:	4413      	add	r3, r2
 800b44c:	3390      	adds	r3, #144	; 0x90
 800b44e:	2201      	movs	r2, #1
 800b450:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	2134      	movs	r1, #52	; 0x34
 800b458:	fb01 f303 	mul.w	r3, r1, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	3391      	adds	r3, #145	; 0x91
 800b460:	2202      	movs	r2, #2
 800b462:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b464:	2302      	movs	r3, #2
 800b466:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d014      	beq.n	800b498 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b04      	cmp	r3, #4
 800b472:	d111      	bne.n	800b498 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	2134      	movs	r1, #52	; 0x34
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	3390      	adds	r3, #144	; 0x90
 800b482:	2208      	movs	r2, #8
 800b484:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b486:	2302      	movs	r3, #2
 800b488:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b48a:	e005      	b.n	800b498 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b48c:	bf00      	nop
 800b48e:	e004      	b.n	800b49a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b490:	bf00      	nop
 800b492:	e002      	b.n	800b49a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b494:	bf00      	nop
 800b496:	e000      	b.n	800b49a <USBH_MSC_RdWrProcess+0x194>
      break;
 800b498:	bf00      	nop

  }
  return error;
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b0b      	cmp	r3, #11
 800b4c2:	d10c      	bne.n	800b4de <USBH_MSC_UnitIsReady+0x3a>
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	2134      	movs	r1, #52	; 0x34
 800b4ca:	fb01 f303 	mul.w	r3, r1, r3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3391      	adds	r3, #145	; 0x91
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	e001      	b.n	800b4e2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b0b      	cmp	r3, #11
 800b510:	d10d      	bne.n	800b52e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	2234      	movs	r2, #52	; 0x34
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	3390      	adds	r3, #144	; 0x90
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	2234      	movs	r2, #52	; 0x34
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f002 fe51 	bl	800e1cc <memcpy>
    return USBH_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e000      	b.n	800b530 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b52e:	2302      	movs	r3, #2
  }
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	460b      	mov	r3, r1
 800b546:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00e      	beq.n	800b57c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b564:	2b0b      	cmp	r3, #11
 800b566:	d109      	bne.n	800b57c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b568:	7afb      	ldrb	r3, [r7, #11]
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	2134      	movs	r1, #52	; 0x34
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	3390      	adds	r3, #144	; 0x90
 800b576:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d001      	beq.n	800b580 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b57c:	2302      	movs	r3, #2
 800b57e:	e040      	b.n	800b602 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2206      	movs	r2, #6
 800b584:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b586:	7afb      	ldrb	r3, [r7, #11]
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	2134      	movs	r1, #52	; 0x34
 800b58c:	fb01 f303 	mul.w	r3, r1, r3
 800b590:	4413      	add	r3, r2
 800b592:	3390      	adds	r3, #144	; 0x90
 800b594:	2206      	movs	r2, #6
 800b596:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b5a2:	7af9      	ldrb	r1, [r7, #11]
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fd78 	bl	800c0a2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5b8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b5ba:	e016      	b.n	800b5ea <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	1ad2      	subs	r2, r2, r3
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b5cc:	fb01 f303 	mul.w	r3, r1, r3
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d805      	bhi.n	800b5e0 <USBH_MSC_Read+0xa8>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e00b      	b.n	800b602 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff fe89 	bl	800b306 <USBH_MSC_RdWrProcess>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d0e0      	beq.n	800b5bc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b088      	sub	sp, #32
 800b60e:	af02      	add	r7, sp, #8
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	460b      	mov	r3, r1
 800b618:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00e      	beq.n	800b64e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b636:	2b0b      	cmp	r3, #11
 800b638:	d109      	bne.n	800b64e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	2134      	movs	r1, #52	; 0x34
 800b640:	fb01 f303 	mul.w	r3, r1, r3
 800b644:	4413      	add	r3, r2
 800b646:	3390      	adds	r3, #144	; 0x90
 800b648:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d001      	beq.n	800b652 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b64e:	2302      	movs	r3, #2
 800b650:	e040      	b.n	800b6d4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2207      	movs	r2, #7
 800b656:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	2134      	movs	r1, #52	; 0x34
 800b65e:	fb01 f303 	mul.w	r3, r1, r3
 800b662:	4413      	add	r3, r2
 800b664:	3390      	adds	r3, #144	; 0x90
 800b666:	2207      	movs	r2, #7
 800b668:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b66a:	7afb      	ldrb	r3, [r7, #11]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b674:	7af9      	ldrb	r1, [r7, #11]
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 fca4 	bl	800bfcc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b68a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b68c:	e016      	b.n	800b6bc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	f242 7110 	movw	r1, #10000	; 0x2710
 800b69e:	fb01 f303 	mul.w	r3, r1, r3
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d805      	bhi.n	800b6b2 <USBH_MSC_Write+0xa8>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e00b      	b.n	800b6d4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff fe20 	bl	800b306 <USBH_MSC_RdWrProcess>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d0e0      	beq.n	800b68e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2221      	movs	r2, #33	; 0x21
 800b6e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	22ff      	movs	r2, #255	; 0xff
 800b6ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b702:	2200      	movs	r2, #0
 800b704:	2100      	movs	r1, #0
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f001 fea4 	bl	800d454 <USBH_CtlReq>
 800b70c:	4603      	mov	r3, r0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	22a1      	movs	r2, #161	; 0xa1
 800b724:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	22fe      	movs	r2, #254	; 0xfe
 800b72a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b73e:	2201      	movs	r2, #1
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f001 fe86 	bl	800d454 <USBH_CtlReq>
 800b748:	4603      	mov	r3, r0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <USBH_MSC_BOT_Init+0x3c>)
 800b76a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4a09      	ldr	r2, [pc, #36]	; (800b794 <USBH_MSC_BOT_Init+0x40>)
 800b770:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	43425355 	.word	0x43425355
 800b794:	20304050 	.word	0x20304050

0800b798 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af02      	add	r7, sp, #8
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	2b0a      	cmp	r3, #10
 800b7cc:	f200 819e 	bhi.w	800bb0c <USBH_MSC_BOT_Process+0x374>
 800b7d0:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <USBH_MSC_BOT_Process+0x40>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b805 	.word	0x0800b805
 800b7dc:	0800b82d 	.word	0x0800b82d
 800b7e0:	0800b897 	.word	0x0800b897
 800b7e4:	0800b8b5 	.word	0x0800b8b5
 800b7e8:	0800b939 	.word	0x0800b939
 800b7ec:	0800b95b 	.word	0x0800b95b
 800b7f0:	0800b9f3 	.word	0x0800b9f3
 800b7f4:	0800ba0f 	.word	0x0800ba0f
 800b7f8:	0800ba61 	.word	0x0800ba61
 800b7fc:	0800ba91 	.word	0x0800ba91
 800b800:	0800baf3 	.word	0x0800baf3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	78fa      	ldrb	r2, [r7, #3]
 800b808:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	795b      	ldrb	r3, [r3, #5]
 800b81e:	2201      	movs	r2, #1
 800b820:	9200      	str	r2, [sp, #0]
 800b822:	221f      	movs	r2, #31
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f002 f824 	bl	800d872 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b82a:	e17e      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	795b      	ldrb	r3, [r3, #5]
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f002 fbae 	bl	800df94 <USBH_LL_GetURBState>
 800b838:	4603      	mov	r3, r0
 800b83a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b83c:	7d3b      	ldrb	r3, [r7, #20]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d118      	bne.n	800b874 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00f      	beq.n	800b86a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b850:	b25b      	sxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	da04      	bge.n	800b860 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2203      	movs	r2, #3
 800b85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b85e:	e157      	b.n	800bb10 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2205      	movs	r2, #5
 800b864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b868:	e152      	b.n	800bb10 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2207      	movs	r2, #7
 800b86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b872:	e14d      	b.n	800bb10 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b874:	7d3b      	ldrb	r3, [r7, #20]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d104      	bne.n	800b884 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b882:	e145      	b.n	800bb10 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b884:	7d3b      	ldrb	r3, [r7, #20]
 800b886:	2b05      	cmp	r3, #5
 800b888:	f040 8142 	bne.w	800bb10 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	220a      	movs	r2, #10
 800b890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b894:	e13c      	b.n	800bb10 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	895a      	ldrh	r2, [r3, #10]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	791b      	ldrb	r3, [r3, #4]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f002 f809 	bl	800d8bc <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b8b2:	e13a      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	791b      	ldrb	r3, [r3, #4]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f002 fb6a 	bl	800df94 <USBH_LL_GetURBState>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b8c4:	7d3b      	ldrb	r3, [r7, #20]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d12d      	bne.n	800b926 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	8952      	ldrh	r2, [r2, #10]
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d910      	bls.n	800b8f8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	8952      	ldrh	r2, [r2, #10]
 800b8e0:	441a      	add	r2, r3
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	8952      	ldrh	r2, [r2, #10]
 800b8f0:	1a9a      	subs	r2, r3, r2
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b8f6:	e002      	b.n	800b8fe <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	895a      	ldrh	r2, [r3, #10]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	791b      	ldrb	r3, [r3, #4]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 ffd1 	bl	800d8bc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b91a:	e0fb      	b.n	800bb14 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2207      	movs	r2, #7
 800b920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b924:	e0f6      	b.n	800bb14 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b926:	7d3b      	ldrb	r3, [r7, #20]
 800b928:	2b05      	cmp	r3, #5
 800b92a:	f040 80f3 	bne.w	800bb14 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2209      	movs	r2, #9
 800b932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b936:	e0ed      	b.n	800bb14 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	891a      	ldrh	r2, [r3, #8]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	795b      	ldrb	r3, [r3, #5]
 800b946:	2001      	movs	r0, #1
 800b948:	9000      	str	r0, [sp, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f001 ff91 	bl	800d872 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2206      	movs	r2, #6
 800b954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b958:	e0e7      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	795b      	ldrb	r3, [r3, #5]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 fb17 	bl	800df94 <USBH_LL_GetURBState>
 800b966:	4603      	mov	r3, r0
 800b968:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b96a:	7d3b      	ldrb	r3, [r7, #20]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d12f      	bne.n	800b9d0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	8912      	ldrh	r2, [r2, #8]
 800b978:	4293      	cmp	r3, r2
 800b97a:	d910      	bls.n	800b99e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	8912      	ldrh	r2, [r2, #8]
 800b986:	441a      	add	r2, r3
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	8912      	ldrh	r2, [r2, #8]
 800b996:	1a9a      	subs	r2, r3, r2
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	65da      	str	r2, [r3, #92]	; 0x5c
 800b99c:	e002      	b.n	800b9a4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00c      	beq.n	800b9c6 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	891a      	ldrh	r2, [r3, #8]
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	795b      	ldrb	r3, [r3, #5]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	9000      	str	r0, [sp, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 ff57 	bl	800d872 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b9c4:	e0a8      	b.n	800bb18 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2207      	movs	r2, #7
 800b9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ce:	e0a3      	b.n	800bb18 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9d0:	7d3b      	ldrb	r3, [r7, #20]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d104      	bne.n	800b9e0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9de:	e09b      	b.n	800bb18 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b9e0:	7d3b      	ldrb	r3, [r7, #20]
 800b9e2:	2b05      	cmp	r3, #5
 800b9e4:	f040 8098 	bne.w	800bb18 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9f0:	e092      	b.n	800bb18 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	791b      	ldrb	r3, [r3, #4]
 800b9fc:	220d      	movs	r2, #13
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f001 ff5c 	bl	800d8bc <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2208      	movs	r2, #8
 800ba08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba0c:	e08d      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	791b      	ldrb	r3, [r3, #4]
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f002 fabd 	bl	800df94 <USBH_LL_GetURBState>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ba1e:	7d3b      	ldrb	r3, [r7, #20]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d115      	bne.n	800ba50 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f8a9 	bl	800bb8c <USBH_MSC_DecodeCSW>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800ba3e:	7d7b      	ldrb	r3, [r7, #21]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800ba48:	e068      	b.n	800bb1c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba4e:	e065      	b.n	800bb1c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ba50:	7d3b      	ldrb	r3, [r7, #20]
 800ba52:	2b05      	cmp	r3, #5
 800ba54:	d162      	bne.n	800bb1c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2209      	movs	r2, #9
 800ba5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba5e:	e05d      	b.n	800bb1c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	2200      	movs	r2, #0
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f864 	bl	800bb34 <USBH_MSC_BOT_Abort>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ba70:	7dbb      	ldrb	r3, [r7, #22]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2207      	movs	r2, #7
 800ba7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ba7e:	e04f      	b.n	800bb20 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ba80:	7dbb      	ldrb	r3, [r7, #22]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d14c      	bne.n	800bb20 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	220b      	movs	r2, #11
 800ba8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba8e:	e047      	b.n	800bb20 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2201      	movs	r2, #1
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f84c 	bl	800bb34 <USBH_MSC_BOT_Abort>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800baa0:	7dbb      	ldrb	r3, [r7, #22]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d11d      	bne.n	800bae2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	795b      	ldrb	r3, [r3, #5]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f002 facb 	bl	800e048 <USBH_LL_GetToggle>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	7959      	ldrb	r1, [r3, #5]
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	f1c3 0301 	rsb	r3, r3, #1
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	461a      	mov	r2, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f002 fa8f 	bl	800dfe8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	791b      	ldrb	r3, [r3, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f002 fa88 	bl	800dfe8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2209      	movs	r2, #9
 800badc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bae0:	e020      	b.n	800bb24 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bae2:	7dbb      	ldrb	r3, [r7, #22]
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d11d      	bne.n	800bb24 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	220b      	movs	r2, #11
 800baec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baf0:	e018      	b.n	800bb24 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff fdf2 	bl	800b6dc <USBH_MSC_BOT_REQ_Reset>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d112      	bne.n	800bb28 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bb0a:	e00d      	b.n	800bb28 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bb0c:	bf00      	nop
 800bb0e:	e00c      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb10:	bf00      	nop
 800bb12:	e00a      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb14:	bf00      	nop
 800bb16:	e008      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb18:	bf00      	nop
 800bb1a:	e006      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb1c:	bf00      	nop
 800bb1e:	e004      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb20:	bf00      	nop
 800bb22:	e002      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb24:	bf00      	nop
 800bb26:	e000      	b.n	800bb2a <USBH_MSC_BOT_Process+0x392>
      break;
 800bb28:	bf00      	nop
  }
  return status;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	70fb      	strb	r3, [r7, #3]
 800bb40:	4613      	mov	r3, r2
 800bb42:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bb44:	2302      	movs	r3, #2
 800bb46:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bb52:	78bb      	ldrb	r3, [r7, #2]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <USBH_MSC_BOT_Abort+0x2a>
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d009      	beq.n	800bb70 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bb5c:	e011      	b.n	800bb82 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	79db      	ldrb	r3, [r3, #7]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f001 f9a8 	bl	800ceba <USBH_ClrFeature>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6e:	e008      	b.n	800bb82 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	799b      	ldrb	r3, [r3, #6]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 f99f 	bl	800ceba <USBH_ClrFeature>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb80:	bf00      	nop
  }
  return status;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	791b      	ldrb	r3, [r3, #4]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f002 f961 	bl	800de70 <USBH_LL_GetLastXferSize>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b0d      	cmp	r3, #13
 800bbb2:	d002      	beq.n	800bbba <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	73fb      	strb	r3, [r7, #15]
 800bbb8:	e024      	b.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbbe:	4a14      	ldr	r2, [pc, #80]	; (800bc10 <USBH_MSC_DecodeCSW+0x84>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d11d      	bne.n	800bc00 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d119      	bne.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d102      	bne.n	800bbe0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73fb      	strb	r3, [r7, #15]
 800bbde:	e011      	b.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d102      	bne.n	800bbf0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bbea:	2301      	movs	r3, #1
 800bbec:	73fb      	strb	r3, [r7, #15]
 800bbee:	e009      	b.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d104      	bne.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	73fb      	strb	r3, [r7, #15]
 800bbfe:	e001      	b.n	800bc04 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bc00:	2302      	movs	r3, #2
 800bc02:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	53425355 	.word	0x53425355

0800bc14 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bc20:	2302      	movs	r3, #2
 800bc22:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d002      	beq.n	800bc3e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d021      	beq.n	800bc80 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bc3c:	e028      	b.n	800bc90 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2200      	movs	r2, #0
 800bc42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	220a      	movs	r2, #10
 800bc50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	3363      	adds	r3, #99	; 0x63
 800bc58:	2210      	movs	r2, #16
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 fac3 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2202      	movs	r2, #2
 800bc76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7e:	e007      	b.n	800bc90 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff fd87 	bl	800b798 <USBH_MSC_BOT_Process>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8e:	bf00      	nop
  }

  return error;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b086      	sub	sp, #24
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	460b      	mov	r3, r1
 800bca4:	607a      	str	r2, [r7, #4]
 800bca6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d002      	beq.n	800bcc6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d027      	beq.n	800bd14 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bcc4:	e05f      	b.n	800bd86 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	220a      	movs	r2, #10
 800bcd8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	3363      	adds	r3, #99	; 0x63
 800bce0:	2210      	movs	r2, #16
 800bce2:	2100      	movs	r1, #0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f002 fa7f 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2225      	movs	r2, #37	; 0x25
 800bcee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f103 0210 	add.w	r2, r3, #16
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	75fb      	strb	r3, [r7, #23]
      break;
 800bd12:	e038      	b.n	800bd86 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	4619      	mov	r1, r3
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f7ff fd3d 	bl	800b798 <USBH_MSC_BOT_Process>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d12d      	bne.n	800bd84 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd2e:	3303      	adds	r3, #3
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd3a:	3302      	adds	r3, #2
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd48:	3301      	adds	r3, #1
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd4e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	061b      	lsls	r3, r3, #24
 800bd5a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd66:	3307      	adds	r3, #7
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd72:	3306      	adds	r3, #6
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	809a      	strh	r2, [r3, #4]
      break;
 800bd84:	bf00      	nop
  }

  return error;
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d002      	beq.n	800bdbc <USBH_MSC_SCSI_Inquiry+0x2c>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d03d      	beq.n	800be36 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bdba:	e089      	b.n	800bed0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2224      	movs	r2, #36	; 0x24
 800bdc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	2280      	movs	r2, #128	; 0x80
 800bdc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	220a      	movs	r2, #10
 800bdce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3363      	adds	r3, #99	; 0x63
 800bdd6:	220a      	movs	r2, #10
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f002 fa04 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2212      	movs	r2, #18
 800bde4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bde8:	7afb      	ldrb	r3, [r7, #11]
 800bdea:	015b      	lsls	r3, r3, #5
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2224      	movs	r2, #36	; 0x24
 800be08:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	2202      	movs	r2, #2
 800be20:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	f103 0210 	add.w	r2, r3, #16
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800be30:	2301      	movs	r3, #1
 800be32:	75fb      	strb	r3, [r7, #23]
      break;
 800be34:	e04c      	b.n	800bed0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	4619      	mov	r1, r3
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fcac 	bl	800b798 <USBH_MSC_BOT_Process>
 800be40:	4603      	mov	r3, r0
 800be42:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800be44:	7dfb      	ldrb	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d141      	bne.n	800bece <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800be4a:	2222      	movs	r2, #34	; 0x22
 800be4c:	2100      	movs	r1, #0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 f9ca 	bl	800e1e8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 031f 	and.w	r3, r3, #31
 800be60:	b2da      	uxtb	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	095b      	lsrs	r3, r3, #5
 800be70:	b2da      	uxtb	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be7c:	3301      	adds	r3, #1
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	b25b      	sxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	da03      	bge.n	800be8e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	709a      	strb	r2, [r3, #2]
 800be8c:	e002      	b.n	800be94 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	1cd8      	adds	r0, r3, #3
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be9e:	3308      	adds	r3, #8
 800bea0:	2208      	movs	r2, #8
 800bea2:	4619      	mov	r1, r3
 800bea4:	f002 f992 	bl	800e1cc <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f103 000c 	add.w	r0, r3, #12
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb4:	3310      	adds	r3, #16
 800beb6:	2210      	movs	r2, #16
 800beb8:	4619      	mov	r1, r3
 800beba:	f002 f987 	bl	800e1cc <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	331d      	adds	r3, #29
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bec8:	3220      	adds	r2, #32
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	601a      	str	r2, [r3, #0]
      break;
 800bece:	bf00      	nop
  }

  return error;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b086      	sub	sp, #24
 800bede:	af00      	add	r7, sp, #0
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	460b      	mov	r3, r1
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bee8:	2302      	movs	r3, #2
 800beea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800befc:	2b01      	cmp	r3, #1
 800befe:	d002      	beq.n	800bf06 <USBH_MSC_SCSI_RequestSense+0x2c>
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d03d      	beq.n	800bf80 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bf04:	e05d      	b.n	800bfc2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	220e      	movs	r2, #14
 800bf0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2280      	movs	r2, #128	; 0x80
 800bf10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	220a      	movs	r2, #10
 800bf18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	3363      	adds	r3, #99	; 0x63
 800bf20:	2210      	movs	r2, #16
 800bf22:	2100      	movs	r1, #0
 800bf24:	4618      	mov	r0, r3
 800bf26:	f002 f95f 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bf32:	7afb      	ldrb	r3, [r7, #11]
 800bf34:	015b      	lsls	r3, r3, #5
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	220e      	movs	r2, #14
 800bf52:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f103 0210 	add.w	r2, r3, #16
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf7e:	e020      	b.n	800bfc2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	4619      	mov	r1, r3
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fc07 	bl	800b798 <USBH_MSC_BOT_Process>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d115      	bne.n	800bfc0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 030f 	and.w	r3, r3, #15
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfae:	7b1a      	ldrb	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfba:	7b5a      	ldrb	r2, [r3, #13]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	709a      	strb	r2, [r3, #2]
      break;
 800bfc0:	bf00      	nop
  }

  return error;
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bfdc:	2302      	movs	r3, #2
 800bfde:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d002      	beq.n	800bffa <USBH_MSC_SCSI_Write+0x2e>
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d047      	beq.n	800c088 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bff8:	e04e      	b.n	800c098 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c000:	461a      	mov	r2, r3
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	fb03 f202 	mul.w	r2, r3, r2
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	220a      	movs	r2, #10
 800c018:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	3363      	adds	r3, #99	; 0x63
 800c020:	2210      	movs	r2, #16
 800c022:	2100      	movs	r1, #0
 800c024:	4618      	mov	r0, r3
 800c026:	f002 f8df 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	222a      	movs	r2, #42	; 0x2a
 800c02e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c032:	79fa      	ldrb	r2, [r7, #7]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c03a:	79ba      	ldrb	r2, [r7, #6]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c042:	797a      	ldrb	r2, [r7, #5]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c04a:	1d3b      	adds	r3, r7, #4
 800c04c:	781a      	ldrb	r2, [r3, #0]
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c054:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c05e:	f107 0320 	add.w	r3, r7, #32
 800c062:	781a      	ldrb	r2, [r3, #0]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2202      	movs	r2, #2
 800c076:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c082:	2301      	movs	r3, #1
 800c084:	75fb      	strb	r3, [r7, #23]
      break;
 800c086:	e007      	b.n	800c098 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c088:	7afb      	ldrb	r3, [r7, #11]
 800c08a:	4619      	mov	r1, r3
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7ff fb83 	bl	800b798 <USBH_MSC_BOT_Process>
 800c092:	4603      	mov	r3, r0
 800c094:	75fb      	strb	r3, [r7, #23]
      break;
 800c096:	bf00      	nop
  }

  return error;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b086      	sub	sp, #24
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	603b      	str	r3, [r7, #0]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d002      	beq.n	800c0d0 <USBH_MSC_SCSI_Read+0x2e>
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d047      	beq.n	800c15e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c0ce:	e04e      	b.n	800c16e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	fb03 f202 	mul.w	r2, r3, r2
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2280      	movs	r2, #128	; 0x80
 800c0e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	220a      	movs	r2, #10
 800c0ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3363      	adds	r3, #99	; 0x63
 800c0f6:	2210      	movs	r2, #16
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f002 f874 	bl	800e1e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2228      	movs	r2, #40	; 0x28
 800c104:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c108:	79fa      	ldrb	r2, [r7, #7]
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c110:	79ba      	ldrb	r2, [r7, #6]
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c118:	797a      	ldrb	r2, [r7, #5]
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c120:	1d3b      	adds	r3, r7, #4
 800c122:	781a      	ldrb	r2, [r3, #0]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c12a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c134:	f107 0320 	add.w	r3, r7, #32
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2202      	movs	r2, #2
 800c14c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c158:	2301      	movs	r3, #1
 800c15a:	75fb      	strb	r3, [r7, #23]
      break;
 800c15c:	e007      	b.n	800c16e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c15e:	7afb      	ldrb	r3, [r7, #11]
 800c160:	4619      	mov	r1, r3
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff fb18 	bl	800b798 <USBH_MSC_BOT_Process>
 800c168:	4603      	mov	r3, r0
 800c16a:	75fb      	strb	r3, [r7, #23]
      break;
 800c16c:	bf00      	nop
  }

  return error;
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c18c:	2302      	movs	r3, #2
 800c18e:	e029      	b.n	800c1e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	79fa      	ldrb	r2, [r7, #7]
 800c194:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f81f 	bl	800c1ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f001 fd89 	bl	800dcf4 <USBH_LL_Init>

  return USBH_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	e009      	b.n	800c212 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	33e0      	adds	r3, #224	; 0xe0
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b0f      	cmp	r3, #15
 800c216:	d9f2      	bls.n	800c1fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e009      	b.n	800c232 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c238:	d3f1      	bcc.n	800c21e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2240      	movs	r2, #64	; 0x40
 800c25e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d016      	beq.n	800c2d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10e      	bne.n	800c2d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c2b8:	1c59      	adds	r1, r3, #1
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	33de      	adds	r3, #222	; 0xde
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73fb      	strb	r3, [r7, #15]
 800c2ce:	e004      	b.n	800c2da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	73fb      	strb	r3, [r7, #15]
 800c2d4:	e001      	b.n	800c2da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c2d6:	2302      	movs	r3, #2
 800c2d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c2fe:	78fa      	ldrb	r2, [r7, #3]
 800c300:	429a      	cmp	r2, r3
 800c302:	d204      	bcs.n	800c30e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c30c:	e001      	b.n	800c312 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c30e:	2302      	movs	r3, #2
 800c310:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	4608      	mov	r0, r1
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	4603      	mov	r3, r0
 800c330:	70fb      	strb	r3, [r7, #3]
 800c332:	460b      	mov	r3, r1
 800c334:	70bb      	strb	r3, [r7, #2]
 800c336:	4613      	mov	r3, r2
 800c338:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c33a:	2300      	movs	r3, #0
 800c33c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c348:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c34a:	e025      	b.n	800c398 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	221a      	movs	r2, #26
 800c350:	fb02 f303 	mul.w	r3, r2, r3
 800c354:	3308      	adds	r3, #8
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	3302      	adds	r3, #2
 800c35c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	795b      	ldrb	r3, [r3, #5]
 800c362:	78fa      	ldrb	r2, [r7, #3]
 800c364:	429a      	cmp	r2, r3
 800c366:	d002      	beq.n	800c36e <USBH_FindInterface+0x4e>
 800c368:	78fb      	ldrb	r3, [r7, #3]
 800c36a:	2bff      	cmp	r3, #255	; 0xff
 800c36c:	d111      	bne.n	800c392 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c372:	78ba      	ldrb	r2, [r7, #2]
 800c374:	429a      	cmp	r2, r3
 800c376:	d002      	beq.n	800c37e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c378:	78bb      	ldrb	r3, [r7, #2]
 800c37a:	2bff      	cmp	r3, #255	; 0xff
 800c37c:	d109      	bne.n	800c392 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c382:	787a      	ldrb	r2, [r7, #1]
 800c384:	429a      	cmp	r2, r3
 800c386:	d002      	beq.n	800c38e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c388:	787b      	ldrb	r3, [r7, #1]
 800c38a:	2bff      	cmp	r3, #255	; 0xff
 800c38c:	d101      	bne.n	800c392 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	e006      	b.n	800c3a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	3301      	adds	r3, #1
 800c396:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c398:	7dfb      	ldrb	r3, [r7, #23]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d9d6      	bls.n	800c34c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c39e:	23ff      	movs	r3, #255	; 0xff
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	371c      	adds	r7, #28
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 fce3 	bl	800dd80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f001 fdfc 	bl	800dfba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af04      	add	r7, sp, #16
 800c3d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d102      	bne.n	800c3ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2203      	movs	r2, #3
 800c3ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b0b      	cmp	r3, #11
 800c3f6:	f200 81be 	bhi.w	800c776 <USBH_Process+0x3aa>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <USBH_Process+0x34>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c431 	.word	0x0800c431
 800c404:	0800c463 	.word	0x0800c463
 800c408:	0800c4cb 	.word	0x0800c4cb
 800c40c:	0800c711 	.word	0x0800c711
 800c410:	0800c777 	.word	0x0800c777
 800c414:	0800c56f 	.word	0x0800c56f
 800c418:	0800c6b7 	.word	0x0800c6b7
 800c41c:	0800c5a5 	.word	0x0800c5a5
 800c420:	0800c5c5 	.word	0x0800c5c5
 800c424:	0800c5e5 	.word	0x0800c5e5
 800c428:	0800c629 	.word	0x0800c629
 800c42c:	0800c6f9 	.word	0x0800c6f9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 819e 	beq.w	800c77a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c444:	20c8      	movs	r0, #200	; 0xc8
 800c446:	f001 fe2f 	bl	800e0a8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fcf5 	bl	800de3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c460:	e18b      	b.n	800c77a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d107      	bne.n	800c47c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c47a:	e18d      	b.n	800c798 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c486:	d914      	bls.n	800c4b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c48e:	3301      	adds	r3, #1
 800c490:	b2da      	uxtb	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d903      	bls.n	800c4aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	220d      	movs	r2, #13
 800c4a6:	701a      	strb	r2, [r3, #0]
      break;
 800c4a8:	e176      	b.n	800c798 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
      break;
 800c4b0:	e172      	b.n	800c798 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c4b8:	f103 020a 	add.w	r2, r3, #10
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c4c2:	200a      	movs	r0, #10
 800c4c4:	f001 fdf0 	bl	800e0a8 <USBH_Delay>
      break;
 800c4c8:	e166      	b.n	800c798 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d005      	beq.n	800c4e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4da:	2104      	movs	r1, #4
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c4e0:	2064      	movs	r0, #100	; 0x64
 800c4e2:	f001 fde1 	bl	800e0a8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 fc80 	bl	800ddec <USBH_LL_GetSpeed>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2205      	movs	r2, #5
 800c4fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f001 fa29 	bl	800d956 <USBH_AllocPipe>
 800c504:	4603      	mov	r3, r0
 800c506:	461a      	mov	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c50c:	2180      	movs	r1, #128	; 0x80
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fa21 	bl	800d956 <USBH_AllocPipe>
 800c514:	4603      	mov	r3, r0
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7919      	ldrb	r1, [r3, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c530:	b292      	uxth	r2, r2
 800c532:	9202      	str	r2, [sp, #8]
 800c534:	2200      	movs	r2, #0
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4603      	mov	r3, r0
 800c53c:	2280      	movs	r2, #128	; 0x80
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 f9da 	bl	800d8f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7959      	ldrb	r1, [r3, #5]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c558:	b292      	uxth	r2, r2
 800c55a:	9202      	str	r2, [sp, #8]
 800c55c:	2200      	movs	r2, #0
 800c55e:	9201      	str	r2, [sp, #4]
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	4603      	mov	r3, r0
 800c564:	2200      	movs	r2, #0
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f001 f9c6 	bl	800d8f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c56c:	e114      	b.n	800c798 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f918 	bl	800c7a4 <USBH_HandleEnum>
 800c574:	4603      	mov	r3, r0
 800c576:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f040 80fe 	bne.w	800c77e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c590:	2b01      	cmp	r3, #1
 800c592:	d103      	bne.n	800c59c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2208      	movs	r2, #8
 800c598:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c59a:	e0f0      	b.n	800c77e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2207      	movs	r2, #7
 800c5a0:	701a      	strb	r2, [r3, #0]
      break;
 800c5a2:	e0ec      	b.n	800c77e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 80e9 	beq.w	800c782 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2208      	movs	r2, #8
 800c5c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c5c2:	e0de      	b.n	800c782 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc2c 	bl	800ce2c <USBH_SetCfg>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f040 80d5 	bne.w	800c786 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2209      	movs	r2, #9
 800c5e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5e2:	e0d0      	b.n	800c786 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c5ea:	f003 0320 	and.w	r3, r3, #32
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d016      	beq.n	800c620 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fc3c 	bl	800ce72 <USBH_SetFeature>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d103      	bne.n	800c60e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	220a      	movs	r2, #10
 800c60a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c60c:	e0bd      	b.n	800c78a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b03      	cmp	r3, #3
 800c614:	f040 80b9 	bne.w	800c78a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	220a      	movs	r2, #10
 800c61c:	701a      	strb	r2, [r3, #0]
      break;
 800c61e:	e0b4      	b.n	800c78a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	220a      	movs	r2, #10
 800c624:	701a      	strb	r2, [r3, #0]
      break;
 800c626:	e0b0      	b.n	800c78a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 80ad 	beq.w	800c78e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c63c:	2300      	movs	r3, #0
 800c63e:	73fb      	strb	r3, [r7, #15]
 800c640:	e016      	b.n	800c670 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c642:	7bfa      	ldrb	r2, [r7, #15]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	32de      	adds	r2, #222	; 0xde
 800c648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64c:	791a      	ldrb	r2, [r3, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c654:	429a      	cmp	r2, r3
 800c656:	d108      	bne.n	800c66a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c658:	7bfa      	ldrb	r2, [r7, #15]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	32de      	adds	r2, #222	; 0xde
 800c65e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c668:	e005      	b.n	800c676 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	3301      	adds	r3, #1
 800c66e:	73fb      	strb	r3, [r7, #15]
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0e5      	beq.n	800c642 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d016      	beq.n	800c6ae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	4798      	blx	r3
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d109      	bne.n	800c6a6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2206      	movs	r2, #6
 800c696:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c69e:	2103      	movs	r1, #3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6a4:	e073      	b.n	800c78e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	220d      	movs	r2, #13
 800c6aa:	701a      	strb	r2, [r3, #0]
      break;
 800c6ac:	e06f      	b.n	800c78e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	220d      	movs	r2, #13
 800c6b2:	701a      	strb	r2, [r3, #0]
      break;
 800c6b4:	e06b      	b.n	800c78e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d017      	beq.n	800c6f0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	4798      	blx	r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d103      	bne.n	800c6e0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	220b      	movs	r2, #11
 800c6dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6de:	e058      	b.n	800c792 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d154      	bne.n	800c792 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	220d      	movs	r2, #13
 800c6ec:	701a      	strb	r2, [r3, #0]
      break;
 800c6ee:	e050      	b.n	800c792 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	220d      	movs	r2, #13
 800c6f4:	701a      	strb	r2, [r3, #0]
      break;
 800c6f6:	e04c      	b.n	800c792 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d049      	beq.n	800c796 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c708:	695b      	ldr	r3, [r3, #20]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	4798      	blx	r3
      }
      break;
 800c70e:	e042      	b.n	800c796 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fd67 	bl	800c1ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c742:	2b00      	cmp	r3, #0
 800c744:	d005      	beq.n	800c752 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c74c:	2105      	movs	r1, #5
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d107      	bne.n	800c76e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7ff fe20 	bl	800c3ac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c76c:	e014      	b.n	800c798 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 fb06 	bl	800dd80 <USBH_LL_Start>
      break;
 800c774:	e010      	b.n	800c798 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c776:	bf00      	nop
 800c778:	e00e      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c77a:	bf00      	nop
 800c77c:	e00c      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c77e:	bf00      	nop
 800c780:	e00a      	b.n	800c798 <USBH_Process+0x3cc>
    break;
 800c782:	bf00      	nop
 800c784:	e008      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c786:	bf00      	nop
 800c788:	e006      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c78a:	bf00      	nop
 800c78c:	e004      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c78e:	bf00      	nop
 800c790:	e002      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c792:	bf00      	nop
 800c794:	e000      	b.n	800c798 <USBH_Process+0x3cc>
      break;
 800c796:	bf00      	nop
  }
  return USBH_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop

0800c7a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af04      	add	r7, sp, #16
 800c7aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	785b      	ldrb	r3, [r3, #1]
 800c7b8:	2b07      	cmp	r3, #7
 800c7ba:	f200 81c1 	bhi.w	800cb40 <USBH_HandleEnum+0x39c>
 800c7be:	a201      	add	r2, pc, #4	; (adr r2, 800c7c4 <USBH_HandleEnum+0x20>)
 800c7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c4:	0800c7e5 	.word	0x0800c7e5
 800c7c8:	0800c8a3 	.word	0x0800c8a3
 800c7cc:	0800c90d 	.word	0x0800c90d
 800c7d0:	0800c99b 	.word	0x0800c99b
 800c7d4:	0800ca05 	.word	0x0800ca05
 800c7d8:	0800ca75 	.word	0x0800ca75
 800c7dc:	0800cabb 	.word	0x0800cabb
 800c7e0:	0800cb01 	.word	0x0800cb01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c7e4:	2108      	movs	r1, #8
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa50 	bl	800cc8c <USBH_Get_DevDesc>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d130      	bne.n	800c858 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7919      	ldrb	r1, [r3, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c81a:	b292      	uxth	r2, r2
 800c81c:	9202      	str	r2, [sp, #8]
 800c81e:	2200      	movs	r2, #0
 800c820:	9201      	str	r2, [sp, #4]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4603      	mov	r3, r0
 800c826:	2280      	movs	r2, #128	; 0x80
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f001 f865 	bl	800d8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7959      	ldrb	r1, [r3, #5]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c842:	b292      	uxth	r2, r2
 800c844:	9202      	str	r2, [sp, #8]
 800c846:	2200      	movs	r2, #0
 800c848:	9201      	str	r2, [sp, #4]
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	4603      	mov	r3, r0
 800c84e:	2200      	movs	r2, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 f851 	bl	800d8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c856:	e175      	b.n	800cb44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c858:	7bbb      	ldrb	r3, [r7, #14]
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	f040 8172 	bne.w	800cb44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c866:	3301      	adds	r3, #1
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c876:	2b03      	cmp	r3, #3
 800c878:	d903      	bls.n	800c882 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	220d      	movs	r2, #13
 800c87e:	701a      	strb	r2, [r3, #0]
      break;
 800c880:	e160      	b.n	800cb44 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	795b      	ldrb	r3, [r3, #5]
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 f885 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	791b      	ldrb	r3, [r3, #4]
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 f87f 	bl	800d998 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
      break;
 800c8a0:	e150      	b.n	800cb44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c8a2:	2112      	movs	r1, #18
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9f1 	bl	800cc8c <USBH_Get_DevDesc>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d103      	bne.n	800c8bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c8ba:	e145      	b.n	800cb48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	f040 8142 	bne.w	800cb48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d903      	bls.n	800c8e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	220d      	movs	r2, #13
 800c8e2:	701a      	strb	r2, [r3, #0]
      break;
 800c8e4:	e130      	b.n	800cb48 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	795b      	ldrb	r3, [r3, #5]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 f853 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	791b      	ldrb	r3, [r3, #4]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 f84d 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]
      break;
 800c90a:	e11d      	b.n	800cb48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c90c:	2101      	movs	r1, #1
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fa68 	bl	800cde4 <USBH_SetAddress>
 800c914:	4603      	mov	r3, r0
 800c916:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d132      	bne.n	800c984 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c91e:	2002      	movs	r0, #2
 800c920:	f001 fbc2 	bl	800e0a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2203      	movs	r2, #3
 800c930:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7919      	ldrb	r1, [r3, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c946:	b292      	uxth	r2, r2
 800c948:	9202      	str	r2, [sp, #8]
 800c94a:	2200      	movs	r2, #0
 800c94c:	9201      	str	r2, [sp, #4]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	4603      	mov	r3, r0
 800c952:	2280      	movs	r2, #128	; 0x80
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 ffcf 	bl	800d8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7959      	ldrb	r1, [r3, #5]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c96e:	b292      	uxth	r2, r2
 800c970:	9202      	str	r2, [sp, #8]
 800c972:	2200      	movs	r2, #0
 800c974:	9201      	str	r2, [sp, #4]
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4603      	mov	r3, r0
 800c97a:	2200      	movs	r2, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 ffbb 	bl	800d8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c982:	e0e3      	b.n	800cb4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c984:	7bbb      	ldrb	r3, [r7, #14]
 800c986:	2b03      	cmp	r3, #3
 800c988:	f040 80e0 	bne.w	800cb4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	220d      	movs	r2, #13
 800c990:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	705a      	strb	r2, [r3, #1]
      break;
 800c998:	e0d8      	b.n	800cb4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c99a:	2109      	movs	r1, #9
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f99d 	bl	800ccdc <USBH_Get_CfgDesc>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9a6:	7bbb      	ldrb	r3, [r7, #14]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d103      	bne.n	800c9b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c9b2:	e0cd      	b.n	800cb50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9b4:	7bbb      	ldrb	r3, [r7, #14]
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	f040 80ca 	bne.w	800cb50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d903      	bls.n	800c9de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	220d      	movs	r2, #13
 800c9da:	701a      	strb	r2, [r3, #0]
      break;
 800c9dc:	e0b8      	b.n	800cb50 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	795b      	ldrb	r3, [r3, #5]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 ffd7 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 ffd1 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
      break;
 800ca02:	e0a5      	b.n	800cb50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f965 	bl	800ccdc <USBH_Get_CfgDesc>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca22:	e097      	b.n	800cb54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	f040 8094 	bne.w	800cb54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca32:	3301      	adds	r3, #1
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d903      	bls.n	800ca4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	220d      	movs	r2, #13
 800ca4a:	701a      	strb	r2, [r3, #0]
      break;
 800ca4c:	e082      	b.n	800cb54 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	795b      	ldrb	r3, [r3, #5]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 ff9f 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	791b      	ldrb	r3, [r3, #4]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 ff99 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
      break;
 800ca72:	e06f      	b.n	800cb54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d019      	beq.n	800cab2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca8a:	23ff      	movs	r3, #255	; 0xff
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 f949 	bl	800cd24 <USBH_Get_StringDesc>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d103      	bne.n	800caa4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2206      	movs	r2, #6
 800caa0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800caa2:	e059      	b.n	800cb58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d156      	bne.n	800cb58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2206      	movs	r2, #6
 800caae:	705a      	strb	r2, [r3, #1]
      break;
 800cab0:	e052      	b.n	800cb58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2206      	movs	r2, #6
 800cab6:	705a      	strb	r2, [r3, #1]
      break;
 800cab8:	e04e      	b.n	800cb58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d019      	beq.n	800caf8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cad0:	23ff      	movs	r3, #255	; 0xff
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f926 	bl	800cd24 <USBH_Get_StringDesc>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d103      	bne.n	800caea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2207      	movs	r2, #7
 800cae6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cae8:	e038      	b.n	800cb5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800caea:	7bbb      	ldrb	r3, [r7, #14]
 800caec:	2b03      	cmp	r3, #3
 800caee:	d135      	bne.n	800cb5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2207      	movs	r2, #7
 800caf4:	705a      	strb	r2, [r3, #1]
      break;
 800caf6:	e031      	b.n	800cb5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2207      	movs	r2, #7
 800cafc:	705a      	strb	r2, [r3, #1]
      break;
 800cafe:	e02d      	b.n	800cb5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d017      	beq.n	800cb3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb16:	23ff      	movs	r3, #255	; 0xff
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f903 	bl	800cd24 <USBH_Get_StringDesc>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d102      	bne.n	800cb2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cb2c:	e018      	b.n	800cb60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d115      	bne.n	800cb60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]
      break;
 800cb38:	e012      	b.n	800cb60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3e:	e00f      	b.n	800cb60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cb40:	bf00      	nop
 800cb42:	e00e      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb44:	bf00      	nop
 800cb46:	e00c      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb48:	bf00      	nop
 800cb4a:	e00a      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb4c:	bf00      	nop
 800cb4e:	e008      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb50:	bf00      	nop
 800cb52:	e006      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb54:	bf00      	nop
 800cb56:	e004      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb58:	bf00      	nop
 800cb5a:	e002      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb5c:	bf00      	nop
 800cb5e:	e000      	b.n	800cb62 <USBH_HandleEnum+0x3be>
      break;
 800cb60:	bf00      	nop
  }
  return Status;
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cb7e:	bf00      	nop
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb98:	1c5a      	adds	r2, r3, #1
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f804 	bl	800cbae <USBH_HandleSof>
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b0b      	cmp	r3, #11
 800cbbe:	d10a      	bne.n	800cbd6 <USBH_HandleSof+0x28>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d005      	beq.n	800cbd6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	4798      	blx	r3
  }
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b083      	sub	sp, #12
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cbee:	bf00      	nop
}
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b083      	sub	sp, #12
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cc0a:	bf00      	nop
}
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f001 f8a6 	bl	800ddb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fe91 	bl	800d998 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	795b      	ldrb	r3, [r3, #5]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fe8b 	bl	800d998 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b086      	sub	sp, #24
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	460b      	mov	r3, r1
 800cc96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cc9e:	78fb      	ldrb	r3, [r7, #3]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	4613      	mov	r3, r2
 800cca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccaa:	2100      	movs	r1, #0
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f864 	bl	800cd7a <USBH_GetDescriptor>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10a      	bne.n	800ccd2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ccc8:	78fa      	ldrb	r2, [r7, #3]
 800ccca:	b292      	uxth	r2, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	f000 f918 	bl	800cf02 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	331c      	adds	r3, #28
 800ccec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ccee:	887b      	ldrh	r3, [r7, #2]
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f83d 	bl	800cd7a <USBH_GetDescriptor>
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cd0a:	887b      	ldrh	r3, [r7, #2]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f987 	bl	800d024 <USBH_ParseCfgDesc>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af02      	add	r7, sp, #8
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	460b      	mov	r3, r1
 800cd32:	72fb      	strb	r3, [r7, #11]
 800cd34:	4613      	mov	r3, r2
 800cd36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800cd38:	7afb      	ldrb	r3, [r7, #11]
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cd40:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cd48:	893b      	ldrh	r3, [r7, #8]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	2100      	movs	r1, #0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 f812 	bl	800cd7a <USBH_GetDescriptor>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d107      	bne.n	800cd70 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd66:	893a      	ldrh	r2, [r7, #8]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 fb24 	bl	800d3b8 <USBH_ParseStringDesc>
  }

  return status;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	607b      	str	r3, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	72fb      	strb	r3, [r7, #11]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	789b      	ldrb	r3, [r3, #2]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d11c      	bne.n	800cdce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd94:	7afb      	ldrb	r3, [r7, #11]
 800cd96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2206      	movs	r2, #6
 800cda4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	893a      	ldrh	r2, [r7, #8]
 800cdaa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cdac:	893b      	ldrh	r3, [r7, #8]
 800cdae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cdb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdb6:	d104      	bne.n	800cdc2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f240 4209 	movw	r2, #1033	; 0x409
 800cdbe:	829a      	strh	r2, [r3, #20]
 800cdc0:	e002      	b.n	800cdc8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	8b3a      	ldrh	r2, [r7, #24]
 800cdcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cdce:	8b3b      	ldrh	r3, [r7, #24]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6879      	ldr	r1, [r7, #4]
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 fb3d 	bl	800d454 <USBH_CtlReq>
 800cdda:	4603      	mov	r3, r0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	789b      	ldrb	r3, [r3, #2]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d10f      	bne.n	800ce18 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2205      	movs	r2, #5
 800ce02:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ce04:	78fb      	ldrb	r3, [r7, #3]
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fb19 	bl	800d454 <USBH_CtlReq>
 800ce22:	4603      	mov	r3, r0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	789b      	ldrb	r3, [r3, #2]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d10e      	bne.n	800ce5e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2209      	movs	r2, #9
 800ce4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	887a      	ldrh	r2, [r7, #2]
 800ce50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2100      	movs	r1, #0
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 faf6 	bl	800d454 <USBH_CtlReq>
 800ce68:	4603      	mov	r3, r0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b082      	sub	sp, #8
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	789b      	ldrb	r3, [r3, #2]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d10f      	bne.n	800cea6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2203      	movs	r2, #3
 800ce90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cea6:	2200      	movs	r2, #0
 800cea8:	2100      	movs	r1, #0
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fad2 	bl	800d454 <USBH_CtlReq>
 800ceb0:	4603      	mov	r3, r0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d10f      	bne.n	800ceee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2202      	movs	r2, #2
 800ced2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 faae 	bl	800d454 <USBH_CtlReq>
 800cef8:	4603      	mov	r3, r0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	60f8      	str	r0, [r7, #12]
 800cf0a:	60b9      	str	r1, [r7, #8]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	781a      	ldrb	r2, [r3, #0]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	785a      	ldrb	r2, [r3, #1]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3302      	adds	r3, #2
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	3303      	adds	r3, #3
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	021b      	lsls	r3, r3, #8
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4313      	orrs	r3, r2
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	791a      	ldrb	r2, [r3, #4]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	795a      	ldrb	r2, [r3, #5]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	799a      	ldrb	r2, [r3, #6]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	79da      	ldrb	r2, [r3, #7]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	79db      	ldrb	r3, [r3, #7]
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	dc11      	bgt.n	800cf88 <USBH_ParseDevDesc+0x86>
 800cf64:	2b08      	cmp	r3, #8
 800cf66:	db16      	blt.n	800cf96 <USBH_ParseDevDesc+0x94>
 800cf68:	3b08      	subs	r3, #8
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf70:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800cf74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bf14      	ite	ne
 800cf7c:	2301      	movne	r3, #1
 800cf7e:	2300      	moveq	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <USBH_ParseDevDesc+0x8a>
 800cf86:	e006      	b.n	800cf96 <USBH_ParseDevDesc+0x94>
 800cf88:	2b40      	cmp	r3, #64	; 0x40
 800cf8a:	d104      	bne.n	800cf96 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	79da      	ldrb	r2, [r3, #7]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	71da      	strb	r2, [r3, #7]
      break;
 800cf94:	e003      	b.n	800cf9e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2240      	movs	r2, #64	; 0x40
 800cf9a:	71da      	strb	r2, [r3, #7]
      break;
 800cf9c:	bf00      	nop
  }

  if (length > 8U)
 800cf9e:	88fb      	ldrh	r3, [r7, #6]
 800cfa0:	2b08      	cmp	r3, #8
 800cfa2:	d939      	bls.n	800d018 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	3309      	adds	r3, #9
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	021b      	lsls	r3, r3, #8
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	330a      	adds	r3, #10
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	330b      	adds	r3, #11
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	021b      	lsls	r3, r3, #8
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	330c      	adds	r3, #12
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	330d      	adds	r3, #13
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	021b      	lsls	r3, r3, #8
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	4313      	orrs	r3, r2
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	7b9a      	ldrb	r2, [r3, #14]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	7bda      	ldrb	r2, [r3, #15]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	7c1a      	ldrb	r2, [r3, #16]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	7c5a      	ldrb	r2, [r3, #17]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	745a      	strb	r2, [r3, #17]
  }
}
 800d018:	bf00      	nop
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08c      	sub	sp, #48	; 0x30
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	4613      	mov	r3, r2
 800d030:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d038:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	781a      	ldrb	r2, [r3, #0]
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	785a      	ldrb	r2, [r3, #1]
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3302      	adds	r3, #2
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	3303      	adds	r3, #3
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b29b      	uxth	r3, r3
 800d074:	021b      	lsls	r3, r3, #8
 800d076:	b29b      	uxth	r3, r3
 800d078:	4313      	orrs	r3, r2
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d080:	bf28      	it	cs
 800d082:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d086:	b29a      	uxth	r2, r3
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	791a      	ldrb	r2, [r3, #4]
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	795a      	ldrb	r2, [r3, #5]
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	799a      	ldrb	r2, [r3, #6]
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	79da      	ldrb	r2, [r3, #7]
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	7a1a      	ldrb	r2, [r3, #8]
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b09      	cmp	r3, #9
 800d0ba:	d002      	beq.n	800d0c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	2209      	movs	r2, #9
 800d0c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d0c2:	88fb      	ldrh	r3, [r7, #6]
 800d0c4:	2b09      	cmp	r3, #9
 800d0c6:	f240 809d 	bls.w	800d204 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d0ca:	2309      	movs	r3, #9
 800d0cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d0d2:	e081      	b.n	800d1d8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d0d4:	f107 0316 	add.w	r3, r7, #22
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0dc:	f000 f99f 	bl	800d41e <USBH_GetNextDesc>
 800d0e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	785b      	ldrb	r3, [r3, #1]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	d176      	bne.n	800d1d8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b09      	cmp	r3, #9
 800d0f0:	d002      	beq.n	800d0f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	2209      	movs	r2, #9
 800d0f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0fc:	221a      	movs	r2, #26
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	3308      	adds	r3, #8
 800d104:	6a3a      	ldr	r2, [r7, #32]
 800d106:	4413      	add	r3, r2
 800d108:	3302      	adds	r3, #2
 800d10a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d10c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d10e:	69f8      	ldr	r0, [r7, #28]
 800d110:	f000 f87e 	bl	800d210 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d114:	2300      	movs	r3, #0
 800d116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d11e:	e043      	b.n	800d1a8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d120:	f107 0316 	add.w	r3, r7, #22
 800d124:	4619      	mov	r1, r3
 800d126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d128:	f000 f979 	bl	800d41e <USBH_GetNextDesc>
 800d12c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	785b      	ldrb	r3, [r3, #1]
 800d132:	2b05      	cmp	r3, #5
 800d134:	d138      	bne.n	800d1a8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	795b      	ldrb	r3, [r3, #5]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d10f      	bne.n	800d15e <USBH_ParseCfgDesc+0x13a>
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	799b      	ldrb	r3, [r3, #6]
 800d142:	2b02      	cmp	r3, #2
 800d144:	d10b      	bne.n	800d15e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	79db      	ldrb	r3, [r3, #7]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10f      	bne.n	800d16e <USBH_ParseCfgDesc+0x14a>
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b09      	cmp	r3, #9
 800d154:	d00b      	beq.n	800d16e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	2209      	movs	r2, #9
 800d15a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d15c:	e007      	b.n	800d16e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b07      	cmp	r3, #7
 800d164:	d004      	beq.n	800d170 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	2207      	movs	r2, #7
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	e000      	b.n	800d170 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d16e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d174:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d178:	3201      	adds	r2, #1
 800d17a:	00d2      	lsls	r2, r2, #3
 800d17c:	211a      	movs	r1, #26
 800d17e:	fb01 f303 	mul.w	r3, r1, r3
 800d182:	4413      	add	r3, r2
 800d184:	3308      	adds	r3, #8
 800d186:	6a3a      	ldr	r2, [r7, #32]
 800d188:	4413      	add	r3, r2
 800d18a:	3304      	adds	r3, #4
 800d18c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d190:	69b9      	ldr	r1, [r7, #24]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f86b 	bl	800d26e <USBH_ParseEPDesc>
 800d198:	4603      	mov	r3, r0
 800d19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d19e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	791b      	ldrb	r3, [r3, #4]
 800d1ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d204      	bcs.n	800d1be <USBH_ParseCfgDesc+0x19a>
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	885a      	ldrh	r2, [r3, #2]
 800d1b8:	8afb      	ldrh	r3, [r7, #22]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d8b0      	bhi.n	800d120 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	791b      	ldrb	r3, [r3, #4]
 800d1c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d201      	bcs.n	800d1ce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e01c      	b.n	800d208 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d805      	bhi.n	800d1ec <USBH_ParseCfgDesc+0x1c8>
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	885a      	ldrh	r2, [r3, #2]
 800d1e4:	8afb      	ldrh	r3, [r7, #22]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	f63f af74 	bhi.w	800d0d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	791b      	ldrb	r3, [r3, #4]
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	bf28      	it	cs
 800d1f4:	2302      	movcs	r3, #2
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d201      	bcs.n	800d204 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d200:	2303      	movs	r3, #3
 800d202:	e001      	b.n	800d208 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3730      	adds	r7, #48	; 0x30
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	781a      	ldrb	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	785a      	ldrb	r2, [r3, #1]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	789a      	ldrb	r2, [r3, #2]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	78da      	ldrb	r2, [r3, #3]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	791a      	ldrb	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	795a      	ldrb	r2, [r3, #5]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	799a      	ldrb	r2, [r3, #6]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	79da      	ldrb	r2, [r3, #7]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	7a1a      	ldrb	r2, [r3, #8]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	721a      	strb	r2, [r3, #8]
}
 800d262:	bf00      	nop
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d26e:	b480      	push	{r7}
 800d270:	b087      	sub	sp, #28
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	781a      	ldrb	r2, [r3, #0]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	785a      	ldrb	r2, [r3, #1]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	789a      	ldrb	r2, [r3, #2]
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	78da      	ldrb	r2, [r3, #3]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3305      	adds	r3, #5
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	799a      	ldrb	r2, [r3, #6]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	889b      	ldrh	r3, [r3, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d102      	bne.n	800d2d0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	75fb      	strb	r3, [r7, #23]
 800d2ce:	e033      	b.n	800d338 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	889b      	ldrh	r3, [r3, #4]
 800d2d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d2d8:	f023 0307 	bic.w	r3, r3, #7
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	889b      	ldrh	r3, [r3, #4]
 800d2e6:	b21a      	sxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	b299      	uxth	r1, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3305      	adds	r3, #5
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	021b      	lsls	r3, r3, #8
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	430b      	orrs	r3, r1
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d304:	2b00      	cmp	r3, #0
 800d306:	d110      	bne.n	800d32a <USBH_ParseEPDesc+0xbc>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3304      	adds	r3, #4
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	b299      	uxth	r1, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3305      	adds	r3, #5
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	021b      	lsls	r3, r3, #8
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	430b      	orrs	r3, r1
 800d31e:	b29b      	uxth	r3, r3
 800d320:	b21b      	sxth	r3, r3
 800d322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d326:	b21b      	sxth	r3, r3
 800d328:	e001      	b.n	800d32e <USBH_ParseEPDesc+0xc0>
 800d32a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d32e:	4313      	orrs	r3, r2
 800d330:	b21b      	sxth	r3, r3
 800d332:	b29a      	uxth	r2, r3
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d116      	bne.n	800d370 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	78db      	ldrb	r3, [r3, #3]
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d005      	beq.n	800d35a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	78db      	ldrb	r3, [r3, #3]
 800d352:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d356:	2b03      	cmp	r3, #3
 800d358:	d127      	bne.n	800d3aa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	799b      	ldrb	r3, [r3, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d003      	beq.n	800d36a <USBH_ParseEPDesc+0xfc>
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	799b      	ldrb	r3, [r3, #6]
 800d366:	2b10      	cmp	r3, #16
 800d368:	d91f      	bls.n	800d3aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d36a:	2303      	movs	r3, #3
 800d36c:	75fb      	strb	r3, [r7, #23]
 800d36e:	e01c      	b.n	800d3aa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	78db      	ldrb	r3, [r3, #3]
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d10a      	bne.n	800d392 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	799b      	ldrb	r3, [r3, #6]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d003      	beq.n	800d38c <USBH_ParseEPDesc+0x11e>
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	799b      	ldrb	r3, [r3, #6]
 800d388:	2b10      	cmp	r3, #16
 800d38a:	d90e      	bls.n	800d3aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d38c:	2303      	movs	r3, #3
 800d38e:	75fb      	strb	r3, [r7, #23]
 800d390:	e00b      	b.n	800d3aa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	78db      	ldrb	r3, [r3, #3]
 800d396:	f003 0303 	and.w	r3, r3, #3
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d105      	bne.n	800d3aa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	799b      	ldrb	r3, [r3, #6]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	371c      	adds	r7, #28
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d120      	bne.n	800d412 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	1e9a      	subs	r2, r3, #2
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	bf28      	it	cs
 800d3dc:	4613      	movcs	r3, r2
 800d3de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3302      	adds	r3, #2
 800d3e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	82fb      	strh	r3, [r7, #22]
 800d3ea:	e00b      	b.n	800d404 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d3ec:	8afb      	ldrh	r3, [r7, #22]
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	781a      	ldrb	r2, [r3, #0]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d3fe:	8afb      	ldrh	r3, [r7, #22]
 800d400:	3302      	adds	r3, #2
 800d402:	82fb      	strh	r3, [r7, #22]
 800d404:	8afa      	ldrh	r2, [r7, #22]
 800d406:	8abb      	ldrh	r3, [r7, #20]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d3ef      	bcc.n	800d3ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2200      	movs	r2, #0
 800d410:	701a      	strb	r2, [r3, #0]
  }
}
 800d412:	bf00      	nop
 800d414:	371c      	adds	r7, #28
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d41e:	b480      	push	{r7}
 800d420:	b085      	sub	sp, #20
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	881a      	ldrh	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	b29b      	uxth	r3, r3
 800d432:	4413      	add	r3, r2
 800d434:	b29a      	uxth	r2, r3
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4413      	add	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d446:	68fb      	ldr	r3, [r7, #12]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	4613      	mov	r3, r2
 800d460:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d462:	2301      	movs	r3, #1
 800d464:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	789b      	ldrb	r3, [r3, #2]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d002      	beq.n	800d474 <USBH_CtlReq+0x20>
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d00f      	beq.n	800d492 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d472:	e027      	b.n	800d4c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	88fa      	ldrh	r2, [r7, #6]
 800d47e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2201      	movs	r2, #1
 800d484:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2202      	movs	r2, #2
 800d48a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d48c:	2301      	movs	r3, #1
 800d48e:	75fb      	strb	r3, [r7, #23]
      break;
 800d490:	e018      	b.n	800d4c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f000 f81c 	bl	800d4d0 <USBH_HandleControl>
 800d498:	4603      	mov	r3, r0
 800d49a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <USBH_CtlReq+0x54>
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d106      	bne.n	800d4b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	761a      	strb	r2, [r3, #24]
      break;
 800d4b4:	e005      	b.n	800d4c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d102      	bne.n	800d4c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	709a      	strb	r2, [r3, #2]
      break;
 800d4c2:	bf00      	nop
  }
  return status;
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7e1b      	ldrb	r3, [r3, #24]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	2b0a      	cmp	r3, #10
 800d4e8:	f200 8156 	bhi.w	800d798 <USBH_HandleControl+0x2c8>
 800d4ec:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <USBH_HandleControl+0x24>)
 800d4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f2:	bf00      	nop
 800d4f4:	0800d521 	.word	0x0800d521
 800d4f8:	0800d53b 	.word	0x0800d53b
 800d4fc:	0800d5a5 	.word	0x0800d5a5
 800d500:	0800d5cb 	.word	0x0800d5cb
 800d504:	0800d603 	.word	0x0800d603
 800d508:	0800d62d 	.word	0x0800d62d
 800d50c:	0800d67f 	.word	0x0800d67f
 800d510:	0800d6a1 	.word	0x0800d6a1
 800d514:	0800d6dd 	.word	0x0800d6dd
 800d518:	0800d703 	.word	0x0800d703
 800d51c:	0800d741 	.word	0x0800d741
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f103 0110 	add.w	r1, r3, #16
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	795b      	ldrb	r3, [r3, #5]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f943 	bl	800d7b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2202      	movs	r2, #2
 800d536:	761a      	strb	r2, [r3, #24]
      break;
 800d538:	e139      	b.n	800d7ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	795b      	ldrb	r3, [r3, #5]
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fd27 	bl	800df94 <USBH_LL_GetURBState>
 800d546:	4603      	mov	r3, r0
 800d548:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d54a:	7bbb      	ldrb	r3, [r7, #14]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d11e      	bne.n	800d58e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	7c1b      	ldrb	r3, [r3, #16]
 800d554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d558:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	8adb      	ldrh	r3, [r3, #22]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00a      	beq.n	800d578 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d562:	7b7b      	ldrb	r3, [r7, #13]
 800d564:	2b80      	cmp	r3, #128	; 0x80
 800d566:	d103      	bne.n	800d570 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2203      	movs	r2, #3
 800d56c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d56e:	e115      	b.n	800d79c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2205      	movs	r2, #5
 800d574:	761a      	strb	r2, [r3, #24]
      break;
 800d576:	e111      	b.n	800d79c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d578:	7b7b      	ldrb	r3, [r7, #13]
 800d57a:	2b80      	cmp	r3, #128	; 0x80
 800d57c:	d103      	bne.n	800d586 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2209      	movs	r2, #9
 800d582:	761a      	strb	r2, [r3, #24]
      break;
 800d584:	e10a      	b.n	800d79c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2207      	movs	r2, #7
 800d58a:	761a      	strb	r2, [r3, #24]
      break;
 800d58c:	e106      	b.n	800d79c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	2b04      	cmp	r3, #4
 800d592:	d003      	beq.n	800d59c <USBH_HandleControl+0xcc>
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	2b02      	cmp	r3, #2
 800d598:	f040 8100 	bne.w	800d79c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	220b      	movs	r2, #11
 800d5a0:	761a      	strb	r2, [r3, #24]
      break;
 800d5a2:	e0fb      	b.n	800d79c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6899      	ldr	r1, [r3, #8]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	899a      	ldrh	r2, [r3, #12]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	791b      	ldrb	r3, [r3, #4]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f93a 	bl	800d836 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	761a      	strb	r2, [r3, #24]
      break;
 800d5c8:	e0f1      	b.n	800d7ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fcdf 	bl	800df94 <USBH_LL_GetURBState>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d5da:	7bbb      	ldrb	r3, [r7, #14]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d102      	bne.n	800d5e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2209      	movs	r2, #9
 800d5e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
 800d5e8:	2b05      	cmp	r3, #5
 800d5ea:	d102      	bne.n	800d5f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d5f0:	e0d6      	b.n	800d7a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d5f2:	7bbb      	ldrb	r3, [r7, #14]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	f040 80d3 	bne.w	800d7a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	220b      	movs	r2, #11
 800d5fe:	761a      	strb	r2, [r3, #24]
      break;
 800d600:	e0ce      	b.n	800d7a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6899      	ldr	r1, [r3, #8]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	899a      	ldrh	r2, [r3, #12]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	795b      	ldrb	r3, [r3, #5]
 800d60e:	2001      	movs	r0, #1
 800d610:	9000      	str	r0, [sp, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f8ea 	bl	800d7ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d61e:	b29a      	uxth	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2206      	movs	r2, #6
 800d628:	761a      	strb	r2, [r3, #24]
      break;
 800d62a:	e0c0      	b.n	800d7ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	795b      	ldrb	r3, [r3, #5]
 800d630:	4619      	mov	r1, r3
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fcae 	bl	800df94 <USBH_LL_GetURBState>
 800d638:	4603      	mov	r3, r0
 800d63a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d63c:	7bbb      	ldrb	r3, [r7, #14]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d103      	bne.n	800d64a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2207      	movs	r2, #7
 800d646:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d648:	e0ac      	b.n	800d7a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	2b05      	cmp	r3, #5
 800d64e:	d105      	bne.n	800d65c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	220c      	movs	r2, #12
 800d654:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d656:	2303      	movs	r3, #3
 800d658:	73fb      	strb	r3, [r7, #15]
      break;
 800d65a:	e0a3      	b.n	800d7a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d65c:	7bbb      	ldrb	r3, [r7, #14]
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d103      	bne.n	800d66a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2205      	movs	r2, #5
 800d666:	761a      	strb	r2, [r3, #24]
      break;
 800d668:	e09c      	b.n	800d7a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	2b04      	cmp	r3, #4
 800d66e:	f040 8099 	bne.w	800d7a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	220b      	movs	r2, #11
 800d676:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d678:	2302      	movs	r3, #2
 800d67a:	73fb      	strb	r3, [r7, #15]
      break;
 800d67c:	e092      	b.n	800d7a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	791b      	ldrb	r3, [r3, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f8d5 	bl	800d836 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d692:	b29a      	uxth	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2208      	movs	r2, #8
 800d69c:	761a      	strb	r2, [r3, #24]

      break;
 800d69e:	e086      	b.n	800d7ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	791b      	ldrb	r3, [r3, #4]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fc74 	bl	800df94 <USBH_LL_GetURBState>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d105      	bne.n	800d6c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	220d      	movs	r2, #13
 800d6ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6c0:	e072      	b.n	800d7a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d6c2:	7bbb      	ldrb	r3, [r7, #14]
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d103      	bne.n	800d6d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	220b      	movs	r2, #11
 800d6cc:	761a      	strb	r2, [r3, #24]
      break;
 800d6ce:	e06b      	b.n	800d7a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
 800d6d2:	2b05      	cmp	r3, #5
 800d6d4:	d168      	bne.n	800d7a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6da:	e065      	b.n	800d7a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	795b      	ldrb	r3, [r3, #5]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	9200      	str	r2, [sp, #0]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f87f 	bl	800d7ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	220a      	movs	r2, #10
 800d6fe:	761a      	strb	r2, [r3, #24]
      break;
 800d700:	e055      	b.n	800d7ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	795b      	ldrb	r3, [r3, #5]
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fc43 	bl	800df94 <USBH_LL_GetURBState>
 800d70e:	4603      	mov	r3, r0
 800d710:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d712:	7bbb      	ldrb	r3, [r7, #14]
 800d714:	2b01      	cmp	r3, #1
 800d716:	d105      	bne.n	800d724 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	220d      	movs	r2, #13
 800d720:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d722:	e043      	b.n	800d7ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d724:	7bbb      	ldrb	r3, [r7, #14]
 800d726:	2b02      	cmp	r3, #2
 800d728:	d103      	bne.n	800d732 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2209      	movs	r2, #9
 800d72e:	761a      	strb	r2, [r3, #24]
      break;
 800d730:	e03c      	b.n	800d7ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d732:	7bbb      	ldrb	r3, [r7, #14]
 800d734:	2b04      	cmp	r3, #4
 800d736:	d139      	bne.n	800d7ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	220b      	movs	r2, #11
 800d73c:	761a      	strb	r2, [r3, #24]
      break;
 800d73e:	e035      	b.n	800d7ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7e5b      	ldrb	r3, [r3, #25]
 800d744:	3301      	adds	r3, #1
 800d746:	b2da      	uxtb	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	765a      	strb	r2, [r3, #25]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7e5b      	ldrb	r3, [r3, #25]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d806      	bhi.n	800d762 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d760:	e025      	b.n	800d7ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d768:	2106      	movs	r1, #6
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	795b      	ldrb	r3, [r3, #5]
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f90c 	bl	800d998 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	791b      	ldrb	r3, [r3, #4]
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f906 	bl	800d998 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d792:	2302      	movs	r3, #2
 800d794:	73fb      	strb	r3, [r7, #15]
      break;
 800d796:	e00a      	b.n	800d7ae <USBH_HandleControl+0x2de>

    default:
      break;
 800d798:	bf00      	nop
 800d79a:	e008      	b.n	800d7ae <USBH_HandleControl+0x2de>
      break;
 800d79c:	bf00      	nop
 800d79e:	e006      	b.n	800d7ae <USBH_HandleControl+0x2de>
      break;
 800d7a0:	bf00      	nop
 800d7a2:	e004      	b.n	800d7ae <USBH_HandleControl+0x2de>
      break;
 800d7a4:	bf00      	nop
 800d7a6:	e002      	b.n	800d7ae <USBH_HandleControl+0x2de>
      break;
 800d7a8:	bf00      	nop
 800d7aa:	e000      	b.n	800d7ae <USBH_HandleControl+0x2de>
      break;
 800d7ac:	bf00      	nop
  }

  return status;
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af04      	add	r7, sp, #16
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d7c6:	79f9      	ldrb	r1, [r7, #7]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	2308      	movs	r3, #8
 800d7ce:	9302      	str	r3, [sp, #8]
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 fba8 	bl	800df32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af04      	add	r7, sp, #16
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	80fb      	strh	r3, [r7, #6]
 800d7fe:	4613      	mov	r3, r2
 800d800:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d810:	7979      	ldrb	r1, [r7, #5]
 800d812:	7e3b      	ldrb	r3, [r7, #24]
 800d814:	9303      	str	r3, [sp, #12]
 800d816:	88fb      	ldrh	r3, [r7, #6]
 800d818:	9302      	str	r3, [sp, #8]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	2301      	movs	r3, #1
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	2200      	movs	r2, #0
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 fb83 	bl	800df32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b088      	sub	sp, #32
 800d83a:	af04      	add	r7, sp, #16
 800d83c:	60f8      	str	r0, [r7, #12]
 800d83e:	60b9      	str	r1, [r7, #8]
 800d840:	4611      	mov	r1, r2
 800d842:	461a      	mov	r2, r3
 800d844:	460b      	mov	r3, r1
 800d846:	80fb      	strh	r3, [r7, #6]
 800d848:	4613      	mov	r3, r2
 800d84a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d84c:	7979      	ldrb	r1, [r7, #5]
 800d84e:	2300      	movs	r3, #0
 800d850:	9303      	str	r3, [sp, #12]
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	2301      	movs	r3, #1
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	2300      	movs	r3, #0
 800d860:	2201      	movs	r2, #1
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 fb65 	bl	800df32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d868:	2300      	movs	r3, #0

}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b088      	sub	sp, #32
 800d876:	af04      	add	r7, sp, #16
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	4611      	mov	r1, r2
 800d87e:	461a      	mov	r2, r3
 800d880:	460b      	mov	r3, r1
 800d882:	80fb      	strh	r3, [r7, #6]
 800d884:	4613      	mov	r3, r2
 800d886:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d001      	beq.n	800d896 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d892:	2300      	movs	r3, #0
 800d894:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d896:	7979      	ldrb	r1, [r7, #5]
 800d898:	7e3b      	ldrb	r3, [r7, #24]
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	88fb      	ldrh	r3, [r7, #6]
 800d89e:	9302      	str	r3, [sp, #8]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	9301      	str	r3, [sp, #4]
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 fb40 	bl	800df32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af04      	add	r7, sp, #16
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	80fb      	strh	r3, [r7, #6]
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8d2:	7979      	ldrb	r1, [r7, #5]
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9303      	str	r3, [sp, #12]
 800d8d8:	88fb      	ldrh	r3, [r7, #6]
 800d8da:	9302      	str	r3, [sp, #8]
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f000 fb22 	bl	800df32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af04      	add	r7, sp, #16
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	461a      	mov	r2, r3
 800d906:	4603      	mov	r3, r0
 800d908:	70fb      	strb	r3, [r7, #3]
 800d90a:	460b      	mov	r3, r1
 800d90c:	70bb      	strb	r3, [r7, #2]
 800d90e:	4613      	mov	r3, r2
 800d910:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d912:	7878      	ldrb	r0, [r7, #1]
 800d914:	78ba      	ldrb	r2, [r7, #2]
 800d916:	78f9      	ldrb	r1, [r7, #3]
 800d918:	8b3b      	ldrh	r3, [r7, #24]
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	7d3b      	ldrb	r3, [r7, #20]
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	7c3b      	ldrb	r3, [r7, #16]
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	4603      	mov	r3, r0
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fab5 	bl	800de96 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d942:	78fb      	ldrb	r3, [r7, #3]
 800d944:	4619      	mov	r1, r3
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fad4 	bl	800def4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f836 	bl	800d9d4 <USBH_GetFreePipe>
 800d968:	4603      	mov	r3, r0
 800d96a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d972:	4293      	cmp	r3, r2
 800d974:	d00a      	beq.n	800d98c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d976:	78fa      	ldrb	r2, [r7, #3]
 800d978:	89fb      	ldrh	r3, [r7, #14]
 800d97a:	f003 030f 	and.w	r3, r3, #15
 800d97e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d982:	6879      	ldr	r1, [r7, #4]
 800d984:	33e0      	adds	r3, #224	; 0xe0
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	440b      	add	r3, r1
 800d98a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d98c:	89fb      	ldrh	r3, [r7, #14]
 800d98e:	b2db      	uxtb	r3, r3
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	2b0f      	cmp	r3, #15
 800d9a8:	d80d      	bhi.n	800d9c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d9aa:	78fb      	ldrb	r3, [r7, #3]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	33e0      	adds	r3, #224	; 0xe0
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4413      	add	r3, r2
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	33e0      	adds	r3, #224	; 0xe0
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	440b      	add	r3, r1
 800d9c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	73fb      	strb	r3, [r7, #15]
 800d9e4:	e00f      	b.n	800da06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	33e0      	adds	r3, #224	; 0xe0
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	e007      	b.n	800da10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	3301      	adds	r3, #1
 800da04:	73fb      	strb	r3, [r7, #15]
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b0f      	cmp	r3, #15
 800da0a:	d9ec      	bls.n	800d9e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800da0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b087      	sub	sp, #28
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	4613      	mov	r3, r2
 800da28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da2a:	2301      	movs	r3, #1
 800da2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da32:	4b1f      	ldr	r3, [pc, #124]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da34:	7a5b      	ldrb	r3, [r3, #9]
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d131      	bne.n	800daa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da3c:	4b1c      	ldr	r3, [pc, #112]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da3e:	7a5b      	ldrb	r3, [r3, #9]
 800da40:	b2db      	uxtb	r3, r3
 800da42:	461a      	mov	r2, r3
 800da44:	4b1a      	ldr	r3, [pc, #104]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da46:	2100      	movs	r1, #0
 800da48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da4a:	4b19      	ldr	r3, [pc, #100]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da4c:	7a5b      	ldrb	r3, [r3, #9]
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	4a17      	ldr	r2, [pc, #92]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da5a:	4b15      	ldr	r3, [pc, #84]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da5c:	7a5b      	ldrb	r3, [r3, #9]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	461a      	mov	r2, r3
 800da62:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da64:	4413      	add	r3, r2
 800da66:	79fa      	ldrb	r2, [r7, #7]
 800da68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da6a:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da6c:	7a5b      	ldrb	r3, [r3, #9]
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	1c5a      	adds	r2, r3, #1
 800da72:	b2d1      	uxtb	r1, r2
 800da74:	4a0e      	ldr	r2, [pc, #56]	; (800dab0 <FATFS_LinkDriverEx+0x94>)
 800da76:	7251      	strb	r1, [r2, #9]
 800da78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da7a:	7dbb      	ldrb	r3, [r7, #22]
 800da7c:	3330      	adds	r3, #48	; 0x30
 800da7e:	b2da      	uxtb	r2, r3
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	3301      	adds	r3, #1
 800da88:	223a      	movs	r2, #58	; 0x3a
 800da8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	3302      	adds	r3, #2
 800da90:	222f      	movs	r2, #47	; 0x2f
 800da92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3303      	adds	r3, #3
 800da98:	2200      	movs	r2, #0
 800da9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800daa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	371c      	adds	r7, #28
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	20003448 	.word	0x20003448

0800dab4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dabe:	2200      	movs	r2, #0
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7ff ffaa 	bl	800da1c <FATFS_LinkDriverEx>
 800dac8:	4603      	mov	r3, r0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800dad8:	2200      	movs	r2, #0
 800dada:	490e      	ldr	r1, [pc, #56]	; (800db14 <MX_USB_HOST_Init+0x40>)
 800dadc:	480e      	ldr	r0, [pc, #56]	; (800db18 <MX_USB_HOST_Init+0x44>)
 800dade:	f7fe fb4b 	bl	800c178 <USBH_Init>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dae8:	f7f4 fcc2 	bl	8002470 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800daec:	490b      	ldr	r1, [pc, #44]	; (800db1c <MX_USB_HOST_Init+0x48>)
 800daee:	480a      	ldr	r0, [pc, #40]	; (800db18 <MX_USB_HOST_Init+0x44>)
 800daf0:	f7fe fbd0 	bl	800c294 <USBH_RegisterClass>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dafa:	f7f4 fcb9 	bl	8002470 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800dafe:	4806      	ldr	r0, [pc, #24]	; (800db18 <MX_USB_HOST_Init+0x44>)
 800db00:	f7fe fc54 	bl	800c3ac <USBH_Start>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800db0a:	f7f4 fcb1 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800db0e:	bf00      	nop
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	0800db35 	.word	0x0800db35
 800db18:	20003454 	.word	0x20003454
 800db1c:	20000010 	.word	0x20000010

0800db20 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800db24:	4802      	ldr	r0, [pc, #8]	; (800db30 <MX_USB_HOST_Process+0x10>)
 800db26:	f7fe fc51 	bl	800c3cc <USBH_Process>
}
 800db2a:	bf00      	nop
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20003454 	.word	0x20003454

0800db34 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800db40:	78fb      	ldrb	r3, [r7, #3]
 800db42:	3b01      	subs	r3, #1
 800db44:	2b04      	cmp	r3, #4
 800db46:	d819      	bhi.n	800db7c <USBH_UserProcess+0x48>
 800db48:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <USBH_UserProcess+0x1c>)
 800db4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4e:	bf00      	nop
 800db50:	0800db7d 	.word	0x0800db7d
 800db54:	0800db6d 	.word	0x0800db6d
 800db58:	0800db7d 	.word	0x0800db7d
 800db5c:	0800db75 	.word	0x0800db75
 800db60:	0800db65 	.word	0x0800db65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <USBH_UserProcess+0x58>)
 800db66:	2203      	movs	r2, #3
 800db68:	701a      	strb	r2, [r3, #0]
  break;
 800db6a:	e008      	b.n	800db7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800db6c:	4b07      	ldr	r3, [pc, #28]	; (800db8c <USBH_UserProcess+0x58>)
 800db6e:	2202      	movs	r2, #2
 800db70:	701a      	strb	r2, [r3, #0]
  break;
 800db72:	e004      	b.n	800db7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800db74:	4b05      	ldr	r3, [pc, #20]	; (800db8c <USBH_UserProcess+0x58>)
 800db76:	2201      	movs	r2, #1
 800db78:	701a      	strb	r2, [r3, #0]
  break;
 800db7a:	e000      	b.n	800db7e <USBH_UserProcess+0x4a>

  default:
  break;
 800db7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	2000382c 	.word	0x2000382c

0800db90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08a      	sub	sp, #40	; 0x28
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db98:	f107 0314 	add.w	r3, r7, #20
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	605a      	str	r2, [r3, #4]
 800dba2:	609a      	str	r2, [r3, #8]
 800dba4:	60da      	str	r2, [r3, #12]
 800dba6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a24      	ldr	r2, [pc, #144]	; (800dc40 <HAL_HCD_MspInit+0xb0>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d141      	bne.n	800dc36 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	613b      	str	r3, [r7, #16]
 800dbb6:	4b23      	ldr	r3, [pc, #140]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbba:	4a22      	ldr	r2, [pc, #136]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dbbc:	f043 0302 	orr.w	r3, r3, #2
 800dbc0:	6313      	str	r3, [r2, #48]	; 0x30
 800dbc2:	4b20      	ldr	r3, [pc, #128]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800dbce:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800dbd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dbe0:	230c      	movs	r3, #12
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dbe4:	f107 0314 	add.w	r3, r7, #20
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4817      	ldr	r0, [pc, #92]	; (800dc48 <HAL_HCD_MspInit+0xb8>)
 800dbec:	f7f5 feb0 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800dbf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800dbfe:	f107 0314 	add.w	r3, r7, #20
 800dc02:	4619      	mov	r1, r3
 800dc04:	4810      	ldr	r0, [pc, #64]	; (800dc48 <HAL_HCD_MspInit+0xb8>)
 800dc06:	f7f5 fea3 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc12:	4a0c      	ldr	r2, [pc, #48]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dc14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc18:	6313      	str	r3, [r2, #48]	; 0x30
 800dc1a:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <HAL_HCD_MspInit+0xb4>)
 800dc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc22:	60fb      	str	r3, [r7, #12]
 800dc24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dc26:	2200      	movs	r2, #0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	204d      	movs	r0, #77	; 0x4d
 800dc2c:	f7f5 fac1 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dc30:	204d      	movs	r0, #77	; 0x4d
 800dc32:	f7f5 fada 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dc36:	bf00      	nop
 800dc38:	3728      	adds	r7, #40	; 0x28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	40040000 	.word	0x40040000
 800dc44:	40023800 	.word	0x40023800
 800dc48:	40020400 	.word	0x40020400

0800dc4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe ff95 	bl	800cb8a <USBH_LL_IncTimer>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe ffcd 	bl	800cc16 <USBH_LL_Connect>
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe ffd6 	bl	800cc44 <USBH_LL_Disconnect>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
 800dcac:	4613      	mov	r3, r2
 800dcae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe ff87 	bl	800cbde <USBH_LL_PortEnabled>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fe ff87 	bl	800cbfa <USBH_LL_PortDisabled>
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d132      	bne.n	800dd6c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800dd06:	4a1c      	ldr	r2, [pc, #112]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a19      	ldr	r2, [pc, #100]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd12:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dd16:	4b18      	ldr	r3, [pc, #96]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd18:	4a18      	ldr	r2, [pc, #96]	; (800dd7c <USBH_LL_Init+0x88>)
 800dd1a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800dd1c:	4b16      	ldr	r3, [pc, #88]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd1e:	220c      	movs	r2, #12
 800dd20:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd24:	2201      	movs	r2, #1
 800dd26:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dd28:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dd2e:	4b12      	ldr	r3, [pc, #72]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd30:	2202      	movs	r2, #2
 800dd32:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd34:	4b10      	ldr	r3, [pc, #64]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd3a:	4b0f      	ldr	r3, [pc, #60]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dd40:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dd4c:	480a      	ldr	r0, [pc, #40]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd4e:	f7f5 ffc4 	bl	8003cda <HAL_HCD_Init>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800dd58:	f7f4 fb8a 	bl	8002470 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800dd5c:	4806      	ldr	r0, [pc, #24]	; (800dd78 <USBH_LL_Init+0x84>)
 800dd5e:	f7f6 fba8 	bl	80044b2 <HAL_HCD_GetCurrentFrame>
 800dd62:	4603      	mov	r3, r0
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7fe ff00 	bl	800cb6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20003830 	.word	0x20003830
 800dd7c:	40040000 	.word	0x40040000

0800dd80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f6 fb15 	bl	80043c6 <HAL_HCD_Start>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 f98c 	bl	800e0c0 <USBH_Get_USB_Status>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f6 fb1d 	bl	800440c <HAL_HCD_Stop>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 f971 	bl	800e0c0 <USBH_Get_USB_Status>
 800ddde:	4603      	mov	r3, r0
 800dde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7f6 fb65 	bl	80044ce <HAL_HCD_GetCurrentSpeed>
 800de04:	4603      	mov	r3, r0
 800de06:	2b02      	cmp	r3, #2
 800de08:	d00c      	beq.n	800de24 <USBH_LL_GetSpeed+0x38>
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d80d      	bhi.n	800de2a <USBH_LL_GetSpeed+0x3e>
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d002      	beq.n	800de18 <USBH_LL_GetSpeed+0x2c>
 800de12:	2b01      	cmp	r3, #1
 800de14:	d003      	beq.n	800de1e <USBH_LL_GetSpeed+0x32>
 800de16:	e008      	b.n	800de2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
    break;
 800de1c:	e008      	b.n	800de30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800de1e:	2301      	movs	r3, #1
 800de20:	73fb      	strb	r3, [r7, #15]
    break;
 800de22:	e005      	b.n	800de30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800de24:	2302      	movs	r3, #2
 800de26:	73fb      	strb	r3, [r7, #15]
    break;
 800de28:	e002      	b.n	800de30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800de2a:	2301      	movs	r3, #1
 800de2c:	73fb      	strb	r3, [r7, #15]
    break;
 800de2e:	bf00      	nop
  }
  return  speed;
 800de30:	7bfb      	ldrb	r3, [r7, #15]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de42:	2300      	movs	r3, #0
 800de44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de50:	4618      	mov	r0, r3
 800de52:	f7f6 faf8 	bl	8004446 <HAL_HCD_ResetPort>
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f92f 	bl	800e0c0 <USBH_Get_USB_Status>
 800de62:	4603      	mov	r3, r0
 800de64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de66:	7bbb      	ldrb	r3, [r7, #14]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de82:	78fa      	ldrb	r2, [r7, #3]
 800de84:	4611      	mov	r1, r2
 800de86:	4618      	mov	r0, r3
 800de88:	f7f6 faff 	bl	800448a <HAL_HCD_HC_GetXferCount>
 800de8c:	4603      	mov	r3, r0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800de96:	b590      	push	{r4, r7, lr}
 800de98:	b089      	sub	sp, #36	; 0x24
 800de9a:	af04      	add	r7, sp, #16
 800de9c:	6078      	str	r0, [r7, #4]
 800de9e:	4608      	mov	r0, r1
 800dea0:	4611      	mov	r1, r2
 800dea2:	461a      	mov	r2, r3
 800dea4:	4603      	mov	r3, r0
 800dea6:	70fb      	strb	r3, [r7, #3]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70bb      	strb	r3, [r7, #2]
 800deac:	4613      	mov	r3, r2
 800deae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800debe:	787c      	ldrb	r4, [r7, #1]
 800dec0:	78ba      	ldrb	r2, [r7, #2]
 800dec2:	78f9      	ldrb	r1, [r7, #3]
 800dec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dec6:	9302      	str	r3, [sp, #8]
 800dec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	4623      	mov	r3, r4
 800ded6:	f7f5 ff62 	bl	8003d9e <HAL_HCD_HC_Init>
 800deda:	4603      	mov	r3, r0
 800dedc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f8ed 	bl	800e0c0 <USBH_Get_USB_Status>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deea:	7bbb      	ldrb	r3, [r7, #14]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	bd90      	pop	{r4, r7, pc}

0800def4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	460b      	mov	r3, r1
 800defe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df00:	2300      	movs	r3, #0
 800df02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df0e:	78fa      	ldrb	r2, [r7, #3]
 800df10:	4611      	mov	r1, r2
 800df12:	4618      	mov	r0, r3
 800df14:	f7f5 ffd2 	bl	8003ebc <HAL_HCD_HC_Halt>
 800df18:	4603      	mov	r3, r0
 800df1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 f8ce 	bl	800e0c0 <USBH_Get_USB_Status>
 800df24:	4603      	mov	r3, r0
 800df26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df28:	7bbb      	ldrb	r3, [r7, #14]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800df32:	b590      	push	{r4, r7, lr}
 800df34:	b089      	sub	sp, #36	; 0x24
 800df36:	af04      	add	r7, sp, #16
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	4608      	mov	r0, r1
 800df3c:	4611      	mov	r1, r2
 800df3e:	461a      	mov	r2, r3
 800df40:	4603      	mov	r3, r0
 800df42:	70fb      	strb	r3, [r7, #3]
 800df44:	460b      	mov	r3, r1
 800df46:	70bb      	strb	r3, [r7, #2]
 800df48:	4613      	mov	r3, r2
 800df4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800df5a:	787c      	ldrb	r4, [r7, #1]
 800df5c:	78ba      	ldrb	r2, [r7, #2]
 800df5e:	78f9      	ldrb	r1, [r7, #3]
 800df60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df64:	9303      	str	r3, [sp, #12]
 800df66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df68:	9302      	str	r3, [sp, #8]
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	4623      	mov	r3, r4
 800df76:	f7f5 ffc5 	bl	8003f04 <HAL_HCD_HC_SubmitRequest>
 800df7a:	4603      	mov	r3, r0
 800df7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	4618      	mov	r0, r3
 800df82:	f000 f89d 	bl	800e0c0 <USBH_Get_USB_Status>
 800df86:	4603      	mov	r3, r0
 800df88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3714      	adds	r7, #20
 800df90:	46bd      	mov	sp, r7
 800df92:	bd90      	pop	{r4, r7, pc}

0800df94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfa6:	78fa      	ldrb	r2, [r7, #3]
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7f6 fa59 	bl	8004462 <HAL_HCD_HC_GetURBState>
 800dfb0:	4603      	mov	r3, r0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d103      	bne.n	800dfd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 f8a0 	bl	800e118 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dfd8:	20c8      	movs	r0, #200	; 0xc8
 800dfda:	f7f4 ffeb 	bl	8002fb4 <HAL_Delay>
  return USBH_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
 800dff4:	4613      	mov	r3, r2
 800dff6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dffe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	212c      	movs	r1, #44	; 0x2c
 800e006:	fb01 f303 	mul.w	r3, r1, r3
 800e00a:	4413      	add	r3, r2
 800e00c:	333b      	adds	r3, #59	; 0x3b
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d009      	beq.n	800e028 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	212c      	movs	r1, #44	; 0x2c
 800e01a:	fb01 f303 	mul.w	r3, r1, r3
 800e01e:	4413      	add	r3, r2
 800e020:	3354      	adds	r3, #84	; 0x54
 800e022:	78ba      	ldrb	r2, [r7, #2]
 800e024:	701a      	strb	r2, [r3, #0]
 800e026:	e008      	b.n	800e03a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	212c      	movs	r1, #44	; 0x2c
 800e02e:	fb01 f303 	mul.w	r3, r1, r3
 800e032:	4413      	add	r3, r2
 800e034:	3355      	adds	r3, #85	; 0x55
 800e036:	78ba      	ldrb	r2, [r7, #2]
 800e038:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	460b      	mov	r3, r1
 800e052:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e05e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	212c      	movs	r1, #44	; 0x2c
 800e066:	fb01 f303 	mul.w	r3, r1, r3
 800e06a:	4413      	add	r3, r2
 800e06c:	333b      	adds	r3, #59	; 0x3b
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d009      	beq.n	800e088 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e074:	78fb      	ldrb	r3, [r7, #3]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	212c      	movs	r1, #44	; 0x2c
 800e07a:	fb01 f303 	mul.w	r3, r1, r3
 800e07e:	4413      	add	r3, r2
 800e080:	3354      	adds	r3, #84	; 0x54
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	73fb      	strb	r3, [r7, #15]
 800e086:	e008      	b.n	800e09a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	212c      	movs	r1, #44	; 0x2c
 800e08e:	fb01 f303 	mul.w	r3, r1, r3
 800e092:	4413      	add	r3, r2
 800e094:	3355      	adds	r3, #85	; 0x55
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7f4 ff7f 	bl	8002fb4 <HAL_Delay>
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
	...

0800e0c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d817      	bhi.n	800e104 <USBH_Get_USB_Status+0x44>
 800e0d4:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <USBH_Get_USB_Status+0x1c>)
 800e0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0da:	bf00      	nop
 800e0dc:	0800e0ed 	.word	0x0800e0ed
 800e0e0:	0800e0f3 	.word	0x0800e0f3
 800e0e4:	0800e0f9 	.word	0x0800e0f9
 800e0e8:	0800e0ff 	.word	0x0800e0ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f0:	e00b      	b.n	800e10a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f6:	e008      	b.n	800e10a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e0fc:	e005      	b.n	800e10a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e0fe:	2302      	movs	r3, #2
 800e100:	73fb      	strb	r3, [r7, #15]
    break;
 800e102:	e002      	b.n	800e10a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e104:	2302      	movs	r3, #2
 800e106:	73fb      	strb	r3, [r7, #15]
    break;
 800e108:	bf00      	nop
  }
  return usb_status;
 800e10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e126:	79fb      	ldrb	r3, [r7, #7]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d102      	bne.n	800e132 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e12c:	2301      	movs	r3, #1
 800e12e:	73fb      	strb	r3, [r7, #15]
 800e130:	e001      	b.n	800e136 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e132:	2300      	movs	r3, #0
 800e134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	461a      	mov	r2, r3
 800e13a:	2110      	movs	r1, #16
 800e13c:	4803      	ldr	r0, [pc, #12]	; (800e14c <MX_DriverVbusHS+0x34>)
 800e13e:	f7f5 fdb3 	bl	8003ca8 <HAL_GPIO_WritePin>
}
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	40020800 	.word	0x40020800

0800e150 <atoi>:
 800e150:	220a      	movs	r2, #10
 800e152:	2100      	movs	r1, #0
 800e154:	f000 baa0 	b.w	800e698 <strtol>

0800e158 <__errno>:
 800e158:	4b01      	ldr	r3, [pc, #4]	; (800e160 <__errno+0x8>)
 800e15a:	6818      	ldr	r0, [r3, #0]
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	20000030 	.word	0x20000030

0800e164 <__libc_init_array>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	4d0d      	ldr	r5, [pc, #52]	; (800e19c <__libc_init_array+0x38>)
 800e168:	4c0d      	ldr	r4, [pc, #52]	; (800e1a0 <__libc_init_array+0x3c>)
 800e16a:	1b64      	subs	r4, r4, r5
 800e16c:	10a4      	asrs	r4, r4, #2
 800e16e:	2600      	movs	r6, #0
 800e170:	42a6      	cmp	r6, r4
 800e172:	d109      	bne.n	800e188 <__libc_init_array+0x24>
 800e174:	4d0b      	ldr	r5, [pc, #44]	; (800e1a4 <__libc_init_array+0x40>)
 800e176:	4c0c      	ldr	r4, [pc, #48]	; (800e1a8 <__libc_init_array+0x44>)
 800e178:	f001 f91e 	bl	800f3b8 <_init>
 800e17c:	1b64      	subs	r4, r4, r5
 800e17e:	10a4      	asrs	r4, r4, #2
 800e180:	2600      	movs	r6, #0
 800e182:	42a6      	cmp	r6, r4
 800e184:	d105      	bne.n	800e192 <__libc_init_array+0x2e>
 800e186:	bd70      	pop	{r4, r5, r6, pc}
 800e188:	f855 3b04 	ldr.w	r3, [r5], #4
 800e18c:	4798      	blx	r3
 800e18e:	3601      	adds	r6, #1
 800e190:	e7ee      	b.n	800e170 <__libc_init_array+0xc>
 800e192:	f855 3b04 	ldr.w	r3, [r5], #4
 800e196:	4798      	blx	r3
 800e198:	3601      	adds	r6, #1
 800e19a:	e7f2      	b.n	800e182 <__libc_init_array+0x1e>
 800e19c:	0800f940 	.word	0x0800f940
 800e1a0:	0800f940 	.word	0x0800f940
 800e1a4:	0800f940 	.word	0x0800f940
 800e1a8:	0800f944 	.word	0x0800f944

0800e1ac <malloc>:
 800e1ac:	4b02      	ldr	r3, [pc, #8]	; (800e1b8 <malloc+0xc>)
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f000 b88d 	b.w	800e2d0 <_malloc_r>
 800e1b6:	bf00      	nop
 800e1b8:	20000030 	.word	0x20000030

0800e1bc <free>:
 800e1bc:	4b02      	ldr	r3, [pc, #8]	; (800e1c8 <free+0xc>)
 800e1be:	4601      	mov	r1, r0
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	f000 b819 	b.w	800e1f8 <_free_r>
 800e1c6:	bf00      	nop
 800e1c8:	20000030 	.word	0x20000030

0800e1cc <memcpy>:
 800e1cc:	440a      	add	r2, r1
 800e1ce:	4291      	cmp	r1, r2
 800e1d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e1d4:	d100      	bne.n	800e1d8 <memcpy+0xc>
 800e1d6:	4770      	bx	lr
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1e2:	4291      	cmp	r1, r2
 800e1e4:	d1f9      	bne.n	800e1da <memcpy+0xe>
 800e1e6:	bd10      	pop	{r4, pc}

0800e1e8 <memset>:
 800e1e8:	4402      	add	r2, r0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d100      	bne.n	800e1f2 <memset+0xa>
 800e1f0:	4770      	bx	lr
 800e1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1f6:	e7f9      	b.n	800e1ec <memset+0x4>

0800e1f8 <_free_r>:
 800e1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	d044      	beq.n	800e288 <_free_r+0x90>
 800e1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e202:	9001      	str	r0, [sp, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f1a1 0404 	sub.w	r4, r1, #4
 800e20a:	bfb8      	it	lt
 800e20c:	18e4      	addlt	r4, r4, r3
 800e20e:	f000 fc6d 	bl	800eaec <__malloc_lock>
 800e212:	4a1e      	ldr	r2, [pc, #120]	; (800e28c <_free_r+0x94>)
 800e214:	9801      	ldr	r0, [sp, #4]
 800e216:	6813      	ldr	r3, [r2, #0]
 800e218:	b933      	cbnz	r3, 800e228 <_free_r+0x30>
 800e21a:	6063      	str	r3, [r4, #4]
 800e21c:	6014      	str	r4, [r2, #0]
 800e21e:	b003      	add	sp, #12
 800e220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e224:	f000 bc68 	b.w	800eaf8 <__malloc_unlock>
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d908      	bls.n	800e23e <_free_r+0x46>
 800e22c:	6825      	ldr	r5, [r4, #0]
 800e22e:	1961      	adds	r1, r4, r5
 800e230:	428b      	cmp	r3, r1
 800e232:	bf01      	itttt	eq
 800e234:	6819      	ldreq	r1, [r3, #0]
 800e236:	685b      	ldreq	r3, [r3, #4]
 800e238:	1949      	addeq	r1, r1, r5
 800e23a:	6021      	streq	r1, [r4, #0]
 800e23c:	e7ed      	b.n	800e21a <_free_r+0x22>
 800e23e:	461a      	mov	r2, r3
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	b10b      	cbz	r3, 800e248 <_free_r+0x50>
 800e244:	42a3      	cmp	r3, r4
 800e246:	d9fa      	bls.n	800e23e <_free_r+0x46>
 800e248:	6811      	ldr	r1, [r2, #0]
 800e24a:	1855      	adds	r5, r2, r1
 800e24c:	42a5      	cmp	r5, r4
 800e24e:	d10b      	bne.n	800e268 <_free_r+0x70>
 800e250:	6824      	ldr	r4, [r4, #0]
 800e252:	4421      	add	r1, r4
 800e254:	1854      	adds	r4, r2, r1
 800e256:	42a3      	cmp	r3, r4
 800e258:	6011      	str	r1, [r2, #0]
 800e25a:	d1e0      	bne.n	800e21e <_free_r+0x26>
 800e25c:	681c      	ldr	r4, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	6053      	str	r3, [r2, #4]
 800e262:	4421      	add	r1, r4
 800e264:	6011      	str	r1, [r2, #0]
 800e266:	e7da      	b.n	800e21e <_free_r+0x26>
 800e268:	d902      	bls.n	800e270 <_free_r+0x78>
 800e26a:	230c      	movs	r3, #12
 800e26c:	6003      	str	r3, [r0, #0]
 800e26e:	e7d6      	b.n	800e21e <_free_r+0x26>
 800e270:	6825      	ldr	r5, [r4, #0]
 800e272:	1961      	adds	r1, r4, r5
 800e274:	428b      	cmp	r3, r1
 800e276:	bf04      	itt	eq
 800e278:	6819      	ldreq	r1, [r3, #0]
 800e27a:	685b      	ldreq	r3, [r3, #4]
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	bf04      	itt	eq
 800e280:	1949      	addeq	r1, r1, r5
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	6054      	str	r4, [r2, #4]
 800e286:	e7ca      	b.n	800e21e <_free_r+0x26>
 800e288:	b003      	add	sp, #12
 800e28a:	bd30      	pop	{r4, r5, pc}
 800e28c:	20003b34 	.word	0x20003b34

0800e290 <sbrk_aligned>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	4e0e      	ldr	r6, [pc, #56]	; (800e2cc <sbrk_aligned+0x3c>)
 800e294:	460c      	mov	r4, r1
 800e296:	6831      	ldr	r1, [r6, #0]
 800e298:	4605      	mov	r5, r0
 800e29a:	b911      	cbnz	r1, 800e2a2 <sbrk_aligned+0x12>
 800e29c:	f000 f8a4 	bl	800e3e8 <_sbrk_r>
 800e2a0:	6030      	str	r0, [r6, #0]
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f000 f89f 	bl	800e3e8 <_sbrk_r>
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	d00a      	beq.n	800e2c4 <sbrk_aligned+0x34>
 800e2ae:	1cc4      	adds	r4, r0, #3
 800e2b0:	f024 0403 	bic.w	r4, r4, #3
 800e2b4:	42a0      	cmp	r0, r4
 800e2b6:	d007      	beq.n	800e2c8 <sbrk_aligned+0x38>
 800e2b8:	1a21      	subs	r1, r4, r0
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f000 f894 	bl	800e3e8 <_sbrk_r>
 800e2c0:	3001      	adds	r0, #1
 800e2c2:	d101      	bne.n	800e2c8 <sbrk_aligned+0x38>
 800e2c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	20003b38 	.word	0x20003b38

0800e2d0 <_malloc_r>:
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d4:	1ccd      	adds	r5, r1, #3
 800e2d6:	f025 0503 	bic.w	r5, r5, #3
 800e2da:	3508      	adds	r5, #8
 800e2dc:	2d0c      	cmp	r5, #12
 800e2de:	bf38      	it	cc
 800e2e0:	250c      	movcc	r5, #12
 800e2e2:	2d00      	cmp	r5, #0
 800e2e4:	4607      	mov	r7, r0
 800e2e6:	db01      	blt.n	800e2ec <_malloc_r+0x1c>
 800e2e8:	42a9      	cmp	r1, r5
 800e2ea:	d905      	bls.n	800e2f8 <_malloc_r+0x28>
 800e2ec:	230c      	movs	r3, #12
 800e2ee:	603b      	str	r3, [r7, #0]
 800e2f0:	2600      	movs	r6, #0
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f8:	4e2e      	ldr	r6, [pc, #184]	; (800e3b4 <_malloc_r+0xe4>)
 800e2fa:	f000 fbf7 	bl	800eaec <__malloc_lock>
 800e2fe:	6833      	ldr	r3, [r6, #0]
 800e300:	461c      	mov	r4, r3
 800e302:	bb34      	cbnz	r4, 800e352 <_malloc_r+0x82>
 800e304:	4629      	mov	r1, r5
 800e306:	4638      	mov	r0, r7
 800e308:	f7ff ffc2 	bl	800e290 <sbrk_aligned>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	4604      	mov	r4, r0
 800e310:	d14d      	bne.n	800e3ae <_malloc_r+0xde>
 800e312:	6834      	ldr	r4, [r6, #0]
 800e314:	4626      	mov	r6, r4
 800e316:	2e00      	cmp	r6, #0
 800e318:	d140      	bne.n	800e39c <_malloc_r+0xcc>
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	4631      	mov	r1, r6
 800e31e:	4638      	mov	r0, r7
 800e320:	eb04 0803 	add.w	r8, r4, r3
 800e324:	f000 f860 	bl	800e3e8 <_sbrk_r>
 800e328:	4580      	cmp	r8, r0
 800e32a:	d13a      	bne.n	800e3a2 <_malloc_r+0xd2>
 800e32c:	6821      	ldr	r1, [r4, #0]
 800e32e:	3503      	adds	r5, #3
 800e330:	1a6d      	subs	r5, r5, r1
 800e332:	f025 0503 	bic.w	r5, r5, #3
 800e336:	3508      	adds	r5, #8
 800e338:	2d0c      	cmp	r5, #12
 800e33a:	bf38      	it	cc
 800e33c:	250c      	movcc	r5, #12
 800e33e:	4629      	mov	r1, r5
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff ffa5 	bl	800e290 <sbrk_aligned>
 800e346:	3001      	adds	r0, #1
 800e348:	d02b      	beq.n	800e3a2 <_malloc_r+0xd2>
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	442b      	add	r3, r5
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	e00e      	b.n	800e370 <_malloc_r+0xa0>
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	1b52      	subs	r2, r2, r5
 800e356:	d41e      	bmi.n	800e396 <_malloc_r+0xc6>
 800e358:	2a0b      	cmp	r2, #11
 800e35a:	d916      	bls.n	800e38a <_malloc_r+0xba>
 800e35c:	1961      	adds	r1, r4, r5
 800e35e:	42a3      	cmp	r3, r4
 800e360:	6025      	str	r5, [r4, #0]
 800e362:	bf18      	it	ne
 800e364:	6059      	strne	r1, [r3, #4]
 800e366:	6863      	ldr	r3, [r4, #4]
 800e368:	bf08      	it	eq
 800e36a:	6031      	streq	r1, [r6, #0]
 800e36c:	5162      	str	r2, [r4, r5]
 800e36e:	604b      	str	r3, [r1, #4]
 800e370:	4638      	mov	r0, r7
 800e372:	f104 060b 	add.w	r6, r4, #11
 800e376:	f000 fbbf 	bl	800eaf8 <__malloc_unlock>
 800e37a:	f026 0607 	bic.w	r6, r6, #7
 800e37e:	1d23      	adds	r3, r4, #4
 800e380:	1af2      	subs	r2, r6, r3
 800e382:	d0b6      	beq.n	800e2f2 <_malloc_r+0x22>
 800e384:	1b9b      	subs	r3, r3, r6
 800e386:	50a3      	str	r3, [r4, r2]
 800e388:	e7b3      	b.n	800e2f2 <_malloc_r+0x22>
 800e38a:	6862      	ldr	r2, [r4, #4]
 800e38c:	42a3      	cmp	r3, r4
 800e38e:	bf0c      	ite	eq
 800e390:	6032      	streq	r2, [r6, #0]
 800e392:	605a      	strne	r2, [r3, #4]
 800e394:	e7ec      	b.n	800e370 <_malloc_r+0xa0>
 800e396:	4623      	mov	r3, r4
 800e398:	6864      	ldr	r4, [r4, #4]
 800e39a:	e7b2      	b.n	800e302 <_malloc_r+0x32>
 800e39c:	4634      	mov	r4, r6
 800e39e:	6876      	ldr	r6, [r6, #4]
 800e3a0:	e7b9      	b.n	800e316 <_malloc_r+0x46>
 800e3a2:	230c      	movs	r3, #12
 800e3a4:	603b      	str	r3, [r7, #0]
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	f000 fba6 	bl	800eaf8 <__malloc_unlock>
 800e3ac:	e7a1      	b.n	800e2f2 <_malloc_r+0x22>
 800e3ae:	6025      	str	r5, [r4, #0]
 800e3b0:	e7de      	b.n	800e370 <_malloc_r+0xa0>
 800e3b2:	bf00      	nop
 800e3b4:	20003b34 	.word	0x20003b34

0800e3b8 <iprintf>:
 800e3b8:	b40f      	push	{r0, r1, r2, r3}
 800e3ba:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <iprintf+0x2c>)
 800e3bc:	b513      	push	{r0, r1, r4, lr}
 800e3be:	681c      	ldr	r4, [r3, #0]
 800e3c0:	b124      	cbz	r4, 800e3cc <iprintf+0x14>
 800e3c2:	69a3      	ldr	r3, [r4, #24]
 800e3c4:	b913      	cbnz	r3, 800e3cc <iprintf+0x14>
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 fa8a 	bl	800e8e0 <__sinit>
 800e3cc:	ab05      	add	r3, sp, #20
 800e3ce:	9a04      	ldr	r2, [sp, #16]
 800e3d0:	68a1      	ldr	r1, [r4, #8]
 800e3d2:	9301      	str	r3, [sp, #4]
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 fbbf 	bl	800eb58 <_vfiprintf_r>
 800e3da:	b002      	add	sp, #8
 800e3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e0:	b004      	add	sp, #16
 800e3e2:	4770      	bx	lr
 800e3e4:	20000030 	.word	0x20000030

0800e3e8 <_sbrk_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	4d06      	ldr	r5, [pc, #24]	; (800e404 <_sbrk_r+0x1c>)
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	4608      	mov	r0, r1
 800e3f2:	602b      	str	r3, [r5, #0]
 800e3f4:	f7f4 fcfa 	bl	8002dec <_sbrk>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d102      	bne.n	800e402 <_sbrk_r+0x1a>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	b103      	cbz	r3, 800e402 <_sbrk_r+0x1a>
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	20003b40 	.word	0x20003b40

0800e408 <setvbuf>:
 800e408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e40c:	461d      	mov	r5, r3
 800e40e:	4b5d      	ldr	r3, [pc, #372]	; (800e584 <setvbuf+0x17c>)
 800e410:	681f      	ldr	r7, [r3, #0]
 800e412:	4604      	mov	r4, r0
 800e414:	460e      	mov	r6, r1
 800e416:	4690      	mov	r8, r2
 800e418:	b127      	cbz	r7, 800e424 <setvbuf+0x1c>
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	b913      	cbnz	r3, 800e424 <setvbuf+0x1c>
 800e41e:	4638      	mov	r0, r7
 800e420:	f000 fa5e 	bl	800e8e0 <__sinit>
 800e424:	4b58      	ldr	r3, [pc, #352]	; (800e588 <setvbuf+0x180>)
 800e426:	429c      	cmp	r4, r3
 800e428:	d167      	bne.n	800e4fa <setvbuf+0xf2>
 800e42a:	687c      	ldr	r4, [r7, #4]
 800e42c:	f1b8 0f02 	cmp.w	r8, #2
 800e430:	d006      	beq.n	800e440 <setvbuf+0x38>
 800e432:	f1b8 0f01 	cmp.w	r8, #1
 800e436:	f200 809f 	bhi.w	800e578 <setvbuf+0x170>
 800e43a:	2d00      	cmp	r5, #0
 800e43c:	f2c0 809c 	blt.w	800e578 <setvbuf+0x170>
 800e440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e442:	07db      	lsls	r3, r3, #31
 800e444:	d405      	bmi.n	800e452 <setvbuf+0x4a>
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	0598      	lsls	r0, r3, #22
 800e44a:	d402      	bmi.n	800e452 <setvbuf+0x4a>
 800e44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e44e:	f000 fae5 	bl	800ea1c <__retarget_lock_acquire_recursive>
 800e452:	4621      	mov	r1, r4
 800e454:	4638      	mov	r0, r7
 800e456:	f000 f9af 	bl	800e7b8 <_fflush_r>
 800e45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e45c:	b141      	cbz	r1, 800e470 <setvbuf+0x68>
 800e45e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e462:	4299      	cmp	r1, r3
 800e464:	d002      	beq.n	800e46c <setvbuf+0x64>
 800e466:	4638      	mov	r0, r7
 800e468:	f7ff fec6 	bl	800e1f8 <_free_r>
 800e46c:	2300      	movs	r3, #0
 800e46e:	6363      	str	r3, [r4, #52]	; 0x34
 800e470:	2300      	movs	r3, #0
 800e472:	61a3      	str	r3, [r4, #24]
 800e474:	6063      	str	r3, [r4, #4]
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	0619      	lsls	r1, r3, #24
 800e47a:	d503      	bpl.n	800e484 <setvbuf+0x7c>
 800e47c:	6921      	ldr	r1, [r4, #16]
 800e47e:	4638      	mov	r0, r7
 800e480:	f7ff feba 	bl	800e1f8 <_free_r>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e48a:	f023 0303 	bic.w	r3, r3, #3
 800e48e:	f1b8 0f02 	cmp.w	r8, #2
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	d06c      	beq.n	800e570 <setvbuf+0x168>
 800e496:	ab01      	add	r3, sp, #4
 800e498:	466a      	mov	r2, sp
 800e49a:	4621      	mov	r1, r4
 800e49c:	4638      	mov	r0, r7
 800e49e:	f000 fabf 	bl	800ea20 <__swhatbuf_r>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	4318      	orrs	r0, r3
 800e4a6:	81a0      	strh	r0, [r4, #12]
 800e4a8:	2d00      	cmp	r5, #0
 800e4aa:	d130      	bne.n	800e50e <setvbuf+0x106>
 800e4ac:	9d00      	ldr	r5, [sp, #0]
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff fe7c 	bl	800e1ac <malloc>
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d155      	bne.n	800e566 <setvbuf+0x15e>
 800e4ba:	f8dd 9000 	ldr.w	r9, [sp]
 800e4be:	45a9      	cmp	r9, r5
 800e4c0:	d14a      	bne.n	800e558 <setvbuf+0x150>
 800e4c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	60a2      	str	r2, [r4, #8]
 800e4ca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e4ce:	6022      	str	r2, [r4, #0]
 800e4d0:	6122      	str	r2, [r4, #16]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d8:	6162      	str	r2, [r4, #20]
 800e4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4dc:	f043 0302 	orr.w	r3, r3, #2
 800e4e0:	07d2      	lsls	r2, r2, #31
 800e4e2:	81a3      	strh	r3, [r4, #12]
 800e4e4:	d405      	bmi.n	800e4f2 <setvbuf+0xea>
 800e4e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e4ea:	d102      	bne.n	800e4f2 <setvbuf+0xea>
 800e4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4ee:	f000 fa96 	bl	800ea1e <__retarget_lock_release_recursive>
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	b003      	add	sp, #12
 800e4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	4b24      	ldr	r3, [pc, #144]	; (800e58c <setvbuf+0x184>)
 800e4fc:	429c      	cmp	r4, r3
 800e4fe:	d101      	bne.n	800e504 <setvbuf+0xfc>
 800e500:	68bc      	ldr	r4, [r7, #8]
 800e502:	e793      	b.n	800e42c <setvbuf+0x24>
 800e504:	4b22      	ldr	r3, [pc, #136]	; (800e590 <setvbuf+0x188>)
 800e506:	429c      	cmp	r4, r3
 800e508:	bf08      	it	eq
 800e50a:	68fc      	ldreq	r4, [r7, #12]
 800e50c:	e78e      	b.n	800e42c <setvbuf+0x24>
 800e50e:	2e00      	cmp	r6, #0
 800e510:	d0cd      	beq.n	800e4ae <setvbuf+0xa6>
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	b913      	cbnz	r3, 800e51c <setvbuf+0x114>
 800e516:	4638      	mov	r0, r7
 800e518:	f000 f9e2 	bl	800e8e0 <__sinit>
 800e51c:	f1b8 0f01 	cmp.w	r8, #1
 800e520:	bf08      	it	eq
 800e522:	89a3      	ldrheq	r3, [r4, #12]
 800e524:	6026      	str	r6, [r4, #0]
 800e526:	bf04      	itt	eq
 800e528:	f043 0301 	orreq.w	r3, r3, #1
 800e52c:	81a3      	strheq	r3, [r4, #12]
 800e52e:	89a2      	ldrh	r2, [r4, #12]
 800e530:	f012 0308 	ands.w	r3, r2, #8
 800e534:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e538:	d01c      	beq.n	800e574 <setvbuf+0x16c>
 800e53a:	07d3      	lsls	r3, r2, #31
 800e53c:	bf41      	itttt	mi
 800e53e:	2300      	movmi	r3, #0
 800e540:	426d      	negmi	r5, r5
 800e542:	60a3      	strmi	r3, [r4, #8]
 800e544:	61a5      	strmi	r5, [r4, #24]
 800e546:	bf58      	it	pl
 800e548:	60a5      	strpl	r5, [r4, #8]
 800e54a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e54c:	f015 0501 	ands.w	r5, r5, #1
 800e550:	d115      	bne.n	800e57e <setvbuf+0x176>
 800e552:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e556:	e7c8      	b.n	800e4ea <setvbuf+0xe2>
 800e558:	4648      	mov	r0, r9
 800e55a:	f7ff fe27 	bl	800e1ac <malloc>
 800e55e:	4606      	mov	r6, r0
 800e560:	2800      	cmp	r0, #0
 800e562:	d0ae      	beq.n	800e4c2 <setvbuf+0xba>
 800e564:	464d      	mov	r5, r9
 800e566:	89a3      	ldrh	r3, [r4, #12]
 800e568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56c:	81a3      	strh	r3, [r4, #12]
 800e56e:	e7d0      	b.n	800e512 <setvbuf+0x10a>
 800e570:	2500      	movs	r5, #0
 800e572:	e7a8      	b.n	800e4c6 <setvbuf+0xbe>
 800e574:	60a3      	str	r3, [r4, #8]
 800e576:	e7e8      	b.n	800e54a <setvbuf+0x142>
 800e578:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e57c:	e7b9      	b.n	800e4f2 <setvbuf+0xea>
 800e57e:	2500      	movs	r5, #0
 800e580:	e7b7      	b.n	800e4f2 <setvbuf+0xea>
 800e582:	bf00      	nop
 800e584:	20000030 	.word	0x20000030
 800e588:	0800f8c4 	.word	0x0800f8c4
 800e58c:	0800f8e4 	.word	0x0800f8e4
 800e590:	0800f8a4 	.word	0x0800f8a4

0800e594 <_strtol_l.constprop.0>:
 800e594:	2b01      	cmp	r3, #1
 800e596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59a:	d001      	beq.n	800e5a0 <_strtol_l.constprop.0+0xc>
 800e59c:	2b24      	cmp	r3, #36	; 0x24
 800e59e:	d906      	bls.n	800e5ae <_strtol_l.constprop.0+0x1a>
 800e5a0:	f7ff fdda 	bl	800e158 <__errno>
 800e5a4:	2316      	movs	r3, #22
 800e5a6:	6003      	str	r3, [r0, #0]
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e694 <_strtol_l.constprop.0+0x100>
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	462e      	mov	r6, r5
 800e5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e5be:	f017 0708 	ands.w	r7, r7, #8
 800e5c2:	d1f7      	bne.n	800e5b4 <_strtol_l.constprop.0+0x20>
 800e5c4:	2c2d      	cmp	r4, #45	; 0x2d
 800e5c6:	d132      	bne.n	800e62e <_strtol_l.constprop.0+0x9a>
 800e5c8:	782c      	ldrb	r4, [r5, #0]
 800e5ca:	2701      	movs	r7, #1
 800e5cc:	1cb5      	adds	r5, r6, #2
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d05b      	beq.n	800e68a <_strtol_l.constprop.0+0xf6>
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d109      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e5d6:	2c30      	cmp	r4, #48	; 0x30
 800e5d8:	d107      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e5da:	782c      	ldrb	r4, [r5, #0]
 800e5dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e5e0:	2c58      	cmp	r4, #88	; 0x58
 800e5e2:	d14d      	bne.n	800e680 <_strtol_l.constprop.0+0xec>
 800e5e4:	786c      	ldrb	r4, [r5, #1]
 800e5e6:	2310      	movs	r3, #16
 800e5e8:	3502      	adds	r5, #2
 800e5ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e5ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e5f2:	f04f 0c00 	mov.w	ip, #0
 800e5f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e5fa:	4666      	mov	r6, ip
 800e5fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e600:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e604:	f1be 0f09 	cmp.w	lr, #9
 800e608:	d816      	bhi.n	800e638 <_strtol_l.constprop.0+0xa4>
 800e60a:	4674      	mov	r4, lr
 800e60c:	42a3      	cmp	r3, r4
 800e60e:	dd24      	ble.n	800e65a <_strtol_l.constprop.0+0xc6>
 800e610:	f1bc 0f00 	cmp.w	ip, #0
 800e614:	db1e      	blt.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e616:	45b1      	cmp	r9, r6
 800e618:	d31c      	bcc.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e61a:	d101      	bne.n	800e620 <_strtol_l.constprop.0+0x8c>
 800e61c:	45a2      	cmp	sl, r4
 800e61e:	db19      	blt.n	800e654 <_strtol_l.constprop.0+0xc0>
 800e620:	fb06 4603 	mla	r6, r6, r3, r4
 800e624:	f04f 0c01 	mov.w	ip, #1
 800e628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e62c:	e7e8      	b.n	800e600 <_strtol_l.constprop.0+0x6c>
 800e62e:	2c2b      	cmp	r4, #43	; 0x2b
 800e630:	bf04      	itt	eq
 800e632:	782c      	ldrbeq	r4, [r5, #0]
 800e634:	1cb5      	addeq	r5, r6, #2
 800e636:	e7ca      	b.n	800e5ce <_strtol_l.constprop.0+0x3a>
 800e638:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e63c:	f1be 0f19 	cmp.w	lr, #25
 800e640:	d801      	bhi.n	800e646 <_strtol_l.constprop.0+0xb2>
 800e642:	3c37      	subs	r4, #55	; 0x37
 800e644:	e7e2      	b.n	800e60c <_strtol_l.constprop.0+0x78>
 800e646:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e64a:	f1be 0f19 	cmp.w	lr, #25
 800e64e:	d804      	bhi.n	800e65a <_strtol_l.constprop.0+0xc6>
 800e650:	3c57      	subs	r4, #87	; 0x57
 800e652:	e7db      	b.n	800e60c <_strtol_l.constprop.0+0x78>
 800e654:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e658:	e7e6      	b.n	800e628 <_strtol_l.constprop.0+0x94>
 800e65a:	f1bc 0f00 	cmp.w	ip, #0
 800e65e:	da05      	bge.n	800e66c <_strtol_l.constprop.0+0xd8>
 800e660:	2322      	movs	r3, #34	; 0x22
 800e662:	6003      	str	r3, [r0, #0]
 800e664:	4646      	mov	r6, r8
 800e666:	b942      	cbnz	r2, 800e67a <_strtol_l.constprop.0+0xe6>
 800e668:	4630      	mov	r0, r6
 800e66a:	e79e      	b.n	800e5aa <_strtol_l.constprop.0+0x16>
 800e66c:	b107      	cbz	r7, 800e670 <_strtol_l.constprop.0+0xdc>
 800e66e:	4276      	negs	r6, r6
 800e670:	2a00      	cmp	r2, #0
 800e672:	d0f9      	beq.n	800e668 <_strtol_l.constprop.0+0xd4>
 800e674:	f1bc 0f00 	cmp.w	ip, #0
 800e678:	d000      	beq.n	800e67c <_strtol_l.constprop.0+0xe8>
 800e67a:	1e69      	subs	r1, r5, #1
 800e67c:	6011      	str	r1, [r2, #0]
 800e67e:	e7f3      	b.n	800e668 <_strtol_l.constprop.0+0xd4>
 800e680:	2430      	movs	r4, #48	; 0x30
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1b1      	bne.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e686:	2308      	movs	r3, #8
 800e688:	e7af      	b.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e68a:	2c30      	cmp	r4, #48	; 0x30
 800e68c:	d0a5      	beq.n	800e5da <_strtol_l.constprop.0+0x46>
 800e68e:	230a      	movs	r3, #10
 800e690:	e7ab      	b.n	800e5ea <_strtol_l.constprop.0+0x56>
 800e692:	bf00      	nop
 800e694:	0800f7a1 	.word	0x0800f7a1

0800e698 <strtol>:
 800e698:	4613      	mov	r3, r2
 800e69a:	460a      	mov	r2, r1
 800e69c:	4601      	mov	r1, r0
 800e69e:	4802      	ldr	r0, [pc, #8]	; (800e6a8 <strtol+0x10>)
 800e6a0:	6800      	ldr	r0, [r0, #0]
 800e6a2:	f7ff bf77 	b.w	800e594 <_strtol_l.constprop.0>
 800e6a6:	bf00      	nop
 800e6a8:	20000030 	.word	0x20000030

0800e6ac <__sflush_r>:
 800e6ac:	898a      	ldrh	r2, [r1, #12]
 800e6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	0710      	lsls	r0, r2, #28
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	d458      	bmi.n	800e76c <__sflush_r+0xc0>
 800e6ba:	684b      	ldr	r3, [r1, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dc05      	bgt.n	800e6cc <__sflush_r+0x20>
 800e6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	dc02      	bgt.n	800e6cc <__sflush_r+0x20>
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	d0f9      	beq.n	800e6c6 <__sflush_r+0x1a>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6d8:	682f      	ldr	r7, [r5, #0]
 800e6da:	602b      	str	r3, [r5, #0]
 800e6dc:	d032      	beq.n	800e744 <__sflush_r+0x98>
 800e6de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	075a      	lsls	r2, r3, #29
 800e6e4:	d505      	bpl.n	800e6f2 <__sflush_r+0x46>
 800e6e6:	6863      	ldr	r3, [r4, #4]
 800e6e8:	1ac0      	subs	r0, r0, r3
 800e6ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6ec:	b10b      	cbz	r3, 800e6f2 <__sflush_r+0x46>
 800e6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6f0:	1ac0      	subs	r0, r0, r3
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6f8:	6a21      	ldr	r1, [r4, #32]
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	47b0      	blx	r6
 800e6fe:	1c43      	adds	r3, r0, #1
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	d106      	bne.n	800e712 <__sflush_r+0x66>
 800e704:	6829      	ldr	r1, [r5, #0]
 800e706:	291d      	cmp	r1, #29
 800e708:	d82c      	bhi.n	800e764 <__sflush_r+0xb8>
 800e70a:	4a2a      	ldr	r2, [pc, #168]	; (800e7b4 <__sflush_r+0x108>)
 800e70c:	40ca      	lsrs	r2, r1
 800e70e:	07d6      	lsls	r6, r2, #31
 800e710:	d528      	bpl.n	800e764 <__sflush_r+0xb8>
 800e712:	2200      	movs	r2, #0
 800e714:	6062      	str	r2, [r4, #4]
 800e716:	04d9      	lsls	r1, r3, #19
 800e718:	6922      	ldr	r2, [r4, #16]
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	d504      	bpl.n	800e728 <__sflush_r+0x7c>
 800e71e:	1c42      	adds	r2, r0, #1
 800e720:	d101      	bne.n	800e726 <__sflush_r+0x7a>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	b903      	cbnz	r3, 800e728 <__sflush_r+0x7c>
 800e726:	6560      	str	r0, [r4, #84]	; 0x54
 800e728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e72a:	602f      	str	r7, [r5, #0]
 800e72c:	2900      	cmp	r1, #0
 800e72e:	d0ca      	beq.n	800e6c6 <__sflush_r+0x1a>
 800e730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e734:	4299      	cmp	r1, r3
 800e736:	d002      	beq.n	800e73e <__sflush_r+0x92>
 800e738:	4628      	mov	r0, r5
 800e73a:	f7ff fd5d 	bl	800e1f8 <_free_r>
 800e73e:	2000      	movs	r0, #0
 800e740:	6360      	str	r0, [r4, #52]	; 0x34
 800e742:	e7c1      	b.n	800e6c8 <__sflush_r+0x1c>
 800e744:	6a21      	ldr	r1, [r4, #32]
 800e746:	2301      	movs	r3, #1
 800e748:	4628      	mov	r0, r5
 800e74a:	47b0      	blx	r6
 800e74c:	1c41      	adds	r1, r0, #1
 800e74e:	d1c7      	bne.n	800e6e0 <__sflush_r+0x34>
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0c4      	beq.n	800e6e0 <__sflush_r+0x34>
 800e756:	2b1d      	cmp	r3, #29
 800e758:	d001      	beq.n	800e75e <__sflush_r+0xb2>
 800e75a:	2b16      	cmp	r3, #22
 800e75c:	d101      	bne.n	800e762 <__sflush_r+0xb6>
 800e75e:	602f      	str	r7, [r5, #0]
 800e760:	e7b1      	b.n	800e6c6 <__sflush_r+0x1a>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e768:	81a3      	strh	r3, [r4, #12]
 800e76a:	e7ad      	b.n	800e6c8 <__sflush_r+0x1c>
 800e76c:	690f      	ldr	r7, [r1, #16]
 800e76e:	2f00      	cmp	r7, #0
 800e770:	d0a9      	beq.n	800e6c6 <__sflush_r+0x1a>
 800e772:	0793      	lsls	r3, r2, #30
 800e774:	680e      	ldr	r6, [r1, #0]
 800e776:	bf08      	it	eq
 800e778:	694b      	ldreq	r3, [r1, #20]
 800e77a:	600f      	str	r7, [r1, #0]
 800e77c:	bf18      	it	ne
 800e77e:	2300      	movne	r3, #0
 800e780:	eba6 0807 	sub.w	r8, r6, r7
 800e784:	608b      	str	r3, [r1, #8]
 800e786:	f1b8 0f00 	cmp.w	r8, #0
 800e78a:	dd9c      	ble.n	800e6c6 <__sflush_r+0x1a>
 800e78c:	6a21      	ldr	r1, [r4, #32]
 800e78e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e790:	4643      	mov	r3, r8
 800e792:	463a      	mov	r2, r7
 800e794:	4628      	mov	r0, r5
 800e796:	47b0      	blx	r6
 800e798:	2800      	cmp	r0, #0
 800e79a:	dc06      	bgt.n	800e7aa <__sflush_r+0xfe>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a2:	81a3      	strh	r3, [r4, #12]
 800e7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7a8:	e78e      	b.n	800e6c8 <__sflush_r+0x1c>
 800e7aa:	4407      	add	r7, r0
 800e7ac:	eba8 0800 	sub.w	r8, r8, r0
 800e7b0:	e7e9      	b.n	800e786 <__sflush_r+0xda>
 800e7b2:	bf00      	nop
 800e7b4:	20400001 	.word	0x20400001

0800e7b8 <_fflush_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	690b      	ldr	r3, [r1, #16]
 800e7bc:	4605      	mov	r5, r0
 800e7be:	460c      	mov	r4, r1
 800e7c0:	b913      	cbnz	r3, 800e7c8 <_fflush_r+0x10>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	b118      	cbz	r0, 800e7d2 <_fflush_r+0x1a>
 800e7ca:	6983      	ldr	r3, [r0, #24]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <_fflush_r+0x1a>
 800e7ce:	f000 f887 	bl	800e8e0 <__sinit>
 800e7d2:	4b14      	ldr	r3, [pc, #80]	; (800e824 <_fflush_r+0x6c>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d11b      	bne.n	800e810 <_fflush_r+0x58>
 800e7d8:	686c      	ldr	r4, [r5, #4]
 800e7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d0ef      	beq.n	800e7c2 <_fflush_r+0xa>
 800e7e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7e4:	07d0      	lsls	r0, r2, #31
 800e7e6:	d404      	bmi.n	800e7f2 <_fflush_r+0x3a>
 800e7e8:	0599      	lsls	r1, r3, #22
 800e7ea:	d402      	bmi.n	800e7f2 <_fflush_r+0x3a>
 800e7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ee:	f000 f915 	bl	800ea1c <__retarget_lock_acquire_recursive>
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	f7ff ff59 	bl	800e6ac <__sflush_r>
 800e7fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7fc:	07da      	lsls	r2, r3, #31
 800e7fe:	4605      	mov	r5, r0
 800e800:	d4e0      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e802:	89a3      	ldrh	r3, [r4, #12]
 800e804:	059b      	lsls	r3, r3, #22
 800e806:	d4dd      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e80a:	f000 f908 	bl	800ea1e <__retarget_lock_release_recursive>
 800e80e:	e7d9      	b.n	800e7c4 <_fflush_r+0xc>
 800e810:	4b05      	ldr	r3, [pc, #20]	; (800e828 <_fflush_r+0x70>)
 800e812:	429c      	cmp	r4, r3
 800e814:	d101      	bne.n	800e81a <_fflush_r+0x62>
 800e816:	68ac      	ldr	r4, [r5, #8]
 800e818:	e7df      	b.n	800e7da <_fflush_r+0x22>
 800e81a:	4b04      	ldr	r3, [pc, #16]	; (800e82c <_fflush_r+0x74>)
 800e81c:	429c      	cmp	r4, r3
 800e81e:	bf08      	it	eq
 800e820:	68ec      	ldreq	r4, [r5, #12]
 800e822:	e7da      	b.n	800e7da <_fflush_r+0x22>
 800e824:	0800f8c4 	.word	0x0800f8c4
 800e828:	0800f8e4 	.word	0x0800f8e4
 800e82c:	0800f8a4 	.word	0x0800f8a4

0800e830 <std>:
 800e830:	2300      	movs	r3, #0
 800e832:	b510      	push	{r4, lr}
 800e834:	4604      	mov	r4, r0
 800e836:	e9c0 3300 	strd	r3, r3, [r0]
 800e83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e83e:	6083      	str	r3, [r0, #8]
 800e840:	8181      	strh	r1, [r0, #12]
 800e842:	6643      	str	r3, [r0, #100]	; 0x64
 800e844:	81c2      	strh	r2, [r0, #14]
 800e846:	6183      	str	r3, [r0, #24]
 800e848:	4619      	mov	r1, r3
 800e84a:	2208      	movs	r2, #8
 800e84c:	305c      	adds	r0, #92	; 0x5c
 800e84e:	f7ff fccb 	bl	800e1e8 <memset>
 800e852:	4b05      	ldr	r3, [pc, #20]	; (800e868 <std+0x38>)
 800e854:	6263      	str	r3, [r4, #36]	; 0x24
 800e856:	4b05      	ldr	r3, [pc, #20]	; (800e86c <std+0x3c>)
 800e858:	62a3      	str	r3, [r4, #40]	; 0x28
 800e85a:	4b05      	ldr	r3, [pc, #20]	; (800e870 <std+0x40>)
 800e85c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e85e:	4b05      	ldr	r3, [pc, #20]	; (800e874 <std+0x44>)
 800e860:	6224      	str	r4, [r4, #32]
 800e862:	6323      	str	r3, [r4, #48]	; 0x30
 800e864:	bd10      	pop	{r4, pc}
 800e866:	bf00      	nop
 800e868:	0800f0e1 	.word	0x0800f0e1
 800e86c:	0800f103 	.word	0x0800f103
 800e870:	0800f13b 	.word	0x0800f13b
 800e874:	0800f15f 	.word	0x0800f15f

0800e878 <_cleanup_r>:
 800e878:	4901      	ldr	r1, [pc, #4]	; (800e880 <_cleanup_r+0x8>)
 800e87a:	f000 b8af 	b.w	800e9dc <_fwalk_reent>
 800e87e:	bf00      	nop
 800e880:	0800e7b9 	.word	0x0800e7b9

0800e884 <__sfmoreglue>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	2268      	movs	r2, #104	; 0x68
 800e888:	1e4d      	subs	r5, r1, #1
 800e88a:	4355      	muls	r5, r2
 800e88c:	460e      	mov	r6, r1
 800e88e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e892:	f7ff fd1d 	bl	800e2d0 <_malloc_r>
 800e896:	4604      	mov	r4, r0
 800e898:	b140      	cbz	r0, 800e8ac <__sfmoreglue+0x28>
 800e89a:	2100      	movs	r1, #0
 800e89c:	e9c0 1600 	strd	r1, r6, [r0]
 800e8a0:	300c      	adds	r0, #12
 800e8a2:	60a0      	str	r0, [r4, #8]
 800e8a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8a8:	f7ff fc9e 	bl	800e1e8 <memset>
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}

0800e8b0 <__sfp_lock_acquire>:
 800e8b0:	4801      	ldr	r0, [pc, #4]	; (800e8b8 <__sfp_lock_acquire+0x8>)
 800e8b2:	f000 b8b3 	b.w	800ea1c <__retarget_lock_acquire_recursive>
 800e8b6:	bf00      	nop
 800e8b8:	20003b3d 	.word	0x20003b3d

0800e8bc <__sfp_lock_release>:
 800e8bc:	4801      	ldr	r0, [pc, #4]	; (800e8c4 <__sfp_lock_release+0x8>)
 800e8be:	f000 b8ae 	b.w	800ea1e <__retarget_lock_release_recursive>
 800e8c2:	bf00      	nop
 800e8c4:	20003b3d 	.word	0x20003b3d

0800e8c8 <__sinit_lock_acquire>:
 800e8c8:	4801      	ldr	r0, [pc, #4]	; (800e8d0 <__sinit_lock_acquire+0x8>)
 800e8ca:	f000 b8a7 	b.w	800ea1c <__retarget_lock_acquire_recursive>
 800e8ce:	bf00      	nop
 800e8d0:	20003b3e 	.word	0x20003b3e

0800e8d4 <__sinit_lock_release>:
 800e8d4:	4801      	ldr	r0, [pc, #4]	; (800e8dc <__sinit_lock_release+0x8>)
 800e8d6:	f000 b8a2 	b.w	800ea1e <__retarget_lock_release_recursive>
 800e8da:	bf00      	nop
 800e8dc:	20003b3e 	.word	0x20003b3e

0800e8e0 <__sinit>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	f7ff fff0 	bl	800e8c8 <__sinit_lock_acquire>
 800e8e8:	69a3      	ldr	r3, [r4, #24]
 800e8ea:	b11b      	cbz	r3, 800e8f4 <__sinit+0x14>
 800e8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8f0:	f7ff bff0 	b.w	800e8d4 <__sinit_lock_release>
 800e8f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e8f8:	6523      	str	r3, [r4, #80]	; 0x50
 800e8fa:	4b13      	ldr	r3, [pc, #76]	; (800e948 <__sinit+0x68>)
 800e8fc:	4a13      	ldr	r2, [pc, #76]	; (800e94c <__sinit+0x6c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	62a2      	str	r2, [r4, #40]	; 0x28
 800e902:	42a3      	cmp	r3, r4
 800e904:	bf04      	itt	eq
 800e906:	2301      	moveq	r3, #1
 800e908:	61a3      	streq	r3, [r4, #24]
 800e90a:	4620      	mov	r0, r4
 800e90c:	f000 f820 	bl	800e950 <__sfp>
 800e910:	6060      	str	r0, [r4, #4]
 800e912:	4620      	mov	r0, r4
 800e914:	f000 f81c 	bl	800e950 <__sfp>
 800e918:	60a0      	str	r0, [r4, #8]
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 f818 	bl	800e950 <__sfp>
 800e920:	2200      	movs	r2, #0
 800e922:	60e0      	str	r0, [r4, #12]
 800e924:	2104      	movs	r1, #4
 800e926:	6860      	ldr	r0, [r4, #4]
 800e928:	f7ff ff82 	bl	800e830 <std>
 800e92c:	68a0      	ldr	r0, [r4, #8]
 800e92e:	2201      	movs	r2, #1
 800e930:	2109      	movs	r1, #9
 800e932:	f7ff ff7d 	bl	800e830 <std>
 800e936:	68e0      	ldr	r0, [r4, #12]
 800e938:	2202      	movs	r2, #2
 800e93a:	2112      	movs	r1, #18
 800e93c:	f7ff ff78 	bl	800e830 <std>
 800e940:	2301      	movs	r3, #1
 800e942:	61a3      	str	r3, [r4, #24]
 800e944:	e7d2      	b.n	800e8ec <__sinit+0xc>
 800e946:	bf00      	nop
 800e948:	0800f79c 	.word	0x0800f79c
 800e94c:	0800e879 	.word	0x0800e879

0800e950 <__sfp>:
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e952:	4607      	mov	r7, r0
 800e954:	f7ff ffac 	bl	800e8b0 <__sfp_lock_acquire>
 800e958:	4b1e      	ldr	r3, [pc, #120]	; (800e9d4 <__sfp+0x84>)
 800e95a:	681e      	ldr	r6, [r3, #0]
 800e95c:	69b3      	ldr	r3, [r6, #24]
 800e95e:	b913      	cbnz	r3, 800e966 <__sfp+0x16>
 800e960:	4630      	mov	r0, r6
 800e962:	f7ff ffbd 	bl	800e8e0 <__sinit>
 800e966:	3648      	adds	r6, #72	; 0x48
 800e968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	d503      	bpl.n	800e978 <__sfp+0x28>
 800e970:	6833      	ldr	r3, [r6, #0]
 800e972:	b30b      	cbz	r3, 800e9b8 <__sfp+0x68>
 800e974:	6836      	ldr	r6, [r6, #0]
 800e976:	e7f7      	b.n	800e968 <__sfp+0x18>
 800e978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e97c:	b9d5      	cbnz	r5, 800e9b4 <__sfp+0x64>
 800e97e:	4b16      	ldr	r3, [pc, #88]	; (800e9d8 <__sfp+0x88>)
 800e980:	60e3      	str	r3, [r4, #12]
 800e982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e986:	6665      	str	r5, [r4, #100]	; 0x64
 800e988:	f000 f847 	bl	800ea1a <__retarget_lock_init_recursive>
 800e98c:	f7ff ff96 	bl	800e8bc <__sfp_lock_release>
 800e990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e998:	6025      	str	r5, [r4, #0]
 800e99a:	61a5      	str	r5, [r4, #24]
 800e99c:	2208      	movs	r2, #8
 800e99e:	4629      	mov	r1, r5
 800e9a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9a4:	f7ff fc20 	bl	800e1e8 <memset>
 800e9a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9b4:	3468      	adds	r4, #104	; 0x68
 800e9b6:	e7d9      	b.n	800e96c <__sfp+0x1c>
 800e9b8:	2104      	movs	r1, #4
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	f7ff ff62 	bl	800e884 <__sfmoreglue>
 800e9c0:	4604      	mov	r4, r0
 800e9c2:	6030      	str	r0, [r6, #0]
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d1d5      	bne.n	800e974 <__sfp+0x24>
 800e9c8:	f7ff ff78 	bl	800e8bc <__sfp_lock_release>
 800e9cc:	230c      	movs	r3, #12
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	e7ee      	b.n	800e9b0 <__sfp+0x60>
 800e9d2:	bf00      	nop
 800e9d4:	0800f79c 	.word	0x0800f79c
 800e9d8:	ffff0001 	.word	0xffff0001

0800e9dc <_fwalk_reent>:
 800e9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	4688      	mov	r8, r1
 800e9e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e9e8:	2700      	movs	r7, #0
 800e9ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9ee:	f1b9 0901 	subs.w	r9, r9, #1
 800e9f2:	d505      	bpl.n	800ea00 <_fwalk_reent+0x24>
 800e9f4:	6824      	ldr	r4, [r4, #0]
 800e9f6:	2c00      	cmp	r4, #0
 800e9f8:	d1f7      	bne.n	800e9ea <_fwalk_reent+0xe>
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea00:	89ab      	ldrh	r3, [r5, #12]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d907      	bls.n	800ea16 <_fwalk_reent+0x3a>
 800ea06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	d003      	beq.n	800ea16 <_fwalk_reent+0x3a>
 800ea0e:	4629      	mov	r1, r5
 800ea10:	4630      	mov	r0, r6
 800ea12:	47c0      	blx	r8
 800ea14:	4307      	orrs	r7, r0
 800ea16:	3568      	adds	r5, #104	; 0x68
 800ea18:	e7e9      	b.n	800e9ee <_fwalk_reent+0x12>

0800ea1a <__retarget_lock_init_recursive>:
 800ea1a:	4770      	bx	lr

0800ea1c <__retarget_lock_acquire_recursive>:
 800ea1c:	4770      	bx	lr

0800ea1e <__retarget_lock_release_recursive>:
 800ea1e:	4770      	bx	lr

0800ea20 <__swhatbuf_r>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	460e      	mov	r6, r1
 800ea24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea28:	2900      	cmp	r1, #0
 800ea2a:	b096      	sub	sp, #88	; 0x58
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	461d      	mov	r5, r3
 800ea30:	da08      	bge.n	800ea44 <__swhatbuf_r+0x24>
 800ea32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea36:	2200      	movs	r2, #0
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	061a      	lsls	r2, r3, #24
 800ea3c:	d410      	bmi.n	800ea60 <__swhatbuf_r+0x40>
 800ea3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea42:	e00e      	b.n	800ea62 <__swhatbuf_r+0x42>
 800ea44:	466a      	mov	r2, sp
 800ea46:	f000 fc71 	bl	800f32c <_fstat_r>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	dbf1      	blt.n	800ea32 <__swhatbuf_r+0x12>
 800ea4e:	9a01      	ldr	r2, [sp, #4]
 800ea50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea58:	425a      	negs	r2, r3
 800ea5a:	415a      	adcs	r2, r3
 800ea5c:	602a      	str	r2, [r5, #0]
 800ea5e:	e7ee      	b.n	800ea3e <__swhatbuf_r+0x1e>
 800ea60:	2340      	movs	r3, #64	; 0x40
 800ea62:	2000      	movs	r0, #0
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	b016      	add	sp, #88	; 0x58
 800ea68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea6c <__smakebuf_r>:
 800ea6c:	898b      	ldrh	r3, [r1, #12]
 800ea6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea70:	079d      	lsls	r5, r3, #30
 800ea72:	4606      	mov	r6, r0
 800ea74:	460c      	mov	r4, r1
 800ea76:	d507      	bpl.n	800ea88 <__smakebuf_r+0x1c>
 800ea78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	6123      	str	r3, [r4, #16]
 800ea80:	2301      	movs	r3, #1
 800ea82:	6163      	str	r3, [r4, #20]
 800ea84:	b002      	add	sp, #8
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	ab01      	add	r3, sp, #4
 800ea8a:	466a      	mov	r2, sp
 800ea8c:	f7ff ffc8 	bl	800ea20 <__swhatbuf_r>
 800ea90:	9900      	ldr	r1, [sp, #0]
 800ea92:	4605      	mov	r5, r0
 800ea94:	4630      	mov	r0, r6
 800ea96:	f7ff fc1b 	bl	800e2d0 <_malloc_r>
 800ea9a:	b948      	cbnz	r0, 800eab0 <__smakebuf_r+0x44>
 800ea9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaa0:	059a      	lsls	r2, r3, #22
 800eaa2:	d4ef      	bmi.n	800ea84 <__smakebuf_r+0x18>
 800eaa4:	f023 0303 	bic.w	r3, r3, #3
 800eaa8:	f043 0302 	orr.w	r3, r3, #2
 800eaac:	81a3      	strh	r3, [r4, #12]
 800eaae:	e7e3      	b.n	800ea78 <__smakebuf_r+0xc>
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <__smakebuf_r+0x7c>)
 800eab2:	62b3      	str	r3, [r6, #40]	; 0x28
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	6020      	str	r0, [r4, #0]
 800eab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eabc:	81a3      	strh	r3, [r4, #12]
 800eabe:	9b00      	ldr	r3, [sp, #0]
 800eac0:	6163      	str	r3, [r4, #20]
 800eac2:	9b01      	ldr	r3, [sp, #4]
 800eac4:	6120      	str	r0, [r4, #16]
 800eac6:	b15b      	cbz	r3, 800eae0 <__smakebuf_r+0x74>
 800eac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eacc:	4630      	mov	r0, r6
 800eace:	f000 fc3f 	bl	800f350 <_isatty_r>
 800ead2:	b128      	cbz	r0, 800eae0 <__smakebuf_r+0x74>
 800ead4:	89a3      	ldrh	r3, [r4, #12]
 800ead6:	f023 0303 	bic.w	r3, r3, #3
 800eada:	f043 0301 	orr.w	r3, r3, #1
 800eade:	81a3      	strh	r3, [r4, #12]
 800eae0:	89a0      	ldrh	r0, [r4, #12]
 800eae2:	4305      	orrs	r5, r0
 800eae4:	81a5      	strh	r5, [r4, #12]
 800eae6:	e7cd      	b.n	800ea84 <__smakebuf_r+0x18>
 800eae8:	0800e879 	.word	0x0800e879

0800eaec <__malloc_lock>:
 800eaec:	4801      	ldr	r0, [pc, #4]	; (800eaf4 <__malloc_lock+0x8>)
 800eaee:	f7ff bf95 	b.w	800ea1c <__retarget_lock_acquire_recursive>
 800eaf2:	bf00      	nop
 800eaf4:	20003b3c 	.word	0x20003b3c

0800eaf8 <__malloc_unlock>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	; (800eb00 <__malloc_unlock+0x8>)
 800eafa:	f7ff bf90 	b.w	800ea1e <__retarget_lock_release_recursive>
 800eafe:	bf00      	nop
 800eb00:	20003b3c 	.word	0x20003b3c

0800eb04 <__sfputc_r>:
 800eb04:	6893      	ldr	r3, [r2, #8]
 800eb06:	3b01      	subs	r3, #1
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	b410      	push	{r4}
 800eb0c:	6093      	str	r3, [r2, #8]
 800eb0e:	da08      	bge.n	800eb22 <__sfputc_r+0x1e>
 800eb10:	6994      	ldr	r4, [r2, #24]
 800eb12:	42a3      	cmp	r3, r4
 800eb14:	db01      	blt.n	800eb1a <__sfputc_r+0x16>
 800eb16:	290a      	cmp	r1, #10
 800eb18:	d103      	bne.n	800eb22 <__sfputc_r+0x1e>
 800eb1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb1e:	f000 bb23 	b.w	800f168 <__swbuf_r>
 800eb22:	6813      	ldr	r3, [r2, #0]
 800eb24:	1c58      	adds	r0, r3, #1
 800eb26:	6010      	str	r0, [r2, #0]
 800eb28:	7019      	strb	r1, [r3, #0]
 800eb2a:	4608      	mov	r0, r1
 800eb2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <__sfputs_r>:
 800eb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb34:	4606      	mov	r6, r0
 800eb36:	460f      	mov	r7, r1
 800eb38:	4614      	mov	r4, r2
 800eb3a:	18d5      	adds	r5, r2, r3
 800eb3c:	42ac      	cmp	r4, r5
 800eb3e:	d101      	bne.n	800eb44 <__sfputs_r+0x12>
 800eb40:	2000      	movs	r0, #0
 800eb42:	e007      	b.n	800eb54 <__sfputs_r+0x22>
 800eb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb48:	463a      	mov	r2, r7
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f7ff ffda 	bl	800eb04 <__sfputc_r>
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	d1f3      	bne.n	800eb3c <__sfputs_r+0xa>
 800eb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb58 <_vfiprintf_r>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	460d      	mov	r5, r1
 800eb5e:	b09d      	sub	sp, #116	; 0x74
 800eb60:	4614      	mov	r4, r2
 800eb62:	4698      	mov	r8, r3
 800eb64:	4606      	mov	r6, r0
 800eb66:	b118      	cbz	r0, 800eb70 <_vfiprintf_r+0x18>
 800eb68:	6983      	ldr	r3, [r0, #24]
 800eb6a:	b90b      	cbnz	r3, 800eb70 <_vfiprintf_r+0x18>
 800eb6c:	f7ff feb8 	bl	800e8e0 <__sinit>
 800eb70:	4b89      	ldr	r3, [pc, #548]	; (800ed98 <_vfiprintf_r+0x240>)
 800eb72:	429d      	cmp	r5, r3
 800eb74:	d11b      	bne.n	800ebae <_vfiprintf_r+0x56>
 800eb76:	6875      	ldr	r5, [r6, #4]
 800eb78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb7a:	07d9      	lsls	r1, r3, #31
 800eb7c:	d405      	bmi.n	800eb8a <_vfiprintf_r+0x32>
 800eb7e:	89ab      	ldrh	r3, [r5, #12]
 800eb80:	059a      	lsls	r2, r3, #22
 800eb82:	d402      	bmi.n	800eb8a <_vfiprintf_r+0x32>
 800eb84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb86:	f7ff ff49 	bl	800ea1c <__retarget_lock_acquire_recursive>
 800eb8a:	89ab      	ldrh	r3, [r5, #12]
 800eb8c:	071b      	lsls	r3, r3, #28
 800eb8e:	d501      	bpl.n	800eb94 <_vfiprintf_r+0x3c>
 800eb90:	692b      	ldr	r3, [r5, #16]
 800eb92:	b9eb      	cbnz	r3, 800ebd0 <_vfiprintf_r+0x78>
 800eb94:	4629      	mov	r1, r5
 800eb96:	4630      	mov	r0, r6
 800eb98:	f000 fb4a 	bl	800f230 <__swsetup_r>
 800eb9c:	b1c0      	cbz	r0, 800ebd0 <_vfiprintf_r+0x78>
 800eb9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eba0:	07dc      	lsls	r4, r3, #31
 800eba2:	d50e      	bpl.n	800ebc2 <_vfiprintf_r+0x6a>
 800eba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eba8:	b01d      	add	sp, #116	; 0x74
 800ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebae:	4b7b      	ldr	r3, [pc, #492]	; (800ed9c <_vfiprintf_r+0x244>)
 800ebb0:	429d      	cmp	r5, r3
 800ebb2:	d101      	bne.n	800ebb8 <_vfiprintf_r+0x60>
 800ebb4:	68b5      	ldr	r5, [r6, #8]
 800ebb6:	e7df      	b.n	800eb78 <_vfiprintf_r+0x20>
 800ebb8:	4b79      	ldr	r3, [pc, #484]	; (800eda0 <_vfiprintf_r+0x248>)
 800ebba:	429d      	cmp	r5, r3
 800ebbc:	bf08      	it	eq
 800ebbe:	68f5      	ldreq	r5, [r6, #12]
 800ebc0:	e7da      	b.n	800eb78 <_vfiprintf_r+0x20>
 800ebc2:	89ab      	ldrh	r3, [r5, #12]
 800ebc4:	0598      	lsls	r0, r3, #22
 800ebc6:	d4ed      	bmi.n	800eba4 <_vfiprintf_r+0x4c>
 800ebc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebca:	f7ff ff28 	bl	800ea1e <__retarget_lock_release_recursive>
 800ebce:	e7e9      	b.n	800eba4 <_vfiprintf_r+0x4c>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebd4:	2320      	movs	r3, #32
 800ebd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebda:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebde:	2330      	movs	r3, #48	; 0x30
 800ebe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eda4 <_vfiprintf_r+0x24c>
 800ebe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebe8:	f04f 0901 	mov.w	r9, #1
 800ebec:	4623      	mov	r3, r4
 800ebee:	469a      	mov	sl, r3
 800ebf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf4:	b10a      	cbz	r2, 800ebfa <_vfiprintf_r+0xa2>
 800ebf6:	2a25      	cmp	r2, #37	; 0x25
 800ebf8:	d1f9      	bne.n	800ebee <_vfiprintf_r+0x96>
 800ebfa:	ebba 0b04 	subs.w	fp, sl, r4
 800ebfe:	d00b      	beq.n	800ec18 <_vfiprintf_r+0xc0>
 800ec00:	465b      	mov	r3, fp
 800ec02:	4622      	mov	r2, r4
 800ec04:	4629      	mov	r1, r5
 800ec06:	4630      	mov	r0, r6
 800ec08:	f7ff ff93 	bl	800eb32 <__sfputs_r>
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	f000 80aa 	beq.w	800ed66 <_vfiprintf_r+0x20e>
 800ec12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec14:	445a      	add	r2, fp
 800ec16:	9209      	str	r2, [sp, #36]	; 0x24
 800ec18:	f89a 3000 	ldrb.w	r3, [sl]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 80a2 	beq.w	800ed66 <_vfiprintf_r+0x20e>
 800ec22:	2300      	movs	r3, #0
 800ec24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec2c:	f10a 0a01 	add.w	sl, sl, #1
 800ec30:	9304      	str	r3, [sp, #16]
 800ec32:	9307      	str	r3, [sp, #28]
 800ec34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec38:	931a      	str	r3, [sp, #104]	; 0x68
 800ec3a:	4654      	mov	r4, sl
 800ec3c:	2205      	movs	r2, #5
 800ec3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec42:	4858      	ldr	r0, [pc, #352]	; (800eda4 <_vfiprintf_r+0x24c>)
 800ec44:	f7f1 fad4 	bl	80001f0 <memchr>
 800ec48:	9a04      	ldr	r2, [sp, #16]
 800ec4a:	b9d8      	cbnz	r0, 800ec84 <_vfiprintf_r+0x12c>
 800ec4c:	06d1      	lsls	r1, r2, #27
 800ec4e:	bf44      	itt	mi
 800ec50:	2320      	movmi	r3, #32
 800ec52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec56:	0713      	lsls	r3, r2, #28
 800ec58:	bf44      	itt	mi
 800ec5a:	232b      	movmi	r3, #43	; 0x2b
 800ec5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec60:	f89a 3000 	ldrb.w	r3, [sl]
 800ec64:	2b2a      	cmp	r3, #42	; 0x2a
 800ec66:	d015      	beq.n	800ec94 <_vfiprintf_r+0x13c>
 800ec68:	9a07      	ldr	r2, [sp, #28]
 800ec6a:	4654      	mov	r4, sl
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	f04f 0c0a 	mov.w	ip, #10
 800ec72:	4621      	mov	r1, r4
 800ec74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec78:	3b30      	subs	r3, #48	; 0x30
 800ec7a:	2b09      	cmp	r3, #9
 800ec7c:	d94e      	bls.n	800ed1c <_vfiprintf_r+0x1c4>
 800ec7e:	b1b0      	cbz	r0, 800ecae <_vfiprintf_r+0x156>
 800ec80:	9207      	str	r2, [sp, #28]
 800ec82:	e014      	b.n	800ecae <_vfiprintf_r+0x156>
 800ec84:	eba0 0308 	sub.w	r3, r0, r8
 800ec88:	fa09 f303 	lsl.w	r3, r9, r3
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	9304      	str	r3, [sp, #16]
 800ec90:	46a2      	mov	sl, r4
 800ec92:	e7d2      	b.n	800ec3a <_vfiprintf_r+0xe2>
 800ec94:	9b03      	ldr	r3, [sp, #12]
 800ec96:	1d19      	adds	r1, r3, #4
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	9103      	str	r1, [sp, #12]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	bfbb      	ittet	lt
 800eca0:	425b      	neglt	r3, r3
 800eca2:	f042 0202 	orrlt.w	r2, r2, #2
 800eca6:	9307      	strge	r3, [sp, #28]
 800eca8:	9307      	strlt	r3, [sp, #28]
 800ecaa:	bfb8      	it	lt
 800ecac:	9204      	strlt	r2, [sp, #16]
 800ecae:	7823      	ldrb	r3, [r4, #0]
 800ecb0:	2b2e      	cmp	r3, #46	; 0x2e
 800ecb2:	d10c      	bne.n	800ecce <_vfiprintf_r+0x176>
 800ecb4:	7863      	ldrb	r3, [r4, #1]
 800ecb6:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb8:	d135      	bne.n	800ed26 <_vfiprintf_r+0x1ce>
 800ecba:	9b03      	ldr	r3, [sp, #12]
 800ecbc:	1d1a      	adds	r2, r3, #4
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	9203      	str	r2, [sp, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfb8      	it	lt
 800ecc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ecca:	3402      	adds	r4, #2
 800eccc:	9305      	str	r3, [sp, #20]
 800ecce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800edb4 <_vfiprintf_r+0x25c>
 800ecd2:	7821      	ldrb	r1, [r4, #0]
 800ecd4:	2203      	movs	r2, #3
 800ecd6:	4650      	mov	r0, sl
 800ecd8:	f7f1 fa8a 	bl	80001f0 <memchr>
 800ecdc:	b140      	cbz	r0, 800ecf0 <_vfiprintf_r+0x198>
 800ecde:	2340      	movs	r3, #64	; 0x40
 800ece0:	eba0 000a 	sub.w	r0, r0, sl
 800ece4:	fa03 f000 	lsl.w	r0, r3, r0
 800ece8:	9b04      	ldr	r3, [sp, #16]
 800ecea:	4303      	orrs	r3, r0
 800ecec:	3401      	adds	r4, #1
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf4:	482c      	ldr	r0, [pc, #176]	; (800eda8 <_vfiprintf_r+0x250>)
 800ecf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecfa:	2206      	movs	r2, #6
 800ecfc:	f7f1 fa78 	bl	80001f0 <memchr>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d03f      	beq.n	800ed84 <_vfiprintf_r+0x22c>
 800ed04:	4b29      	ldr	r3, [pc, #164]	; (800edac <_vfiprintf_r+0x254>)
 800ed06:	bb1b      	cbnz	r3, 800ed50 <_vfiprintf_r+0x1f8>
 800ed08:	9b03      	ldr	r3, [sp, #12]
 800ed0a:	3307      	adds	r3, #7
 800ed0c:	f023 0307 	bic.w	r3, r3, #7
 800ed10:	3308      	adds	r3, #8
 800ed12:	9303      	str	r3, [sp, #12]
 800ed14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed16:	443b      	add	r3, r7
 800ed18:	9309      	str	r3, [sp, #36]	; 0x24
 800ed1a:	e767      	b.n	800ebec <_vfiprintf_r+0x94>
 800ed1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed20:	460c      	mov	r4, r1
 800ed22:	2001      	movs	r0, #1
 800ed24:	e7a5      	b.n	800ec72 <_vfiprintf_r+0x11a>
 800ed26:	2300      	movs	r3, #0
 800ed28:	3401      	adds	r4, #1
 800ed2a:	9305      	str	r3, [sp, #20]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	f04f 0c0a 	mov.w	ip, #10
 800ed32:	4620      	mov	r0, r4
 800ed34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed38:	3a30      	subs	r2, #48	; 0x30
 800ed3a:	2a09      	cmp	r2, #9
 800ed3c:	d903      	bls.n	800ed46 <_vfiprintf_r+0x1ee>
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0c5      	beq.n	800ecce <_vfiprintf_r+0x176>
 800ed42:	9105      	str	r1, [sp, #20]
 800ed44:	e7c3      	b.n	800ecce <_vfiprintf_r+0x176>
 800ed46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e7f0      	b.n	800ed32 <_vfiprintf_r+0x1da>
 800ed50:	ab03      	add	r3, sp, #12
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	462a      	mov	r2, r5
 800ed56:	4b16      	ldr	r3, [pc, #88]	; (800edb0 <_vfiprintf_r+0x258>)
 800ed58:	a904      	add	r1, sp, #16
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f3af 8000 	nop.w
 800ed60:	4607      	mov	r7, r0
 800ed62:	1c78      	adds	r0, r7, #1
 800ed64:	d1d6      	bne.n	800ed14 <_vfiprintf_r+0x1bc>
 800ed66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed68:	07d9      	lsls	r1, r3, #31
 800ed6a:	d405      	bmi.n	800ed78 <_vfiprintf_r+0x220>
 800ed6c:	89ab      	ldrh	r3, [r5, #12]
 800ed6e:	059a      	lsls	r2, r3, #22
 800ed70:	d402      	bmi.n	800ed78 <_vfiprintf_r+0x220>
 800ed72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed74:	f7ff fe53 	bl	800ea1e <__retarget_lock_release_recursive>
 800ed78:	89ab      	ldrh	r3, [r5, #12]
 800ed7a:	065b      	lsls	r3, r3, #25
 800ed7c:	f53f af12 	bmi.w	800eba4 <_vfiprintf_r+0x4c>
 800ed80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed82:	e711      	b.n	800eba8 <_vfiprintf_r+0x50>
 800ed84:	ab03      	add	r3, sp, #12
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	462a      	mov	r2, r5
 800ed8a:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <_vfiprintf_r+0x258>)
 800ed8c:	a904      	add	r1, sp, #16
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f000 f880 	bl	800ee94 <_printf_i>
 800ed94:	e7e4      	b.n	800ed60 <_vfiprintf_r+0x208>
 800ed96:	bf00      	nop
 800ed98:	0800f8c4 	.word	0x0800f8c4
 800ed9c:	0800f8e4 	.word	0x0800f8e4
 800eda0:	0800f8a4 	.word	0x0800f8a4
 800eda4:	0800f904 	.word	0x0800f904
 800eda8:	0800f90e 	.word	0x0800f90e
 800edac:	00000000 	.word	0x00000000
 800edb0:	0800eb33 	.word	0x0800eb33
 800edb4:	0800f90a 	.word	0x0800f90a

0800edb8 <_printf_common>:
 800edb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edbc:	4616      	mov	r6, r2
 800edbe:	4699      	mov	r9, r3
 800edc0:	688a      	ldr	r2, [r1, #8]
 800edc2:	690b      	ldr	r3, [r1, #16]
 800edc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edc8:	4293      	cmp	r3, r2
 800edca:	bfb8      	it	lt
 800edcc:	4613      	movlt	r3, r2
 800edce:	6033      	str	r3, [r6, #0]
 800edd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edd4:	4607      	mov	r7, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	b10a      	cbz	r2, 800edde <_printf_common+0x26>
 800edda:	3301      	adds	r3, #1
 800eddc:	6033      	str	r3, [r6, #0]
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	0699      	lsls	r1, r3, #26
 800ede2:	bf42      	ittt	mi
 800ede4:	6833      	ldrmi	r3, [r6, #0]
 800ede6:	3302      	addmi	r3, #2
 800ede8:	6033      	strmi	r3, [r6, #0]
 800edea:	6825      	ldr	r5, [r4, #0]
 800edec:	f015 0506 	ands.w	r5, r5, #6
 800edf0:	d106      	bne.n	800ee00 <_printf_common+0x48>
 800edf2:	f104 0a19 	add.w	sl, r4, #25
 800edf6:	68e3      	ldr	r3, [r4, #12]
 800edf8:	6832      	ldr	r2, [r6, #0]
 800edfa:	1a9b      	subs	r3, r3, r2
 800edfc:	42ab      	cmp	r3, r5
 800edfe:	dc26      	bgt.n	800ee4e <_printf_common+0x96>
 800ee00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee04:	1e13      	subs	r3, r2, #0
 800ee06:	6822      	ldr	r2, [r4, #0]
 800ee08:	bf18      	it	ne
 800ee0a:	2301      	movne	r3, #1
 800ee0c:	0692      	lsls	r2, r2, #26
 800ee0e:	d42b      	bmi.n	800ee68 <_printf_common+0xb0>
 800ee10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee14:	4649      	mov	r1, r9
 800ee16:	4638      	mov	r0, r7
 800ee18:	47c0      	blx	r8
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	d01e      	beq.n	800ee5c <_printf_common+0xa4>
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	68e5      	ldr	r5, [r4, #12]
 800ee22:	6832      	ldr	r2, [r6, #0]
 800ee24:	f003 0306 	and.w	r3, r3, #6
 800ee28:	2b04      	cmp	r3, #4
 800ee2a:	bf08      	it	eq
 800ee2c:	1aad      	subeq	r5, r5, r2
 800ee2e:	68a3      	ldr	r3, [r4, #8]
 800ee30:	6922      	ldr	r2, [r4, #16]
 800ee32:	bf0c      	ite	eq
 800ee34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee38:	2500      	movne	r5, #0
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	bfc4      	itt	gt
 800ee3e:	1a9b      	subgt	r3, r3, r2
 800ee40:	18ed      	addgt	r5, r5, r3
 800ee42:	2600      	movs	r6, #0
 800ee44:	341a      	adds	r4, #26
 800ee46:	42b5      	cmp	r5, r6
 800ee48:	d11a      	bne.n	800ee80 <_printf_common+0xc8>
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	e008      	b.n	800ee60 <_printf_common+0xa8>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4652      	mov	r2, sl
 800ee52:	4649      	mov	r1, r9
 800ee54:	4638      	mov	r0, r7
 800ee56:	47c0      	blx	r8
 800ee58:	3001      	adds	r0, #1
 800ee5a:	d103      	bne.n	800ee64 <_printf_common+0xac>
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee64:	3501      	adds	r5, #1
 800ee66:	e7c6      	b.n	800edf6 <_printf_common+0x3e>
 800ee68:	18e1      	adds	r1, r4, r3
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	2030      	movs	r0, #48	; 0x30
 800ee6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee72:	4422      	add	r2, r4
 800ee74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee7c:	3302      	adds	r3, #2
 800ee7e:	e7c7      	b.n	800ee10 <_printf_common+0x58>
 800ee80:	2301      	movs	r3, #1
 800ee82:	4622      	mov	r2, r4
 800ee84:	4649      	mov	r1, r9
 800ee86:	4638      	mov	r0, r7
 800ee88:	47c0      	blx	r8
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d0e6      	beq.n	800ee5c <_printf_common+0xa4>
 800ee8e:	3601      	adds	r6, #1
 800ee90:	e7d9      	b.n	800ee46 <_printf_common+0x8e>
	...

0800ee94 <_printf_i>:
 800ee94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee98:	7e0f      	ldrb	r7, [r1, #24]
 800ee9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee9c:	2f78      	cmp	r7, #120	; 0x78
 800ee9e:	4691      	mov	r9, r2
 800eea0:	4680      	mov	r8, r0
 800eea2:	460c      	mov	r4, r1
 800eea4:	469a      	mov	sl, r3
 800eea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eeaa:	d807      	bhi.n	800eebc <_printf_i+0x28>
 800eeac:	2f62      	cmp	r7, #98	; 0x62
 800eeae:	d80a      	bhi.n	800eec6 <_printf_i+0x32>
 800eeb0:	2f00      	cmp	r7, #0
 800eeb2:	f000 80d8 	beq.w	800f066 <_printf_i+0x1d2>
 800eeb6:	2f58      	cmp	r7, #88	; 0x58
 800eeb8:	f000 80a3 	beq.w	800f002 <_printf_i+0x16e>
 800eebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eec4:	e03a      	b.n	800ef3c <_printf_i+0xa8>
 800eec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eeca:	2b15      	cmp	r3, #21
 800eecc:	d8f6      	bhi.n	800eebc <_printf_i+0x28>
 800eece:	a101      	add	r1, pc, #4	; (adr r1, 800eed4 <_printf_i+0x40>)
 800eed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eed4:	0800ef2d 	.word	0x0800ef2d
 800eed8:	0800ef41 	.word	0x0800ef41
 800eedc:	0800eebd 	.word	0x0800eebd
 800eee0:	0800eebd 	.word	0x0800eebd
 800eee4:	0800eebd 	.word	0x0800eebd
 800eee8:	0800eebd 	.word	0x0800eebd
 800eeec:	0800ef41 	.word	0x0800ef41
 800eef0:	0800eebd 	.word	0x0800eebd
 800eef4:	0800eebd 	.word	0x0800eebd
 800eef8:	0800eebd 	.word	0x0800eebd
 800eefc:	0800eebd 	.word	0x0800eebd
 800ef00:	0800f04d 	.word	0x0800f04d
 800ef04:	0800ef71 	.word	0x0800ef71
 800ef08:	0800f02f 	.word	0x0800f02f
 800ef0c:	0800eebd 	.word	0x0800eebd
 800ef10:	0800eebd 	.word	0x0800eebd
 800ef14:	0800f06f 	.word	0x0800f06f
 800ef18:	0800eebd 	.word	0x0800eebd
 800ef1c:	0800ef71 	.word	0x0800ef71
 800ef20:	0800eebd 	.word	0x0800eebd
 800ef24:	0800eebd 	.word	0x0800eebd
 800ef28:	0800f037 	.word	0x0800f037
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	1d1a      	adds	r2, r3, #4
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	602a      	str	r2, [r5, #0]
 800ef34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e0a3      	b.n	800f088 <_printf_i+0x1f4>
 800ef40:	6820      	ldr	r0, [r4, #0]
 800ef42:	6829      	ldr	r1, [r5, #0]
 800ef44:	0606      	lsls	r6, r0, #24
 800ef46:	f101 0304 	add.w	r3, r1, #4
 800ef4a:	d50a      	bpl.n	800ef62 <_printf_i+0xce>
 800ef4c:	680e      	ldr	r6, [r1, #0]
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	2e00      	cmp	r6, #0
 800ef52:	da03      	bge.n	800ef5c <_printf_i+0xc8>
 800ef54:	232d      	movs	r3, #45	; 0x2d
 800ef56:	4276      	negs	r6, r6
 800ef58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef5c:	485e      	ldr	r0, [pc, #376]	; (800f0d8 <_printf_i+0x244>)
 800ef5e:	230a      	movs	r3, #10
 800ef60:	e019      	b.n	800ef96 <_printf_i+0x102>
 800ef62:	680e      	ldr	r6, [r1, #0]
 800ef64:	602b      	str	r3, [r5, #0]
 800ef66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef6a:	bf18      	it	ne
 800ef6c:	b236      	sxthne	r6, r6
 800ef6e:	e7ef      	b.n	800ef50 <_printf_i+0xbc>
 800ef70:	682b      	ldr	r3, [r5, #0]
 800ef72:	6820      	ldr	r0, [r4, #0]
 800ef74:	1d19      	adds	r1, r3, #4
 800ef76:	6029      	str	r1, [r5, #0]
 800ef78:	0601      	lsls	r1, r0, #24
 800ef7a:	d501      	bpl.n	800ef80 <_printf_i+0xec>
 800ef7c:	681e      	ldr	r6, [r3, #0]
 800ef7e:	e002      	b.n	800ef86 <_printf_i+0xf2>
 800ef80:	0646      	lsls	r6, r0, #25
 800ef82:	d5fb      	bpl.n	800ef7c <_printf_i+0xe8>
 800ef84:	881e      	ldrh	r6, [r3, #0]
 800ef86:	4854      	ldr	r0, [pc, #336]	; (800f0d8 <_printf_i+0x244>)
 800ef88:	2f6f      	cmp	r7, #111	; 0x6f
 800ef8a:	bf0c      	ite	eq
 800ef8c:	2308      	moveq	r3, #8
 800ef8e:	230a      	movne	r3, #10
 800ef90:	2100      	movs	r1, #0
 800ef92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef96:	6865      	ldr	r5, [r4, #4]
 800ef98:	60a5      	str	r5, [r4, #8]
 800ef9a:	2d00      	cmp	r5, #0
 800ef9c:	bfa2      	ittt	ge
 800ef9e:	6821      	ldrge	r1, [r4, #0]
 800efa0:	f021 0104 	bicge.w	r1, r1, #4
 800efa4:	6021      	strge	r1, [r4, #0]
 800efa6:	b90e      	cbnz	r6, 800efac <_printf_i+0x118>
 800efa8:	2d00      	cmp	r5, #0
 800efaa:	d04d      	beq.n	800f048 <_printf_i+0x1b4>
 800efac:	4615      	mov	r5, r2
 800efae:	fbb6 f1f3 	udiv	r1, r6, r3
 800efb2:	fb03 6711 	mls	r7, r3, r1, r6
 800efb6:	5dc7      	ldrb	r7, [r0, r7]
 800efb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800efbc:	4637      	mov	r7, r6
 800efbe:	42bb      	cmp	r3, r7
 800efc0:	460e      	mov	r6, r1
 800efc2:	d9f4      	bls.n	800efae <_printf_i+0x11a>
 800efc4:	2b08      	cmp	r3, #8
 800efc6:	d10b      	bne.n	800efe0 <_printf_i+0x14c>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	07de      	lsls	r6, r3, #31
 800efcc:	d508      	bpl.n	800efe0 <_printf_i+0x14c>
 800efce:	6923      	ldr	r3, [r4, #16]
 800efd0:	6861      	ldr	r1, [r4, #4]
 800efd2:	4299      	cmp	r1, r3
 800efd4:	bfde      	ittt	le
 800efd6:	2330      	movle	r3, #48	; 0x30
 800efd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800efe0:	1b52      	subs	r2, r2, r5
 800efe2:	6122      	str	r2, [r4, #16]
 800efe4:	f8cd a000 	str.w	sl, [sp]
 800efe8:	464b      	mov	r3, r9
 800efea:	aa03      	add	r2, sp, #12
 800efec:	4621      	mov	r1, r4
 800efee:	4640      	mov	r0, r8
 800eff0:	f7ff fee2 	bl	800edb8 <_printf_common>
 800eff4:	3001      	adds	r0, #1
 800eff6:	d14c      	bne.n	800f092 <_printf_i+0x1fe>
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800effc:	b004      	add	sp, #16
 800effe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f002:	4835      	ldr	r0, [pc, #212]	; (800f0d8 <_printf_i+0x244>)
 800f004:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f008:	6829      	ldr	r1, [r5, #0]
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f010:	6029      	str	r1, [r5, #0]
 800f012:	061d      	lsls	r5, r3, #24
 800f014:	d514      	bpl.n	800f040 <_printf_i+0x1ac>
 800f016:	07df      	lsls	r7, r3, #31
 800f018:	bf44      	itt	mi
 800f01a:	f043 0320 	orrmi.w	r3, r3, #32
 800f01e:	6023      	strmi	r3, [r4, #0]
 800f020:	b91e      	cbnz	r6, 800f02a <_printf_i+0x196>
 800f022:	6823      	ldr	r3, [r4, #0]
 800f024:	f023 0320 	bic.w	r3, r3, #32
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	2310      	movs	r3, #16
 800f02c:	e7b0      	b.n	800ef90 <_printf_i+0xfc>
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	f043 0320 	orr.w	r3, r3, #32
 800f034:	6023      	str	r3, [r4, #0]
 800f036:	2378      	movs	r3, #120	; 0x78
 800f038:	4828      	ldr	r0, [pc, #160]	; (800f0dc <_printf_i+0x248>)
 800f03a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f03e:	e7e3      	b.n	800f008 <_printf_i+0x174>
 800f040:	0659      	lsls	r1, r3, #25
 800f042:	bf48      	it	mi
 800f044:	b2b6      	uxthmi	r6, r6
 800f046:	e7e6      	b.n	800f016 <_printf_i+0x182>
 800f048:	4615      	mov	r5, r2
 800f04a:	e7bb      	b.n	800efc4 <_printf_i+0x130>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	6826      	ldr	r6, [r4, #0]
 800f050:	6961      	ldr	r1, [r4, #20]
 800f052:	1d18      	adds	r0, r3, #4
 800f054:	6028      	str	r0, [r5, #0]
 800f056:	0635      	lsls	r5, r6, #24
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	d501      	bpl.n	800f060 <_printf_i+0x1cc>
 800f05c:	6019      	str	r1, [r3, #0]
 800f05e:	e002      	b.n	800f066 <_printf_i+0x1d2>
 800f060:	0670      	lsls	r0, r6, #25
 800f062:	d5fb      	bpl.n	800f05c <_printf_i+0x1c8>
 800f064:	8019      	strh	r1, [r3, #0]
 800f066:	2300      	movs	r3, #0
 800f068:	6123      	str	r3, [r4, #16]
 800f06a:	4615      	mov	r5, r2
 800f06c:	e7ba      	b.n	800efe4 <_printf_i+0x150>
 800f06e:	682b      	ldr	r3, [r5, #0]
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	602a      	str	r2, [r5, #0]
 800f074:	681d      	ldr	r5, [r3, #0]
 800f076:	6862      	ldr	r2, [r4, #4]
 800f078:	2100      	movs	r1, #0
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7f1 f8b8 	bl	80001f0 <memchr>
 800f080:	b108      	cbz	r0, 800f086 <_printf_i+0x1f2>
 800f082:	1b40      	subs	r0, r0, r5
 800f084:	6060      	str	r0, [r4, #4]
 800f086:	6863      	ldr	r3, [r4, #4]
 800f088:	6123      	str	r3, [r4, #16]
 800f08a:	2300      	movs	r3, #0
 800f08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f090:	e7a8      	b.n	800efe4 <_printf_i+0x150>
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	462a      	mov	r2, r5
 800f096:	4649      	mov	r1, r9
 800f098:	4640      	mov	r0, r8
 800f09a:	47d0      	blx	sl
 800f09c:	3001      	adds	r0, #1
 800f09e:	d0ab      	beq.n	800eff8 <_printf_i+0x164>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	079b      	lsls	r3, r3, #30
 800f0a4:	d413      	bmi.n	800f0ce <_printf_i+0x23a>
 800f0a6:	68e0      	ldr	r0, [r4, #12]
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	4298      	cmp	r0, r3
 800f0ac:	bfb8      	it	lt
 800f0ae:	4618      	movlt	r0, r3
 800f0b0:	e7a4      	b.n	800effc <_printf_i+0x168>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	47d0      	blx	sl
 800f0bc:	3001      	adds	r0, #1
 800f0be:	d09b      	beq.n	800eff8 <_printf_i+0x164>
 800f0c0:	3501      	adds	r5, #1
 800f0c2:	68e3      	ldr	r3, [r4, #12]
 800f0c4:	9903      	ldr	r1, [sp, #12]
 800f0c6:	1a5b      	subs	r3, r3, r1
 800f0c8:	42ab      	cmp	r3, r5
 800f0ca:	dcf2      	bgt.n	800f0b2 <_printf_i+0x21e>
 800f0cc:	e7eb      	b.n	800f0a6 <_printf_i+0x212>
 800f0ce:	2500      	movs	r5, #0
 800f0d0:	f104 0619 	add.w	r6, r4, #25
 800f0d4:	e7f5      	b.n	800f0c2 <_printf_i+0x22e>
 800f0d6:	bf00      	nop
 800f0d8:	0800f915 	.word	0x0800f915
 800f0dc:	0800f926 	.word	0x0800f926

0800f0e0 <__sread>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e8:	f000 f954 	bl	800f394 <_read_r>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	bfab      	itete	ge
 800f0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800f0f4:	181b      	addge	r3, r3, r0
 800f0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0fa:	bfac      	ite	ge
 800f0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0fe:	81a3      	strhlt	r3, [r4, #12]
 800f100:	bd10      	pop	{r4, pc}

0800f102 <__swrite>:
 800f102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f106:	461f      	mov	r7, r3
 800f108:	898b      	ldrh	r3, [r1, #12]
 800f10a:	05db      	lsls	r3, r3, #23
 800f10c:	4605      	mov	r5, r0
 800f10e:	460c      	mov	r4, r1
 800f110:	4616      	mov	r6, r2
 800f112:	d505      	bpl.n	800f120 <__swrite+0x1e>
 800f114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f118:	2302      	movs	r3, #2
 800f11a:	2200      	movs	r2, #0
 800f11c:	f000 f928 	bl	800f370 <_lseek_r>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	4632      	mov	r2, r6
 800f12e:	463b      	mov	r3, r7
 800f130:	4628      	mov	r0, r5
 800f132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f136:	f000 b869 	b.w	800f20c <_write_r>

0800f13a <__sseek>:
 800f13a:	b510      	push	{r4, lr}
 800f13c:	460c      	mov	r4, r1
 800f13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f142:	f000 f915 	bl	800f370 <_lseek_r>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	bf15      	itete	ne
 800f14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f156:	81a3      	strheq	r3, [r4, #12]
 800f158:	bf18      	it	ne
 800f15a:	81a3      	strhne	r3, [r4, #12]
 800f15c:	bd10      	pop	{r4, pc}

0800f15e <__sclose>:
 800f15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f162:	f000 b8d3 	b.w	800f30c <_close_r>
	...

0800f168 <__swbuf_r>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	460e      	mov	r6, r1
 800f16c:	4614      	mov	r4, r2
 800f16e:	4605      	mov	r5, r0
 800f170:	b118      	cbz	r0, 800f17a <__swbuf_r+0x12>
 800f172:	6983      	ldr	r3, [r0, #24]
 800f174:	b90b      	cbnz	r3, 800f17a <__swbuf_r+0x12>
 800f176:	f7ff fbb3 	bl	800e8e0 <__sinit>
 800f17a:	4b21      	ldr	r3, [pc, #132]	; (800f200 <__swbuf_r+0x98>)
 800f17c:	429c      	cmp	r4, r3
 800f17e:	d12b      	bne.n	800f1d8 <__swbuf_r+0x70>
 800f180:	686c      	ldr	r4, [r5, #4]
 800f182:	69a3      	ldr	r3, [r4, #24]
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	071a      	lsls	r2, r3, #28
 800f18a:	d52f      	bpl.n	800f1ec <__swbuf_r+0x84>
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	b36b      	cbz	r3, 800f1ec <__swbuf_r+0x84>
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	6820      	ldr	r0, [r4, #0]
 800f194:	1ac0      	subs	r0, r0, r3
 800f196:	6963      	ldr	r3, [r4, #20]
 800f198:	b2f6      	uxtb	r6, r6
 800f19a:	4283      	cmp	r3, r0
 800f19c:	4637      	mov	r7, r6
 800f19e:	dc04      	bgt.n	800f1aa <__swbuf_r+0x42>
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7ff fb08 	bl	800e7b8 <_fflush_r>
 800f1a8:	bb30      	cbnz	r0, 800f1f8 <__swbuf_r+0x90>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	60a3      	str	r3, [r4, #8]
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	701e      	strb	r6, [r3, #0]
 800f1b8:	6963      	ldr	r3, [r4, #20]
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	4283      	cmp	r3, r0
 800f1be:	d004      	beq.n	800f1ca <__swbuf_r+0x62>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	07db      	lsls	r3, r3, #31
 800f1c4:	d506      	bpl.n	800f1d4 <__swbuf_r+0x6c>
 800f1c6:	2e0a      	cmp	r6, #10
 800f1c8:	d104      	bne.n	800f1d4 <__swbuf_r+0x6c>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f7ff faf3 	bl	800e7b8 <_fflush_r>
 800f1d2:	b988      	cbnz	r0, 800f1f8 <__swbuf_r+0x90>
 800f1d4:	4638      	mov	r0, r7
 800f1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d8:	4b0a      	ldr	r3, [pc, #40]	; (800f204 <__swbuf_r+0x9c>)
 800f1da:	429c      	cmp	r4, r3
 800f1dc:	d101      	bne.n	800f1e2 <__swbuf_r+0x7a>
 800f1de:	68ac      	ldr	r4, [r5, #8]
 800f1e0:	e7cf      	b.n	800f182 <__swbuf_r+0x1a>
 800f1e2:	4b09      	ldr	r3, [pc, #36]	; (800f208 <__swbuf_r+0xa0>)
 800f1e4:	429c      	cmp	r4, r3
 800f1e6:	bf08      	it	eq
 800f1e8:	68ec      	ldreq	r4, [r5, #12]
 800f1ea:	e7ca      	b.n	800f182 <__swbuf_r+0x1a>
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f000 f81e 	bl	800f230 <__swsetup_r>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d0cb      	beq.n	800f190 <__swbuf_r+0x28>
 800f1f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f1fc:	e7ea      	b.n	800f1d4 <__swbuf_r+0x6c>
 800f1fe:	bf00      	nop
 800f200:	0800f8c4 	.word	0x0800f8c4
 800f204:	0800f8e4 	.word	0x0800f8e4
 800f208:	0800f8a4 	.word	0x0800f8a4

0800f20c <_write_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4d07      	ldr	r5, [pc, #28]	; (800f22c <_write_r+0x20>)
 800f210:	4604      	mov	r4, r0
 800f212:	4608      	mov	r0, r1
 800f214:	4611      	mov	r1, r2
 800f216:	2200      	movs	r2, #0
 800f218:	602a      	str	r2, [r5, #0]
 800f21a:	461a      	mov	r2, r3
 800f21c:	f7f3 f95c 	bl	80024d8 <_write>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d102      	bne.n	800f22a <_write_r+0x1e>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	b103      	cbz	r3, 800f22a <_write_r+0x1e>
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	bd38      	pop	{r3, r4, r5, pc}
 800f22c:	20003b40 	.word	0x20003b40

0800f230 <__swsetup_r>:
 800f230:	4b32      	ldr	r3, [pc, #200]	; (800f2fc <__swsetup_r+0xcc>)
 800f232:	b570      	push	{r4, r5, r6, lr}
 800f234:	681d      	ldr	r5, [r3, #0]
 800f236:	4606      	mov	r6, r0
 800f238:	460c      	mov	r4, r1
 800f23a:	b125      	cbz	r5, 800f246 <__swsetup_r+0x16>
 800f23c:	69ab      	ldr	r3, [r5, #24]
 800f23e:	b913      	cbnz	r3, 800f246 <__swsetup_r+0x16>
 800f240:	4628      	mov	r0, r5
 800f242:	f7ff fb4d 	bl	800e8e0 <__sinit>
 800f246:	4b2e      	ldr	r3, [pc, #184]	; (800f300 <__swsetup_r+0xd0>)
 800f248:	429c      	cmp	r4, r3
 800f24a:	d10f      	bne.n	800f26c <__swsetup_r+0x3c>
 800f24c:	686c      	ldr	r4, [r5, #4]
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f254:	0719      	lsls	r1, r3, #28
 800f256:	d42c      	bmi.n	800f2b2 <__swsetup_r+0x82>
 800f258:	06dd      	lsls	r5, r3, #27
 800f25a:	d411      	bmi.n	800f280 <__swsetup_r+0x50>
 800f25c:	2309      	movs	r3, #9
 800f25e:	6033      	str	r3, [r6, #0]
 800f260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f264:	81a3      	strh	r3, [r4, #12]
 800f266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f26a:	e03e      	b.n	800f2ea <__swsetup_r+0xba>
 800f26c:	4b25      	ldr	r3, [pc, #148]	; (800f304 <__swsetup_r+0xd4>)
 800f26e:	429c      	cmp	r4, r3
 800f270:	d101      	bne.n	800f276 <__swsetup_r+0x46>
 800f272:	68ac      	ldr	r4, [r5, #8]
 800f274:	e7eb      	b.n	800f24e <__swsetup_r+0x1e>
 800f276:	4b24      	ldr	r3, [pc, #144]	; (800f308 <__swsetup_r+0xd8>)
 800f278:	429c      	cmp	r4, r3
 800f27a:	bf08      	it	eq
 800f27c:	68ec      	ldreq	r4, [r5, #12]
 800f27e:	e7e6      	b.n	800f24e <__swsetup_r+0x1e>
 800f280:	0758      	lsls	r0, r3, #29
 800f282:	d512      	bpl.n	800f2aa <__swsetup_r+0x7a>
 800f284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f286:	b141      	cbz	r1, 800f29a <__swsetup_r+0x6a>
 800f288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f28c:	4299      	cmp	r1, r3
 800f28e:	d002      	beq.n	800f296 <__swsetup_r+0x66>
 800f290:	4630      	mov	r0, r6
 800f292:	f7fe ffb1 	bl	800e1f8 <_free_r>
 800f296:	2300      	movs	r3, #0
 800f298:	6363      	str	r3, [r4, #52]	; 0x34
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2a0:	81a3      	strh	r3, [r4, #12]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6063      	str	r3, [r4, #4]
 800f2a6:	6923      	ldr	r3, [r4, #16]
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	f043 0308 	orr.w	r3, r3, #8
 800f2b0:	81a3      	strh	r3, [r4, #12]
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	b94b      	cbnz	r3, 800f2ca <__swsetup_r+0x9a>
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2c0:	d003      	beq.n	800f2ca <__swsetup_r+0x9a>
 800f2c2:	4621      	mov	r1, r4
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f7ff fbd1 	bl	800ea6c <__smakebuf_r>
 800f2ca:	89a0      	ldrh	r0, [r4, #12]
 800f2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2d0:	f010 0301 	ands.w	r3, r0, #1
 800f2d4:	d00a      	beq.n	800f2ec <__swsetup_r+0xbc>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60a3      	str	r3, [r4, #8]
 800f2da:	6963      	ldr	r3, [r4, #20]
 800f2dc:	425b      	negs	r3, r3
 800f2de:	61a3      	str	r3, [r4, #24]
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	b943      	cbnz	r3, 800f2f6 <__swsetup_r+0xc6>
 800f2e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2e8:	d1ba      	bne.n	800f260 <__swsetup_r+0x30>
 800f2ea:	bd70      	pop	{r4, r5, r6, pc}
 800f2ec:	0781      	lsls	r1, r0, #30
 800f2ee:	bf58      	it	pl
 800f2f0:	6963      	ldrpl	r3, [r4, #20]
 800f2f2:	60a3      	str	r3, [r4, #8]
 800f2f4:	e7f4      	b.n	800f2e0 <__swsetup_r+0xb0>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	e7f7      	b.n	800f2ea <__swsetup_r+0xba>
 800f2fa:	bf00      	nop
 800f2fc:	20000030 	.word	0x20000030
 800f300:	0800f8c4 	.word	0x0800f8c4
 800f304:	0800f8e4 	.word	0x0800f8e4
 800f308:	0800f8a4 	.word	0x0800f8a4

0800f30c <_close_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	; (800f328 <_close_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f3 f90a 	bl	8002530 <_close>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_close_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_close_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20003b40 	.word	0x20003b40

0800f32c <_fstat_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_fstat_r+0x20>)
 800f330:	2300      	movs	r3, #0
 800f332:	4604      	mov	r4, r0
 800f334:	4608      	mov	r0, r1
 800f336:	4611      	mov	r1, r2
 800f338:	602b      	str	r3, [r5, #0]
 800f33a:	f7f3 f949 	bl	80025d0 <_fstat>
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	d102      	bne.n	800f348 <_fstat_r+0x1c>
 800f342:	682b      	ldr	r3, [r5, #0]
 800f344:	b103      	cbz	r3, 800f348 <_fstat_r+0x1c>
 800f346:	6023      	str	r3, [r4, #0]
 800f348:	bd38      	pop	{r3, r4, r5, pc}
 800f34a:	bf00      	nop
 800f34c:	20003b40 	.word	0x20003b40

0800f350 <_isatty_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d06      	ldr	r5, [pc, #24]	; (800f36c <_isatty_r+0x1c>)
 800f354:	2300      	movs	r3, #0
 800f356:	4604      	mov	r4, r0
 800f358:	4608      	mov	r0, r1
 800f35a:	602b      	str	r3, [r5, #0]
 800f35c:	f7f3 f8a6 	bl	80024ac <_isatty>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d102      	bne.n	800f36a <_isatty_r+0x1a>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b103      	cbz	r3, 800f36a <_isatty_r+0x1a>
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	20003b40 	.word	0x20003b40

0800f370 <_lseek_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d07      	ldr	r5, [pc, #28]	; (800f390 <_lseek_r+0x20>)
 800f374:	4604      	mov	r4, r0
 800f376:	4608      	mov	r0, r1
 800f378:	4611      	mov	r1, r2
 800f37a:	2200      	movs	r2, #0
 800f37c:	602a      	str	r2, [r5, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	f7f3 f8ed 	bl	800255e <_lseek>
 800f384:	1c43      	adds	r3, r0, #1
 800f386:	d102      	bne.n	800f38e <_lseek_r+0x1e>
 800f388:	682b      	ldr	r3, [r5, #0]
 800f38a:	b103      	cbz	r3, 800f38e <_lseek_r+0x1e>
 800f38c:	6023      	str	r3, [r4, #0]
 800f38e:	bd38      	pop	{r3, r4, r5, pc}
 800f390:	20003b40 	.word	0x20003b40

0800f394 <_read_r>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	4d07      	ldr	r5, [pc, #28]	; (800f3b4 <_read_r+0x20>)
 800f398:	4604      	mov	r4, r0
 800f39a:	4608      	mov	r0, r1
 800f39c:	4611      	mov	r1, r2
 800f39e:	2200      	movs	r2, #0
 800f3a0:	602a      	str	r2, [r5, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f7f3 f8ec 	bl	8002580 <_read>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_read_r+0x1e>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_read_r+0x1e>
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	20003b40 	.word	0x20003b40

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr
