
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d18  08009d18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d20  08009d20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00003424  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003498  20003498  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e66  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eed  00000000  00000000  00036f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00039df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002682e  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c77  00000000  00000000  00062c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e25ab  00000000  00000000  0007b87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015de28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c68  00000000  00000000  0015de78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097b0 	.word	0x080097b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080097b0 	.word	0x080097b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	781a      	ldrb	r2, [r3, #0]
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	440b      	add	r3, r1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d114      	bne.n	8000e70 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
		i++;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 8000e50:	e00e      	b.n	8000e70 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	440b      	add	r3, r1
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d001      	beq.n	8000e6a <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d11a      	bne.n	8000eac <ConsoleCommandMatch+0x8c>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d817      	bhi.n	8000eac <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d011      	beq.n	8000eac <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d00b      	beq.n	8000eac <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b0d      	cmp	r3, #13
 8000e9e:	d005      	beq.n	8000eac <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1d2      	bne.n	8000e52 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000eac:	68bb      	ldr	r3, [r7, #8]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000ed2:	e00d      	b.n	8000ef0 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	441a      	add	r2, r3
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	440b      	add	r3, r1
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
		i++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3ed      	bcc.n	8000ed4 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000ef8:	e007      	b.n	8000f0a <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d9f4      	bls.n	8000efa <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000f10:	693b      	ldr	r3, [r7, #16]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000f32:	e002      	b.n	8000f3a <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b0d      	cmp	r3, #13
 8000f44:	d009      	beq.n	8000f5a <ConsoleCommandEndline+0x3c>
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	d003      	beq.n	8000f5a <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3ec      	bcc.n	8000f34 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d201      	bcs.n	8000f66 <ConsoleCommandEndline+0x48>
	{
		result = i;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000f66:	68bb      	ldr	r3, [r7, #8]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fbc1 	bl	8001704 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <ConsoleInit+0x4c>)
 8000f84:	f000 fc12 	bl	80017ac <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <ConsoleInit+0x50>)
 8000f8a:	f000 fc0f 	bl	80017ac <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <ConsoleInit+0x54>)
 8000f90:	f000 fc0c 	bl	80017ac <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <ConsoleInit+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e007      	b.n	8000fb0 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <ConsoleInit+0x5c>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d9f4      	bls.n	8000fa0 <ConsoleInit+0x2c>
	}

}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	080097c8 	.word	0x080097c8
 8000fc4:	08009814 	.word	0x08009814
 8000fc8:	08009818 	.word	0x08009818
 8000fcc:	20000190 	.word	0x20000190
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8000fda:	4b54      	ldr	r3, [pc, #336]	; (800112c <ConsoleProcess+0x158>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a54      	ldr	r2, [pc, #336]	; (8001130 <ConsoleProcess+0x15c>)
 8000fe0:	1898      	adds	r0, r3, r2
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <ConsoleProcess+0x158>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000fea:	463a      	mov	r2, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	f000 fba1 	bl	8001734 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <ConsoleProcess+0x2e>
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <ConsoleProcess+0x160>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 8091 	beq.w	8001124 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8001002:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <ConsoleProcess+0x160>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <ConsoleProcess+0x158>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <ConsoleProcess+0x158>)
 8001012:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <ConsoleProcess+0x158>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4845      	ldr	r0, [pc, #276]	; (8001130 <ConsoleProcess+0x15c>)
 800101c:	f7ff ff7f 	bl	8000f1e <ConsoleCommandEndline>
 8001020:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db7d      	blt.n	8001124 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8001028:	f000 fb50 	bl	80016cc <ConsoleCommandsGetTable>
 800102c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8001038:	e03d      	b.n	80010b6 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	461a      	mov	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4938      	ldr	r1, [pc, #224]	; (8001130 <ConsoleProcess+0x15c>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fee6 	bl	8000e20 <ConsoleCommandMatch>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d02a      	beq.n	80010b0 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4830      	ldr	r0, [pc, #192]	; (8001130 <ConsoleProcess+0x15c>)
 800106e:	4798      	blx	r3
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d017      	beq.n	80010aa <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 800107a:	482f      	ldr	r0, [pc, #188]	; (8001138 <ConsoleProcess+0x164>)
 800107c:	f000 fb96 	bl	80017ac <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8001080:	482b      	ldr	r0, [pc, #172]	; (8001130 <ConsoleProcess+0x15c>)
 8001082:	f000 fb93 	bl	80017ac <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8001086:	482d      	ldr	r0, [pc, #180]	; (800113c <ConsoleProcess+0x168>)
 8001088:	f000 fb90 	bl	80017ac <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	461a      	mov	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	3308      	adds	r3, #8
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fb84 	bl	80017ac <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80010a4:	4826      	ldr	r0, [pc, #152]	; (8001140 <ConsoleProcess+0x16c>)
 80010a6:	f000 fb81 	bl	80017ac <ConsoleIoSendString>

					}
					found = cmdIndex;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e002      	b.n	80010b6 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <ConsoleProcess+0x100>
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d2:	d0b2      	beq.n	800103a <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00d      	beq.n	80010f6 <ConsoleProcess+0x122>
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e0:	d109      	bne.n	80010f6 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <ConsoleProcess+0x158>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d905      	bls.n	80010f6 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <ConsoleProcess+0x170>)
 80010ec:	f000 fb5e 	bl	80017ac <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <ConsoleProcess+0x16c>)
 80010f2:	f000 fb5b 	bl	80017ac <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <ConsoleProcess+0x158>)
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	461a      	mov	r2, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <ConsoleProcess+0x15c>)
 8001102:	f7ff feda 	bl	8000eba <ConsoleResetBuffer>
 8001106:	4603      	mov	r3, r0
 8001108:	4a08      	ldr	r2, [pc, #32]	; (800112c <ConsoleProcess+0x158>)
 800110a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <ConsoleProcess+0x158>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <ConsoleProcess+0x160>)
 800111c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <ConsoleProcess+0x174>)
 8001120:	f000 fb44 	bl	80017ac <ConsoleIoSendString>
		}
	}
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000190 	.word	0x20000190
 8001130:	20000090 	.word	0x20000090
 8001134:	20000194 	.word	0x20000194
 8001138:	0800981c 	.word	0x0800981c
 800113c:	08009824 	.word	0x08009824
 8001140:	08009814 	.word	0x08009814
 8001144:	0800982c 	.word	0x0800982c
 8001148:	08009818 	.word	0x08009818

0800114c <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	460b      	mov	r3, r1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001162:	2300      	movs	r3, #0
 8001164:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001166:	e00b      	b.n	8001180 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b20      	cmp	r3, #32
 8001172:	d102      	bne.n	800117a <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	3301      	adds	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d002      	beq.n	800118e <ConsoleParamFindN+0x42>
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d9ec      	bls.n	8001168 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001194:	d102      	bne.n	800119c <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001196:	2310      	movs	r3, #16
 8001198:	75fb      	strb	r3, [r7, #23]
 800119a:	e002      	b.n	80011a2 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	601a      	str	r2, [r3, #0]
	}
	return result;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3724      	adds	r7, #36	; 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	460b      	mov	r3, r1
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80011c2:	f107 021c 	add.w	r2, r7, #28
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	4619      	mov	r1, r3
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ffbe 	bl	800114c <ConsoleParamFindN>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	4413      	add	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80011ea:	e011      	b.n	8001210 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80011ec:	f107 0214 	add.w	r2, r7, #20
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	4413      	add	r3, r2
 80011f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80011f8:	701a      	strb	r2, [r3, #0]
		i++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	4413      	add	r3, r2
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8001210:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001214:	2b0a      	cmp	r3, #10
 8001216:	d00a      	beq.n	800122e <ConsoleReceiveParamInt16+0x7e>
 8001218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800121c:	2b0d      	cmp	r3, #13
 800121e:	d006      	beq.n	800122e <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8001220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001224:	2b20      	cmp	r3, #32
 8001226:	d002      	beq.n	800122e <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	2b07      	cmp	r3, #7
 800122c:	d9de      	bls.n	80011ec <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	2b08      	cmp	r3, #8
 8001232:	d102      	bne.n	800123a <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001234:	2310      	movs	r3, #16
 8001236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800123a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10e      	bne.n	8001260 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8001242:	f107 0214 	add.w	r2, r7, #20
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	4413      	add	r3, r2
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4618      	mov	r0, r3
 8001254:	f007 f98e 	bl	8008574 <atoi>
 8001258:	4603      	mov	r3, r0
 800125a:	b21a      	sxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8001260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001264:	4618      	mov	r0, r3
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	460b      	mov	r3, r1
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8001282:	f107 0218 	add.w	r2, r7, #24
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	4619      	mov	r1, r3
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff5e 	bl	800114c <ConsoleParamFindN>
 8001290:	4603      	mov	r3, r0
 8001292:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d12c      	bne.n	80012f4 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	e01e      	b.n	80012de <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	4413      	add	r3, r2
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f107 0217 	add.w	r2, r7, #23
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f8c5 	bl	8001448 <ConsoleUtilHexCharToInt>
 80012be:	4603      	mov	r3, r0
 80012c0:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80012c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012d4:	4413      	add	r3, r2
 80012d6:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3301      	adds	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d9dd      	bls.n	80012a0 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 80012e4:	7ffb      	ldrb	r3, [r7, #31]
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d101      	bne.n	80012ee <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012f2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8001308:	2300      	movs	r3, #0
 800130a:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e01b      	b.n	800134a <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d115      	bne.n	8001344 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f1c3 0303 	rsb	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa42 f303 	asr.w	r3, r2, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	441a      	add	r2, r3
 8001336:	7cbb      	ldrb	r3, [r7, #18]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f8c5 	bl	80014ca <ConsoleUtilsIntToHexChar>
 8001340:	4603      	mov	r3, r0
 8001342:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d9e0      	bls.n	8001312 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4413      	add	r3, r2
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fa23 	bl	80017ac <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 800137c:	2300      	movs	r3, #0
 800137e:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da07      	bge.n	800139a <smallItoa+0x2a>
		isNegative = true;
 800138a:	2301      	movs	r3, #1
 800138c:	77fb      	strb	r3, [r7, #31]
		in = -in;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	425b      	negs	r3, r3
 8001392:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 800139e:	e007      	b.n	80013b0 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a8:	61bb      	str	r3, [r7, #24]
		stringLen++;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f1      	bne.n	80013a0 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    stringLen--;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	440b      	add	r3, r1
 80013e8:	3230      	adds	r2, #48	; 0x30
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f6:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	617a      	str	r2, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e6      	bne.n	80013d0 <smallItoa+0x60>

	if (isNegative) {
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <smallItoa+0x9e>
		*(outBuffer) = '-';
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	222d      	movs	r2, #45	; 0x2d
 800140c:	701a      	strb	r2, [r3, #0]
	}
}
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	f107 0108 	add.w	r1, r7, #8
 800142c:	220a      	movs	r2, #10
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff9e 	bl	8001370 <smallItoa>
	ConsoleIoSendString(out);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f9b7 	bl	80017ac <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b2f      	cmp	r3, #47	; 0x2f
 800145c:	d908      	bls.n	8001470 <ConsoleUtilHexCharToInt+0x28>
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b39      	cmp	r3, #57	; 0x39
 8001462:	d805      	bhi.n	8001470 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3b30      	subs	r3, #48	; 0x30
 8001468:	b2da      	uxtb	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e025      	b.n	80014bc <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d908      	bls.n	8001488 <ConsoleUtilHexCharToInt+0x40>
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b46      	cmp	r3, #70	; 0x46
 800147a:	d805      	bhi.n	8001488 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3b37      	subs	r3, #55	; 0x37
 8001480:	b2da      	uxtb	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e019      	b.n	80014bc <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b60      	cmp	r3, #96	; 0x60
 800148c:	d908      	bls.n	80014a0 <ConsoleUtilHexCharToInt+0x58>
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b66      	cmp	r3, #102	; 0x66
 8001492:	d805      	bhi.n	80014a0 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	3b57      	subs	r3, #87	; 0x57
 8001498:	b2da      	uxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e00d      	b.n	80014bc <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d105      	bne.n	80014b2 <ConsoleUtilHexCharToInt+0x6a>
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d102      	bne.n	80014b2 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d102      	bne.n	80014b8 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 80014b2:	2311      	movs	r3, #17
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e001      	b.n	80014bc <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 80014b8:	2310      	movs	r3, #16
 80014ba:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	6039      	str	r1, [r7, #0]
 80014d4:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d805      	bhi.n	80014ec <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	3330      	adds	r3, #48	; 0x30
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e00d      	b.n	8001508 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d908      	bls.n	8001504 <ConsoleUtilsIntToHexChar+0x3a>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d805      	bhi.n	8001504 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	3337      	adds	r3, #55	; 0x37
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e001      	b.n	8001508 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001504:	2310      	movs	r3, #16
 8001506:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8001534:	2300      	movs	r3, #0
 8001536:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8001538:	2309      	movs	r3, #9
 800153a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e01e      	b.n	8001580 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8001542:	4914      	ldr	r1, [pc, #80]	; (8001594 <ConsoleCommandHelp+0x68>)
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f92a 	bl	80017ac <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <ConsoleCommandHelp+0x6c>)
 800155a:	f000 f927 	bl	80017ac <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	3308      	adds	r3, #8
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <ConsoleCommandHelp+0x68>)
 800156c:	4413      	add	r3, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f91c 	bl	80017ac <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <ConsoleCommandHelp+0x70>)
 8001576:	f000 f919 	bl	80017ac <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3db      	bcc.n	8001542 <ConsoleCommandHelp+0x16>
	}
	return result;
 800158a:	7cfb      	ldrb	r3, [r7, #19]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	080098d4 	.word	0x080098d4
 8001598:	08009888 	.word	0x08009888
 800159c:	0800988c 	.word	0x0800988c

080015a0 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
	return result;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 80015ba:	b480      	push	{r7}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
	return result;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
	return result;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	461a      	mov	r2, r3
 80015fe:	2101      	movs	r1, #1
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fdd5 	bl	80011b0 <ConsoleReceiveParamInt16>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d116      	bne.n	800163e <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <ConsoleCommandParamExampleInt16+0x58>)
 8001612:	f000 f8cb 	bl	80017ac <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8001616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fefd 	bl	800141a <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <ConsoleCommandParamExampleInt16+0x5c>)
 8001622:	f000 f8c3 	bl	80017ac <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8001626:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe66 	bl	80012fe <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <ConsoleCommandParamExampleInt16+0x60>)
 8001634:	f000 f8ba 	bl	80017ac <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <ConsoleCommandParamExampleInt16+0x64>)
 800163a:	f000 f8b7 	bl	80017ac <ConsoleIoSendString>
	}
	return result;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08009890 	.word	0x08009890
 800164c:	080098a0 	.word	0x080098a0
 8001650:	080098a8 	.word	0x080098a8
 8001654:	0800988c 	.word	0x0800988c

08001658 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	461a      	mov	r2, r3
 8001666:	2101      	movs	r1, #1
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fdff 	bl	800126c <ConsoleReceiveParamHexUint16>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <ConsoleCommandParamExampleHexUint16+0x40>)
 800167a:	f000 f897 	bl	80017ac <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 800167e:	89bb      	ldrh	r3, [r7, #12]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe3c 	bl	80012fe <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <ConsoleCommandParamExampleHexUint16+0x44>)
 8001688:	f000 f890 	bl	80017ac <ConsoleIoSendString>
	}
	return result;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	080098ac 	.word	0x080098ac
 800169c:	0800988c 	.word	0x0800988c

080016a0 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <ConsoleCommandVer+0x24>)
 80016ae:	f000 f87d 	bl	80017ac <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <ConsoleCommandVer+0x28>)
 80016b4:	f000 f87a 	bl	80017ac <ConsoleIoSendString>
	return result;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	080098bc 	.word	0x080098bc
 80016c8:	0800988c 	.word	0x0800988c

080016cc <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <ConsoleCommandsGetTable+0x10>)
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	080098d4 	.word	0x080098d4

080016e0 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	charCount = 0;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <reset+0x1c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	readComplete =0;
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <reset+0x20>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200001a0 	.word	0x200001a0
 8001700:	2000019c 	.word	0x2000019c

08001704 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <ConsoleIoInit+0x28>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <ConsoleIoInit+0x28>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4905      	ldr	r1, [pc, #20]	; (8001730 <ConsoleIoInit+0x2c>)
 800171a:	4618      	mov	r0, r3
 800171c:	f005 ff91 	bl	8007642 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000198 	.word	0x20000198
 8001730:	200001ae 	.word	0x200001ae

08001734 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <ConsoleIoReceive+0x68>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11f      	bne.n	800178c <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 800174c:	e00a      	b.n	8001764 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	4413      	add	r3, r2
 8001754:	4912      	ldr	r1, [pc, #72]	; (80017a0 <ConsoleIoReceive+0x6c>)
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	440a      	add	r2, r1
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	701a      	strb	r2, [r3, #0]
			i++;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <ConsoleIoReceive+0x70>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4293      	cmp	r3, r2
 8001770:	d3ed      	bcc.n	800174e <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <ConsoleIoReceive+0x70>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 800177c:	4908      	ldr	r1, [pc, #32]	; (80017a0 <ConsoleIoReceive+0x6c>)
 800177e:	480a      	ldr	r0, [pc, #40]	; (80017a8 <ConsoleIoReceive+0x74>)
 8001780:	f006 ff2e 	bl	80085e0 <iprintf>
		// reset counts
		reset();
 8001784:	f7ff ffac 	bl	80016e0 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8001788:	2300      	movs	r3, #0
 800178a:	e003      	b.n	8001794 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000019c 	.word	0x2000019c
 80017a0:	200001a4 	.word	0x200001a4
 80017a4:	200001a0 	.word	0x200001a0
 80017a8:	080098d0 	.word	0x080098d0

080017ac <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <ConsoleIoSendString+0x1c>)
 80017b8:	f006 ff12 	bl	80085e0 <iprintf>
	return CONSOLE_SUCCESS;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	080098d0 	.word	0x080098d0

080017cc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_RxCpltCallback+0x44>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_UART_RxCpltCallback+0x48>)
 80017da:	7811      	ldrb	r1, [r2, #0]
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_UART_RxCpltCallback+0x4c>)
 80017de:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_UART_RxCpltCallback+0x44>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_UART_RxCpltCallback+0x44>)
 80017e8:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_UART_RxCpltCallback+0x48>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d102      	bne.n	80017f8 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_UART_RxCpltCallback+0x50>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_UART_RxCpltCallback+0x54>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <HAL_UART_RxCpltCallback+0x48>)
 8001800:	4618      	mov	r0, r3
 8001802:	f005 ff1e 	bl	8007642 <HAL_UART_Receive_IT>

}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200001a0 	.word	0x200001a0
 8001814:	200001ae 	.word	0x200001ae
 8001818:	200001a4 	.word	0x200001a4
 800181c:	2000019c 	.word	0x2000019c
 8001820:	20000198 	.word	0x20000198

08001824 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2102      	movs	r1, #2
 800182c:	4849      	ldr	r0, [pc, #292]	; (8001954 <I3G450D_Init+0x130>)
 800182e:	f002 feed 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001832:	2014      	movs	r0, #20
 8001834:	f001 ffea 	bl	800380c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2102      	movs	r1, #2
 800183c:	4845      	ldr	r0, [pc, #276]	; (8001954 <I3G450D_Init+0x130>)
 800183e:	f002 fee5 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001842:	2014      	movs	r0, #20
 8001844:	f001 ffe2 	bl	800380c <HAL_Delay>
	spiTxBuf[0]=0x20;
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <I3G450D_Init+0x134>)
 800184a:	2220      	movs	r2, #32
 800184c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <I3G450D_Init+0x134>)
 8001850:	22ff      	movs	r2, #255	; 0xff
 8001852:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001854:	2332      	movs	r3, #50	; 0x32
 8001856:	2202      	movs	r2, #2
 8001858:	493f      	ldr	r1, [pc, #252]	; (8001958 <I3G450D_Init+0x134>)
 800185a:	4840      	ldr	r0, [pc, #256]	; (800195c <I3G450D_Init+0x138>)
 800185c:	f003 fdd1 	bl	8005402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	2102      	movs	r1, #2
 8001864:	483b      	ldr	r0, [pc, #236]	; (8001954 <I3G450D_Init+0x130>)
 8001866:	f002 fed1 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800186a:	2014      	movs	r0, #20
 800186c:	f001 ffce 	bl	800380c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2102      	movs	r1, #2
 8001874:	4837      	ldr	r0, [pc, #220]	; (8001954 <I3G450D_Init+0x130>)
 8001876:	f002 fec9 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800187a:	2014      	movs	r0, #20
 800187c:	f001 ffc6 	bl	800380c <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001880:	4b35      	ldr	r3, [pc, #212]	; (8001958 <I3G450D_Init+0x134>)
 8001882:	2221      	movs	r2, #33	; 0x21
 8001884:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <I3G450D_Init+0x134>)
 8001888:	2200      	movs	r2, #0
 800188a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 800188c:	2332      	movs	r3, #50	; 0x32
 800188e:	2202      	movs	r2, #2
 8001890:	4931      	ldr	r1, [pc, #196]	; (8001958 <I3G450D_Init+0x134>)
 8001892:	4832      	ldr	r0, [pc, #200]	; (800195c <I3G450D_Init+0x138>)
 8001894:	f003 fdb5 	bl	8005402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2102      	movs	r1, #2
 800189c:	482d      	ldr	r0, [pc, #180]	; (8001954 <I3G450D_Init+0x130>)
 800189e:	f002 feb5 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80018a2:	2014      	movs	r0, #20
 80018a4:	f001 ffb2 	bl	800380c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	4829      	ldr	r0, [pc, #164]	; (8001954 <I3G450D_Init+0x130>)
 80018ae:	f002 fead 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80018b2:	2014      	movs	r0, #20
 80018b4:	f001 ffaa 	bl	800380c <HAL_Delay>
	spiTxBuf[0]=0x22;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <I3G450D_Init+0x134>)
 80018ba:	2222      	movs	r2, #34	; 0x22
 80018bc:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <I3G450D_Init+0x134>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80018c4:	2332      	movs	r3, #50	; 0x32
 80018c6:	2202      	movs	r2, #2
 80018c8:	4923      	ldr	r1, [pc, #140]	; (8001958 <I3G450D_Init+0x134>)
 80018ca:	4824      	ldr	r0, [pc, #144]	; (800195c <I3G450D_Init+0x138>)
 80018cc:	f003 fd99 	bl	8005402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2102      	movs	r1, #2
 80018d4:	481f      	ldr	r0, [pc, #124]	; (8001954 <I3G450D_Init+0x130>)
 80018d6:	f002 fe99 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80018da:	2014      	movs	r0, #20
 80018dc:	f001 ff96 	bl	800380c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	481b      	ldr	r0, [pc, #108]	; (8001954 <I3G450D_Init+0x130>)
 80018e6:	f002 fe91 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80018ea:	2014      	movs	r0, #20
 80018ec:	f001 ff8e 	bl	800380c <HAL_Delay>
	spiTxBuf[0]=0x23;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <I3G450D_Init+0x134>)
 80018f2:	2223      	movs	r2, #35	; 0x23
 80018f4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <I3G450D_Init+0x134>)
 80018f8:	2220      	movs	r2, #32
 80018fa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80018fc:	2332      	movs	r3, #50	; 0x32
 80018fe:	2202      	movs	r2, #2
 8001900:	4915      	ldr	r1, [pc, #84]	; (8001958 <I3G450D_Init+0x134>)
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <I3G450D_Init+0x138>)
 8001904:	f003 fd7d 	bl	8005402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2102      	movs	r1, #2
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <I3G450D_Init+0x130>)
 800190e:	f002 fe7d 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001912:	2014      	movs	r0, #20
 8001914:	f001 ff7a 	bl	800380c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2102      	movs	r1, #2
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <I3G450D_Init+0x130>)
 800191e:	f002 fe75 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001922:	2014      	movs	r0, #20
 8001924:	f001 ff72 	bl	800380c <HAL_Delay>
	spiTxBuf[0]=0x24;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <I3G450D_Init+0x134>)
 800192a:	2224      	movs	r2, #36	; 0x24
 800192c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <I3G450D_Init+0x134>)
 8001930:	2210      	movs	r2, #16
 8001932:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001934:	2332      	movs	r3, #50	; 0x32
 8001936:	2202      	movs	r2, #2
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <I3G450D_Init+0x134>)
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <I3G450D_Init+0x138>)
 800193c:	f003 fd61 	bl	8005402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2102      	movs	r1, #2
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <I3G450D_Init+0x130>)
 8001946:	f002 fe61 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800194a:	2014      	movs	r0, #20
 800194c:	f001 ff5e 	bl	800380c <HAL_Delay>

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020800 	.word	0x40020800
 8001958:	200030e8 	.word	0x200030e8
 800195c:	20003150 	.word	0x20003150

08001960 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b098      	sub	sp, #96	; 0x60
 8001964:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001966:	2300      	movs	r3, #0
 8001968:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 800196c:	2300      	movs	r3, #0
 800196e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 8001972:	2300      	movs	r3, #0
 8001974:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 800197c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <I3G450D_loop+0x1b0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <I3G450D_loop+0x6a>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	f000 80ba 	beq.w	8001b3c <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 80019c8:	e36d      	b.n	80020a6 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <I3G450D_loop+0x1b4>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	f040 8368 	bne.w	80020a4 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2102      	movs	r1, #2
 80019d8:	484f      	ldr	r0, [pc, #316]	; (8001b18 <I3G450D_loop+0x1b8>)
 80019da:	f002 fe17 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 80019de:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <I3G450D_loop+0x1bc>)
 80019e0:	22a8      	movs	r2, #168	; 0xa8
 80019e2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80019e4:	2332      	movs	r3, #50	; 0x32
 80019e6:	2201      	movs	r2, #1
 80019e8:	494c      	ldr	r1, [pc, #304]	; (8001b1c <I3G450D_loop+0x1bc>)
 80019ea:	484d      	ldr	r0, [pc, #308]	; (8001b20 <I3G450D_loop+0x1c0>)
 80019ec:	f003 fd09 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80019f0:	2332      	movs	r3, #50	; 0x32
 80019f2:	2201      	movs	r2, #1
 80019f4:	494b      	ldr	r1, [pc, #300]	; (8001b24 <I3G450D_loop+0x1c4>)
 80019f6:	484a      	ldr	r0, [pc, #296]	; (8001b20 <I3G450D_loop+0x1c0>)
 80019f8:	f003 fe3f 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2102      	movs	r1, #2
 8001a00:	4845      	ldr	r0, [pc, #276]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a02:	f002 fe03 	bl	800460c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4843      	ldr	r0, [pc, #268]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a0c:	f002 fdfe 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a12:	22a9      	movs	r2, #169	; 0xa9
 8001a14:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001a16:	2332      	movs	r3, #50	; 0x32
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4940      	ldr	r1, [pc, #256]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a1c:	4840      	ldr	r0, [pc, #256]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a1e:	f003 fcf0 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 8001a22:	2332      	movs	r3, #50	; 0x32
 8001a24:	2201      	movs	r2, #1
 8001a26:	4940      	ldr	r1, [pc, #256]	; (8001b28 <I3G450D_loop+0x1c8>)
 8001a28:	483d      	ldr	r0, [pc, #244]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a2a:	f003 fe26 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2102      	movs	r1, #2
 8001a32:	4839      	ldr	r0, [pc, #228]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a34:	f002 fdea 	bl	800460c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4836      	ldr	r0, [pc, #216]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a3e:	f002 fde5 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a44:	22aa      	movs	r2, #170	; 0xaa
 8001a46:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001a48:	2332      	movs	r3, #50	; 0x32
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4933      	ldr	r1, [pc, #204]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a4e:	4834      	ldr	r0, [pc, #208]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a50:	f003 fcd7 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8001a54:	2332      	movs	r3, #50	; 0x32
 8001a56:	2201      	movs	r2, #1
 8001a58:	4934      	ldr	r1, [pc, #208]	; (8001b2c <I3G450D_loop+0x1cc>)
 8001a5a:	4831      	ldr	r0, [pc, #196]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a5c:	f003 fe0d 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2102      	movs	r1, #2
 8001a64:	482c      	ldr	r0, [pc, #176]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a66:	f002 fdd1 	bl	800460c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	482a      	ldr	r0, [pc, #168]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a70:	f002 fdcc 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a76:	22ab      	movs	r2, #171	; 0xab
 8001a78:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001a7a:	2332      	movs	r3, #50	; 0x32
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4927      	ldr	r1, [pc, #156]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001a80:	4827      	ldr	r0, [pc, #156]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a82:	f003 fcbe 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8001a86:	2332      	movs	r3, #50	; 0x32
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4929      	ldr	r1, [pc, #164]	; (8001b30 <I3G450D_loop+0x1d0>)
 8001a8c:	4824      	ldr	r0, [pc, #144]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001a8e:	f003 fdf4 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2102      	movs	r1, #2
 8001a96:	4820      	ldr	r0, [pc, #128]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001a98:	f002 fdb8 	bl	800460c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	481d      	ldr	r0, [pc, #116]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001aa2:	f002 fdb3 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001aa8:	22ac      	movs	r2, #172	; 0xac
 8001aaa:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001aac:	2332      	movs	r3, #50	; 0x32
 8001aae:	2201      	movs	r2, #1
 8001ab0:	491a      	ldr	r1, [pc, #104]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001ab4:	f003 fca5 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001ab8:	2332      	movs	r3, #50	; 0x32
 8001aba:	2201      	movs	r2, #1
 8001abc:	491d      	ldr	r1, [pc, #116]	; (8001b34 <I3G450D_loop+0x1d4>)
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001ac0:	f003 fddb 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001aca:	f002 fd9f 	bl	800460c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001ad4:	f002 fd9a 	bl	800460c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001ada:	22ad      	movs	r2, #173	; 0xad
 8001adc:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001ade:	2332      	movs	r3, #50	; 0x32
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <I3G450D_loop+0x1bc>)
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001ae6:	f003 fc8c 	bl	8005402 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001aea:	2332      	movs	r3, #50	; 0x32
 8001aec:	2201      	movs	r2, #1
 8001aee:	4912      	ldr	r1, [pc, #72]	; (8001b38 <I3G450D_loop+0x1d8>)
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <I3G450D_loop+0x1c0>)
 8001af2:	f003 fdc2 	bl	800567a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2102      	movs	r1, #2
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <I3G450D_loop+0x1b8>)
 8001afc:	f002 fd86 	bl	800460c <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <I3G450D_loop+0x1b0>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8001b06:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <I3G450D_loop+0x1b4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
				break;
 8001b0c:	e2ca      	b.n	80020a4 <I3G450D_loop+0x744>
 8001b0e:	bf00      	nop
 8001b10:	200001b0 	.word	0x200001b0
 8001b14:	20000000 	.word	0x20000000
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	200030e8 	.word	0x200030e8
 8001b20:	20003150 	.word	0x20003150
 8001b24:	200030ed 	.word	0x200030ed
 8001b28:	200030ee 	.word	0x200030ee
 8001b2c:	200030ef 	.word	0x200030ef
 8001b30:	200030f0 	.word	0x200030f0
 8001b34:	200030f1 	.word	0x200030f1
 8001b38:	200030f2 	.word	0x200030f2
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8001b3c:	4ba0      	ldr	r3, [pc, #640]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b3e:	789b      	ldrb	r3, [r3, #2]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	4b9e      	ldr	r3, [pc, #632]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8001b52:	4b9b      	ldr	r3, [pc, #620]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	4b99      	ldr	r3, [pc, #612]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001b68:	4b95      	ldr	r3, [pc, #596]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b6a:	799b      	ldrb	r3, [r3, #6]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <I3G450D_loop+0x460>)
 8001b72:	795b      	ldrb	r3, [r3, #5]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <I3G450D_loop+0x464>)
 8001b84:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001b86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <I3G450D_loop+0x468>)
 8001b8e:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8001b90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <I3G450D_loop+0x46c>)
 8001b96:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001b98:	4b8d      	ldr	r3, [pc, #564]	; (8001dd0 <I3G450D_loop+0x470>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	f040 80d5 	bne.w	8001d4c <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8001ba2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <I3G450D_loop+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001dd8 <I3G450D_loop+0x478>
 8001bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc0:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <I3G450D_loop+0x47c>)
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001bc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b84      	ldr	r3, [pc, #528]	; (8001de0 <I3G450D_loop+0x480>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001dd8 <I3G450D_loop+0x478>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <I3G450D_loop+0x484>)
 8001be6:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001bea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <I3G450D_loop+0x488>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001dd8 <I3G450D_loop+0x478>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	4b79      	ldr	r3, [pc, #484]	; (8001dec <I3G450D_loop+0x48c>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8001c0c:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <I3G450D_loop+0x490>)
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8001c10:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <I3G450D_loop+0x47c>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <I3G450D_loop+0x494>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	dc0c      	bgt.n	8001c40 <I3G450D_loop+0x2e0>
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <I3G450D_loop+0x494>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <I3G450D_loop+0x47c>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd1b      	ble.n	8001c78 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <I3G450D_loop+0x47c>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <I3G450D_loop+0x498>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c60:	4b66      	ldr	r3, [pc, #408]	; (8001dfc <I3G450D_loop+0x49c>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <I3G450D_loop+0x49c>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <I3G450D_loop+0x47c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <I3G450D_loop+0x498>)
 8001c76:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001c78:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <I3G450D_loop+0x484>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <I3G450D_loop+0x4a0>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dc0c      	bgt.n	8001ca8 <I3G450D_loop+0x348>
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <I3G450D_loop+0x4a0>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb1 7a67 	vneg.f32	s14, s15
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <I3G450D_loop+0x484>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	dd1b      	ble.n	8001ce0 <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <I3G450D_loop+0x484>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <I3G450D_loop+0x4a4>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <I3G450D_loop+0x4a8>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <I3G450D_loop+0x4a8>)
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001cd8:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <I3G450D_loop+0x484>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a49      	ldr	r2, [pc, #292]	; (8001e04 <I3G450D_loop+0x4a4>)
 8001cde:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <I3G450D_loop+0x48c>)
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <I3G450D_loop+0x4ac>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	dc0d      	bgt.n	8001d12 <I3G450D_loop+0x3b2>
 8001cf6:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <I3G450D_loop+0x4ac>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb1 7a67 	vneg.f32	s14, s15
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <I3G450D_loop+0x48c>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	f340 81c2 	ble.w	8002096 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <I3G450D_loop+0x48c>)
 8001d14:	ed93 7a00 	vldr	s14, [r3]
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <I3G450D_loop+0x4b0>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <I3G450D_loop+0x4b4>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <I3G450D_loop+0x4b4>)
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <I3G450D_loop+0x48c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <I3G450D_loop+0x4b0>)
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e1a4      	b.n	8002096 <I3G450D_loop+0x736>
				switch(currentcalistate)
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <I3G450D_loop+0x470>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	f000 819b 	beq.w	800208c <I3G450D_loop+0x72c>
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f300 819a 	bgt.w	8002090 <I3G450D_loop+0x730>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <I3G450D_loop+0x406>
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d029      	beq.n	8001db8 <I3G450D_loop+0x458>
						break;
 8001d64:	e194      	b.n	8002090 <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001d6e:	b211      	sxth	r1, r2
 8001d70:	4a2a      	ldr	r2, [pc, #168]	; (8001e1c <I3G450D_loop+0x4bc>)
 8001d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d7e:	b211      	sxth	r1, r2
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <I3G450D_loop+0x4c0>)
 8001d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d8c:	b211      	sxth	r1, r2
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <I3G450D_loop+0x4c4>)
 8001d90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001d9c:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001da6:	f0c0 8175 	bcc.w	8002094 <I3G450D_loop+0x734>
							caliCounter=0;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <I3G450D_loop+0x4b8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <I3G450D_loop+0x470>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
						break;
 8001db6:	e16d      	b.n	8002094 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	e0a5      	b.n	8001f0a <I3G450D_loop+0x5aa>
 8001dbe:	bf00      	nop
 8001dc0:	200030ec 	.word	0x200030ec
 8001dc4:	200001fc 	.word	0x200001fc
 8001dc8:	200001fe 	.word	0x200001fe
 8001dcc:	20000200 	.word	0x20000200
 8001dd0:	200001af 	.word	0x200001af
 8001dd4:	200001c0 	.word	0x200001c0
 8001dd8:	3d8f5c29 	.word	0x3d8f5c29
 8001ddc:	200001b4 	.word	0x200001b4
 8001de0:	200001c4 	.word	0x200001c4
 8001de4:	200001b8 	.word	0x200001b8
 8001de8:	200001c8 	.word	0x200001c8
 8001dec:	200001bc 	.word	0x200001bc
 8001df0:	3b449ba6 	.word	0x3b449ba6
 8001df4:	200001cc 	.word	0x200001cc
 8001df8:	200001e4 	.word	0x200001e4
 8001dfc:	200001d8 	.word	0x200001d8
 8001e00:	200001d0 	.word	0x200001d0
 8001e04:	200001e8 	.word	0x200001e8
 8001e08:	200001dc 	.word	0x200001dc
 8001e0c:	200001d4 	.word	0x200001d4
 8001e10:	200001ec 	.word	0x200001ec
 8001e14:	200001e0 	.word	0x200001e0
 8001e18:	20000204 	.word	0x20000204
 8001e1c:	20000208 	.word	0x20000208
 8001e20:	200011a8 	.word	0x200011a8
 8001e24:	20002148 	.word	0x20002148
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	3360      	adds	r3, #96	; 0x60
 8001e2e:	443b      	add	r3, r7
 8001e30:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001e34:	461a      	mov	r2, r3
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	499d      	ldr	r1, [pc, #628]	; (80020b0 <I3G450D_loop+0x750>)
 8001e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e3e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001e42:	4413      	add	r3, r2
 8001e44:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8001e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	3360      	adds	r3, #96	; 0x60
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8001e52:	461a      	mov	r2, r3
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	4996      	ldr	r1, [pc, #600]	; (80020b4 <I3G450D_loop+0x754>)
 8001e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e5c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001e60:	4413      	add	r3, r2
 8001e62:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	4990      	ldr	r1, [pc, #576]	; (80020b8 <I3G450D_loop+0x758>)
 8001e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e7a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001e7e:	4413      	add	r3, r2
 8001e80:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8001e82:	4a8b      	ldr	r2, [pc, #556]	; (80020b0 <I3G450D_loop+0x750>)
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e86:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	3360      	adds	r3, #96	; 0x60
 8001e90:	443b      	add	r3, r7
 8001e92:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001e96:	4a87      	ldr	r2, [pc, #540]	; (80020b4 <I3G450D_loop+0x754>)
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	443b      	add	r3, r7
 8001ea6:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001eaa:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <I3G450D_loop+0x758>)
 8001eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eae:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	3360      	adds	r3, #96	; 0x60
 8001eb8:	443b      	add	r3, r7
 8001eba:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8001ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec0:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <I3G450D_loop+0x75c>)
 8001ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec6:	1092      	asrs	r2, r2, #2
 8001ec8:	17db      	asrs	r3, r3, #31
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	4a7c      	ldr	r2, [pc, #496]	; (80020c0 <I3G450D_loop+0x760>)
 8001ece:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <I3G450D_loop+0x75c>)
 8001ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed8:	1092      	asrs	r2, r2, #2
 8001eda:	17db      	asrs	r3, r3, #31
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	4a79      	ldr	r2, [pc, #484]	; (80020c4 <I3G450D_loop+0x764>)
 8001ee0:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8001ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee4:	4a75      	ldr	r2, [pc, #468]	; (80020bc <I3G450D_loop+0x75c>)
 8001ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eea:	1092      	asrs	r2, r2, #2
 8001eec:	17db      	asrs	r3, r3, #31
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a75      	ldr	r2, [pc, #468]	; (80020c8 <I3G450D_loop+0x768>)
 8001ef2:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	2b09      	cmp	r3, #9
 8001efe:	d901      	bls.n	8001f04 <I3G450D_loop+0x5a4>
									windowPosition=0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f06:	3301      	adds	r3, #1
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f10:	d38a      	bcc.n	8001e28 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f16:	e089      	b.n	800202c <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <I3G450D_loop+0x750>)
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <I3G450D_loop+0x760>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1ad2      	subs	r2, r2, r3
 8001f28:	4b68      	ldr	r3, [pc, #416]	; (80020cc <I3G450D_loop+0x76c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dd0a      	ble.n	8001f46 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8001f30:	4a5f      	ldr	r2, [pc, #380]	; (80020b0 <I3G450D_loop+0x750>)
 8001f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <I3G450D_loop+0x760>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a62      	ldr	r2, [pc, #392]	; (80020cc <I3G450D_loop+0x76c>)
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e015      	b.n	8001f72 <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8001f46:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <I3G450D_loop+0x750>)
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <I3G450D_loop+0x760>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <I3G450D_loop+0x76c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	da08      	bge.n	8001f72 <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <I3G450D_loop+0x760>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4952      	ldr	r1, [pc, #328]	; (80020b0 <I3G450D_loop+0x750>)
 8001f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f68:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	4a57      	ldr	r2, [pc, #348]	; (80020cc <I3G450D_loop+0x76c>)
 8001f70:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8001f72:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <I3G450D_loop+0x754>)
 8001f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f76:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <I3G450D_loop+0x764>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <I3G450D_loop+0x770>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dd0a      	ble.n	8001fa0 <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <I3G450D_loop+0x754>)
 8001f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <I3G450D_loop+0x764>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <I3G450D_loop+0x770>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e015      	b.n	8001fcc <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001fa0:	4a44      	ldr	r2, [pc, #272]	; (80020b4 <I3G450D_loop+0x754>)
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <I3G450D_loop+0x764>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <I3G450D_loop+0x770>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	da08      	bge.n	8001fcc <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <I3G450D_loop+0x764>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	493d      	ldr	r1, [pc, #244]	; (80020b4 <I3G450D_loop+0x754>)
 8001fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <I3G450D_loop+0x770>)
 8001fca:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <I3G450D_loop+0x758>)
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <I3G450D_loop+0x768>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <I3G450D_loop+0x774>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dd0a      	ble.n	8001ffa <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <I3G450D_loop+0x758>)
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <I3G450D_loop+0x768>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <I3G450D_loop+0x774>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e015      	b.n	8002026 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	; (80020b8 <I3G450D_loop+0x758>)
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002002:	461a      	mov	r2, r3
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <I3G450D_loop+0x768>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1ad2      	subs	r2, r2, r3
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <I3G450D_loop+0x774>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	425b      	negs	r3, r3
 8002010:	429a      	cmp	r2, r3
 8002012:	da08      	bge.n	8002026 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <I3G450D_loop+0x768>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4927      	ldr	r1, [pc, #156]	; (80020b8 <I3G450D_loop+0x758>)
 800201a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800201c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <I3G450D_loop+0x774>)
 8002024:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8002026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002028:	3301      	adds	r3, #1
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
 800202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002032:	f4ff af71 	bcc.w	8001f18 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <I3G450D_loop+0x76c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002042:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80020d8 <I3G450D_loop+0x778>
 8002046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <I3G450D_loop+0x77c>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <I3G450D_loop+0x770>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80020d8 <I3G450D_loop+0x778>
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <I3G450D_loop+0x780>)
 8002066:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <I3G450D_loop+0x774>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80020d8 <I3G450D_loop+0x778>
 800207a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <I3G450D_loop+0x784>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <I3G450D_loop+0x788>)
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
							break;
 800208a:	e004      	b.n	8002096 <I3G450D_loop+0x736>
						break;
 800208c:	bf00      	nop
 800208e:	e002      	b.n	8002096 <I3G450D_loop+0x736>
						break;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <I3G450D_loop+0x736>
						break;
 8002094:	bf00      	nop
			currentState=L3GD20_fisrt;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <I3G450D_loop+0x78c>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <I3G450D_loop+0x790>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
			break;
 80020a2:	e000      	b.n	80020a6 <I3G450D_loop+0x746>
				break;
 80020a4:	bf00      	nop

		}
}
 80020a6:	bf00      	nop
 80020a8:	3760      	adds	r7, #96	; 0x60
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000208 	.word	0x20000208
 80020b4:	200011a8 	.word	0x200011a8
 80020b8:	20002148 	.word	0x20002148
 80020bc:	66666667 	.word	0x66666667
 80020c0:	200001c0 	.word	0x200001c0
 80020c4:	200001c4 	.word	0x200001c4
 80020c8:	200001c8 	.word	0x200001c8
 80020cc:	200001f0 	.word	0x200001f0
 80020d0:	200001f4 	.word	0x200001f4
 80020d4:	200001f8 	.word	0x200001f8
 80020d8:	3d8f5c29 	.word	0x3d8f5c29
 80020dc:	200001cc 	.word	0x200001cc
 80020e0:	200001d0 	.word	0x200001d0
 80020e4:	200001d4 	.word	0x200001d4
 80020e8:	200001af 	.word	0x200001af
 80020ec:	200001b0 	.word	0x200001b0
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80020fc:	2100      	movs	r1, #0
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002100:	f004 f90e 	bl	8006320 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200031a8 	.word	0x200031a8
 8002118:	200032f0 	.word	0x200032f0

0800211c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	b2d9      	uxtb	r1, r3
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <Set_LED+0x58>)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	b2d9      	uxtb	r1, r3
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <Set_LED+0x58>)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	460a      	mov	r2, r1
 8002144:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <Set_LED+0x58>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	460a      	mov	r2, r1
 8002154:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2d9      	uxtb	r1, r3
 800215a:	4a06      	ldr	r2, [pc, #24]	; (8002174 <Set_LED+0x58>)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	460a      	mov	r2, r1
 8002164:	70da      	strb	r2, [r3, #3]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200032d8 	.word	0x200032d8

08002178 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	e036      	b.n	800220a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <WS2812_Send+0xcc>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	041a      	lsls	r2, r3, #16
 80021a8:	492b      	ldr	r1, [pc, #172]	; (8002258 <WS2812_Send+0xcc>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	789b      	ldrb	r3, [r3, #2]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	431a      	orrs	r2, r3
 80021b6:	4928      	ldr	r1, [pc, #160]	; (8002258 <WS2812_Send+0xcc>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 80021c4:	2317      	movs	r3, #23
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e019      	b.n	80021fe <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80021ca:	2201      	movs	r2, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <WS2812_Send+0xd0>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	213c      	movs	r1, #60	; 0x3c
 80021e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80021e6:	e004      	b.n	80021f2 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <WS2812_Send+0xd0>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	211e      	movs	r1, #30
 80021ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dae2      	bge.n	80021ca <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3301      	adds	r3, #1
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b05      	cmp	r3, #5
 800220e:	ddc5      	ble.n	800219c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	e00a      	b.n	800222c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <WS2812_Send+0xd0>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2100      	movs	r1, #0
 800221c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b31      	cmp	r3, #49	; 0x31
 8002230:	ddf1      	ble.n	8002216 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <WS2812_Send+0xd0>)
 8002238:	2100      	movs	r1, #0
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <WS2812_Send+0xd4>)
 800223c:	f003 fea8 	bl	8005f90 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8002240:	bf00      	nop
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <WS2812_Send+0xd8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0fb      	beq.n	8002242 <WS2812_Send+0xb6>
	datasentflag = 0;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <WS2812_Send+0xd8>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200032d8 	.word	0x200032d8
 800225c:	200032f4 	.word	0x200032f4
 8002260:	200031a8 	.word	0x200031a8
 8002264:	200032f0 	.word	0x200032f0

08002268 <rainbow_effect_right>:
  return 0x01;
}



uint8_t rainbow_effect_right() {
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
    // Colors: 3 (255.0.0, 0.255.0, 0.0.255)
    // Options: rainbowlen=8, toLeft=false,
//  if(millis() - strip_0.effStart < 30 * (strip_0.effStep)) return 0x00;
  float factor1, factor2;
  uint16_t ind;
  for(uint16_t j=0;j<8;j++) {
 800226e:	2300      	movs	r3, #0
 8002270:	81fb      	strh	r3, [r7, #14]
 8002272:	e233      	b.n	80026dc <rainbow_effect_right+0x474>
    ind = 14 - (int16_t)(effStep - j * 1.75) % 14;
 8002274:	4bc2      	ldr	r3, [pc, #776]	; (8002580 <rainbow_effect_right+0x318>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f95b 	bl	8000534 <__aeabi_i2d>
 800227e:	4604      	mov	r4, r0
 8002280:	460d      	mov	r5, r1
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f955 	bl	8000534 <__aeabi_i2d>
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4bbd      	ldr	r3, [pc, #756]	; (8002584 <rainbow_effect_right+0x31c>)
 8002290:	f7fe f9ba 	bl	8000608 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f7fd fffc 	bl	8000298 <__aeabi_dsub>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fbc0 	bl	8000a2c <__aeabi_d2iz>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	4bb5      	ldr	r3, [pc, #724]	; (8002588 <rainbow_effect_right+0x320>)
 80022b2:	fb83 1302 	smull	r1, r3, r3, r2
 80022b6:	4413      	add	r3, r2
 80022b8:	10d9      	asrs	r1, r3, #3
 80022ba:	17d3      	asrs	r3, r2, #31
 80022bc:	1ac9      	subs	r1, r1, r3
 80022be:	460b      	mov	r3, r1
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a5b      	subs	r3, r3, r1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f1c3 030e 	rsb	r3, r3, #14
 80022d0:	81bb      	strh	r3, [r7, #12]
    switch((int)((ind % 14) / 4.666666666666667)) {
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	0853      	lsrs	r3, r2, #1
 80022d6:	49ac      	ldr	r1, [pc, #688]	; (8002588 <rainbow_effect_right+0x320>)
 80022d8:	fba1 1303 	umull	r1, r3, r1, r3
 80022dc:	0899      	lsrs	r1, r3, #2
 80022de:	460b      	mov	r3, r1
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a5b      	subs	r3, r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f922 	bl	8000534 <__aeabi_i2d>
 80022f0:	a3a1      	add	r3, pc, #644	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe fab1 	bl	800085c <__aeabi_ddiv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f7fe fb93 	bl	8000a2c <__aeabi_d2iz>
 8002306:	4603      	mov	r3, r0
 8002308:	2b02      	cmp	r3, #2
 800230a:	f000 8145 	beq.w	8002598 <rainbow_effect_right+0x330>
 800230e:	2b02      	cmp	r3, #2
 8002310:	f300 81e1 	bgt.w	80026d6 <rainbow_effect_right+0x46e>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <rainbow_effect_right+0xb8>
 8002318:	2b01      	cmp	r3, #1
 800231a:	f000 808c 	beq.w	8002436 <rainbow_effect_right+0x1ce>
 800231e:	e1da      	b.n	80026d6 <rainbow_effect_right+0x46e>
      case 0: factor1 = 1.0 - ((float)(ind % 14 - 0 * 4.666666666666667) / 4.666666666666667);
 8002320:	89ba      	ldrh	r2, [r7, #12]
 8002322:	0853      	lsrs	r3, r2, #1
 8002324:	4998      	ldr	r1, [pc, #608]	; (8002588 <rainbow_effect_right+0x320>)
 8002326:	fba1 1303 	umull	r1, r3, r1, r3
 800232a:	0899      	lsrs	r1, r3, #2
 800232c:	460b      	mov	r3, r1
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a5b      	subs	r3, r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8fb 	bl	8000534 <__aeabi_i2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fb99 	bl	8000a7c <__aeabi_d2f>
 800234a:	4603      	mov	r3, r0
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f903 	bl	8000558 <__aeabi_f2d>
 8002352:	a389      	add	r3, pc, #548	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe fa80 	bl	800085c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	4989      	ldr	r1, [pc, #548]	; (800258c <rainbow_effect_right+0x324>)
 8002366:	f7fd ff97 	bl	8000298 <__aeabi_dsub>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fb83 	bl	8000a7c <__aeabi_d2f>
 8002376:	4603      	mov	r3, r0
 8002378:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 0) % 14) / 4.666666666666667;
 800237a:	89ba      	ldrh	r2, [r7, #12]
 800237c:	4b82      	ldr	r3, [pc, #520]	; (8002588 <rainbow_effect_right+0x320>)
 800237e:	fb83 1302 	smull	r1, r3, r3, r2
 8002382:	4413      	add	r3, r2
 8002384:	10d9      	asrs	r1, r3, #3
 8002386:	17d3      	asrs	r3, r2, #31
 8002388:	1ac9      	subs	r1, r1, r3
 800238a:	460b      	mov	r3, r1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	1a5b      	subs	r3, r3, r1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	1ad1      	subs	r1, r2, r3
 8002394:	ee07 1a90 	vmov	s15, r1
 8002398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800239c:	ee17 0a90 	vmov	r0, s15
 80023a0:	f7fe f8da 	bl	8000558 <__aeabi_f2d>
 80023a4:	a374      	add	r3, pc, #464	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe fa57 	bl	800085c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fb61 	bl	8000a7c <__aeabi_d2f>
 80023ba:	4603      	mov	r3, r0
 80023bc:	607b      	str	r3, [r7, #4]
              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 80023be:	89f8      	ldrh	r0, [r7, #14]
 80023c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002590 <rainbow_effect_right+0x328>
 80023c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002594 <rainbow_effect_right+0x32c>
 80023d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023dc:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80023e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002594 <rainbow_effect_right+0x32c>
 80023e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002590 <rainbow_effect_right+0x328>
 80023f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002594 <rainbow_effect_right+0x32c>
 8002408:	ee27 7a87 	vmul.f32	s14, s15, s14
 800240c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002410:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002594 <rainbow_effect_right+0x32c>
 8002414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	ee15 2a90 	vmov	r2, s11
 8002428:	ee16 1a10 	vmov	r1, s12
 800242c:	f7ff fe76 	bl	800211c <Set_LED>
              WS2812_Send();
 8002430:	f7ff feac 	bl	800218c <WS2812_Send>
              break;
 8002434:	e14f      	b.n	80026d6 <rainbow_effect_right+0x46e>
      case 1: factor1 = 1.0 - ((float)(ind % 14 - 1 * 4.666666666666667) / 4.666666666666667);
 8002436:	89ba      	ldrh	r2, [r7, #12]
 8002438:	0853      	lsrs	r3, r2, #1
 800243a:	4953      	ldr	r1, [pc, #332]	; (8002588 <rainbow_effect_right+0x320>)
 800243c:	fba1 1303 	umull	r1, r3, r1, r3
 8002440:	0899      	lsrs	r1, r3, #2
 8002442:	460b      	mov	r3, r1
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a5b      	subs	r3, r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f870 	bl	8000534 <__aeabi_i2d>
 8002454:	a348      	add	r3, pc, #288	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fd ff1d 	bl	8000298 <__aeabi_dsub>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fb09 	bl	8000a7c <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f873 	bl	8000558 <__aeabi_f2d>
 8002472:	a341      	add	r3, pc, #260	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f9f0 	bl	800085c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	4941      	ldr	r1, [pc, #260]	; (800258c <rainbow_effect_right+0x324>)
 8002486:	f7fd ff07 	bl	8000298 <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe faf3 	bl	8000a7c <__aeabi_d2f>
 8002496:	4603      	mov	r3, r0
 8002498:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 4.666666666666667) % 14) / 4.666666666666667;
 800249a:	89bb      	ldrh	r3, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f849 	bl	8000534 <__aeabi_i2d>
 80024a2:	a335      	add	r3, pc, #212	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fd fef6 	bl	8000298 <__aeabi_dsub>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe faba 	bl	8000a2c <__aeabi_d2iz>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <rainbow_effect_right+0x320>)
 80024bc:	fb83 1302 	smull	r1, r3, r3, r2
 80024c0:	4413      	add	r3, r2
 80024c2:	10d9      	asrs	r1, r3, #3
 80024c4:	17d3      	asrs	r3, r2, #31
 80024c6:	1ac9      	subs	r1, r1, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a5b      	subs	r3, r3, r1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	1ad1      	subs	r1, r2, r3
 80024d2:	ee07 1a90 	vmov	s15, r1
 80024d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024da:	ee17 0a90 	vmov	r0, s15
 80024de:	f7fe f83b 	bl	8000558 <__aeabi_f2d>
 80024e2:	a325      	add	r3, pc, #148	; (adr r3, 8002578 <rainbow_effect_right+0x310>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f9b8 	bl	800085c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fac2 	bl	8000a7c <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	607b      	str	r3, [r7, #4]
              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 80024fc:	89f8      	ldrh	r0, [r7, #14]
 80024fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002502:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002594 <rainbow_effect_right+0x32c>
 8002506:	ee27 7a87 	vmul.f32	s14, s15, s14
 800250a:	edd7 7a01 	vldr	s15, [r7, #4]
 800250e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002594 <rainbow_effect_right+0x32c>
 8002512:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800251e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002522:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002590 <rainbow_effect_right+0x328>
 8002526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800252a:	edd7 7a01 	vldr	s15, [r7, #4]
 800252e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002594 <rainbow_effect_right+0x32c>
 8002532:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800253e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002542:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002594 <rainbow_effect_right+0x32c>
 8002546:	ee27 7a87 	vmul.f32	s14, s15, s14
 800254a:	edd7 7a01 	vldr	s15, [r7, #4]
 800254e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002590 <rainbow_effect_right+0x328>
 8002552:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	ee15 2a90 	vmov	r2, s11
 8002566:	ee16 1a10 	vmov	r1, s12
 800256a:	f7ff fdd7 	bl	800211c <Set_LED>
              WS2812_Send();
 800256e:	f7ff fe0d 	bl	800218c <WS2812_Send>
              break;
 8002572:	e0b0      	b.n	80026d6 <rainbow_effect_right+0x46e>
 8002574:	f3af 8000 	nop.w
 8002578:	aaaaaaab 	.word	0xaaaaaaab
 800257c:	4012aaaa 	.word	0x4012aaaa
 8002580:	20003478 	.word	0x20003478
 8002584:	3ffc0000 	.word	0x3ffc0000
 8002588:	92492493 	.word	0x92492493
 800258c:	3ff00000 	.word	0x3ff00000
 8002590:	437f0000 	.word	0x437f0000
 8002594:	00000000 	.word	0x00000000
      case 2: factor1 = 1.0 - ((float)(ind % 14 - 2 * 4.666666666666667) / 4.666666666666667);
 8002598:	89ba      	ldrh	r2, [r7, #12]
 800259a:	0853      	lsrs	r3, r2, #1
 800259c:	4960      	ldr	r1, [pc, #384]	; (8002720 <rainbow_effect_right+0x4b8>)
 800259e:	fba1 1303 	umull	r1, r3, r1, r3
 80025a2:	0899      	lsrs	r1, r3, #2
 80025a4:	460b      	mov	r3, r1
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a5b      	subs	r3, r3, r1
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffbf 	bl	8000534 <__aeabi_i2d>
 80025b6:	a356      	add	r3, pc, #344	; (adr r3, 8002710 <rainbow_effect_right+0x4a8>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe6c 	bl	8000298 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fa58 	bl	8000a7c <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffc2 	bl	8000558 <__aeabi_f2d>
 80025d4:	a350      	add	r3, pc, #320	; (adr r3, 8002718 <rainbow_effect_right+0x4b0>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f93f 	bl	800085c <__aeabi_ddiv>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	494f      	ldr	r1, [pc, #316]	; (8002724 <rainbow_effect_right+0x4bc>)
 80025e8:	f7fd fe56 	bl	8000298 <__aeabi_dsub>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fa42 	bl	8000a7c <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
 80025fc:	89bb      	ldrh	r3, [r7, #12]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff98 	bl	8000534 <__aeabi_i2d>
 8002604:	a342      	add	r3, pc, #264	; (adr r3, 8002710 <rainbow_effect_right+0x4a8>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fd fe45 	bl	8000298 <__aeabi_dsub>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fe fa09 	bl	8000a2c <__aeabi_d2iz>
 800261a:	4602      	mov	r2, r0
 800261c:	4b40      	ldr	r3, [pc, #256]	; (8002720 <rainbow_effect_right+0x4b8>)
 800261e:	fb83 1302 	smull	r1, r3, r3, r2
 8002622:	4413      	add	r3, r2
 8002624:	10d9      	asrs	r1, r3, #3
 8002626:	17d3      	asrs	r3, r2, #31
 8002628:	1ac9      	subs	r1, r1, r3
 800262a:	460b      	mov	r3, r1
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1ad1      	subs	r1, r2, r3
 8002634:	ee07 1a90 	vmov	s15, r1
 8002638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263c:	ee17 0a90 	vmov	r0, s15
 8002640:	f7fd ff8a 	bl	8000558 <__aeabi_f2d>
 8002644:	a334      	add	r3, pc, #208	; (adr r3, 8002718 <rainbow_effect_right+0x4b0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe f907 	bl	800085c <__aeabi_ddiv>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fa11 	bl	8000a7c <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	607b      	str	r3, [r7, #4]
              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 800265e:	89f8      	ldrh	r0, [r7, #14]
 8002660:	edd7 7a02 	vldr	s15, [r7, #8]
 8002664:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002728 <rainbow_effect_right+0x4c0>
 8002668:	ee27 7a87 	vmul.f32	s14, s15, s14
 800266c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002670:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800272c <rainbow_effect_right+0x4c4>
 8002674:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8002680:	edd7 7a02 	vldr	s15, [r7, #8]
 8002684:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002728 <rainbow_effect_right+0x4c0>
 8002688:	ee27 7a87 	vmul.f32	s14, s15, s14
 800268c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002690:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002728 <rainbow_effect_right+0x4c0>
 8002694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80026a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800272c <rainbow_effect_right+0x4c4>
 80026a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002728 <rainbow_effect_right+0x4c0>
 80026b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c0:	ee17 3a90 	vmov	r3, s15
 80026c4:	ee15 2a90 	vmov	r2, s11
 80026c8:	ee16 1a10 	vmov	r1, s12
 80026cc:	f7ff fd26 	bl	800211c <Set_LED>
              WS2812_Send();
 80026d0:	f7ff fd5c 	bl	800218c <WS2812_Send>
              break;
 80026d4:	bf00      	nop
  for(uint16_t j=0;j<8;j++) {
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	3301      	adds	r3, #1
 80026da:	81fb      	strh	r3, [r7, #14]
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	2b07      	cmp	r3, #7
 80026e0:	f67f adc8 	bls.w	8002274 <rainbow_effect_right+0xc>
    }
  }
  if(effStep >= 14) {effStep = 0; return 0x03; }
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <rainbow_effect_right+0x4c8>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b0d      	cmp	r3, #13
 80026ea:	d904      	bls.n	80026f6 <rainbow_effect_right+0x48e>
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <rainbow_effect_right+0x4c8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	2303      	movs	r3, #3
 80026f4:	e006      	b.n	8002704 <rainbow_effect_right+0x49c>
  else effStep++;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <rainbow_effect_right+0x4c8>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <rainbow_effect_right+0x4c8>)
 8002700:	801a      	strh	r2, [r3, #0]
  return 0x01;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	f3af 8000 	nop.w
 8002710:	aaaaaaab 	.word	0xaaaaaaab
 8002714:	4022aaaa 	.word	0x4022aaaa
 8002718:	aaaaaaab 	.word	0xaaaaaaab
 800271c:	4012aaaa 	.word	0x4012aaaa
 8002720:	92492493 	.word	0x92492493
 8002724:	3ff00000 	.word	0x3ff00000
 8002728:	00000000 	.word	0x00000000
 800272c:	437f0000 	.word	0x437f0000
 8002730:	20003478 	.word	0x20003478

08002734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002738:	f000 fff6 	bl	8003728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800273c:	f000 f830 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002740:	f000 fa0a 	bl	8002b58 <MX_GPIO_Init>
  MX_CRC_Init();
 8002744:	f000 f896 	bl	8002874 <MX_CRC_Init>
  MX_I2C3_Init();
 8002748:	f000 f8a8 	bl	800289c <MX_I2C3_Init>
  MX_SPI5_Init();
 800274c:	f000 f8e6 	bl	800291c <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8002750:	f000 f98e 	bl	8002a70 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8002754:	f000 f9e0 	bl	8002b18 <MX_DMA_Init>
  MX_TIM2_Init();
 8002758:	f000 f916 	bl	8002988 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800275c:	f000 f9b2 	bl	8002ac4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 8002760:	f7ff f860 	bl	8001824 <I3G450D_Init>
  RetargetInit(&huart1);
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <main+0x68>)
 8002766:	f000 fc23 	bl	8002fb0 <RetargetInit>
  ConsoleInit(&huart1);
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <main+0x68>)
 800276c:	f7fe fc02 	bl	8000f74 <ConsoleInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Set_LED(0, 255, 0, 0);
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	21ff      	movs	r1, #255	; 0xff
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff fcd0 	bl	800211c <Set_LED>
 //  Set_LED(5, 102, 0, 235);
 //  Set_LED(6, 47, 38, 77);
 //
 //  Set_LED(7, 255, 200, 0);

   Set_Brightness(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f7ff fcfb 	bl	8002178 <Set_Brightness>
   WS2812_Send();
 8002782:	f7ff fd03 	bl	800218c <WS2812_Send>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rainbow_effect_right();
 8002786:	f7ff fd6f 	bl	8002268 <rainbow_effect_right>
		  HAL_Delay (30);
 800278a:	201e      	movs	r0, #30
 800278c:	f001 f83e 	bl	800380c <HAL_Delay>

	  		ConsoleProcess();
 8002790:	f7fe fc20 	bl	8000fd4 <ConsoleProcess>
	  		I3G450D_loop();
 8002794:	f7ff f8e4 	bl	8001960 <I3G450D_loop>
	  rainbow_effect_right();
 8002798:	e7f5      	b.n	8002786 <main+0x52>
 800279a:	bf00      	nop
 800279c:	20003250 	.word	0x20003250

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b094      	sub	sp, #80	; 0x50
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2230      	movs	r2, #48	; 0x30
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 ff0e 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <SystemClock_Config+0xcc>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <SystemClock_Config+0xcc>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <SystemClock_Config+0xcc>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <SystemClock_Config+0xd0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <SystemClock_Config+0xd0>)
 80027ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <SystemClock_Config+0xd0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002800:	2301      	movs	r3, #1
 8002802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800280a:	2302      	movs	r3, #2
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800280e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002814:	2304      	movs	r3, #4
 8002816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002818:	2348      	movs	r3, #72	; 0x48
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800281c:	2302      	movs	r3, #2
 800281e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002820:	2303      	movs	r3, #3
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	4618      	mov	r0, r3
 800282a:	f002 f8c9 	bl	80049c0 <HAL_RCC_OscConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002834:	f000 fbb6 	bl	8002fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002838:	230f      	movs	r3, #15
 800283a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800283c:	2302      	movs	r3, #2
 800283e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fb2b 	bl	8004eb0 <HAL_RCC_ClockConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002860:	f000 fba0 	bl	8002fa4 <Error_Handler>
  }
}
 8002864:	bf00      	nop
 8002866:	3750      	adds	r7, #80	; 0x50
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000

08002874 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_CRC_Init+0x20>)
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <MX_CRC_Init+0x24>)
 800287c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_CRC_Init+0x20>)
 8002880:	f001 f8f9 	bl	8003a76 <HAL_CRC_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800288a:	f000 fb8b 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200030f4 	.word	0x200030f4
 8002898:	40023000 	.word	0x40023000

0800289c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <MX_I2C3_Init+0x74>)
 80028a2:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <MX_I2C3_Init+0x78>)
 80028a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_I2C3_Init+0x74>)
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <MX_I2C3_Init+0x7c>)
 80028aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_I2C3_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_I2C3_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_I2C3_Init+0x74>)
 80028ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_I2C3_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_I2C3_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_I2C3_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_I2C3_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_I2C3_Init+0x74>)
 80028da:	f001 feb1 	bl	8004640 <HAL_I2C_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80028e4:	f000 fb5e 	bl	8002fa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028e8:	2100      	movs	r1, #0
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <MX_I2C3_Init+0x74>)
 80028ec:	f001 ffec 	bl	80048c8 <HAL_I2CEx_ConfigAnalogFilter>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80028f6:	f000 fb55 	bl	8002fa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028fa:	2100      	movs	r1, #0
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_I2C3_Init+0x74>)
 80028fe:	f002 f81f 	bl	8004940 <HAL_I2CEx_ConfigDigitalFilter>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002908:	f000 fb4c 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200030fc 	.word	0x200030fc
 8002914:	40005c00 	.word	0x40005c00
 8002918:	000186a0 	.word	0x000186a0

0800291c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <MX_SPI5_Init+0x64>)
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <MX_SPI5_Init+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <MX_SPI5_Init+0x64>)
 8002928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800292c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <MX_SPI5_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_SPI5_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_SPI5_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_SPI5_Init+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <MX_SPI5_Init+0x64>)
 8002948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_SPI5_Init+0x64>)
 8002950:	2218      	movs	r2, #24
 8002952:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <MX_SPI5_Init+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <MX_SPI5_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <MX_SPI5_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <MX_SPI5_Init+0x64>)
 8002968:	220a      	movs	r2, #10
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800296c:	4804      	ldr	r0, [pc, #16]	; (8002980 <MX_SPI5_Init+0x64>)
 800296e:	f002 fcbf 	bl	80052f0 <HAL_SPI_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002978:	f000 fb14 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20003150 	.word	0x20003150
 8002984:	40015000 	.word	0x40015000

08002988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	f107 0320 	add.w	r3, r7, #32
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	615a      	str	r2, [r3, #20]
 80029b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029ce:	2259      	movs	r2, #89	; 0x59
 80029d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029de:	4823      	ldr	r0, [pc, #140]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029e0:	f003 fa2e 	bl	8005e40 <HAL_TIM_Base_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80029ea:	f000 fadb 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f8:	4619      	mov	r1, r3
 80029fa:	481c      	ldr	r0, [pc, #112]	; (8002a6c <MX_TIM2_Init+0xe4>)
 80029fc:	f003 ff2c 	bl	8006858 <HAL_TIM_ConfigClockSource>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002a06:	f000 facd 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a0a:	4818      	ldr	r0, [pc, #96]	; (8002a6c <MX_TIM2_Init+0xe4>)
 8002a0c:	f003 fa67 	bl	8005ede <HAL_TIM_PWM_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002a16:	f000 fac5 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a22:	f107 0320 	add.w	r3, r7, #32
 8002a26:	4619      	mov	r1, r3
 8002a28:	4810      	ldr	r0, [pc, #64]	; (8002a6c <MX_TIM2_Init+0xe4>)
 8002a2a:	f004 fbf9 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002a34:	f000 fab6 	bl	8002fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a38:	2360      	movs	r3, #96	; 0x60
 8002a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4807      	ldr	r0, [pc, #28]	; (8002a6c <MX_TIM2_Init+0xe4>)
 8002a50:	f003 fe40 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002a5a:	f000 faa3 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <MX_TIM2_Init+0xe4>)
 8002a60:	f000 fcd0 	bl	8003404 <HAL_TIM_MspPostInit>

}
 8002a64:	bf00      	nop
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200031a8 	.word	0x200031a8

08002a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <MX_USART1_UART_Init+0x50>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa8:	f004 fc4a 	bl	8007340 <HAL_UART_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ab2:	f000 fa77 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20003250 	.word	0x20003250
 8002ac0:	40011000 	.word	0x40011000

08002ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <MX_USART2_UART_Init+0x50>)
 8002acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002ad0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002aea:	220c      	movs	r2, #12
 8002aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_USART2_UART_Init+0x4c>)
 8002afc:	f004 fc20 	bl	8007340 <HAL_UART_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b06:	f000 fa4d 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20003294 	.word	0x20003294
 8002b14:	40004400 	.word	0x40004400

08002b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <MX_DMA_Init+0x3c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <MX_DMA_Init+0x3c>)
 8002b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <MX_DMA_Init+0x3c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2010      	movs	r0, #16
 8002b40:	f000 ff63 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b44:	2010      	movs	r0, #16
 8002b46:	f000 ff7c 	bl	8003a42 <HAL_NVIC_EnableIRQ>

}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	; 0x38
 8002b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	4bb2      	ldr	r3, [pc, #712]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4ab1      	ldr	r2, [pc, #708]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4baf      	ldr	r3, [pc, #700]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	4bab      	ldr	r3, [pc, #684]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4aaa      	ldr	r2, [pc, #680]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4ba8      	ldr	r3, [pc, #672]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	4ba4      	ldr	r3, [pc, #656]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4aa3      	ldr	r2, [pc, #652]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4ba1      	ldr	r3, [pc, #644]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b9d      	ldr	r3, [pc, #628]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a9c      	ldr	r2, [pc, #624]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b9a      	ldr	r3, [pc, #616]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	4b96      	ldr	r3, [pc, #600]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a95      	ldr	r2, [pc, #596]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b93      	ldr	r3, [pc, #588]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a8e      	ldr	r2, [pc, #568]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b88      	ldr	r3, [pc, #544]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a87      	ldr	r2, [pc, #540]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b85      	ldr	r3, [pc, #532]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	4b81      	ldr	r3, [pc, #516]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b7e      	ldr	r3, [pc, #504]	; (8002e3c <MX_GPIO_Init+0x2e4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2116      	movs	r1, #22
 8002c52:	487b      	ldr	r0, [pc, #492]	; (8002e40 <MX_GPIO_Init+0x2e8>)
 8002c54:	f001 fcda 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	4879      	ldr	r0, [pc, #484]	; (8002e44 <MX_GPIO_Init+0x2ec>)
 8002c5e:	f001 fcd5 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002c68:	4877      	ldr	r0, [pc, #476]	; (8002e48 <MX_GPIO_Init+0x2f0>)
 8002c6a:	f001 fccf 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002c74:	4875      	ldr	r0, [pc, #468]	; (8002e4c <MX_GPIO_Init+0x2f4>)
 8002c76:	f001 fcc9 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002c7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c94:	4619      	mov	r1, r3
 8002c96:	486e      	ldr	r0, [pc, #440]	; (8002e50 <MX_GPIO_Init+0x2f8>)
 8002c98:	f001 fb0c 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cae:	230e      	movs	r3, #14
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4865      	ldr	r0, [pc, #404]	; (8002e50 <MX_GPIO_Init+0x2f8>)
 8002cba:	f001 fafb 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cce:	230c      	movs	r3, #12
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4859      	ldr	r0, [pc, #356]	; (8002e40 <MX_GPIO_Init+0x2e8>)
 8002cda:	f001 faeb 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002cde:	2316      	movs	r3, #22
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4852      	ldr	r0, [pc, #328]	; (8002e40 <MX_GPIO_Init+0x2e8>)
 8002cf6:	f001 fadd 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002cfa:	f248 0307 	movw	r3, #32775	; 0x8007
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0e:	4619      	mov	r1, r3
 8002d10:	484c      	ldr	r0, [pc, #304]	; (8002e44 <MX_GPIO_Init+0x2ec>)
 8002d12:	f001 facf 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002d16:	f641 0358 	movw	r3, #6232	; 0x1858
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d28:	230e      	movs	r3, #14
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4844      	ldr	r0, [pc, #272]	; (8002e44 <MX_GPIO_Init+0x2ec>)
 8002d34:	f001 fabe 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	483d      	ldr	r0, [pc, #244]	; (8002e44 <MX_GPIO_Init+0x2ec>)
 8002d50:	f001 fab0 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002d54:	2320      	movs	r3, #32
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4835      	ldr	r0, [pc, #212]	; (8002e40 <MX_GPIO_Init+0x2e8>)
 8002d6a:	f001 faa3 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d7e:	2309      	movs	r3, #9
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	4619      	mov	r1, r3
 8002d88:	4832      	ldr	r0, [pc, #200]	; (8002e54 <MX_GPIO_Init+0x2fc>)
 8002d8a:	f001 fa93 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	4619      	mov	r1, r3
 8002da0:	482c      	ldr	r0, [pc, #176]	; (8002e54 <MX_GPIO_Init+0x2fc>)
 8002da2:	f001 fa87 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002da6:	f248 1333 	movw	r3, #33075	; 0x8133
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002db8:	230c      	movs	r3, #12
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4822      	ldr	r0, [pc, #136]	; (8002e4c <MX_GPIO_Init+0x2f4>)
 8002dc4:	f001 fa76 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002dc8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dda:	230c      	movs	r3, #12
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	4619      	mov	r1, r3
 8002de4:	481c      	ldr	r0, [pc, #112]	; (8002e58 <MX_GPIO_Init+0x300>)
 8002de6:	f001 fa65 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002dea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dfc:	230e      	movs	r3, #14
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e04:	4619      	mov	r1, r3
 8002e06:	4813      	ldr	r0, [pc, #76]	; (8002e54 <MX_GPIO_Init+0x2fc>)
 8002e08:	f001 fa54 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002e0c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	4619      	mov	r1, r3
 8002e28:	480a      	ldr	r0, [pc, #40]	; (8002e54 <MX_GPIO_Init+0x2fc>)
 8002e2a:	f001 fa43 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e38:	e010      	b.n	8002e5c <MX_GPIO_Init+0x304>
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020c00 	.word	0x40020c00
 8002e4c:	40021800 	.word	0x40021800
 8002e50:	40021400 	.word	0x40021400
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e64:	4619      	mov	r1, r3
 8002e66:	484b      	ldr	r0, [pc, #300]	; (8002f94 <MX_GPIO_Init+0x43c>)
 8002e68:	f001 fa24 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e6c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e7e:	230c      	movs	r3, #12
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4619      	mov	r1, r3
 8002e88:	4843      	ldr	r0, [pc, #268]	; (8002f98 <MX_GPIO_Init+0x440>)
 8002e8a:	f001 fa13 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	483d      	ldr	r0, [pc, #244]	; (8002f98 <MX_GPIO_Init+0x440>)
 8002ea4:	f001 fa06 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002ea8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4835      	ldr	r0, [pc, #212]	; (8002f98 <MX_GPIO_Init+0x440>)
 8002ec2:	f001 f9f7 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ec6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ed8:	230e      	movs	r3, #14
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	482e      	ldr	r0, [pc, #184]	; (8002f9c <MX_GPIO_Init+0x444>)
 8002ee4:	f001 f9e6 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002ee8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002efa:	230e      	movs	r3, #14
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4826      	ldr	r0, [pc, #152]	; (8002fa0 <MX_GPIO_Init+0x448>)
 8002f06:	f001 f9d5 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f1a:	230e      	movs	r3, #14
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	481c      	ldr	r0, [pc, #112]	; (8002f98 <MX_GPIO_Init+0x440>)
 8002f26:	f001 f9c5 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002f2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f3c:	2309      	movs	r3, #9
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f44:	4619      	mov	r1, r3
 8002f46:	4815      	ldr	r0, [pc, #84]	; (8002f9c <MX_GPIO_Init+0x444>)
 8002f48:	f001 f9b4 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002f4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <MX_GPIO_Init+0x444>)
 8002f66:	f001 f9a5 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f6a:	2360      	movs	r3, #96	; 0x60
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	4619      	mov	r1, r3
 8002f84:	4803      	ldr	r0, [pc, #12]	; (8002f94 <MX_GPIO_Init+0x43c>)
 8002f86:	f001 f995 	bl	80042b4 <HAL_GPIO_Init>

}
 8002f8a:	bf00      	nop
 8002f8c:	3738      	adds	r7, #56	; 0x38
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40020800 	.word	0x40020800

08002fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa8:	b672      	cpsid	i
}
 8002faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fac:	e7fe      	b.n	8002fac <Error_Handler+0x8>
	...

08002fb0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <RetargetInit+0x28>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RetargetInit+0x2c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6898      	ldr	r0, [r3, #8]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	2100      	movs	r1, #0
 8002fca:	f005 fb21 	bl	8008610 <setvbuf>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000347c 	.word	0x2000347c
 8002fdc:	20000010 	.word	0x20000010

08002fe0 <_isatty>:

int _isatty(int fd) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db04      	blt.n	8002ff8 <_isatty+0x18>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	dc01      	bgt.n	8002ff8 <_isatty+0x18>
    return 1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e005      	b.n	8003004 <_isatty+0x24>

  errno = EBADF;
 8002ff8:	f005 fac0 	bl	800857c <__errno>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2209      	movs	r2, #9
 8003000:	601a      	str	r2, [r3, #0]
  return 0;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_write>:

int _write(int fd, char* ptr, int len) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <_write+0x18>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d111      	bne.n	8003048 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <_write+0x54>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	b29a      	uxth	r2, r3
 800302c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	f004 f9d2 	bl	80073da <HAL_UART_Transmit>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <_write+0x38>
      return len;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	e008      	b.n	8003056 <_write+0x4a>
    else
      return EIO;
 8003044:	2305      	movs	r3, #5
 8003046:	e006      	b.n	8003056 <_write+0x4a>
  }
  errno = EBADF;
 8003048:	f005 fa98 	bl	800857c <__errno>
 800304c:	4603      	mov	r3, r0
 800304e:	2209      	movs	r2, #9
 8003050:	601a      	str	r2, [r3, #0]
  return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000347c 	.word	0x2000347c

08003064 <_close>:

int _close(int fd) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db04      	blt.n	800307c <_close+0x18>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	dc01      	bgt.n	800307c <_close+0x18>
    return 0;
 8003078:	2300      	movs	r3, #0
 800307a:	e006      	b.n	800308a <_close+0x26>

  errno = EBADF;
 800307c:	f005 fa7e 	bl	800857c <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	2209      	movs	r2, #9
 8003084:	601a      	str	r2, [r3, #0]
  return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800309e:	f005 fa6d 	bl	800857c <__errno>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2209      	movs	r2, #9
 80030a6:	601a      	str	r2, [r3, #0]
  return -1;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_read>:

int _read(int fd, char* ptr, int len) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d110      	bne.n	80030e8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <_read+0x4c>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ce:	2201      	movs	r2, #1
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	f004 fa14 	bl	80074fe <HAL_UART_Receive>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <_read+0x30>
      return 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e008      	b.n	80030f6 <_read+0x42>
    else
      return EIO;
 80030e4:	2305      	movs	r3, #5
 80030e6:	e006      	b.n	80030f6 <_read+0x42>
  }
  errno = EBADF;
 80030e8:	f005 fa48 	bl	800857c <__errno>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2209      	movs	r2, #9
 80030f0:	601a      	str	r2, [r3, #0]
  return -1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000347c 	.word	0x2000347c

08003104 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db08      	blt.n	8003126 <_fstat+0x22>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	dc05      	bgt.n	8003126 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003120:	605a      	str	r2, [r3, #4]
    return 0;
 8003122:	2300      	movs	r3, #0
 8003124:	e005      	b.n	8003132 <_fstat+0x2e>
  }

  errno = EBADF;
 8003126:	f005 fa29 	bl	800857c <__errno>
 800312a:	4603      	mov	r3, r0
 800312c:	2209      	movs	r2, #9
 800312e:	601a      	str	r2, [r3, #0]
  return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_MspInit+0x68>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_MspInit+0x68>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_MspInit+0x68>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_MspInit+0x68>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_MspInit+0x68>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_MspInit+0x68>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	2100      	movs	r1, #0
 800317e:	2005      	movs	r0, #5
 8003180:	f000 fc43 	bl	8003a0a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003184:	2005      	movs	r0, #5
 8003186:	f000 fc5c 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2005      	movs	r0, #5
 8003190:	f000 fc3b 	bl	8003a0a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003194:	2005      	movs	r0, #5
 8003196:	f000 fc54 	bl	8003a42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_CRC_MspInit+0x3c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10d      	bne.n	80031d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_CRC_MspInit+0x40>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_CRC_MspInit+0x40>)
 80031c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_CRC_MspInit+0x40>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023000 	.word	0x40023000
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_I2C_MspInit+0xc4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d14b      	bne.n	80032a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324c:	2312      	movs	r3, #18
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003250:	2301      	movs	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003258:	2304      	movs	r3, #4
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4815      	ldr	r0, [pc, #84]	; (80032b8 <HAL_I2C_MspInit+0xcc>)
 8003264:	f001 f826 	bl	80042b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326e:	2312      	movs	r3, #18
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800327a:	2304      	movs	r3, #4
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	480d      	ldr	r0, [pc, #52]	; (80032bc <HAL_I2C_MspInit+0xd0>)
 8003286:	f001 f815 	bl	80042b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40005c00 	.word	0x40005c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020000 	.word	0x40020000

080032c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_SPI_MspInit+0x84>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12c      	bne.n	800333c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_SPI_MspInit+0x88>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_SPI_MspInit+0x88>)
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_SPI_MspInit+0x88>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_SPI_MspInit+0x88>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a10      	ldr	r2, [pc, #64]	; (8003348 <HAL_SPI_MspInit+0x88>)
 8003308:	f043 0320 	orr.w	r3, r3, #32
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_SPI_MspInit+0x88>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800331a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800332c:	2305      	movs	r3, #5
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <HAL_SPI_MspInit+0x8c>)
 8003338:	f000 ffbc 	bl	80042b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800333c:	bf00      	nop
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40015000 	.word	0x40015000
 8003348:	40023800 	.word	0x40023800
 800334c:	40021400 	.word	0x40021400

08003350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d145      	bne.n	80033ee <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_TIM_Base_MspInit+0xa8>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_TIM_Base_MspInit+0xa8>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_TIM_Base_MspInit+0xa8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800337e:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_TIM_Base_MspInit+0xb0>)
 8003382:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 8003386:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800338a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003398:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 800339a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80033c2:	480e      	ldr	r0, [pc, #56]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033c4:	f000 fb74 	bl	8003ab0 <HAL_DMA_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80033ce:	f7ff fde9 	bl	8002fa4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
 80033d8:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_TIM_Base_MspInit+0xac>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	201c      	movs	r0, #28
 80033e4:	f000 fb11 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033e8:	201c      	movs	r0, #28
 80033ea:	f000 fb2a 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	200031f0 	.word	0x200031f0
 8003400:	40026088 	.word	0x40026088

08003404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d11d      	bne.n	8003462 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_TIM_MspPostInit+0x68>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a0f      	ldr	r2, [pc, #60]	; (800346c <HAL_TIM_MspPostInit+0x68>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <HAL_TIM_MspPostInit+0x68>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003442:	2320      	movs	r3, #32
 8003444:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	4619      	mov	r1, r3
 800345c:	4804      	ldr	r0, [pc, #16]	; (8003470 <HAL_TIM_MspPostInit+0x6c>)
 800345e:	f000 ff29 	bl	80042b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003462:	bf00      	nop
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40020000 	.word	0x40020000

08003474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3a      	ldr	r2, [pc, #232]	; (800357c <HAL_UART_MspInit+0x108>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d135      	bne.n	8003502 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_UART_MspInit+0x10c>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a38      	ldr	r2, [pc, #224]	; (8003580 <HAL_UART_MspInit+0x10c>)
 80034a0:	f043 0310 	orr.w	r3, r3, #16
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_UART_MspInit+0x10c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	4b32      	ldr	r3, [pc, #200]	; (8003580 <HAL_UART_MspInit+0x10c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a31      	ldr	r2, [pc, #196]	; (8003580 <HAL_UART_MspInit+0x10c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_UART_MspInit+0x10c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80034ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034e0:	2307      	movs	r3, #7
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4619      	mov	r1, r3
 80034ea:	4826      	ldr	r0, [pc, #152]	; (8003584 <HAL_UART_MspInit+0x110>)
 80034ec:	f000 fee2 	bl	80042b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2100      	movs	r1, #0
 80034f4:	2025      	movs	r0, #37	; 0x25
 80034f6:	f000 fa88 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034fa:	2025      	movs	r0, #37	; 0x25
 80034fc:	f000 faa1 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003500:	e038      	b.n	8003574 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a20      	ldr	r2, [pc, #128]	; (8003588 <HAL_UART_MspInit+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d133      	bne.n	8003574 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_UART_MspInit+0x10c>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_UART_MspInit+0x10c>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_UART_MspInit+0x10c>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_UART_MspInit+0x10c>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_UART_MspInit+0x10c>)
 8003532:	f043 0308 	orr.w	r3, r3, #8
 8003536:	6313      	str	r3, [r2, #48]	; 0x30
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_UART_MspInit+0x10c>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003544:	2360      	movs	r3, #96	; 0x60
 8003546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003554:	2307      	movs	r3, #7
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	480b      	ldr	r0, [pc, #44]	; (800358c <HAL_UART_MspInit+0x118>)
 8003560:	f000 fea8 	bl	80042b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	2026      	movs	r0, #38	; 0x26
 800356a:	f000 fa4e 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800356e:	2026      	movs	r0, #38	; 0x26
 8003570:	f000 fa67 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 8003574:	bf00      	nop
 8003576:	3730      	adds	r7, #48	; 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40011000 	.word	0x40011000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40004400 	.word	0x40004400
 800358c:	40020c00 	.word	0x40020c00

08003590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003594:	e7fe      	b.n	8003594 <NMI_Handler+0x4>

08003596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359a:	e7fe      	b.n	800359a <HardFault_Handler+0x4>

0800359c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <MemManage_Handler+0x4>

080035a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <BusFault_Handler+0x4>

080035a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <UsageFault_Handler+0x4>

080035ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035dc:	f000 f8f6 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <DMA1_Stream5_IRQHandler+0x10>)
 80035fa:	f000 fbf1 	bl	8003de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200031f0 	.word	0x200031f0

08003608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <TIM2_IRQHandler+0x10>)
 800360e:	f002 ff59 	bl	80064c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200031a8 	.word	0x200031a8

0800361c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <USART1_IRQHandler+0x10>)
 8003622:	f004 f83f 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20003250 	.word	0x20003250

08003630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <USART2_IRQHandler+0x10>)
 8003636:	f004 f835 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20003294 	.word	0x20003294

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f004 ff82 	bl	800857c <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20030000 	.word	0x20030000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	20003480 	.word	0x20003480
 80036ac:	20003498 	.word	0x20003498

080036b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <SystemInit+0x20>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <SystemInit+0x20>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800370c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d8:	480d      	ldr	r0, [pc, #52]	; (8003710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036da:	490e      	ldr	r1, [pc, #56]	; (8003714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e0:	e002      	b.n	80036e8 <LoopCopyDataInit>

080036e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e6:	3304      	adds	r3, #4

080036e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ec:	d3f9      	bcc.n	80036e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ee:	4a0b      	ldr	r2, [pc, #44]	; (800371c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036f0:	4c0b      	ldr	r4, [pc, #44]	; (8003720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f4:	e001      	b.n	80036fa <LoopFillZerobss>

080036f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f8:	3204      	adds	r2, #4

080036fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036fc:	d3fb      	bcc.n	80036f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036fe:	f7ff ffd7 	bl	80036b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003702:	f004 ff41 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003706:	f7ff f815 	bl	8002734 <main>
  bx  lr    
 800370a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800370c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003714:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003718:	08009d28 	.word	0x08009d28
  ldr r2, =_sbss
 800371c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003720:	20003498 	.word	0x20003498

08003724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003724:	e7fe      	b.n	8003724 <ADC_IRQHandler>
	...

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_Init+0x40>)
 8003732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_Init+0x40>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_Init+0x40>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f94f 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	200f      	movs	r0, #15
 8003758:	f000 f808 	bl	800376c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f7ff fcee 	bl	800313c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_InitTick+0x54>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_InitTick+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003782:	fbb3 f3f1 	udiv	r3, r3, r1
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f967 	bl	8003a5e <HAL_SYSTICK_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00e      	b.n	80037b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d80a      	bhi.n	80037b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a0:	2200      	movs	r2, #0
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a8:	f000 f92f 	bl	8003a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_InitTick+0x5c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000004 	.word	0x20000004
 80037c4:	2000000c 	.word	0x2000000c
 80037c8:	20000008 	.word	0x20000008

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000000c 	.word	0x2000000c
 80037f0:	20003484 	.word	0x20003484

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20003484 	.word	0x20003484

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000000c 	.word	0x2000000c

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff29 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff3e 	bl	800389c <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5d 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff31 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa2 	bl	80039b0 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e00e      	b.n	8003aa6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	795b      	ldrb	r3, [r3, #5]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fb85 	bl	80031a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff fe9a 	bl	80037f4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e099      	b.n	8003c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aec:	e00f      	b.n	8003b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aee:	f7ff fe81 	bl	80037f4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d908      	bls.n	8003b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e078      	b.n	8003c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e8      	bne.n	8003aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_DMA_Init+0x158>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0307 	bic.w	r3, r3, #7
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d117      	bne.n	8003bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb01 	bl	80041bc <DMA_CheckFifoParam>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2240      	movs	r2, #64	; 0x40
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e016      	b.n	8003c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fab8 	bl	8004150 <DMA_CalcBaseAndBitshift>
 8003be0:	4603      	mov	r3, r0
 8003be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	223f      	movs	r2, #63	; 0x3f
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	f010803f 	.word	0xf010803f

08003c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Start_IT+0x26>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e040      	b.n	8003cb4 <HAL_DMA_Start_IT+0xa8>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d12f      	bne.n	8003ca6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa4a 	bl	80040f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	223f      	movs	r2, #63	; 0x3f
 8003c66:	409a      	lsls	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0216 	orr.w	r2, r2, #22
 8003c7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e005      	b.n	8003cb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cca:	f7ff fd93 	bl	80037f4 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d008      	beq.n	8003cee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e052      	b.n	8003d94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0216 	bic.w	r2, r2, #22
 8003cfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_DMA_Abort+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0208 	bic.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d3e:	e013      	b.n	8003d68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d40:	f7ff fd58 	bl	80037f4 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d90c      	bls.n	8003d68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2203      	movs	r2, #3
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e015      	b.n	8003d94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e4      	bne.n	8003d40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	223f      	movs	r2, #63	; 0x3f
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00c      	b.n	8003dd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dec:	4b8e      	ldr	r3, [pc, #568]	; (8004028 <HAL_DMA_IRQHandler+0x248>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a8e      	ldr	r2, [pc, #568]	; (800402c <HAL_DMA_IRQHandler+0x24c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0a9b      	lsrs	r3, r3, #10
 8003df8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01a      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	2208      	movs	r2, #8
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2201      	movs	r2, #1
 8003e70:	409a      	lsls	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	f043 0202 	orr.w	r2, r3, #2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	2204      	movs	r2, #4
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d012      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d043      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d03c      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2210      	movs	r2, #16
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d024      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	e01f      	b.n	8003f50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e016      	b.n	8003f50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0208 	bic.w	r2, r2, #8
 8003f3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	2220      	movs	r2, #32
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 808f 	beq.w	8004080 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8087 	beq.w	8004080 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	2220      	movs	r2, #32
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d136      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0216 	bic.w	r2, r2, #22
 8003f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_DMA_IRQHandler+0x1da>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0208 	bic.w	r2, r2, #8
 8003fc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	223f      	movs	r2, #63	; 0x3f
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d07e      	beq.n	80040ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
        }
        return;
 8003ff6:	e079      	b.n	80040ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10d      	bne.n	8004030 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	2b00      	cmp	r3, #0
 800401a:	d031      	beq.n	8004080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
 8004024:	e02c      	b.n	8004080 <HAL_DMA_IRQHandler+0x2a0>
 8004026:	bf00      	nop
 8004028:	20000004 	.word	0x20000004
 800402c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
 8004040:	e01e      	b.n	8004080 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0210 	bic.w	r2, r2, #16
 800405e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	2b00      	cmp	r3, #0
 8004086:	d032      	beq.n	80040ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d022      	beq.n	80040da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2205      	movs	r2, #5
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d307      	bcc.n	80040c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f2      	bne.n	80040ac <HAL_DMA_IRQHandler+0x2cc>
 80040c6:	e000      	b.n	80040ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
 80040ea:	e000      	b.n	80040ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ec:	bf00      	nop
    }
  }
}
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004110:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d108      	bne.n	8004134 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004132:	e007      	b.n	8004144 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3b10      	subs	r3, #16
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <DMA_CalcBaseAndBitshift+0x68>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d909      	bls.n	8004192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	659a      	str	r2, [r3, #88]	; 0x58
 8004190:	e007      	b.n	80041a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	aaaaaaab 	.word	0xaaaaaaab
 80041b8:	08009b74 	.word	0x08009b74

080041bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11f      	bne.n	8004216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d856      	bhi.n	800428a <DMA_CheckFifoParam+0xce>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <DMA_CheckFifoParam+0x28>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	08004207 	.word	0x08004207
 80041ec:	080041f5 	.word	0x080041f5
 80041f0:	0800428b 	.word	0x0800428b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d046      	beq.n	800428e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e043      	b.n	800428e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800420e:	d140      	bne.n	8004292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004214:	e03d      	b.n	8004292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421e:	d121      	bne.n	8004264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d837      	bhi.n	8004296 <DMA_CheckFifoParam+0xda>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <DMA_CheckFifoParam+0x70>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	08004243 	.word	0x08004243
 8004234:	0800423d 	.word	0x0800423d
 8004238:	08004255 	.word	0x08004255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e030      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d025      	beq.n	800429a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004252:	e022      	b.n	800429a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800425c:	d11f      	bne.n	800429e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004262:	e01c      	b.n	800429e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d903      	bls.n	8004272 <DMA_CheckFifoParam+0xb6>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d003      	beq.n	8004278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004270:	e018      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      break;
 8004276:	e015      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e00b      	b.n	80042a2 <DMA_CheckFifoParam+0xe6>
      break;
 800428a:	bf00      	nop
 800428c:	e00a      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 800428e:	bf00      	nop
 8004290:	e008      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e006      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e004      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
    }
  } 
  
  return status; 
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop

080042b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e177      	b.n	80045c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d0:	2201      	movs	r2, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	f040 8166 	bne.w	80045ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d005      	beq.n	8004306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004302:	2b02      	cmp	r3, #2
 8004304:	d130      	bne.n	8004368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	2203      	movs	r2, #3
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 0201 	and.w	r2, r3, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b03      	cmp	r3, #3
 8004372:	d017      	beq.n	80043a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d123      	bne.n	80043f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	08da      	lsrs	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3208      	adds	r2, #8
 80043b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	220f      	movs	r2, #15
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	08da      	lsrs	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3208      	adds	r2, #8
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80c0 	beq.w	80045ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_GPIO_Init+0x324>)
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_GPIO_Init+0x324>)
 8004444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004448:	6453      	str	r3, [r2, #68]	; 0x44
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_GPIO_Init+0x324>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004456:	4a61      	ldr	r2, [pc, #388]	; (80045dc <HAL_GPIO_Init+0x328>)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	3302      	adds	r3, #2
 800445e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	220f      	movs	r2, #15
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_GPIO_Init+0x32c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d037      	beq.n	80044f2 <HAL_GPIO_Init+0x23e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <HAL_GPIO_Init+0x330>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d031      	beq.n	80044ee <HAL_GPIO_Init+0x23a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a56      	ldr	r2, [pc, #344]	; (80045e8 <HAL_GPIO_Init+0x334>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02b      	beq.n	80044ea <HAL_GPIO_Init+0x236>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a55      	ldr	r2, [pc, #340]	; (80045ec <HAL_GPIO_Init+0x338>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d025      	beq.n	80044e6 <HAL_GPIO_Init+0x232>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a54      	ldr	r2, [pc, #336]	; (80045f0 <HAL_GPIO_Init+0x33c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01f      	beq.n	80044e2 <HAL_GPIO_Init+0x22e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a53      	ldr	r2, [pc, #332]	; (80045f4 <HAL_GPIO_Init+0x340>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d019      	beq.n	80044de <HAL_GPIO_Init+0x22a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_GPIO_Init+0x344>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_GPIO_Init+0x226>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a51      	ldr	r2, [pc, #324]	; (80045fc <HAL_GPIO_Init+0x348>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00d      	beq.n	80044d6 <HAL_GPIO_Init+0x222>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a50      	ldr	r2, [pc, #320]	; (8004600 <HAL_GPIO_Init+0x34c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <HAL_GPIO_Init+0x21e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4f      	ldr	r2, [pc, #316]	; (8004604 <HAL_GPIO_Init+0x350>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_GPIO_Init+0x21a>
 80044ca:	2309      	movs	r3, #9
 80044cc:	e012      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044ce:	230a      	movs	r3, #10
 80044d0:	e010      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044d2:	2308      	movs	r3, #8
 80044d4:	e00e      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044d6:	2307      	movs	r3, #7
 80044d8:	e00c      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044da:	2306      	movs	r3, #6
 80044dc:	e00a      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044de:	2305      	movs	r3, #5
 80044e0:	e008      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044e2:	2304      	movs	r3, #4
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e004      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e002      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_GPIO_Init+0x240>
 80044f2:	2300      	movs	r3, #0
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f002 0203 	and.w	r2, r2, #3
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	4093      	lsls	r3, r2
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004504:	4935      	ldr	r1, [pc, #212]	; (80045dc <HAL_GPIO_Init+0x328>)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004512:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <HAL_GPIO_Init+0x354>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004536:	4a34      	ldr	r2, [pc, #208]	; (8004608 <HAL_GPIO_Init+0x354>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800453c:	4b32      	ldr	r3, [pc, #200]	; (8004608 <HAL_GPIO_Init+0x354>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004560:	4a29      	ldr	r2, [pc, #164]	; (8004608 <HAL_GPIO_Init+0x354>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_GPIO_Init+0x354>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800458a:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_GPIO_Init+0x354>)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_GPIO_Init+0x354>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <HAL_GPIO_Init+0x354>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b0f      	cmp	r3, #15
 80045c4:	f67f ae84 	bls.w	80042d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40013800 	.word	0x40013800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020400 	.word	0x40020400
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020c00 	.word	0x40020c00
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40021800 	.word	0x40021800
 80045fc:	40021c00 	.word	0x40021c00
 8004600:	40022000 	.word	0x40022000
 8004604:	40022400 	.word	0x40022400
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe fdc0 	bl	80031ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f000 fdfc 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	; (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	; (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	; (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	; (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	; (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	; (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	; (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d129      	bne.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2224      	movs	r2, #36	; 0x24
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0210 	bic.w	r2, r2, #16
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	d12a      	bne.n	80049b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2224      	movs	r2, #36	; 0x24
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	b29a      	uxth	r2, r3
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	4313      	orrs	r3, r2
 800498a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	89fa      	ldrh	r2, [r7, #14]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e267      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d075      	beq.n	8004aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049de:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d00c      	beq.n	8004a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ea:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d112      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f6:	4b82      	ldr	r3, [pc, #520]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a02:	d10b      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	4b7e      	ldr	r3, [pc, #504]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d05b      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x108>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d157      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e242      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x74>
 8004a26:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e01d      	b.n	8004a70 <HAL_RCC_OscConfig+0xb0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x98>
 8004a3e:	4b70      	ldr	r3, [pc, #448]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6f      	ldr	r2, [pc, #444]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a6c      	ldr	r2, [pc, #432]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0xb0>
 8004a58:	4b69      	ldr	r3, [pc, #420]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe febc 	bl	80037f4 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fe feb8 	bl	80037f4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	; 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e207      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0xc0>
 8004a9e:	e014      	b.n	8004aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fe fea8 	bl	80037f4 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fe fea4 	bl	80037f4 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e1f3      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	4b51      	ldr	r3, [pc, #324]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xe8>
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d063      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad6:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d11c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aee:	4b44      	ldr	r3, [pc, #272]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_RCC_OscConfig+0x152>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e1c7      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4937      	ldr	r1, [pc, #220]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	e03a      	b.n	8004b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x244>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fe fe5d 	bl	80037f4 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b3e:	f7fe fe59 	bl	80037f4 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e1a8      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4925      	ldr	r1, [pc, #148]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]
 8004b70:	e015      	b.n	8004b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b72:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <HAL_RCC_OscConfig+0x244>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe fe3c 	bl	80037f4 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fe fe38 	bl	80037f4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e187      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d036      	beq.n	8004c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d016      	beq.n	8004be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <HAL_RCC_OscConfig+0x248>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fe fe1c 	bl	80037f4 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fe fe18 	bl	80037f4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e167      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x200>
 8004bde:	e01b      	b.n	8004c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCC_OscConfig+0x248>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be6:	f7fe fe05 	bl	80037f4 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bec:	e00e      	b.n	8004c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bee:	f7fe fe01 	bl	80037f4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d907      	bls.n	8004c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e150      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	42470000 	.word	0x42470000
 8004c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c0c:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ea      	bne.n	8004bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8097 	beq.w	8004d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2a:	4b81      	ldr	r3, [pc, #516]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10f      	bne.n	8004c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	4b7d      	ldr	r3, [pc, #500]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	4a7c      	ldr	r2, [pc, #496]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6413      	str	r3, [r2, #64]	; 0x40
 8004c46:	4b7a      	ldr	r3, [pc, #488]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c56:	4b77      	ldr	r3, [pc, #476]	; (8004e34 <HAL_RCC_OscConfig+0x474>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d118      	bne.n	8004c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c62:	4b74      	ldr	r3, [pc, #464]	; (8004e34 <HAL_RCC_OscConfig+0x474>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a73      	ldr	r2, [pc, #460]	; (8004e34 <HAL_RCC_OscConfig+0x474>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c6e:	f7fe fdc1 	bl	80037f4 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c76:	f7fe fdbd 	bl	80037f4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e10c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <HAL_RCC_OscConfig+0x474>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d106      	bne.n	8004caa <HAL_RCC_OscConfig+0x2ea>
 8004c9c:	4b64      	ldr	r3, [pc, #400]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	4a63      	ldr	r2, [pc, #396]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca8:	e01c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x324>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x30c>
 8004cb2:	4b5f      	ldr	r3, [pc, #380]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a5e      	ldr	r2, [pc, #376]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbe:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	4a5b      	ldr	r2, [pc, #364]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x324>
 8004ccc:	4b58      	ldr	r3, [pc, #352]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4a57      	ldr	r2, [pc, #348]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd8:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	4a54      	ldr	r2, [pc, #336]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004cde:	f023 0304 	bic.w	r3, r3, #4
 8004ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d015      	beq.n	8004d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fe fd82 	bl	80037f4 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fe fd7e 	bl	80037f4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e0cb      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ee      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x334>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d18:	f7fe fd6c 	bl	80037f4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fe fd68 	bl	80037f4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0b5      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d36:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ee      	bne.n	8004d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80a1 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d05c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d141      	bne.n	8004df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <HAL_RCC_OscConfig+0x478>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fe fd3c 	bl	80037f4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fe fd38 	bl	80037f4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e087      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	019b      	lsls	r3, r3, #6
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	3b01      	subs	r3, #1
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	061b      	lsls	r3, r3, #24
 8004dc2:	491b      	ldr	r1, [pc, #108]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_RCC_OscConfig+0x478>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dce:	f7fe fd11 	bl	80037f4 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fe fd0d 	bl	80037f4 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e05c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de8:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x416>
 8004df4:	e054      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <HAL_RCC_OscConfig+0x478>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fe fcfa 	bl	80037f4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fe fcf6 	bl	80037f4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e045      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_OscConfig+0x470>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x444>
 8004e22:	e03d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e038      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x4ec>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d028      	beq.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d121      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d11a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d111      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	3b01      	subs	r3, #1
 8004e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0cc      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d90c      	bls.n	8004eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b65      	ldr	r3, [pc, #404]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0b8      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	494d      	ldr	r1, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d044      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d119      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e06f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e067      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fe fc28 	bl	80037f4 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fe fc24 	bl	80037f4 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e04f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20c      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005036:	f000 f821 	bl	800507c <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fb88 	bl	800376c <HAL_InitTick>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023c00 	.word	0x40023c00
 800506c:	40023800 	.word	0x40023800
 8005070:	08009b5c 	.word	0x08009b5c
 8005074:	20000004 	.word	0x20000004
 8005078:	20000008 	.word	0x20000008

0800507c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b094      	sub	sp, #80	; 0x50
 8005082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
 8005088:	2300      	movs	r3, #0
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800508c:	2300      	movs	r3, #0
 800508e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005094:	4b79      	ldr	r3, [pc, #484]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b08      	cmp	r3, #8
 800509e:	d00d      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x40>
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	f200 80e1 	bhi.w	8005268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x34>
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ae:	e0db      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b73      	ldr	r3, [pc, #460]	; (8005280 <HAL_RCC_GetSysClockFreq+0x204>)
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050b4:	e0db      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050b6:	4b73      	ldr	r3, [pc, #460]	; (8005284 <HAL_RCC_GetSysClockFreq+0x208>)
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ba:	e0d8      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050bc:	4b6f      	ldr	r3, [pc, #444]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050c6:	4b6d      	ldr	r3, [pc, #436]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d063      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d2:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	2200      	movs	r2, #0
 80050da:	63bb      	str	r3, [r7, #56]	; 0x38
 80050dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	2300      	movs	r3, #0
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050ee:	4622      	mov	r2, r4
 80050f0:	462b      	mov	r3, r5
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	0159      	lsls	r1, r3, #5
 80050fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005100:	0150      	lsls	r0, r2, #5
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4621      	mov	r1, r4
 8005108:	1a51      	subs	r1, r2, r1
 800510a:	6139      	str	r1, [r7, #16]
 800510c:	4629      	mov	r1, r5
 800510e:	eb63 0301 	sbc.w	r3, r3, r1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005120:	4659      	mov	r1, fp
 8005122:	018b      	lsls	r3, r1, #6
 8005124:	4651      	mov	r1, sl
 8005126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800512a:	4651      	mov	r1, sl
 800512c:	018a      	lsls	r2, r1, #6
 800512e:	4651      	mov	r1, sl
 8005130:	ebb2 0801 	subs.w	r8, r2, r1
 8005134:	4659      	mov	r1, fp
 8005136:	eb63 0901 	sbc.w	r9, r3, r1
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800514a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514e:	4690      	mov	r8, r2
 8005150:	4699      	mov	r9, r3
 8005152:	4623      	mov	r3, r4
 8005154:	eb18 0303 	adds.w	r3, r8, r3
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	462b      	mov	r3, r5
 800515c:	eb49 0303 	adc.w	r3, r9, r3
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800516e:	4629      	mov	r1, r5
 8005170:	024b      	lsls	r3, r1, #9
 8005172:	4621      	mov	r1, r4
 8005174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005178:	4621      	mov	r1, r4
 800517a:	024a      	lsls	r2, r1, #9
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005182:	2200      	movs	r2, #0
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
 8005186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800518c:	f7fb fcc6 	bl	8000b1c <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005198:	e058      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519a:	4b38      	ldr	r3, [pc, #224]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	2200      	movs	r2, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	4611      	mov	r1, r2
 80051a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	2300      	movs	r3, #0
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
 80051b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051b4:	4642      	mov	r2, r8
 80051b6:	464b      	mov	r3, r9
 80051b8:	f04f 0000 	mov.w	r0, #0
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	0159      	lsls	r1, r3, #5
 80051c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c6:	0150      	lsls	r0, r2, #5
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4641      	mov	r1, r8
 80051ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80051d2:	4649      	mov	r1, r9
 80051d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051ec:	ebb2 040a 	subs.w	r4, r2, sl
 80051f0:	eb63 050b 	sbc.w	r5, r3, fp
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	00eb      	lsls	r3, r5, #3
 80051fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005202:	00e2      	lsls	r2, r4, #3
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	4643      	mov	r3, r8
 800520a:	18e3      	adds	r3, r4, r3
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	464b      	mov	r3, r9
 8005210:	eb45 0303 	adc.w	r3, r5, r3
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005222:	4629      	mov	r1, r5
 8005224:	028b      	lsls	r3, r1, #10
 8005226:	4621      	mov	r1, r4
 8005228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800522c:	4621      	mov	r1, r4
 800522e:	028a      	lsls	r2, r1, #10
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005236:	2200      	movs	r2, #0
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	61fa      	str	r2, [r7, #28]
 800523c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005240:	f7fb fc6c 	bl	8000b1c <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_GetSysClockFreq+0x200>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	3301      	adds	r3, #1
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800525c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005266:	e002      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_GetSysClockFreq+0x204>)
 800526a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800526c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005270:	4618      	mov	r0, r3
 8005272:	3750      	adds	r7, #80	; 0x50
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	00f42400 	.word	0x00f42400
 8005284:	007a1200 	.word	0x007a1200

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <HAL_RCC_GetHCLKFreq+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000004 	.word	0x20000004

080052a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052a4:	f7ff fff0 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0a9b      	lsrs	r3, r3, #10
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4903      	ldr	r1, [pc, #12]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	08009b6c 	.word	0x08009b6c

080052c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052cc:	f7ff ffdc 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0b5b      	lsrs	r3, r3, #13
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40023800 	.word	0x40023800
 80052ec:	08009b6c 	.word	0x08009b6c

080052f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07b      	b.n	80053fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2b00      	cmp	r3, #0
 8005308:	d108      	bne.n	800531c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005312:	d009      	beq.n	8005328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
 800531a:	e005      	b.n	8005328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd ffbc 	bl	80032c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	ea42 0103 	orr.w	r1, r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0104 	and.w	r1, r3, #4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0210 	and.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b088      	sub	sp, #32
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_SPI_Transmit+0x22>
 8005420:	2302      	movs	r3, #2
 8005422:	e126      	b.n	8005672 <HAL_SPI_Transmit+0x270>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542c:	f7fe f9e2 	bl	80037f4 <HAL_GetTick>
 8005430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005442:	2302      	movs	r3, #2
 8005444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005446:	e10b      	b.n	8005660 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x52>
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005458:	e102      	b.n	8005660 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2203      	movs	r2, #3
 800545e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88fa      	ldrh	r2, [r7, #6]
 8005472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d10f      	bne.n	80054c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d007      	beq.n	80054e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e8:	d14b      	bne.n	8005582 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0xf6>
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d13e      	bne.n	8005576 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800551c:	e02b      	b.n	8005576 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d112      	bne.n	8005552 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	1c9a      	adds	r2, r3, #2
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005550:	e011      	b.n	8005576 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005552:	f7fe f94f 	bl	80037f4 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d803      	bhi.n	800556a <HAL_SPI_Transmit+0x168>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005568:	d102      	bne.n	8005570 <HAL_SPI_Transmit+0x16e>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005574:	e074      	b.n	8005660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ce      	bne.n	800551e <HAL_SPI_Transmit+0x11c>
 8005580:	e04c      	b.n	800561c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_Transmit+0x18e>
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d140      	bne.n	8005612 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055b6:	e02c      	b.n	8005612 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d113      	bne.n	80055ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80055ec:	e011      	b.n	8005612 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ee:	f7fe f901 	bl	80037f4 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d803      	bhi.n	8005606 <HAL_SPI_Transmit+0x204>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005604:	d102      	bne.n	800560c <HAL_SPI_Transmit+0x20a>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005610:	e026      	b.n	8005660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1cd      	bne.n	80055b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fbcb 	bl	8005dbc <SPI_EndRxTxTransaction>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e000      	b.n	8005660 <HAL_SPI_Transmit+0x25e>
  }

error:
 800565e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005670:	7ffb      	ldrb	r3, [r7, #31]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b088      	sub	sp, #32
 800567e:	af02      	add	r7, sp, #8
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d112      	bne.n	80056be <HAL_SPI_Receive+0x44>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10e      	bne.n	80056be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2204      	movs	r2, #4
 80056a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	4613      	mov	r3, r2
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f8f1 	bl	800589c <HAL_SPI_TransmitReceive>
 80056ba:	4603      	mov	r3, r0
 80056bc:	e0ea      	b.n	8005894 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_SPI_Receive+0x52>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0e3      	b.n	8005894 <HAL_SPI_Receive+0x21a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d4:	f7fe f88e 	bl	80037f4 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
 80056e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ea:	e0ca      	b.n	8005882 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_Receive+0x7e>
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056fc:	e0c1      	b.n	8005882 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2204      	movs	r2, #4
 8005702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005744:	d10f      	bne.n	8005766 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d007      	beq.n	8005784 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d162      	bne.n	8005852 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800578c:	e02e      	b.n	80057ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d115      	bne.n	80057c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f103 020c 	add.w	r2, r3, #12
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c6:	e011      	b.n	80057ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c8:	f7fe f814 	bl	80037f4 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d803      	bhi.n	80057e0 <HAL_SPI_Receive+0x166>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Receive+0x16c>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057ea:	e04a      	b.n	8005882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1cb      	bne.n	800578e <HAL_SPI_Receive+0x114>
 80057f6:	e031      	b.n	800585c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d113      	bne.n	800582e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	b292      	uxth	r2, r2
 8005812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800582c:	e011      	b.n	8005852 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582e:	f7fd ffe1 	bl	80037f4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d803      	bhi.n	8005846 <HAL_SPI_Receive+0x1cc>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005844:	d102      	bne.n	800584c <HAL_SPI_Receive+0x1d2>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005850:	e017      	b.n	8005882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1cd      	bne.n	80057f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa45 	bl	8005cf0 <SPI_EndRxTransaction>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
 800587e:	e000      	b.n	8005882 <HAL_SPI_Receive+0x208>
  }

error :
 8005880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x26>
 80058be:	2302      	movs	r3, #2
 80058c0:	e18a      	b.n	8005bd8 <HAL_SPI_TransmitReceive+0x33c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ca:	f7fd ff93 	bl	80037f4 <HAL_GetTick>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d00f      	beq.n	800590c <HAL_SPI_TransmitReceive+0x70>
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f2:	d107      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x68>
 80058fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005900:	2b04      	cmp	r3, #4
 8005902:	d003      	beq.n	800590c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005904:	2302      	movs	r3, #2
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800590a:	e15b      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_SPI_TransmitReceive+0x82>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_SPI_TransmitReceive+0x82>
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005924:	e14e      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b04      	cmp	r3, #4
 8005930:	d003      	beq.n	800593a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2205      	movs	r2, #5
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	887a      	ldrh	r2, [r7, #2]
 800594a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	887a      	ldrh	r2, [r7, #2]
 8005950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	887a      	ldrh	r2, [r7, #2]
 800595c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	887a      	ldrh	r2, [r7, #2]
 8005962:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d007      	beq.n	800598e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005996:	d178      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x10a>
 80059a0:	8b7b      	ldrh	r3, [r7, #26]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d166      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	881a      	ldrh	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ca:	e053      	b.n	8005a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d11b      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x176>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d016      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x176>
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d113      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d119      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x1b8>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	b292      	uxth	r2, r2
 8005a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a50:	2301      	movs	r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a54:	f7fd fece 	bl	80037f4 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d807      	bhi.n	8005a74 <HAL_SPI_TransmitReceive+0x1d8>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6a:	d003      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a72:	e0a7      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1a6      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x130>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1a1      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x130>
 8005a88:	e07c      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x1fc>
 8005a92:	8b7b      	ldrh	r3, [r7, #26]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d16b      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005abe:	e057      	b.n	8005b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d11c      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x26c>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <HAL_SPI_TransmitReceive+0x26c>
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d114      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d119      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x2ae>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d014      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b46:	2301      	movs	r3, #1
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b4a:	f7fd fe53 	bl	80037f4 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d803      	bhi.n	8005b62 <HAL_SPI_TransmitReceive+0x2c6>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b60:	d102      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x2cc>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b6e:	e029      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1a2      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x224>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d19d      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f917 	bl	8005dbc <SPI_EndRxTxTransaction>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ba0:	e010      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	e000      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3730      	adds	r7, #48	; 0x30
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bf0:	f7fd fe00 	bl	80037f4 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c00:	f7fd fdf8 	bl	80037f4 <HAL_GetTick>
 8005c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c06:	4b39      	ldr	r3, [pc, #228]	; (8005cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	015b      	lsls	r3, r3, #5
 8005c0c:	0d1b      	lsrs	r3, r3, #20
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c16:	e054      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1e:	d050      	beq.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c20:	f7fd fde8 	bl	80037f4 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d902      	bls.n	8005c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d13d      	bne.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d111      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	d004      	beq.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d107      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	d10f      	bne.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e017      	b.n	8005ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d19b      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000004 	.word	0x20000004

08005cf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d04:	d111      	bne.n	8005d2a <SPI_EndRxTransaction+0x3a>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0e:	d004      	beq.n	8005d1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d107      	bne.n	8005d2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d32:	d12a      	bne.n	8005d8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3c:	d012      	beq.n	8005d64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2180      	movs	r1, #128	; 0x80
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff ff49 	bl	8005be0 <SPI_WaitFlagStateUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02d      	beq.n	8005db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e026      	b.n	8005db2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff ff36 	bl	8005be0 <SPI_WaitFlagStateUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01a      	beq.n	8005db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e013      	b.n	8005db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	2101      	movs	r1, #1
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f7ff ff23 	bl	8005be0 <SPI_WaitFlagStateUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e000      	b.n	8005db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <SPI_EndRxTxTransaction+0x7c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1b      	ldr	r2, [pc, #108]	; (8005e3c <SPI_EndRxTxTransaction+0x80>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	0d5b      	lsrs	r3, r3, #21
 8005dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd8:	fb02 f303 	mul.w	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de6:	d112      	bne.n	8005e0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2180      	movs	r1, #128	; 0x80
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fef4 	bl	8005be0 <SPI_WaitFlagStateUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	f043 0220 	orr.w	r2, r3, #32
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e00f      	b.n	8005e2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d0f2      	beq.n	8005e0e <SPI_EndRxTxTransaction+0x52>
 8005e28:	e000      	b.n	8005e2c <SPI_EndRxTxTransaction+0x70>
        break;
 8005e2a:	bf00      	nop
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000004 	.word	0x20000004
 8005e3c:	165e9f81 	.word	0x165e9f81

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e041      	b.n	8005ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fd fa72 	bl	8003350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 febe 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e041      	b.n	8005f74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f839 	bl	8005f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f000 fe6f 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_TIM_PWM_Start_DMA+0x2c>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e022      	b.n	8006002 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d109      	bne.n	8005fd6 <HAL_TIM_PWM_Start_DMA+0x46>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	e015      	b.n	8006002 <HAL_TIM_PWM_Start_DMA+0x72>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d109      	bne.n	8005ff0 <HAL_TIM_PWM_Start_DMA+0x60>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e008      	b.n	8006002 <HAL_TIM_PWM_Start_DMA+0x72>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
 8006008:	e171      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_TIM_PWM_Start_DMA+0x94>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e022      	b.n	800606a <HAL_TIM_PWM_Start_DMA+0xda>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d109      	bne.n	800603e <HAL_TIM_PWM_Start_DMA+0xae>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e015      	b.n	800606a <HAL_TIM_PWM_Start_DMA+0xda>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d109      	bne.n	8006058 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e008      	b.n	800606a <HAL_TIM_PWM_Start_DMA+0xda>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d024      	beq.n	80060b8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Start_DMA+0xee>
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e137      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <HAL_TIM_PWM_Start_DMA+0xfe>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608c:	e016      	b.n	80060bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d104      	bne.n	800609e <HAL_TIM_PWM_Start_DMA+0x10e>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	e00e      	b.n	80060bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d104      	bne.n	80060ae <HAL_TIM_PWM_Start_DMA+0x11e>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ac:	e006      	b.n	80060bc <HAL_TIM_PWM_Start_DMA+0x12c>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060b6:	e001      	b.n	80060bc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e118      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b0c      	cmp	r3, #12
 80060c0:	f200 80ae 	bhi.w	8006220 <HAL_TIM_PWM_Start_DMA+0x290>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006221 	.word	0x08006221
 80060d4:	08006221 	.word	0x08006221
 80060d8:	08006221 	.word	0x08006221
 80060dc:	08006149 	.word	0x08006149
 80060e0:	08006221 	.word	0x08006221
 80060e4:	08006221 	.word	0x08006221
 80060e8:	08006221 	.word	0x08006221
 80060ec:	08006191 	.word	0x08006191
 80060f0:	08006221 	.word	0x08006221
 80060f4:	08006221 	.word	0x08006221
 80060f8:	08006221 	.word	0x08006221
 80060fc:	080061d9 	.word	0x080061d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	4a7c      	ldr	r2, [pc, #496]	; (80062f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006106:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	4a7b      	ldr	r2, [pc, #492]	; (80062fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	4a7a      	ldr	r2, [pc, #488]	; (8006300 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006116:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3334      	adds	r3, #52	; 0x34
 8006124:	461a      	mov	r2, r3
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	f7fd fd70 	bl	8003c0c <HAL_DMA_Start_IT>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e0db      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006144:	60da      	str	r2, [r3, #12]
      break;
 8006146:	e06e      	b.n	8006226 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	4a6a      	ldr	r2, [pc, #424]	; (80062f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	4a69      	ldr	r2, [pc, #420]	; (80062fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	4a68      	ldr	r2, [pc, #416]	; (8006300 <HAL_TIM_PWM_Start_DMA+0x370>)
 800615e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3338      	adds	r3, #56	; 0x38
 800616c:	461a      	mov	r2, r3
 800616e:	887b      	ldrh	r3, [r7, #2]
 8006170:	f7fd fd4c 	bl	8003c0c <HAL_DMA_Start_IT>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0b7      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800618c:	60da      	str	r2, [r3, #12]
      break;
 800618e:	e04a      	b.n	8006226 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a58      	ldr	r2, [pc, #352]	; (80062f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006196:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4a57      	ldr	r2, [pc, #348]	; (80062fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800619e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	4a56      	ldr	r2, [pc, #344]	; (8006300 <HAL_TIM_PWM_Start_DMA+0x370>)
 80061a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	333c      	adds	r3, #60	; 0x3c
 80061b4:	461a      	mov	r2, r3
 80061b6:	887b      	ldrh	r3, [r7, #2]
 80061b8:	f7fd fd28 	bl	8003c0c <HAL_DMA_Start_IT>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e093      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d4:	60da      	str	r2, [r3, #12]
      break;
 80061d6:	e026      	b.n	8006226 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	4a46      	ldr	r2, [pc, #280]	; (80062f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80061de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	4a45      	ldr	r2, [pc, #276]	; (80062fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4a44      	ldr	r2, [pc, #272]	; (8006300 <HAL_TIM_PWM_Start_DMA+0x370>)
 80061ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3340      	adds	r3, #64	; 0x40
 80061fc:	461a      	mov	r2, r3
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	f7fd fd04 	bl	8003c0c <HAL_DMA_Start_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e06f      	b.n	80062ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800621c:	60da      	str	r2, [r3, #12]
      break;
 800621e:	e002      	b.n	8006226 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
      break;
 8006224:	bf00      	nop
  }

  if (status == HAL_OK)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d15f      	bne.n	80062ec <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2201      	movs	r2, #1
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 ffcd 	bl	80071d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a31      	ldr	r2, [pc, #196]	; (8006304 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIM_PWM_Start_DMA+0x2be>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <HAL_TIM_PWM_Start_DMA+0x378>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <HAL_TIM_PWM_Start_DMA+0x374>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d022      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d01d      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d018      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a21      	ldr	r2, [pc, #132]	; (8006310 <HAL_TIM_PWM_Start_DMA+0x380>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_TIM_PWM_Start_DMA+0x378>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIM_PWM_Start_DMA+0x388>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d111      	bne.n	80062dc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b06      	cmp	r3, #6
 80062c8:	d010      	beq.n	80062ec <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	e007      	b.n	80062ec <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08006af1 	.word	0x08006af1
 80062fc:	08006b99 	.word	0x08006b99
 8006300:	08006a5f 	.word	0x08006a5f
 8006304:	40010000 	.word	0x40010000
 8006308:	40010400 	.word	0x40010400
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40014000 	.word	0x40014000
 800631c:	40001800 	.word	0x40001800

08006320 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b0c      	cmp	r3, #12
 8006332:	d855      	bhi.n	80063e0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006371 	.word	0x08006371
 8006340:	080063e1 	.word	0x080063e1
 8006344:	080063e1 	.word	0x080063e1
 8006348:	080063e1 	.word	0x080063e1
 800634c:	0800638d 	.word	0x0800638d
 8006350:	080063e1 	.word	0x080063e1
 8006354:	080063e1 	.word	0x080063e1
 8006358:	080063e1 	.word	0x080063e1
 800635c:	080063a9 	.word	0x080063a9
 8006360:	080063e1 	.word	0x080063e1
 8006364:	080063e1 	.word	0x080063e1
 8006368:	080063e1 	.word	0x080063e1
 800636c:	080063c5 	.word	0x080063c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800637e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fd fd09 	bl	8003d9c <HAL_DMA_Abort_IT>
      break;
 800638a:	e02c      	b.n	80063e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fd fcfb 	bl	8003d9c <HAL_DMA_Abort_IT>
      break;
 80063a6:	e01e      	b.n	80063e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd fced 	bl	8003d9c <HAL_DMA_Abort_IT>
      break;
 80063c2:	e010      	b.n	80063e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fd fcdf 	bl	8003d9c <HAL_DMA_Abort_IT>
      break;
 80063de:	e002      	b.n	80063e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d161      	bne.n	80064b0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2200      	movs	r2, #0
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 feed 	bl	80071d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2f      	ldr	r2, [pc, #188]	; (80064bc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIM_PWM_Stop_DMA+0xee>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006422:	4013      	ands	r3, r2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1a      	ldr	r2, [r3, #32]
 800642e:	f240 4344 	movw	r3, #1092	; 0x444
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10f      	bne.n	8006478 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	f240 4344 	movw	r3, #1092	; 0x444
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <HAL_TIM_PWM_Stop_DMA+0x168>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006486:	e013      	b.n	80064b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d104      	bne.n	8006498 <HAL_TIM_PWM_Stop_DMA+0x178>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006496:	e00b      	b.n	80064b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d104      	bne.n	80064a8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a6:	e003      	b.n	80064b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400

080064c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0202 	mvn.w	r2, #2
 80064f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa81 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa73 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fb fded 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b04      	cmp	r3, #4
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b04      	cmp	r3, #4
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0204 	mvn.w	r2, #4
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa57 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa49 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fb fdc3 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b08      	cmp	r3, #8
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b08      	cmp	r3, #8
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0208 	mvn.w	r2, #8
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2204      	movs	r2, #4
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa2d 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa1f 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb fd99 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0210 	mvn.w	r2, #16
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2208      	movs	r2, #8
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa03 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9f5 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb fd6f 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b01      	cmp	r3, #1
 8006628:	d10e      	bne.n	8006648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d107      	bne.n	8006648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0201 	mvn.w	r2, #1
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9cf 	bl	80069e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d10e      	bne.n	8006674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d107      	bne.n	8006674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800666c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fe5c 	bl	800732c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d10e      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d107      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9cb 	bl	8006a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d10e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d107      	bne.n	80066cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0220 	mvn.w	r2, #32
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fe26 	bl	8007318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ae      	b.n	8006850 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	f200 809f 	bhi.w	8006840 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800673d 	.word	0x0800673d
 800670c:	08006841 	.word	0x08006841
 8006710:	08006841 	.word	0x08006841
 8006714:	08006841 	.word	0x08006841
 8006718:	0800677d 	.word	0x0800677d
 800671c:	08006841 	.word	0x08006841
 8006720:	08006841 	.word	0x08006841
 8006724:	08006841 	.word	0x08006841
 8006728:	080067bf 	.word	0x080067bf
 800672c:	08006841 	.word	0x08006841
 8006730:	08006841 	.word	0x08006841
 8006734:	08006841 	.word	0x08006841
 8006738:	080067ff 	.word	0x080067ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fafc 	bl	8006d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	619a      	str	r2, [r3, #24]
      break;
 800677a:	e064      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fb4c 	bl	8006e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	619a      	str	r2, [r3, #24]
      break;
 80067bc:	e043      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fba1 	bl	8006f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0208 	orr.w	r2, r2, #8
 80067d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0204 	bic.w	r2, r2, #4
 80067e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
      break;
 80067fc:	e023      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fbf5 	bl	8006ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	61da      	str	r2, [r3, #28]
      break;
 800683e:	e002      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_TIM_ConfigClockSource+0x1c>
 8006870:	2302      	movs	r3, #2
 8006872:	e0b4      	b.n	80069de <HAL_TIM_ConfigClockSource+0x186>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ac:	d03e      	beq.n	800692c <HAL_TIM_ConfigClockSource+0xd4>
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	f200 8087 	bhi.w	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	f000 8086 	beq.w	80069ca <HAL_TIM_ConfigClockSource+0x172>
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d87f      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b70      	cmp	r3, #112	; 0x70
 80068c6:	d01a      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0xa6>
 80068c8:	2b70      	cmp	r3, #112	; 0x70
 80068ca:	d87b      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b60      	cmp	r3, #96	; 0x60
 80068ce:	d050      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x11a>
 80068d0:	2b60      	cmp	r3, #96	; 0x60
 80068d2:	d877      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d03c      	beq.n	8006952 <HAL_TIM_ConfigClockSource+0xfa>
 80068d8:	2b50      	cmp	r3, #80	; 0x50
 80068da:	d873      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d058      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x13a>
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d86f      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d064      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d86b      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d060      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d867      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05c      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d05a      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068fc:	e062      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6899      	ldr	r1, [r3, #8]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f000 fc41 	bl	8007194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	609a      	str	r2, [r3, #8]
      break;
 800692a:	e04f      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6899      	ldr	r1, [r3, #8]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f000 fc2a 	bl	8007194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694e:	609a      	str	r2, [r3, #8]
      break;
 8006950:	e03c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6859      	ldr	r1, [r3, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	461a      	mov	r2, r3
 8006960:	f000 fb9e 	bl	80070a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2150      	movs	r1, #80	; 0x50
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fbf7 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006970:	e02c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	461a      	mov	r2, r3
 8006980:	f000 fbbd 	bl	80070fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2160      	movs	r1, #96	; 0x60
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fbe7 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 8006990:	e01c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 fb7e 	bl	80070a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2140      	movs	r1, #64	; 0x40
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fbd7 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 80069b0:	e00c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f000 fbce 	bl	800715e <TIM_ITRx_SetConfig>
      break;
 80069c2:	e003      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
      break;
 80069c8:	e000      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d107      	bne.n	8006a86 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	e02a      	b.n	8006adc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d107      	bne.n	8006aa0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2202      	movs	r2, #2
 8006a94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9e:	e01d      	b.n	8006adc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d107      	bne.n	8006aba <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2204      	movs	r2, #4
 8006aae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	e010      	b.n	8006adc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d107      	bne.n	8006ad4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad2:	e003      	b.n	8006adc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff ffb4 	bl	8006a4a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d10b      	bne.n	8006b20 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d136      	bne.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b1e:	e031      	b.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d10b      	bne.n	8006b42 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d125      	bne.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	e020      	b.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d10b      	bne.n	8006b64 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2204      	movs	r2, #4
 8006b50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d114      	bne.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b62:	e00f      	b.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d10a      	bne.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2208      	movs	r2, #8
 8006b72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7fb fab5 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	771a      	strb	r2, [r3, #28]
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d103      	bne.n	8006bb8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	771a      	strb	r2, [r3, #28]
 8006bb6:	e019      	b.n	8006bec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d103      	bne.n	8006bca <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	771a      	strb	r2, [r3, #28]
 8006bc8:	e010      	b.n	8006bec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d103      	bne.n	8006bdc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	771a      	strb	r2, [r3, #28]
 8006bda:	e007      	b.n	8006bec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d102      	bne.n	8006bec <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2208      	movs	r2, #8
 8006bea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff ff18 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a40      	ldr	r2, [pc, #256]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1e:	d00f      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3d      	ldr	r2, [pc, #244]	; (8006d18 <TIM_Base_SetConfig+0x118>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a3c      	ldr	r2, [pc, #240]	; (8006d1c <TIM_Base_SetConfig+0x11c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3b      	ldr	r2, [pc, #236]	; (8006d20 <TIM_Base_SetConfig+0x120>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a3a      	ldr	r2, [pc, #232]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2f      	ldr	r2, [pc, #188]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d02b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d027      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <TIM_Base_SetConfig+0x118>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d023      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <TIM_Base_SetConfig+0x11c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <TIM_Base_SetConfig+0x120>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d017      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a28      	ldr	r2, [pc, #160]	; (8006d28 <TIM_Base_SetConfig+0x128>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a27      	ldr	r2, [pc, #156]	; (8006d2c <TIM_Base_SetConfig+0x12c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <TIM_Base_SetConfig+0x130>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	; (8006d34 <TIM_Base_SetConfig+0x134>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <TIM_Base_SetConfig+0x138>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a23      	ldr	r2, [pc, #140]	; (8006d3c <TIM_Base_SetConfig+0x13c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d108      	bne.n	8006cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0xf8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d103      	bne.n	8006d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	615a      	str	r2, [r3, #20]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800
 8006d34:	40001800 	.word	0x40001800
 8006d38:	40001c00 	.word	0x40001c00
 8006d3c:	40002000 	.word	0x40002000

08006d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 0302 	bic.w	r3, r3, #2
 8006d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <TIM_OC1_SetConfig+0xd8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC1_SetConfig+0x64>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <TIM_OC1_SetConfig+0xdc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10c      	bne.n	8006dbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0308 	bic.w	r3, r3, #8
 8006daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 0304 	bic.w	r3, r3, #4
 8006dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <TIM_OC1_SetConfig+0xd8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC1_SetConfig+0x8e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <TIM_OC1_SetConfig+0xdc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d111      	bne.n	8006df2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400

08006e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0210 	bic.w	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a22      	ldr	r2, [pc, #136]	; (8006f04 <TIM_OC2_SetConfig+0xe4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC2_SetConfig+0x68>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a21      	ldr	r2, [pc, #132]	; (8006f08 <TIM_OC2_SetConfig+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d10d      	bne.n	8006ea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <TIM_OC2_SetConfig+0xe4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC2_SetConfig+0x94>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a16      	ldr	r2, [pc, #88]	; (8006f08 <TIM_OC2_SetConfig+0xe8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d113      	bne.n	8006edc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <TIM_OC3_SetConfig+0xe0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC3_SetConfig+0x66>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10d      	bne.n	8006f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a16      	ldr	r2, [pc, #88]	; (8006fec <TIM_OC3_SetConfig+0xe0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_OC3_SetConfig+0x92>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d113      	bne.n	8006fc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a12      	ldr	r2, [pc, #72]	; (8007098 <TIM_OC4_SetConfig+0xa4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC4_SetConfig+0x68>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a11      	ldr	r2, [pc, #68]	; (800709c <TIM_OC4_SetConfig+0xa8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d109      	bne.n	8007070 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400

080070a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f023 030a 	bic.w	r3, r3, #10
 80070dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f023 0210 	bic.w	r2, r3, #16
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800713a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	f043 0307 	orr.w	r3, r3, #7
 8007180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	2201      	movs	r2, #1
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	401a      	ands	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e05a      	b.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d01d      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1a      	ldr	r2, [pc, #104]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a17      	ldr	r2, [pc, #92]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a15      	ldr	r2, [pc, #84]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10c      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40010400 	.word	0x40010400
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800

08007318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e03f      	b.n	80073d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fc f884 	bl	8003474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fe81 	bl	800808c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08a      	sub	sp, #40	; 0x28
 80073de:	af02      	add	r7, sp, #8
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d17c      	bne.n	80074f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_UART_Transmit+0x2c>
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e075      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_UART_Transmit+0x3e>
 8007414:	2302      	movs	r3, #2
 8007416:	e06e      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742e:	f7fc f9e1 	bl	80037f4 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d108      	bne.n	800745c <HAL_UART_Transmit+0x82>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	e003      	b.n	8007464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800746c:	e02a      	b.n	80074c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fbc1 	bl	8007c00 <UART_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e036      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e007      	b.n	80074b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1cf      	bne.n	800746e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fb91 	bl	8007c00 <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e006      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b08a      	sub	sp, #40	; 0x28
 8007502:	af02      	add	r7, sp, #8
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4613      	mov	r3, r2
 800750c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b20      	cmp	r3, #32
 800751c:	f040 808c 	bne.w	8007638 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_UART_Receive+0x2e>
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e084      	b.n	800763a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_UART_Receive+0x40>
 800753a:	2302      	movs	r3, #2
 800753c:	e07d      	b.n	800763a <HAL_UART_Receive+0x13c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2222      	movs	r2, #34	; 0x22
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755a:	f7fc f94b 	bl	80037f4 <HAL_GetTick>
 800755e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	88fa      	ldrh	r2, [r7, #6]
 8007564:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d108      	bne.n	8007588 <HAL_UART_Receive+0x8a>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e003      	b.n	8007590 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007598:	e043      	b.n	8007622 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2120      	movs	r1, #32
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fb2b 	bl	8007c00 <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e042      	b.n	800763a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10c      	bne.n	80075d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	3302      	adds	r3, #2
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e01f      	b.n	8007614 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075dc:	d007      	beq.n	80075ee <HAL_UART_Receive+0xf0>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <HAL_UART_Receive+0xfe>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e008      	b.n	800760e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	b2da      	uxtb	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	3301      	adds	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1b6      	bne.n	800759a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	e000      	b.n	800763a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007638:	2302      	movs	r3, #2
  }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	4613      	mov	r3, r2
 800764e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b20      	cmp	r3, #32
 800765a:	d11d      	bne.n	8007698 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_UART_Receive_IT+0x26>
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e016      	b.n	800769a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_UART_Receive_IT+0x38>
 8007676:	2302      	movs	r3, #2
 8007678:	e00f      	b.n	800769a <HAL_UART_Receive_IT+0x58>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	461a      	mov	r2, r3
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fb24 	bl	8007cdc <UART_Start_Receive_IT>
 8007694:	4603      	mov	r3, r0
 8007696:	e000      	b.n	800769a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007698:	2302      	movs	r3, #2
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b0ba      	sub	sp, #232	; 0xe8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10f      	bne.n	800770a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_UART_IRQHandler+0x66>
 80076f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc07 	bl	8007f16 <UART_Receive_IT>
      return;
 8007708:	e256      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800770a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80de 	beq.w	80078d0 <HAL_UART_IRQHandler+0x22c>
 8007714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80d1 	beq.w	80078d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_UART_IRQHandler+0xae>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_UART_IRQHandler+0xd2>
 800775e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f043 0202 	orr.w	r2, r3, #2
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_UART_IRQHandler+0xf6>
 8007782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d011      	beq.n	80077ca <HAL_UART_IRQHandler+0x126>
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f043 0208 	orr.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 81ed 	beq.w	8007bae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_UART_IRQHandler+0x14e>
 80077e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fb92 	bl	8007f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <HAL_UART_IRQHandler+0x17a>
 8007816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa9a 	bl	8007d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d141      	bne.n	80078b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800785e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800786a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d9      	bne.n	8007832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	4a7d      	ldr	r2, [pc, #500]	; (8007a80 <HAL_UART_IRQHandler+0x3dc>)
 800788c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	4618      	mov	r0, r3
 8007894:	f7fc fa82 	bl	8003d9c <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00e      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f990 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e00a      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f98c 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e006      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f988 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078ca:	e170      	b.n	8007bae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	bf00      	nop
    return;
 80078ce:	e16e      	b.n	8007bae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	f040 814a 	bne.w	8007b6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8143 	beq.w	8007b6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 813c 	beq.w	8007b6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60bb      	str	r3, [r7, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	60bb      	str	r3, [r7, #8]
 800790a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	f040 80b4 	bne.w	8007a84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8140 	beq.w	8007bb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793a:	429a      	cmp	r2, r3
 800793c:	f080 8139 	bcs.w	8007bb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007952:	f000 8088 	beq.w	8007a66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800796c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800798e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800799a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1d9      	bne.n	8007956 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e1      	bne.n	80079a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a48:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e3      	bne.n	8007a24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fc f92b 	bl	8003cbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8b6 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a7c:	e099      	b.n	8007bb2 <HAL_UART_IRQHandler+0x50e>
 8007a7e:	bf00      	nop
 8007a80:	08007e1f 	.word	0x08007e1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 808b 	beq.w	8007bb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8086 	beq.w	8007bb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ace:	647a      	str	r2, [r7, #68]	; 0x44
 8007ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e3      	bne.n	8007aaa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	623b      	str	r3, [r7, #32]
   return(result);
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3314      	adds	r3, #20
 8007b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b06:	633a      	str	r2, [r7, #48]	; 0x30
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e3      	bne.n	8007ae2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b4c:	61fa      	str	r2, [r7, #28]
 8007b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	69b9      	ldr	r1, [r7, #24]
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e3      	bne.n	8007b28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f83e 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b6c:	e023      	b.n	8007bb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_UART_IRQHandler+0x4ea>
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f95d 	bl	8007e46 <UART_Transmit_IT>
    return;
 8007b8c:	e014      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00e      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x514>
 8007b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d008      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f99d 	bl	8007ee6 <UART_EndTransmit_IT>
    return;
 8007bac:	e004      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
    return;
 8007bae:	bf00      	nop
 8007bb0:	e002      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bb2:	bf00      	nop
 8007bb4:	e000      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bb6:	bf00      	nop
  }
}
 8007bb8:	37e8      	adds	r7, #232	; 0xe8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b090      	sub	sp, #64	; 0x40
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c10:	e050      	b.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c18:	d04c      	beq.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c20:	f7fb fde8 	bl	80037f4 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d241      	bcs.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c50:	637a      	str	r2, [r7, #52]	; 0x34
 8007c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e5      	bne.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	613b      	str	r3, [r7, #16]
   return(result);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3314      	adds	r3, #20
 8007c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c84:	623a      	str	r2, [r7, #32]
 8007c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	69f9      	ldr	r1, [r7, #28]
 8007c8a:	6a3a      	ldr	r2, [r7, #32]
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e5      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e00f      	b.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d09f      	beq.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3740      	adds	r7, #64	; 0x40
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	88fa      	ldrh	r2, [r7, #6]
 8007cf4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2222      	movs	r2, #34	; 0x22
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0201 	orr.w	r2, r2, #1
 8007d38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0220 	orr.w	r2, r2, #32
 8007d48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b095      	sub	sp, #84	; 0x54
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	330c      	adds	r3, #12
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d80:	643a      	str	r2, [r7, #64]	; 0x40
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e5      	bne.n	8007d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d119      	bne.n	8007e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f023 0310 	bic.w	r3, r3, #16
 8007de6:	647b      	str	r3, [r7, #68]	; 0x44
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	330c      	adds	r3, #12
 8007dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df0:	61ba      	str	r2, [r7, #24]
 8007df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6979      	ldr	r1, [r7, #20]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e5      	bne.n	8007dd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e12:	bf00      	nop
 8007e14:	3754      	adds	r7, #84	; 0x54
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff fecb 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b21      	cmp	r3, #33	; 0x21
 8007e58:	d13e      	bne.n	8007ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e62:	d114      	bne.n	8007e8e <UART_Transmit_IT+0x48>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d110      	bne.n	8007e8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	621a      	str	r2, [r3, #32]
 8007e8c:	e008      	b.n	8007ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	1c59      	adds	r1, r3, #1
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6211      	str	r1, [r2, #32]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4619      	mov	r1, r3
 8007eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10f      	bne.n	8007ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e000      	b.n	8007eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ed8:	2302      	movs	r3, #2
  }
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fe5a 	bl	8007bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b08c      	sub	sp, #48	; 0x30
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b22      	cmp	r3, #34	; 0x22
 8007f28:	f040 80ab 	bne.w	8008082 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f34:	d117      	bne.n	8007f66 <UART_Receive_IT+0x50>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d113      	bne.n	8007f66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	1c9a      	adds	r2, r3, #2
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
 8007f64:	e026      	b.n	8007fb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f78:	d007      	beq.n	8007f8a <UART_Receive_IT+0x74>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <UART_Receive_IT+0x82>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e008      	b.n	8007faa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d15a      	bne.n	800807e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0220 	bic.w	r2, r2, #32
 8007fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695a      	ldr	r2, [r3, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0201 	bic.w	r2, r2, #1
 8007ff6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	d135      	bne.n	8008074 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	330c      	adds	r3, #12
 8008014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	613b      	str	r3, [r7, #16]
   return(result);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f023 0310 	bic.w	r3, r3, #16
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	330c      	adds	r3, #12
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	623a      	str	r2, [r7, #32]
 8008030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	69f9      	ldr	r1, [r7, #28]
 8008034:	6a3a      	ldr	r2, [r7, #32]
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	61bb      	str	r3, [r7, #24]
   return(result);
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e5      	bne.n	800800e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b10      	cmp	r3, #16
 800804e:	d10a      	bne.n	8008066 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff fdbb 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
 8008072:	e002      	b.n	800807a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7f9 fba9 	bl	80017cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	e002      	b.n	8008084 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e000      	b.n	8008084 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3730      	adds	r7, #48	; 0x30
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800808c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008090:	b0c0      	sub	sp, #256	; 0x100
 8008092:	af00      	add	r7, sp, #0
 8008094:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a8:	68d9      	ldr	r1, [r3, #12]
 80080aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	ea40 0301 	orr.w	r3, r0, r1
 80080b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080e4:	f021 010c 	bic.w	r1, r1, #12
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080f2:	430b      	orrs	r3, r1
 80080f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	6999      	ldr	r1, [r3, #24]
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	ea40 0301 	orr.w	r3, r0, r1
 8008112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b8f      	ldr	r3, [pc, #572]	; (8008358 <UART_SetConfig+0x2cc>)
 800811c:	429a      	cmp	r2, r3
 800811e:	d005      	beq.n	800812c <UART_SetConfig+0xa0>
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	4b8d      	ldr	r3, [pc, #564]	; (800835c <UART_SetConfig+0x2d0>)
 8008128:	429a      	cmp	r2, r3
 800812a:	d104      	bne.n	8008136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800812c:	f7fd f8cc 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8008130:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008134:	e003      	b.n	800813e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008136:	f7fd f8b3 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 800813a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008148:	f040 810c 	bne.w	8008364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800814c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008150:	2200      	movs	r2, #0
 8008152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008156:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800815a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	1891      	adds	r1, r2, r2
 8008164:	65b9      	str	r1, [r7, #88]	; 0x58
 8008166:	415b      	adcs	r3, r3
 8008168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800816a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800816e:	4621      	mov	r1, r4
 8008170:	eb12 0801 	adds.w	r8, r2, r1
 8008174:	4629      	mov	r1, r5
 8008176:	eb43 0901 	adc.w	r9, r3, r1
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800818a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800818e:	4690      	mov	r8, r2
 8008190:	4699      	mov	r9, r3
 8008192:	4623      	mov	r3, r4
 8008194:	eb18 0303 	adds.w	r3, r8, r3
 8008198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800819c:	462b      	mov	r3, r5
 800819e:	eb49 0303 	adc.w	r3, r9, r3
 80081a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ba:	460b      	mov	r3, r1
 80081bc:	18db      	adds	r3, r3, r3
 80081be:	653b      	str	r3, [r7, #80]	; 0x50
 80081c0:	4613      	mov	r3, r2
 80081c2:	eb42 0303 	adc.w	r3, r2, r3
 80081c6:	657b      	str	r3, [r7, #84]	; 0x54
 80081c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081d0:	f7f8 fca4 	bl	8000b1c <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <UART_SetConfig+0x2d4>)
 80081da:	fba3 2302 	umull	r2, r3, r3, r2
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	011c      	lsls	r4, r3, #4
 80081e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081f4:	4642      	mov	r2, r8
 80081f6:	464b      	mov	r3, r9
 80081f8:	1891      	adds	r1, r2, r2
 80081fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80081fc:	415b      	adcs	r3, r3
 80081fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008204:	4641      	mov	r1, r8
 8008206:	eb12 0a01 	adds.w	sl, r2, r1
 800820a:	4649      	mov	r1, r9
 800820c:	eb43 0b01 	adc.w	fp, r3, r1
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800821c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008224:	4692      	mov	sl, r2
 8008226:	469b      	mov	fp, r3
 8008228:	4643      	mov	r3, r8
 800822a:	eb1a 0303 	adds.w	r3, sl, r3
 800822e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008232:	464b      	mov	r3, r9
 8008234:	eb4b 0303 	adc.w	r3, fp, r3
 8008238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008248:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800824c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008250:	460b      	mov	r3, r1
 8008252:	18db      	adds	r3, r3, r3
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
 8008256:	4613      	mov	r3, r2
 8008258:	eb42 0303 	adc.w	r3, r2, r3
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
 800825e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008266:	f7f8 fc59 	bl	8000b1c <__aeabi_uldivmod>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4611      	mov	r1, r2
 8008270:	4b3b      	ldr	r3, [pc, #236]	; (8008360 <UART_SetConfig+0x2d4>)
 8008272:	fba3 2301 	umull	r2, r3, r3, r1
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	2264      	movs	r2, #100	; 0x64
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	1acb      	subs	r3, r1, r3
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008286:	4b36      	ldr	r3, [pc, #216]	; (8008360 <UART_SetConfig+0x2d4>)
 8008288:	fba3 2302 	umull	r2, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008294:	441c      	add	r4, r3
 8008296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829a:	2200      	movs	r2, #0
 800829c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082a8:	4642      	mov	r2, r8
 80082aa:	464b      	mov	r3, r9
 80082ac:	1891      	adds	r1, r2, r2
 80082ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80082b0:	415b      	adcs	r3, r3
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082b8:	4641      	mov	r1, r8
 80082ba:	1851      	adds	r1, r2, r1
 80082bc:	6339      	str	r1, [r7, #48]	; 0x30
 80082be:	4649      	mov	r1, r9
 80082c0:	414b      	adcs	r3, r1
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082d0:	4659      	mov	r1, fp
 80082d2:	00cb      	lsls	r3, r1, #3
 80082d4:	4651      	mov	r1, sl
 80082d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082da:	4651      	mov	r1, sl
 80082dc:	00ca      	lsls	r2, r1, #3
 80082de:	4610      	mov	r0, r2
 80082e0:	4619      	mov	r1, r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	4642      	mov	r2, r8
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082ec:	464b      	mov	r3, r9
 80082ee:	460a      	mov	r2, r1
 80082f0:	eb42 0303 	adc.w	r3, r2, r3
 80082f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008304:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800830c:	460b      	mov	r3, r1
 800830e:	18db      	adds	r3, r3, r3
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
 8008312:	4613      	mov	r3, r2
 8008314:	eb42 0303 	adc.w	r3, r2, r3
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800831e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008322:	f7f8 fbfb 	bl	8000b1c <__aeabi_uldivmod>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <UART_SetConfig+0x2d4>)
 800832c:	fba3 1302 	umull	r1, r3, r3, r2
 8008330:	095b      	lsrs	r3, r3, #5
 8008332:	2164      	movs	r1, #100	; 0x64
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	3332      	adds	r3, #50	; 0x32
 800833e:	4a08      	ldr	r2, [pc, #32]	; (8008360 <UART_SetConfig+0x2d4>)
 8008340:	fba2 2303 	umull	r2, r3, r2, r3
 8008344:	095b      	lsrs	r3, r3, #5
 8008346:	f003 0207 	and.w	r2, r3, #7
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4422      	add	r2, r4
 8008352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008354:	e105      	b.n	8008562 <UART_SetConfig+0x4d6>
 8008356:	bf00      	nop
 8008358:	40011000 	.word	0x40011000
 800835c:	40011400 	.word	0x40011400
 8008360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008368:	2200      	movs	r2, #0
 800836a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800836e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008376:	4642      	mov	r2, r8
 8008378:	464b      	mov	r3, r9
 800837a:	1891      	adds	r1, r2, r2
 800837c:	6239      	str	r1, [r7, #32]
 800837e:	415b      	adcs	r3, r3
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008386:	4641      	mov	r1, r8
 8008388:	1854      	adds	r4, r2, r1
 800838a:	4649      	mov	r1, r9
 800838c:	eb43 0501 	adc.w	r5, r3, r1
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	00eb      	lsls	r3, r5, #3
 800839a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800839e:	00e2      	lsls	r2, r4, #3
 80083a0:	4614      	mov	r4, r2
 80083a2:	461d      	mov	r5, r3
 80083a4:	4643      	mov	r3, r8
 80083a6:	18e3      	adds	r3, r4, r3
 80083a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083ac:	464b      	mov	r3, r9
 80083ae:	eb45 0303 	adc.w	r3, r5, r3
 80083b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083d2:	4629      	mov	r1, r5
 80083d4:	008b      	lsls	r3, r1, #2
 80083d6:	4621      	mov	r1, r4
 80083d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083dc:	4621      	mov	r1, r4
 80083de:	008a      	lsls	r2, r1, #2
 80083e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083e4:	f7f8 fb9a 	bl	8000b1c <__aeabi_uldivmod>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4b60      	ldr	r3, [pc, #384]	; (8008570 <UART_SetConfig+0x4e4>)
 80083ee:	fba3 2302 	umull	r2, r3, r3, r2
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	011c      	lsls	r4, r3, #4
 80083f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	1891      	adds	r1, r2, r2
 800840e:	61b9      	str	r1, [r7, #24]
 8008410:	415b      	adcs	r3, r3
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008418:	4641      	mov	r1, r8
 800841a:	1851      	adds	r1, r2, r1
 800841c:	6139      	str	r1, [r7, #16]
 800841e:	4649      	mov	r1, r9
 8008420:	414b      	adcs	r3, r1
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	f04f 0300 	mov.w	r3, #0
 800842c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008430:	4659      	mov	r1, fp
 8008432:	00cb      	lsls	r3, r1, #3
 8008434:	4651      	mov	r1, sl
 8008436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843a:	4651      	mov	r1, sl
 800843c:	00ca      	lsls	r2, r1, #3
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	4603      	mov	r3, r0
 8008444:	4642      	mov	r2, r8
 8008446:	189b      	adds	r3, r3, r2
 8008448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800844c:	464b      	mov	r3, r9
 800844e:	460a      	mov	r2, r1
 8008450:	eb42 0303 	adc.w	r3, r2, r3
 8008454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	67bb      	str	r3, [r7, #120]	; 0x78
 8008462:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008470:	4649      	mov	r1, r9
 8008472:	008b      	lsls	r3, r1, #2
 8008474:	4641      	mov	r1, r8
 8008476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800847a:	4641      	mov	r1, r8
 800847c:	008a      	lsls	r2, r1, #2
 800847e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008482:	f7f8 fb4b 	bl	8000b1c <__aeabi_uldivmod>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4b39      	ldr	r3, [pc, #228]	; (8008570 <UART_SetConfig+0x4e4>)
 800848c:	fba3 1302 	umull	r1, r3, r3, r2
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	2164      	movs	r1, #100	; 0x64
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	3332      	adds	r3, #50	; 0x32
 800849e:	4a34      	ldr	r2, [pc, #208]	; (8008570 <UART_SetConfig+0x4e4>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084aa:	441c      	add	r4, r3
 80084ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b0:	2200      	movs	r2, #0
 80084b2:	673b      	str	r3, [r7, #112]	; 0x70
 80084b4:	677a      	str	r2, [r7, #116]	; 0x74
 80084b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084ba:	4642      	mov	r2, r8
 80084bc:	464b      	mov	r3, r9
 80084be:	1891      	adds	r1, r2, r2
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	415b      	adcs	r3, r3
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084ca:	4641      	mov	r1, r8
 80084cc:	1851      	adds	r1, r2, r1
 80084ce:	6039      	str	r1, [r7, #0]
 80084d0:	4649      	mov	r1, r9
 80084d2:	414b      	adcs	r3, r1
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084e2:	4659      	mov	r1, fp
 80084e4:	00cb      	lsls	r3, r1, #3
 80084e6:	4651      	mov	r1, sl
 80084e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ec:	4651      	mov	r1, sl
 80084ee:	00ca      	lsls	r2, r1, #3
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	4603      	mov	r3, r0
 80084f6:	4642      	mov	r2, r8
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80084fc:	464b      	mov	r3, r9
 80084fe:	460a      	mov	r2, r1
 8008500:	eb42 0303 	adc.w	r3, r2, r3
 8008504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	663b      	str	r3, [r7, #96]	; 0x60
 8008510:	667a      	str	r2, [r7, #100]	; 0x64
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800851e:	4649      	mov	r1, r9
 8008520:	008b      	lsls	r3, r1, #2
 8008522:	4641      	mov	r1, r8
 8008524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008528:	4641      	mov	r1, r8
 800852a:	008a      	lsls	r2, r1, #2
 800852c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008530:	f7f8 faf4 	bl	8000b1c <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <UART_SetConfig+0x4e4>)
 800853a:	fba3 1302 	umull	r1, r3, r3, r2
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	2164      	movs	r1, #100	; 0x64
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	3332      	adds	r3, #50	; 0x32
 800854c:	4a08      	ldr	r2, [pc, #32]	; (8008570 <UART_SetConfig+0x4e4>)
 800854e:	fba2 2303 	umull	r2, r3, r2, r3
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4422      	add	r2, r4
 8008560:	609a      	str	r2, [r3, #8]
}
 8008562:	bf00      	nop
 8008564:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008568:	46bd      	mov	sp, r7
 800856a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800856e:	bf00      	nop
 8008570:	51eb851f 	.word	0x51eb851f

08008574 <atoi>:
 8008574:	220a      	movs	r2, #10
 8008576:	2100      	movs	r1, #0
 8008578:	f000 b992 	b.w	80088a0 <strtol>

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	; (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	; (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	; (80085cc <__libc_init_array+0x44>)
 800859c:	f001 f908 	bl	80097b0 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08009d20 	.word	0x08009d20
 80085c4:	08009d20 	.word	0x08009d20
 80085c8:	08009d20 	.word	0x08009d20
 80085cc:	08009d24 	.word	0x08009d24

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <iprintf>:
 80085e0:	b40f      	push	{r0, r1, r2, r3}
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <iprintf+0x2c>)
 80085e4:	b513      	push	{r0, r1, r4, lr}
 80085e6:	681c      	ldr	r4, [r3, #0]
 80085e8:	b124      	cbz	r4, 80085f4 <iprintf+0x14>
 80085ea:	69a3      	ldr	r3, [r4, #24]
 80085ec:	b913      	cbnz	r3, 80085f4 <iprintf+0x14>
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fa7a 	bl	8008ae8 <__sinit>
 80085f4:	ab05      	add	r3, sp, #20
 80085f6:	9a04      	ldr	r2, [sp, #16]
 80085f8:	68a1      	ldr	r1, [r4, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fc8b 	bl	8008f18 <_vfiprintf_r>
 8008602:	b002      	add	sp, #8
 8008604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008608:	b004      	add	sp, #16
 800860a:	4770      	bx	lr
 800860c:	20000010 	.word	0x20000010

08008610 <setvbuf>:
 8008610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008614:	461d      	mov	r5, r3
 8008616:	4b5d      	ldr	r3, [pc, #372]	; (800878c <setvbuf+0x17c>)
 8008618:	681f      	ldr	r7, [r3, #0]
 800861a:	4604      	mov	r4, r0
 800861c:	460e      	mov	r6, r1
 800861e:	4690      	mov	r8, r2
 8008620:	b127      	cbz	r7, 800862c <setvbuf+0x1c>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	b913      	cbnz	r3, 800862c <setvbuf+0x1c>
 8008626:	4638      	mov	r0, r7
 8008628:	f000 fa5e 	bl	8008ae8 <__sinit>
 800862c:	4b58      	ldr	r3, [pc, #352]	; (8008790 <setvbuf+0x180>)
 800862e:	429c      	cmp	r4, r3
 8008630:	d167      	bne.n	8008702 <setvbuf+0xf2>
 8008632:	687c      	ldr	r4, [r7, #4]
 8008634:	f1b8 0f02 	cmp.w	r8, #2
 8008638:	d006      	beq.n	8008648 <setvbuf+0x38>
 800863a:	f1b8 0f01 	cmp.w	r8, #1
 800863e:	f200 809f 	bhi.w	8008780 <setvbuf+0x170>
 8008642:	2d00      	cmp	r5, #0
 8008644:	f2c0 809c 	blt.w	8008780 <setvbuf+0x170>
 8008648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d405      	bmi.n	800865a <setvbuf+0x4a>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	0598      	lsls	r0, r3, #22
 8008652:	d402      	bmi.n	800865a <setvbuf+0x4a>
 8008654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008656:	f000 fae5 	bl	8008c24 <__retarget_lock_acquire_recursive>
 800865a:	4621      	mov	r1, r4
 800865c:	4638      	mov	r0, r7
 800865e:	f000 f9af 	bl	80089c0 <_fflush_r>
 8008662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008664:	b141      	cbz	r1, 8008678 <setvbuf+0x68>
 8008666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800866a:	4299      	cmp	r1, r3
 800866c:	d002      	beq.n	8008674 <setvbuf+0x64>
 800866e:	4638      	mov	r0, r7
 8008670:	f000 fb48 	bl	8008d04 <_free_r>
 8008674:	2300      	movs	r3, #0
 8008676:	6363      	str	r3, [r4, #52]	; 0x34
 8008678:	2300      	movs	r3, #0
 800867a:	61a3      	str	r3, [r4, #24]
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	0619      	lsls	r1, r3, #24
 8008682:	d503      	bpl.n	800868c <setvbuf+0x7c>
 8008684:	6921      	ldr	r1, [r4, #16]
 8008686:	4638      	mov	r0, r7
 8008688:	f000 fb3c 	bl	8008d04 <_free_r>
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	f1b8 0f02 	cmp.w	r8, #2
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	d06c      	beq.n	8008778 <setvbuf+0x168>
 800869e:	ab01      	add	r3, sp, #4
 80086a0:	466a      	mov	r2, sp
 80086a2:	4621      	mov	r1, r4
 80086a4:	4638      	mov	r0, r7
 80086a6:	f000 fabf 	bl	8008c28 <__swhatbuf_r>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	4318      	orrs	r0, r3
 80086ae:	81a0      	strh	r0, [r4, #12]
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	d130      	bne.n	8008716 <setvbuf+0x106>
 80086b4:	9d00      	ldr	r5, [sp, #0]
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fb1c 	bl	8008cf4 <malloc>
 80086bc:	4606      	mov	r6, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	d155      	bne.n	800876e <setvbuf+0x15e>
 80086c2:	f8dd 9000 	ldr.w	r9, [sp]
 80086c6:	45a9      	cmp	r9, r5
 80086c8:	d14a      	bne.n	8008760 <setvbuf+0x150>
 80086ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80086ce:	2200      	movs	r2, #0
 80086d0:	60a2      	str	r2, [r4, #8]
 80086d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	6122      	str	r2, [r4, #16]
 80086da:	2201      	movs	r2, #1
 80086dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e0:	6162      	str	r2, [r4, #20]
 80086e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086e4:	f043 0302 	orr.w	r3, r3, #2
 80086e8:	07d2      	lsls	r2, r2, #31
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	d405      	bmi.n	80086fa <setvbuf+0xea>
 80086ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80086f2:	d102      	bne.n	80086fa <setvbuf+0xea>
 80086f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f6:	f000 fa96 	bl	8008c26 <__retarget_lock_release_recursive>
 80086fa:	4628      	mov	r0, r5
 80086fc:	b003      	add	sp, #12
 80086fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <setvbuf+0x184>)
 8008704:	429c      	cmp	r4, r3
 8008706:	d101      	bne.n	800870c <setvbuf+0xfc>
 8008708:	68bc      	ldr	r4, [r7, #8]
 800870a:	e793      	b.n	8008634 <setvbuf+0x24>
 800870c:	4b22      	ldr	r3, [pc, #136]	; (8008798 <setvbuf+0x188>)
 800870e:	429c      	cmp	r4, r3
 8008710:	bf08      	it	eq
 8008712:	68fc      	ldreq	r4, [r7, #12]
 8008714:	e78e      	b.n	8008634 <setvbuf+0x24>
 8008716:	2e00      	cmp	r6, #0
 8008718:	d0cd      	beq.n	80086b6 <setvbuf+0xa6>
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	b913      	cbnz	r3, 8008724 <setvbuf+0x114>
 800871e:	4638      	mov	r0, r7
 8008720:	f000 f9e2 	bl	8008ae8 <__sinit>
 8008724:	f1b8 0f01 	cmp.w	r8, #1
 8008728:	bf08      	it	eq
 800872a:	89a3      	ldrheq	r3, [r4, #12]
 800872c:	6026      	str	r6, [r4, #0]
 800872e:	bf04      	itt	eq
 8008730:	f043 0301 	orreq.w	r3, r3, #1
 8008734:	81a3      	strheq	r3, [r4, #12]
 8008736:	89a2      	ldrh	r2, [r4, #12]
 8008738:	f012 0308 	ands.w	r3, r2, #8
 800873c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008740:	d01c      	beq.n	800877c <setvbuf+0x16c>
 8008742:	07d3      	lsls	r3, r2, #31
 8008744:	bf41      	itttt	mi
 8008746:	2300      	movmi	r3, #0
 8008748:	426d      	negmi	r5, r5
 800874a:	60a3      	strmi	r3, [r4, #8]
 800874c:	61a5      	strmi	r5, [r4, #24]
 800874e:	bf58      	it	pl
 8008750:	60a5      	strpl	r5, [r4, #8]
 8008752:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008754:	f015 0501 	ands.w	r5, r5, #1
 8008758:	d115      	bne.n	8008786 <setvbuf+0x176>
 800875a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800875e:	e7c8      	b.n	80086f2 <setvbuf+0xe2>
 8008760:	4648      	mov	r0, r9
 8008762:	f000 fac7 	bl	8008cf4 <malloc>
 8008766:	4606      	mov	r6, r0
 8008768:	2800      	cmp	r0, #0
 800876a:	d0ae      	beq.n	80086ca <setvbuf+0xba>
 800876c:	464d      	mov	r5, r9
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	e7d0      	b.n	800871a <setvbuf+0x10a>
 8008778:	2500      	movs	r5, #0
 800877a:	e7a8      	b.n	80086ce <setvbuf+0xbe>
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	e7e8      	b.n	8008752 <setvbuf+0x142>
 8008780:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008784:	e7b9      	b.n	80086fa <setvbuf+0xea>
 8008786:	2500      	movs	r5, #0
 8008788:	e7b7      	b.n	80086fa <setvbuf+0xea>
 800878a:	bf00      	nop
 800878c:	20000010 	.word	0x20000010
 8008790:	08009ca4 	.word	0x08009ca4
 8008794:	08009cc4 	.word	0x08009cc4
 8008798:	08009c84 	.word	0x08009c84

0800879c <_strtol_l.constprop.0>:
 800879c:	2b01      	cmp	r3, #1
 800879e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a2:	d001      	beq.n	80087a8 <_strtol_l.constprop.0+0xc>
 80087a4:	2b24      	cmp	r3, #36	; 0x24
 80087a6:	d906      	bls.n	80087b6 <_strtol_l.constprop.0+0x1a>
 80087a8:	f7ff fee8 	bl	800857c <__errno>
 80087ac:	2316      	movs	r3, #22
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	2000      	movs	r0, #0
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800889c <_strtol_l.constprop.0+0x100>
 80087ba:	460d      	mov	r5, r1
 80087bc:	462e      	mov	r6, r5
 80087be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80087c6:	f017 0708 	ands.w	r7, r7, #8
 80087ca:	d1f7      	bne.n	80087bc <_strtol_l.constprop.0+0x20>
 80087cc:	2c2d      	cmp	r4, #45	; 0x2d
 80087ce:	d132      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087d0:	782c      	ldrb	r4, [r5, #0]
 80087d2:	2701      	movs	r7, #1
 80087d4:	1cb5      	adds	r5, r6, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d05b      	beq.n	8008892 <_strtol_l.constprop.0+0xf6>
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d109      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087de:	2c30      	cmp	r4, #48	; 0x30
 80087e0:	d107      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087e2:	782c      	ldrb	r4, [r5, #0]
 80087e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087e8:	2c58      	cmp	r4, #88	; 0x58
 80087ea:	d14d      	bne.n	8008888 <_strtol_l.constprop.0+0xec>
 80087ec:	786c      	ldrb	r4, [r5, #1]
 80087ee:	2310      	movs	r3, #16
 80087f0:	3502      	adds	r5, #2
 80087f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80087fa:	f04f 0c00 	mov.w	ip, #0
 80087fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008802:	4666      	mov	r6, ip
 8008804:	fb03 8a19 	mls	sl, r3, r9, r8
 8008808:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800880c:	f1be 0f09 	cmp.w	lr, #9
 8008810:	d816      	bhi.n	8008840 <_strtol_l.constprop.0+0xa4>
 8008812:	4674      	mov	r4, lr
 8008814:	42a3      	cmp	r3, r4
 8008816:	dd24      	ble.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008818:	f1bc 0f00 	cmp.w	ip, #0
 800881c:	db1e      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 800881e:	45b1      	cmp	r9, r6
 8008820:	d31c      	bcc.n	800885c <_strtol_l.constprop.0+0xc0>
 8008822:	d101      	bne.n	8008828 <_strtol_l.constprop.0+0x8c>
 8008824:	45a2      	cmp	sl, r4
 8008826:	db19      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 8008828:	fb06 4603 	mla	r6, r6, r3, r4
 800882c:	f04f 0c01 	mov.w	ip, #1
 8008830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008834:	e7e8      	b.n	8008808 <_strtol_l.constprop.0+0x6c>
 8008836:	2c2b      	cmp	r4, #43	; 0x2b
 8008838:	bf04      	itt	eq
 800883a:	782c      	ldrbeq	r4, [r5, #0]
 800883c:	1cb5      	addeq	r5, r6, #2
 800883e:	e7ca      	b.n	80087d6 <_strtol_l.constprop.0+0x3a>
 8008840:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008844:	f1be 0f19 	cmp.w	lr, #25
 8008848:	d801      	bhi.n	800884e <_strtol_l.constprop.0+0xb2>
 800884a:	3c37      	subs	r4, #55	; 0x37
 800884c:	e7e2      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800884e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008852:	f1be 0f19 	cmp.w	lr, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008858:	3c57      	subs	r4, #87	; 0x57
 800885a:	e7db      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800885c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008860:	e7e6      	b.n	8008830 <_strtol_l.constprop.0+0x94>
 8008862:	f1bc 0f00 	cmp.w	ip, #0
 8008866:	da05      	bge.n	8008874 <_strtol_l.constprop.0+0xd8>
 8008868:	2322      	movs	r3, #34	; 0x22
 800886a:	6003      	str	r3, [r0, #0]
 800886c:	4646      	mov	r6, r8
 800886e:	b942      	cbnz	r2, 8008882 <_strtol_l.constprop.0+0xe6>
 8008870:	4630      	mov	r0, r6
 8008872:	e79e      	b.n	80087b2 <_strtol_l.constprop.0+0x16>
 8008874:	b107      	cbz	r7, 8008878 <_strtol_l.constprop.0+0xdc>
 8008876:	4276      	negs	r6, r6
 8008878:	2a00      	cmp	r2, #0
 800887a:	d0f9      	beq.n	8008870 <_strtol_l.constprop.0+0xd4>
 800887c:	f1bc 0f00 	cmp.w	ip, #0
 8008880:	d000      	beq.n	8008884 <_strtol_l.constprop.0+0xe8>
 8008882:	1e69      	subs	r1, r5, #1
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7f3      	b.n	8008870 <_strtol_l.constprop.0+0xd4>
 8008888:	2430      	movs	r4, #48	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b1      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 800888e:	2308      	movs	r3, #8
 8008890:	e7af      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d0a5      	beq.n	80087e2 <_strtol_l.constprop.0+0x46>
 8008896:	230a      	movs	r3, #10
 8008898:	e7ab      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 800889a:	bf00      	nop
 800889c:	08009b81 	.word	0x08009b81

080088a0 <strtol>:
 80088a0:	4613      	mov	r3, r2
 80088a2:	460a      	mov	r2, r1
 80088a4:	4601      	mov	r1, r0
 80088a6:	4802      	ldr	r0, [pc, #8]	; (80088b0 <strtol+0x10>)
 80088a8:	6800      	ldr	r0, [r0, #0]
 80088aa:	f7ff bf77 	b.w	800879c <_strtol_l.constprop.0>
 80088ae:	bf00      	nop
 80088b0:	20000010 	.word	0x20000010

080088b4 <__sflush_r>:
 80088b4:	898a      	ldrh	r2, [r1, #12]
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	4605      	mov	r5, r0
 80088bc:	0710      	lsls	r0, r2, #28
 80088be:	460c      	mov	r4, r1
 80088c0:	d458      	bmi.n	8008974 <__sflush_r+0xc0>
 80088c2:	684b      	ldr	r3, [r1, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc05      	bgt.n	80088d4 <__sflush_r+0x20>
 80088c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dc02      	bgt.n	80088d4 <__sflush_r+0x20>
 80088ce:	2000      	movs	r0, #0
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d0f9      	beq.n	80088ce <__sflush_r+0x1a>
 80088da:	2300      	movs	r3, #0
 80088dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088e0:	682f      	ldr	r7, [r5, #0]
 80088e2:	602b      	str	r3, [r5, #0]
 80088e4:	d032      	beq.n	800894c <__sflush_r+0x98>
 80088e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	075a      	lsls	r2, r3, #29
 80088ec:	d505      	bpl.n	80088fa <__sflush_r+0x46>
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	1ac0      	subs	r0, r0, r3
 80088f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f4:	b10b      	cbz	r3, 80088fa <__sflush_r+0x46>
 80088f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f8:	1ac0      	subs	r0, r0, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	4602      	mov	r2, r0
 80088fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008900:	6a21      	ldr	r1, [r4, #32]
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	d106      	bne.n	800891a <__sflush_r+0x66>
 800890c:	6829      	ldr	r1, [r5, #0]
 800890e:	291d      	cmp	r1, #29
 8008910:	d82c      	bhi.n	800896c <__sflush_r+0xb8>
 8008912:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <__sflush_r+0x108>)
 8008914:	40ca      	lsrs	r2, r1
 8008916:	07d6      	lsls	r6, r2, #31
 8008918:	d528      	bpl.n	800896c <__sflush_r+0xb8>
 800891a:	2200      	movs	r2, #0
 800891c:	6062      	str	r2, [r4, #4]
 800891e:	04d9      	lsls	r1, r3, #19
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	d504      	bpl.n	8008930 <__sflush_r+0x7c>
 8008926:	1c42      	adds	r2, r0, #1
 8008928:	d101      	bne.n	800892e <__sflush_r+0x7a>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	b903      	cbnz	r3, 8008930 <__sflush_r+0x7c>
 800892e:	6560      	str	r0, [r4, #84]	; 0x54
 8008930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008932:	602f      	str	r7, [r5, #0]
 8008934:	2900      	cmp	r1, #0
 8008936:	d0ca      	beq.n	80088ce <__sflush_r+0x1a>
 8008938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800893c:	4299      	cmp	r1, r3
 800893e:	d002      	beq.n	8008946 <__sflush_r+0x92>
 8008940:	4628      	mov	r0, r5
 8008942:	f000 f9df 	bl	8008d04 <_free_r>
 8008946:	2000      	movs	r0, #0
 8008948:	6360      	str	r0, [r4, #52]	; 0x34
 800894a:	e7c1      	b.n	80088d0 <__sflush_r+0x1c>
 800894c:	6a21      	ldr	r1, [r4, #32]
 800894e:	2301      	movs	r3, #1
 8008950:	4628      	mov	r0, r5
 8008952:	47b0      	blx	r6
 8008954:	1c41      	adds	r1, r0, #1
 8008956:	d1c7      	bne.n	80088e8 <__sflush_r+0x34>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c4      	beq.n	80088e8 <__sflush_r+0x34>
 800895e:	2b1d      	cmp	r3, #29
 8008960:	d001      	beq.n	8008966 <__sflush_r+0xb2>
 8008962:	2b16      	cmp	r3, #22
 8008964:	d101      	bne.n	800896a <__sflush_r+0xb6>
 8008966:	602f      	str	r7, [r5, #0]
 8008968:	e7b1      	b.n	80088ce <__sflush_r+0x1a>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	e7ad      	b.n	80088d0 <__sflush_r+0x1c>
 8008974:	690f      	ldr	r7, [r1, #16]
 8008976:	2f00      	cmp	r7, #0
 8008978:	d0a9      	beq.n	80088ce <__sflush_r+0x1a>
 800897a:	0793      	lsls	r3, r2, #30
 800897c:	680e      	ldr	r6, [r1, #0]
 800897e:	bf08      	it	eq
 8008980:	694b      	ldreq	r3, [r1, #20]
 8008982:	600f      	str	r7, [r1, #0]
 8008984:	bf18      	it	ne
 8008986:	2300      	movne	r3, #0
 8008988:	eba6 0807 	sub.w	r8, r6, r7
 800898c:	608b      	str	r3, [r1, #8]
 800898e:	f1b8 0f00 	cmp.w	r8, #0
 8008992:	dd9c      	ble.n	80088ce <__sflush_r+0x1a>
 8008994:	6a21      	ldr	r1, [r4, #32]
 8008996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008998:	4643      	mov	r3, r8
 800899a:	463a      	mov	r2, r7
 800899c:	4628      	mov	r0, r5
 800899e:	47b0      	blx	r6
 80089a0:	2800      	cmp	r0, #0
 80089a2:	dc06      	bgt.n	80089b2 <__sflush_r+0xfe>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b0:	e78e      	b.n	80088d0 <__sflush_r+0x1c>
 80089b2:	4407      	add	r7, r0
 80089b4:	eba8 0800 	sub.w	r8, r8, r0
 80089b8:	e7e9      	b.n	800898e <__sflush_r+0xda>
 80089ba:	bf00      	nop
 80089bc:	20400001 	.word	0x20400001

080089c0 <_fflush_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b913      	cbnz	r3, 80089d0 <_fflush_r+0x10>
 80089ca:	2500      	movs	r5, #0
 80089cc:	4628      	mov	r0, r5
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	b118      	cbz	r0, 80089da <_fflush_r+0x1a>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <_fflush_r+0x1a>
 80089d6:	f000 f887 	bl	8008ae8 <__sinit>
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <_fflush_r+0x6c>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d11b      	bne.n	8008a18 <_fflush_r+0x58>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ef      	beq.n	80089ca <_fflush_r+0xa>
 80089ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089ec:	07d0      	lsls	r0, r2, #31
 80089ee:	d404      	bmi.n	80089fa <_fflush_r+0x3a>
 80089f0:	0599      	lsls	r1, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_fflush_r+0x3a>
 80089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f6:	f000 f915 	bl	8008c24 <__retarget_lock_acquire_recursive>
 80089fa:	4628      	mov	r0, r5
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7ff ff59 	bl	80088b4 <__sflush_r>
 8008a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a04:	07da      	lsls	r2, r3, #31
 8008a06:	4605      	mov	r5, r0
 8008a08:	d4e0      	bmi.n	80089cc <_fflush_r+0xc>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	059b      	lsls	r3, r3, #22
 8008a0e:	d4dd      	bmi.n	80089cc <_fflush_r+0xc>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f000 f908 	bl	8008c26 <__retarget_lock_release_recursive>
 8008a16:	e7d9      	b.n	80089cc <_fflush_r+0xc>
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <_fflush_r+0x70>)
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	d101      	bne.n	8008a22 <_fflush_r+0x62>
 8008a1e:	68ac      	ldr	r4, [r5, #8]
 8008a20:	e7df      	b.n	80089e2 <_fflush_r+0x22>
 8008a22:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <_fflush_r+0x74>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	bf08      	it	eq
 8008a28:	68ec      	ldreq	r4, [r5, #12]
 8008a2a:	e7da      	b.n	80089e2 <_fflush_r+0x22>
 8008a2c:	08009ca4 	.word	0x08009ca4
 8008a30:	08009cc4 	.word	0x08009cc4
 8008a34:	08009c84 	.word	0x08009c84

08008a38 <std>:
 8008a38:	2300      	movs	r3, #0
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a46:	6083      	str	r3, [r0, #8]
 8008a48:	8181      	strh	r1, [r0, #12]
 8008a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a4c:	81c2      	strh	r2, [r0, #14]
 8008a4e:	6183      	str	r3, [r0, #24]
 8008a50:	4619      	mov	r1, r3
 8008a52:	2208      	movs	r2, #8
 8008a54:	305c      	adds	r0, #92	; 0x5c
 8008a56:	f7ff fdbb 	bl	80085d0 <memset>
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <std+0x38>)
 8008a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <std+0x3c>)
 8008a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <std+0x40>)
 8008a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <std+0x44>)
 8008a68:	6224      	str	r4, [r4, #32]
 8008a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a6c:	bd10      	pop	{r4, pc}
 8008a6e:	bf00      	nop
 8008a70:	080094c1 	.word	0x080094c1
 8008a74:	080094e3 	.word	0x080094e3
 8008a78:	0800951b 	.word	0x0800951b
 8008a7c:	0800953f 	.word	0x0800953f

08008a80 <_cleanup_r>:
 8008a80:	4901      	ldr	r1, [pc, #4]	; (8008a88 <_cleanup_r+0x8>)
 8008a82:	f000 b8af 	b.w	8008be4 <_fwalk_reent>
 8008a86:	bf00      	nop
 8008a88:	080089c1 	.word	0x080089c1

08008a8c <__sfmoreglue>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	2268      	movs	r2, #104	; 0x68
 8008a90:	1e4d      	subs	r5, r1, #1
 8008a92:	4355      	muls	r5, r2
 8008a94:	460e      	mov	r6, r1
 8008a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a9a:	f000 f99f 	bl	8008ddc <_malloc_r>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	b140      	cbz	r0, 8008ab4 <__sfmoreglue+0x28>
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8008aa8:	300c      	adds	r0, #12
 8008aaa:	60a0      	str	r0, [r4, #8]
 8008aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ab0:	f7ff fd8e 	bl	80085d0 <memset>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}

08008ab8 <__sfp_lock_acquire>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <__sfp_lock_acquire+0x8>)
 8008aba:	f000 b8b3 	b.w	8008c24 <__retarget_lock_acquire_recursive>
 8008abe:	bf00      	nop
 8008ac0:	20003489 	.word	0x20003489

08008ac4 <__sfp_lock_release>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__sfp_lock_release+0x8>)
 8008ac6:	f000 b8ae 	b.w	8008c26 <__retarget_lock_release_recursive>
 8008aca:	bf00      	nop
 8008acc:	20003489 	.word	0x20003489

08008ad0 <__sinit_lock_acquire>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sinit_lock_acquire+0x8>)
 8008ad2:	f000 b8a7 	b.w	8008c24 <__retarget_lock_acquire_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	2000348a 	.word	0x2000348a

08008adc <__sinit_lock_release>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__sinit_lock_release+0x8>)
 8008ade:	f000 b8a2 	b.w	8008c26 <__retarget_lock_release_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	2000348a 	.word	0x2000348a

08008ae8 <__sinit>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	f7ff fff0 	bl	8008ad0 <__sinit_lock_acquire>
 8008af0:	69a3      	ldr	r3, [r4, #24]
 8008af2:	b11b      	cbz	r3, 8008afc <__sinit+0x14>
 8008af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af8:	f7ff bff0 	b.w	8008adc <__sinit_lock_release>
 8008afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b00:	6523      	str	r3, [r4, #80]	; 0x50
 8008b02:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <__sinit+0x68>)
 8008b04:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <__sinit+0x6c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	bf04      	itt	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	61a3      	streq	r3, [r4, #24]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f820 	bl	8008b58 <__sfp>
 8008b18:	6060      	str	r0, [r4, #4]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f81c 	bl	8008b58 <__sfp>
 8008b20:	60a0      	str	r0, [r4, #8]
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 f818 	bl	8008b58 <__sfp>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	60e0      	str	r0, [r4, #12]
 8008b2c:	2104      	movs	r1, #4
 8008b2e:	6860      	ldr	r0, [r4, #4]
 8008b30:	f7ff ff82 	bl	8008a38 <std>
 8008b34:	68a0      	ldr	r0, [r4, #8]
 8008b36:	2201      	movs	r2, #1
 8008b38:	2109      	movs	r1, #9
 8008b3a:	f7ff ff7d 	bl	8008a38 <std>
 8008b3e:	68e0      	ldr	r0, [r4, #12]
 8008b40:	2202      	movs	r2, #2
 8008b42:	2112      	movs	r1, #18
 8008b44:	f7ff ff78 	bl	8008a38 <std>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61a3      	str	r3, [r4, #24]
 8008b4c:	e7d2      	b.n	8008af4 <__sinit+0xc>
 8008b4e:	bf00      	nop
 8008b50:	08009b7c 	.word	0x08009b7c
 8008b54:	08008a81 	.word	0x08008a81

08008b58 <__sfp>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	f7ff ffac 	bl	8008ab8 <__sfp_lock_acquire>
 8008b60:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <__sfp+0x84>)
 8008b62:	681e      	ldr	r6, [r3, #0]
 8008b64:	69b3      	ldr	r3, [r6, #24]
 8008b66:	b913      	cbnz	r3, 8008b6e <__sfp+0x16>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff ffbd 	bl	8008ae8 <__sinit>
 8008b6e:	3648      	adds	r6, #72	; 0x48
 8008b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	d503      	bpl.n	8008b80 <__sfp+0x28>
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	b30b      	cbz	r3, 8008bc0 <__sfp+0x68>
 8008b7c:	6836      	ldr	r6, [r6, #0]
 8008b7e:	e7f7      	b.n	8008b70 <__sfp+0x18>
 8008b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b84:	b9d5      	cbnz	r5, 8008bbc <__sfp+0x64>
 8008b86:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <__sfp+0x88>)
 8008b88:	60e3      	str	r3, [r4, #12]
 8008b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b90:	f000 f847 	bl	8008c22 <__retarget_lock_init_recursive>
 8008b94:	f7ff ff96 	bl	8008ac4 <__sfp_lock_release>
 8008b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ba0:	6025      	str	r5, [r4, #0]
 8008ba2:	61a5      	str	r5, [r4, #24]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bac:	f7ff fd10 	bl	80085d0 <memset>
 8008bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bb8:	4620      	mov	r0, r4
 8008bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bbc:	3468      	adds	r4, #104	; 0x68
 8008bbe:	e7d9      	b.n	8008b74 <__sfp+0x1c>
 8008bc0:	2104      	movs	r1, #4
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f7ff ff62 	bl	8008a8c <__sfmoreglue>
 8008bc8:	4604      	mov	r4, r0
 8008bca:	6030      	str	r0, [r6, #0]
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d1d5      	bne.n	8008b7c <__sfp+0x24>
 8008bd0:	f7ff ff78 	bl	8008ac4 <__sfp_lock_release>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	e7ee      	b.n	8008bb8 <__sfp+0x60>
 8008bda:	bf00      	nop
 8008bdc:	08009b7c 	.word	0x08009b7c
 8008be0:	ffff0001 	.word	0xffff0001

08008be4 <_fwalk_reent>:
 8008be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be8:	4606      	mov	r6, r0
 8008bea:	4688      	mov	r8, r1
 8008bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bf0:	2700      	movs	r7, #0
 8008bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bfa:	d505      	bpl.n	8008c08 <_fwalk_reent+0x24>
 8008bfc:	6824      	ldr	r4, [r4, #0]
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d1f7      	bne.n	8008bf2 <_fwalk_reent+0xe>
 8008c02:	4638      	mov	r0, r7
 8008c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c08:	89ab      	ldrh	r3, [r5, #12]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d907      	bls.n	8008c1e <_fwalk_reent+0x3a>
 8008c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c12:	3301      	adds	r3, #1
 8008c14:	d003      	beq.n	8008c1e <_fwalk_reent+0x3a>
 8008c16:	4629      	mov	r1, r5
 8008c18:	4630      	mov	r0, r6
 8008c1a:	47c0      	blx	r8
 8008c1c:	4307      	orrs	r7, r0
 8008c1e:	3568      	adds	r5, #104	; 0x68
 8008c20:	e7e9      	b.n	8008bf6 <_fwalk_reent+0x12>

08008c22 <__retarget_lock_init_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <__retarget_lock_acquire_recursive>:
 8008c24:	4770      	bx	lr

08008c26 <__retarget_lock_release_recursive>:
 8008c26:	4770      	bx	lr

08008c28 <__swhatbuf_r>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	460e      	mov	r6, r1
 8008c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c30:	2900      	cmp	r1, #0
 8008c32:	b096      	sub	sp, #88	; 0x58
 8008c34:	4614      	mov	r4, r2
 8008c36:	461d      	mov	r5, r3
 8008c38:	da08      	bge.n	8008c4c <__swhatbuf_r+0x24>
 8008c3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	061a      	lsls	r2, r3, #24
 8008c44:	d410      	bmi.n	8008c68 <__swhatbuf_r+0x40>
 8008c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c4a:	e00e      	b.n	8008c6a <__swhatbuf_r+0x42>
 8008c4c:	466a      	mov	r2, sp
 8008c4e:	f000 fd5d 	bl	800970c <_fstat_r>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	dbf1      	blt.n	8008c3a <__swhatbuf_r+0x12>
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c60:	425a      	negs	r2, r3
 8008c62:	415a      	adcs	r2, r3
 8008c64:	602a      	str	r2, [r5, #0]
 8008c66:	e7ee      	b.n	8008c46 <__swhatbuf_r+0x1e>
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	b016      	add	sp, #88	; 0x58
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c74 <__smakebuf_r>:
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c78:	079d      	lsls	r5, r3, #30
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	d507      	bpl.n	8008c90 <__smakebuf_r+0x1c>
 8008c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	6123      	str	r3, [r4, #16]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	6163      	str	r3, [r4, #20]
 8008c8c:	b002      	add	sp, #8
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	ab01      	add	r3, sp, #4
 8008c92:	466a      	mov	r2, sp
 8008c94:	f7ff ffc8 	bl	8008c28 <__swhatbuf_r>
 8008c98:	9900      	ldr	r1, [sp, #0]
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 f89d 	bl	8008ddc <_malloc_r>
 8008ca2:	b948      	cbnz	r0, 8008cb8 <__smakebuf_r+0x44>
 8008ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca8:	059a      	lsls	r2, r3, #22
 8008caa:	d4ef      	bmi.n	8008c8c <__smakebuf_r+0x18>
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	f043 0302 	orr.w	r3, r3, #2
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	e7e3      	b.n	8008c80 <__smakebuf_r+0xc>
 8008cb8:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <__smakebuf_r+0x7c>)
 8008cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	6020      	str	r0, [r4, #0]
 8008cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	9b00      	ldr	r3, [sp, #0]
 8008cc8:	6163      	str	r3, [r4, #20]
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	6120      	str	r0, [r4, #16]
 8008cce:	b15b      	cbz	r3, 8008ce8 <__smakebuf_r+0x74>
 8008cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f000 fd2b 	bl	8009730 <_isatty_r>
 8008cda:	b128      	cbz	r0, 8008ce8 <__smakebuf_r+0x74>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	f043 0301 	orr.w	r3, r3, #1
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	89a0      	ldrh	r0, [r4, #12]
 8008cea:	4305      	orrs	r5, r0
 8008cec:	81a5      	strh	r5, [r4, #12]
 8008cee:	e7cd      	b.n	8008c8c <__smakebuf_r+0x18>
 8008cf0:	08008a81 	.word	0x08008a81

08008cf4 <malloc>:
 8008cf4:	4b02      	ldr	r3, [pc, #8]	; (8008d00 <malloc+0xc>)
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f000 b86f 	b.w	8008ddc <_malloc_r>
 8008cfe:	bf00      	nop
 8008d00:	20000010 	.word	0x20000010

08008d04 <_free_r>:
 8008d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d044      	beq.n	8008d94 <_free_r+0x90>
 8008d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0e:	9001      	str	r0, [sp, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f1a1 0404 	sub.w	r4, r1, #4
 8008d16:	bfb8      	it	lt
 8008d18:	18e4      	addlt	r4, r4, r3
 8008d1a:	f000 fd2b 	bl	8009774 <__malloc_lock>
 8008d1e:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <_free_r+0x94>)
 8008d20:	9801      	ldr	r0, [sp, #4]
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	b933      	cbnz	r3, 8008d34 <_free_r+0x30>
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	6014      	str	r4, [r2, #0]
 8008d2a:	b003      	add	sp, #12
 8008d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d30:	f000 bd26 	b.w	8009780 <__malloc_unlock>
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d908      	bls.n	8008d4a <_free_r+0x46>
 8008d38:	6825      	ldr	r5, [r4, #0]
 8008d3a:	1961      	adds	r1, r4, r5
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	bf01      	itttt	eq
 8008d40:	6819      	ldreq	r1, [r3, #0]
 8008d42:	685b      	ldreq	r3, [r3, #4]
 8008d44:	1949      	addeq	r1, r1, r5
 8008d46:	6021      	streq	r1, [r4, #0]
 8008d48:	e7ed      	b.n	8008d26 <_free_r+0x22>
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b10b      	cbz	r3, 8008d54 <_free_r+0x50>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x46>
 8008d54:	6811      	ldr	r1, [r2, #0]
 8008d56:	1855      	adds	r5, r2, r1
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x70>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	4421      	add	r1, r4
 8008d60:	1854      	adds	r4, r2, r1
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	d1e0      	bne.n	8008d2a <_free_r+0x26>
 8008d68:	681c      	ldr	r4, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	6053      	str	r3, [r2, #4]
 8008d6e:	4421      	add	r1, r4
 8008d70:	6011      	str	r1, [r2, #0]
 8008d72:	e7da      	b.n	8008d2a <_free_r+0x26>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x78>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	e7d6      	b.n	8008d2a <_free_r+0x26>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf04      	itt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	6063      	str	r3, [r4, #4]
 8008d8a:	bf04      	itt	eq
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	6054      	str	r4, [r2, #4]
 8008d92:	e7ca      	b.n	8008d2a <_free_r+0x26>
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	2000348c 	.word	0x2000348c

08008d9c <sbrk_aligned>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	4e0e      	ldr	r6, [pc, #56]	; (8008dd8 <sbrk_aligned+0x3c>)
 8008da0:	460c      	mov	r4, r1
 8008da2:	6831      	ldr	r1, [r6, #0]
 8008da4:	4605      	mov	r5, r0
 8008da6:	b911      	cbnz	r1, 8008dae <sbrk_aligned+0x12>
 8008da8:	f000 fb7a 	bl	80094a0 <_sbrk_r>
 8008dac:	6030      	str	r0, [r6, #0]
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 fb75 	bl	80094a0 <_sbrk_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d00a      	beq.n	8008dd0 <sbrk_aligned+0x34>
 8008dba:	1cc4      	adds	r4, r0, #3
 8008dbc:	f024 0403 	bic.w	r4, r4, #3
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d007      	beq.n	8008dd4 <sbrk_aligned+0x38>
 8008dc4:	1a21      	subs	r1, r4, r0
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 fb6a 	bl	80094a0 <_sbrk_r>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d101      	bne.n	8008dd4 <sbrk_aligned+0x38>
 8008dd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	20003490 	.word	0x20003490

08008ddc <_malloc_r>:
 8008ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de0:	1ccd      	adds	r5, r1, #3
 8008de2:	f025 0503 	bic.w	r5, r5, #3
 8008de6:	3508      	adds	r5, #8
 8008de8:	2d0c      	cmp	r5, #12
 8008dea:	bf38      	it	cc
 8008dec:	250c      	movcc	r5, #12
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	4607      	mov	r7, r0
 8008df2:	db01      	blt.n	8008df8 <_malloc_r+0x1c>
 8008df4:	42a9      	cmp	r1, r5
 8008df6:	d905      	bls.n	8008e04 <_malloc_r+0x28>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e04:	4e2e      	ldr	r6, [pc, #184]	; (8008ec0 <_malloc_r+0xe4>)
 8008e06:	f000 fcb5 	bl	8009774 <__malloc_lock>
 8008e0a:	6833      	ldr	r3, [r6, #0]
 8008e0c:	461c      	mov	r4, r3
 8008e0e:	bb34      	cbnz	r4, 8008e5e <_malloc_r+0x82>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7ff ffc2 	bl	8008d9c <sbrk_aligned>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	d14d      	bne.n	8008eba <_malloc_r+0xde>
 8008e1e:	6834      	ldr	r4, [r6, #0]
 8008e20:	4626      	mov	r6, r4
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d140      	bne.n	8008ea8 <_malloc_r+0xcc>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	eb04 0803 	add.w	r8, r4, r3
 8008e30:	f000 fb36 	bl	80094a0 <_sbrk_r>
 8008e34:	4580      	cmp	r8, r0
 8008e36:	d13a      	bne.n	8008eae <_malloc_r+0xd2>
 8008e38:	6821      	ldr	r1, [r4, #0]
 8008e3a:	3503      	adds	r5, #3
 8008e3c:	1a6d      	subs	r5, r5, r1
 8008e3e:	f025 0503 	bic.w	r5, r5, #3
 8008e42:	3508      	adds	r5, #8
 8008e44:	2d0c      	cmp	r5, #12
 8008e46:	bf38      	it	cc
 8008e48:	250c      	movcc	r5, #12
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f7ff ffa5 	bl	8008d9c <sbrk_aligned>
 8008e52:	3001      	adds	r0, #1
 8008e54:	d02b      	beq.n	8008eae <_malloc_r+0xd2>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	442b      	add	r3, r5
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	e00e      	b.n	8008e7c <_malloc_r+0xa0>
 8008e5e:	6822      	ldr	r2, [r4, #0]
 8008e60:	1b52      	subs	r2, r2, r5
 8008e62:	d41e      	bmi.n	8008ea2 <_malloc_r+0xc6>
 8008e64:	2a0b      	cmp	r2, #11
 8008e66:	d916      	bls.n	8008e96 <_malloc_r+0xba>
 8008e68:	1961      	adds	r1, r4, r5
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	6025      	str	r5, [r4, #0]
 8008e6e:	bf18      	it	ne
 8008e70:	6059      	strne	r1, [r3, #4]
 8008e72:	6863      	ldr	r3, [r4, #4]
 8008e74:	bf08      	it	eq
 8008e76:	6031      	streq	r1, [r6, #0]
 8008e78:	5162      	str	r2, [r4, r5]
 8008e7a:	604b      	str	r3, [r1, #4]
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f104 060b 	add.w	r6, r4, #11
 8008e82:	f000 fc7d 	bl	8009780 <__malloc_unlock>
 8008e86:	f026 0607 	bic.w	r6, r6, #7
 8008e8a:	1d23      	adds	r3, r4, #4
 8008e8c:	1af2      	subs	r2, r6, r3
 8008e8e:	d0b6      	beq.n	8008dfe <_malloc_r+0x22>
 8008e90:	1b9b      	subs	r3, r3, r6
 8008e92:	50a3      	str	r3, [r4, r2]
 8008e94:	e7b3      	b.n	8008dfe <_malloc_r+0x22>
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	bf0c      	ite	eq
 8008e9c:	6032      	streq	r2, [r6, #0]
 8008e9e:	605a      	strne	r2, [r3, #4]
 8008ea0:	e7ec      	b.n	8008e7c <_malloc_r+0xa0>
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	6864      	ldr	r4, [r4, #4]
 8008ea6:	e7b2      	b.n	8008e0e <_malloc_r+0x32>
 8008ea8:	4634      	mov	r4, r6
 8008eaa:	6876      	ldr	r6, [r6, #4]
 8008eac:	e7b9      	b.n	8008e22 <_malloc_r+0x46>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f000 fc64 	bl	8009780 <__malloc_unlock>
 8008eb8:	e7a1      	b.n	8008dfe <_malloc_r+0x22>
 8008eba:	6025      	str	r5, [r4, #0]
 8008ebc:	e7de      	b.n	8008e7c <_malloc_r+0xa0>
 8008ebe:	bf00      	nop
 8008ec0:	2000348c 	.word	0x2000348c

08008ec4 <__sfputc_r>:
 8008ec4:	6893      	ldr	r3, [r2, #8]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	b410      	push	{r4}
 8008ecc:	6093      	str	r3, [r2, #8]
 8008ece:	da08      	bge.n	8008ee2 <__sfputc_r+0x1e>
 8008ed0:	6994      	ldr	r4, [r2, #24]
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	db01      	blt.n	8008eda <__sfputc_r+0x16>
 8008ed6:	290a      	cmp	r1, #10
 8008ed8:	d103      	bne.n	8008ee2 <__sfputc_r+0x1e>
 8008eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ede:	f000 bb33 	b.w	8009548 <__swbuf_r>
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	1c58      	adds	r0, r3, #1
 8008ee6:	6010      	str	r0, [r2, #0]
 8008ee8:	7019      	strb	r1, [r3, #0]
 8008eea:	4608      	mov	r0, r1
 8008eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <__sfputs_r>:
 8008ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	4614      	mov	r4, r2
 8008efa:	18d5      	adds	r5, r2, r3
 8008efc:	42ac      	cmp	r4, r5
 8008efe:	d101      	bne.n	8008f04 <__sfputs_r+0x12>
 8008f00:	2000      	movs	r0, #0
 8008f02:	e007      	b.n	8008f14 <__sfputs_r+0x22>
 8008f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f08:	463a      	mov	r2, r7
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ffda 	bl	8008ec4 <__sfputc_r>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d1f3      	bne.n	8008efc <__sfputs_r+0xa>
 8008f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f18 <_vfiprintf_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	b09d      	sub	sp, #116	; 0x74
 8008f20:	4614      	mov	r4, r2
 8008f22:	4698      	mov	r8, r3
 8008f24:	4606      	mov	r6, r0
 8008f26:	b118      	cbz	r0, 8008f30 <_vfiprintf_r+0x18>
 8008f28:	6983      	ldr	r3, [r0, #24]
 8008f2a:	b90b      	cbnz	r3, 8008f30 <_vfiprintf_r+0x18>
 8008f2c:	f7ff fddc 	bl	8008ae8 <__sinit>
 8008f30:	4b89      	ldr	r3, [pc, #548]	; (8009158 <_vfiprintf_r+0x240>)
 8008f32:	429d      	cmp	r5, r3
 8008f34:	d11b      	bne.n	8008f6e <_vfiprintf_r+0x56>
 8008f36:	6875      	ldr	r5, [r6, #4]
 8008f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f3a:	07d9      	lsls	r1, r3, #31
 8008f3c:	d405      	bmi.n	8008f4a <_vfiprintf_r+0x32>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	059a      	lsls	r2, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_vfiprintf_r+0x32>
 8008f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f46:	f7ff fe6d 	bl	8008c24 <__retarget_lock_acquire_recursive>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	071b      	lsls	r3, r3, #28
 8008f4e:	d501      	bpl.n	8008f54 <_vfiprintf_r+0x3c>
 8008f50:	692b      	ldr	r3, [r5, #16]
 8008f52:	b9eb      	cbnz	r3, 8008f90 <_vfiprintf_r+0x78>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4630      	mov	r0, r6
 8008f58:	f000 fb5a 	bl	8009610 <__swsetup_r>
 8008f5c:	b1c0      	cbz	r0, 8008f90 <_vfiprintf_r+0x78>
 8008f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f60:	07dc      	lsls	r4, r3, #31
 8008f62:	d50e      	bpl.n	8008f82 <_vfiprintf_r+0x6a>
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f68:	b01d      	add	sp, #116	; 0x74
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6e:	4b7b      	ldr	r3, [pc, #492]	; (800915c <_vfiprintf_r+0x244>)
 8008f70:	429d      	cmp	r5, r3
 8008f72:	d101      	bne.n	8008f78 <_vfiprintf_r+0x60>
 8008f74:	68b5      	ldr	r5, [r6, #8]
 8008f76:	e7df      	b.n	8008f38 <_vfiprintf_r+0x20>
 8008f78:	4b79      	ldr	r3, [pc, #484]	; (8009160 <_vfiprintf_r+0x248>)
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	bf08      	it	eq
 8008f7e:	68f5      	ldreq	r5, [r6, #12]
 8008f80:	e7da      	b.n	8008f38 <_vfiprintf_r+0x20>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	0598      	lsls	r0, r3, #22
 8008f86:	d4ed      	bmi.n	8008f64 <_vfiprintf_r+0x4c>
 8008f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8a:	f7ff fe4c 	bl	8008c26 <__retarget_lock_release_recursive>
 8008f8e:	e7e9      	b.n	8008f64 <_vfiprintf_r+0x4c>
 8008f90:	2300      	movs	r3, #0
 8008f92:	9309      	str	r3, [sp, #36]	; 0x24
 8008f94:	2320      	movs	r3, #32
 8008f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9e:	2330      	movs	r3, #48	; 0x30
 8008fa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009164 <_vfiprintf_r+0x24c>
 8008fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa8:	f04f 0901 	mov.w	r9, #1
 8008fac:	4623      	mov	r3, r4
 8008fae:	469a      	mov	sl, r3
 8008fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb4:	b10a      	cbz	r2, 8008fba <_vfiprintf_r+0xa2>
 8008fb6:	2a25      	cmp	r2, #37	; 0x25
 8008fb8:	d1f9      	bne.n	8008fae <_vfiprintf_r+0x96>
 8008fba:	ebba 0b04 	subs.w	fp, sl, r4
 8008fbe:	d00b      	beq.n	8008fd8 <_vfiprintf_r+0xc0>
 8008fc0:	465b      	mov	r3, fp
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7ff ff93 	bl	8008ef2 <__sfputs_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f000 80aa 	beq.w	8009126 <_vfiprintf_r+0x20e>
 8008fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd4:	445a      	add	r2, fp
 8008fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80a2 	beq.w	8009126 <_vfiprintf_r+0x20e>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fec:	f10a 0a01 	add.w	sl, sl, #1
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	9307      	str	r3, [sp, #28]
 8008ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffa:	4654      	mov	r4, sl
 8008ffc:	2205      	movs	r2, #5
 8008ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009002:	4858      	ldr	r0, [pc, #352]	; (8009164 <_vfiprintf_r+0x24c>)
 8009004:	f7f7 f8f4 	bl	80001f0 <memchr>
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	b9d8      	cbnz	r0, 8009044 <_vfiprintf_r+0x12c>
 800900c:	06d1      	lsls	r1, r2, #27
 800900e:	bf44      	itt	mi
 8009010:	2320      	movmi	r3, #32
 8009012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009016:	0713      	lsls	r3, r2, #28
 8009018:	bf44      	itt	mi
 800901a:	232b      	movmi	r3, #43	; 0x2b
 800901c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b2a      	cmp	r3, #42	; 0x2a
 8009026:	d015      	beq.n	8009054 <_vfiprintf_r+0x13c>
 8009028:	9a07      	ldr	r2, [sp, #28]
 800902a:	4654      	mov	r4, sl
 800902c:	2000      	movs	r0, #0
 800902e:	f04f 0c0a 	mov.w	ip, #10
 8009032:	4621      	mov	r1, r4
 8009034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009038:	3b30      	subs	r3, #48	; 0x30
 800903a:	2b09      	cmp	r3, #9
 800903c:	d94e      	bls.n	80090dc <_vfiprintf_r+0x1c4>
 800903e:	b1b0      	cbz	r0, 800906e <_vfiprintf_r+0x156>
 8009040:	9207      	str	r2, [sp, #28]
 8009042:	e014      	b.n	800906e <_vfiprintf_r+0x156>
 8009044:	eba0 0308 	sub.w	r3, r0, r8
 8009048:	fa09 f303 	lsl.w	r3, r9, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	46a2      	mov	sl, r4
 8009052:	e7d2      	b.n	8008ffa <_vfiprintf_r+0xe2>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	1d19      	adds	r1, r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfbb      	ittet	lt
 8009060:	425b      	neglt	r3, r3
 8009062:	f042 0202 	orrlt.w	r2, r2, #2
 8009066:	9307      	strge	r3, [sp, #28]
 8009068:	9307      	strlt	r3, [sp, #28]
 800906a:	bfb8      	it	lt
 800906c:	9204      	strlt	r2, [sp, #16]
 800906e:	7823      	ldrb	r3, [r4, #0]
 8009070:	2b2e      	cmp	r3, #46	; 0x2e
 8009072:	d10c      	bne.n	800908e <_vfiprintf_r+0x176>
 8009074:	7863      	ldrb	r3, [r4, #1]
 8009076:	2b2a      	cmp	r3, #42	; 0x2a
 8009078:	d135      	bne.n	80090e6 <_vfiprintf_r+0x1ce>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	1d1a      	adds	r2, r3, #4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	9203      	str	r2, [sp, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfb8      	it	lt
 8009086:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800908a:	3402      	adds	r4, #2
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009174 <_vfiprintf_r+0x25c>
 8009092:	7821      	ldrb	r1, [r4, #0]
 8009094:	2203      	movs	r2, #3
 8009096:	4650      	mov	r0, sl
 8009098:	f7f7 f8aa 	bl	80001f0 <memchr>
 800909c:	b140      	cbz	r0, 80090b0 <_vfiprintf_r+0x198>
 800909e:	2340      	movs	r3, #64	; 0x40
 80090a0:	eba0 000a 	sub.w	r0, r0, sl
 80090a4:	fa03 f000 	lsl.w	r0, r3, r0
 80090a8:	9b04      	ldr	r3, [sp, #16]
 80090aa:	4303      	orrs	r3, r0
 80090ac:	3401      	adds	r4, #1
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	482c      	ldr	r0, [pc, #176]	; (8009168 <_vfiprintf_r+0x250>)
 80090b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ba:	2206      	movs	r2, #6
 80090bc:	f7f7 f898 	bl	80001f0 <memchr>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d03f      	beq.n	8009144 <_vfiprintf_r+0x22c>
 80090c4:	4b29      	ldr	r3, [pc, #164]	; (800916c <_vfiprintf_r+0x254>)
 80090c6:	bb1b      	cbnz	r3, 8009110 <_vfiprintf_r+0x1f8>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	3307      	adds	r3, #7
 80090cc:	f023 0307 	bic.w	r3, r3, #7
 80090d0:	3308      	adds	r3, #8
 80090d2:	9303      	str	r3, [sp, #12]
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	443b      	add	r3, r7
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	e767      	b.n	8008fac <_vfiprintf_r+0x94>
 80090dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80090e0:	460c      	mov	r4, r1
 80090e2:	2001      	movs	r0, #1
 80090e4:	e7a5      	b.n	8009032 <_vfiprintf_r+0x11a>
 80090e6:	2300      	movs	r3, #0
 80090e8:	3401      	adds	r4, #1
 80090ea:	9305      	str	r3, [sp, #20]
 80090ec:	4619      	mov	r1, r3
 80090ee:	f04f 0c0a 	mov.w	ip, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f8:	3a30      	subs	r2, #48	; 0x30
 80090fa:	2a09      	cmp	r2, #9
 80090fc:	d903      	bls.n	8009106 <_vfiprintf_r+0x1ee>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0c5      	beq.n	800908e <_vfiprintf_r+0x176>
 8009102:	9105      	str	r1, [sp, #20]
 8009104:	e7c3      	b.n	800908e <_vfiprintf_r+0x176>
 8009106:	fb0c 2101 	mla	r1, ip, r1, r2
 800910a:	4604      	mov	r4, r0
 800910c:	2301      	movs	r3, #1
 800910e:	e7f0      	b.n	80090f2 <_vfiprintf_r+0x1da>
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462a      	mov	r2, r5
 8009116:	4b16      	ldr	r3, [pc, #88]	; (8009170 <_vfiprintf_r+0x258>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	4630      	mov	r0, r6
 800911c:	f3af 8000 	nop.w
 8009120:	4607      	mov	r7, r0
 8009122:	1c78      	adds	r0, r7, #1
 8009124:	d1d6      	bne.n	80090d4 <_vfiprintf_r+0x1bc>
 8009126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009128:	07d9      	lsls	r1, r3, #31
 800912a:	d405      	bmi.n	8009138 <_vfiprintf_r+0x220>
 800912c:	89ab      	ldrh	r3, [r5, #12]
 800912e:	059a      	lsls	r2, r3, #22
 8009130:	d402      	bmi.n	8009138 <_vfiprintf_r+0x220>
 8009132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009134:	f7ff fd77 	bl	8008c26 <__retarget_lock_release_recursive>
 8009138:	89ab      	ldrh	r3, [r5, #12]
 800913a:	065b      	lsls	r3, r3, #25
 800913c:	f53f af12 	bmi.w	8008f64 <_vfiprintf_r+0x4c>
 8009140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009142:	e711      	b.n	8008f68 <_vfiprintf_r+0x50>
 8009144:	ab03      	add	r3, sp, #12
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	462a      	mov	r2, r5
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <_vfiprintf_r+0x258>)
 800914c:	a904      	add	r1, sp, #16
 800914e:	4630      	mov	r0, r6
 8009150:	f000 f880 	bl	8009254 <_printf_i>
 8009154:	e7e4      	b.n	8009120 <_vfiprintf_r+0x208>
 8009156:	bf00      	nop
 8009158:	08009ca4 	.word	0x08009ca4
 800915c:	08009cc4 	.word	0x08009cc4
 8009160:	08009c84 	.word	0x08009c84
 8009164:	08009ce4 	.word	0x08009ce4
 8009168:	08009cee 	.word	0x08009cee
 800916c:	00000000 	.word	0x00000000
 8009170:	08008ef3 	.word	0x08008ef3
 8009174:	08009cea 	.word	0x08009cea

08009178 <_printf_common>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	4616      	mov	r6, r2
 800917e:	4699      	mov	r9, r3
 8009180:	688a      	ldr	r2, [r1, #8]
 8009182:	690b      	ldr	r3, [r1, #16]
 8009184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009188:	4293      	cmp	r3, r2
 800918a:	bfb8      	it	lt
 800918c:	4613      	movlt	r3, r2
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009194:	4607      	mov	r7, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b10a      	cbz	r2, 800919e <_printf_common+0x26>
 800919a:	3301      	adds	r3, #1
 800919c:	6033      	str	r3, [r6, #0]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	0699      	lsls	r1, r3, #26
 80091a2:	bf42      	ittt	mi
 80091a4:	6833      	ldrmi	r3, [r6, #0]
 80091a6:	3302      	addmi	r3, #2
 80091a8:	6033      	strmi	r3, [r6, #0]
 80091aa:	6825      	ldr	r5, [r4, #0]
 80091ac:	f015 0506 	ands.w	r5, r5, #6
 80091b0:	d106      	bne.n	80091c0 <_printf_common+0x48>
 80091b2:	f104 0a19 	add.w	sl, r4, #25
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	6832      	ldr	r2, [r6, #0]
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dc26      	bgt.n	800920e <_printf_common+0x96>
 80091c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c4:	1e13      	subs	r3, r2, #0
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	bf18      	it	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	0692      	lsls	r2, r2, #26
 80091ce:	d42b      	bmi.n	8009228 <_printf_common+0xb0>
 80091d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c0      	blx	r8
 80091da:	3001      	adds	r0, #1
 80091dc:	d01e      	beq.n	800921c <_printf_common+0xa4>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	68e5      	ldr	r5, [r4, #12]
 80091e2:	6832      	ldr	r2, [r6, #0]
 80091e4:	f003 0306 	and.w	r3, r3, #6
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	bf08      	it	eq
 80091ec:	1aad      	subeq	r5, r5, r2
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	6922      	ldr	r2, [r4, #16]
 80091f2:	bf0c      	ite	eq
 80091f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f8:	2500      	movne	r5, #0
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bfc4      	itt	gt
 80091fe:	1a9b      	subgt	r3, r3, r2
 8009200:	18ed      	addgt	r5, r5, r3
 8009202:	2600      	movs	r6, #0
 8009204:	341a      	adds	r4, #26
 8009206:	42b5      	cmp	r5, r6
 8009208:	d11a      	bne.n	8009240 <_printf_common+0xc8>
 800920a:	2000      	movs	r0, #0
 800920c:	e008      	b.n	8009220 <_printf_common+0xa8>
 800920e:	2301      	movs	r3, #1
 8009210:	4652      	mov	r2, sl
 8009212:	4649      	mov	r1, r9
 8009214:	4638      	mov	r0, r7
 8009216:	47c0      	blx	r8
 8009218:	3001      	adds	r0, #1
 800921a:	d103      	bne.n	8009224 <_printf_common+0xac>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	3501      	adds	r5, #1
 8009226:	e7c6      	b.n	80091b6 <_printf_common+0x3e>
 8009228:	18e1      	adds	r1, r4, r3
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	2030      	movs	r0, #48	; 0x30
 800922e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009232:	4422      	add	r2, r4
 8009234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800923c:	3302      	adds	r3, #2
 800923e:	e7c7      	b.n	80091d0 <_printf_common+0x58>
 8009240:	2301      	movs	r3, #1
 8009242:	4622      	mov	r2, r4
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d0e6      	beq.n	800921c <_printf_common+0xa4>
 800924e:	3601      	adds	r6, #1
 8009250:	e7d9      	b.n	8009206 <_printf_common+0x8e>
	...

08009254 <_printf_i>:
 8009254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	7e0f      	ldrb	r7, [r1, #24]
 800925a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800925c:	2f78      	cmp	r7, #120	; 0x78
 800925e:	4691      	mov	r9, r2
 8009260:	4680      	mov	r8, r0
 8009262:	460c      	mov	r4, r1
 8009264:	469a      	mov	sl, r3
 8009266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800926a:	d807      	bhi.n	800927c <_printf_i+0x28>
 800926c:	2f62      	cmp	r7, #98	; 0x62
 800926e:	d80a      	bhi.n	8009286 <_printf_i+0x32>
 8009270:	2f00      	cmp	r7, #0
 8009272:	f000 80d8 	beq.w	8009426 <_printf_i+0x1d2>
 8009276:	2f58      	cmp	r7, #88	; 0x58
 8009278:	f000 80a3 	beq.w	80093c2 <_printf_i+0x16e>
 800927c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009284:	e03a      	b.n	80092fc <_printf_i+0xa8>
 8009286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800928a:	2b15      	cmp	r3, #21
 800928c:	d8f6      	bhi.n	800927c <_printf_i+0x28>
 800928e:	a101      	add	r1, pc, #4	; (adr r1, 8009294 <_printf_i+0x40>)
 8009290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009294:	080092ed 	.word	0x080092ed
 8009298:	08009301 	.word	0x08009301
 800929c:	0800927d 	.word	0x0800927d
 80092a0:	0800927d 	.word	0x0800927d
 80092a4:	0800927d 	.word	0x0800927d
 80092a8:	0800927d 	.word	0x0800927d
 80092ac:	08009301 	.word	0x08009301
 80092b0:	0800927d 	.word	0x0800927d
 80092b4:	0800927d 	.word	0x0800927d
 80092b8:	0800927d 	.word	0x0800927d
 80092bc:	0800927d 	.word	0x0800927d
 80092c0:	0800940d 	.word	0x0800940d
 80092c4:	08009331 	.word	0x08009331
 80092c8:	080093ef 	.word	0x080093ef
 80092cc:	0800927d 	.word	0x0800927d
 80092d0:	0800927d 	.word	0x0800927d
 80092d4:	0800942f 	.word	0x0800942f
 80092d8:	0800927d 	.word	0x0800927d
 80092dc:	08009331 	.word	0x08009331
 80092e0:	0800927d 	.word	0x0800927d
 80092e4:	0800927d 	.word	0x0800927d
 80092e8:	080093f7 	.word	0x080093f7
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0a3      	b.n	8009448 <_printf_i+0x1f4>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	6829      	ldr	r1, [r5, #0]
 8009304:	0606      	lsls	r6, r0, #24
 8009306:	f101 0304 	add.w	r3, r1, #4
 800930a:	d50a      	bpl.n	8009322 <_printf_i+0xce>
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	2e00      	cmp	r6, #0
 8009312:	da03      	bge.n	800931c <_printf_i+0xc8>
 8009314:	232d      	movs	r3, #45	; 0x2d
 8009316:	4276      	negs	r6, r6
 8009318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800931c:	485e      	ldr	r0, [pc, #376]	; (8009498 <_printf_i+0x244>)
 800931e:	230a      	movs	r3, #10
 8009320:	e019      	b.n	8009356 <_printf_i+0x102>
 8009322:	680e      	ldr	r6, [r1, #0]
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800932a:	bf18      	it	ne
 800932c:	b236      	sxthne	r6, r6
 800932e:	e7ef      	b.n	8009310 <_printf_i+0xbc>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	6029      	str	r1, [r5, #0]
 8009338:	0601      	lsls	r1, r0, #24
 800933a:	d501      	bpl.n	8009340 <_printf_i+0xec>
 800933c:	681e      	ldr	r6, [r3, #0]
 800933e:	e002      	b.n	8009346 <_printf_i+0xf2>
 8009340:	0646      	lsls	r6, r0, #25
 8009342:	d5fb      	bpl.n	800933c <_printf_i+0xe8>
 8009344:	881e      	ldrh	r6, [r3, #0]
 8009346:	4854      	ldr	r0, [pc, #336]	; (8009498 <_printf_i+0x244>)
 8009348:	2f6f      	cmp	r7, #111	; 0x6f
 800934a:	bf0c      	ite	eq
 800934c:	2308      	moveq	r3, #8
 800934e:	230a      	movne	r3, #10
 8009350:	2100      	movs	r1, #0
 8009352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009356:	6865      	ldr	r5, [r4, #4]
 8009358:	60a5      	str	r5, [r4, #8]
 800935a:	2d00      	cmp	r5, #0
 800935c:	bfa2      	ittt	ge
 800935e:	6821      	ldrge	r1, [r4, #0]
 8009360:	f021 0104 	bicge.w	r1, r1, #4
 8009364:	6021      	strge	r1, [r4, #0]
 8009366:	b90e      	cbnz	r6, 800936c <_printf_i+0x118>
 8009368:	2d00      	cmp	r5, #0
 800936a:	d04d      	beq.n	8009408 <_printf_i+0x1b4>
 800936c:	4615      	mov	r5, r2
 800936e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009372:	fb03 6711 	mls	r7, r3, r1, r6
 8009376:	5dc7      	ldrb	r7, [r0, r7]
 8009378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800937c:	4637      	mov	r7, r6
 800937e:	42bb      	cmp	r3, r7
 8009380:	460e      	mov	r6, r1
 8009382:	d9f4      	bls.n	800936e <_printf_i+0x11a>
 8009384:	2b08      	cmp	r3, #8
 8009386:	d10b      	bne.n	80093a0 <_printf_i+0x14c>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	07de      	lsls	r6, r3, #31
 800938c:	d508      	bpl.n	80093a0 <_printf_i+0x14c>
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	4299      	cmp	r1, r3
 8009394:	bfde      	ittt	le
 8009396:	2330      	movle	r3, #48	; 0x30
 8009398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800939c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80093a0:	1b52      	subs	r2, r2, r5
 80093a2:	6122      	str	r2, [r4, #16]
 80093a4:	f8cd a000 	str.w	sl, [sp]
 80093a8:	464b      	mov	r3, r9
 80093aa:	aa03      	add	r2, sp, #12
 80093ac:	4621      	mov	r1, r4
 80093ae:	4640      	mov	r0, r8
 80093b0:	f7ff fee2 	bl	8009178 <_printf_common>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d14c      	bne.n	8009452 <_printf_i+0x1fe>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093bc:	b004      	add	sp, #16
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	4835      	ldr	r0, [pc, #212]	; (8009498 <_printf_i+0x244>)
 80093c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093c8:	6829      	ldr	r1, [r5, #0]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80093d0:	6029      	str	r1, [r5, #0]
 80093d2:	061d      	lsls	r5, r3, #24
 80093d4:	d514      	bpl.n	8009400 <_printf_i+0x1ac>
 80093d6:	07df      	lsls	r7, r3, #31
 80093d8:	bf44      	itt	mi
 80093da:	f043 0320 	orrmi.w	r3, r3, #32
 80093de:	6023      	strmi	r3, [r4, #0]
 80093e0:	b91e      	cbnz	r6, 80093ea <_printf_i+0x196>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	f023 0320 	bic.w	r3, r3, #32
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	2310      	movs	r3, #16
 80093ec:	e7b0      	b.n	8009350 <_printf_i+0xfc>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	f043 0320 	orr.w	r3, r3, #32
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	2378      	movs	r3, #120	; 0x78
 80093f8:	4828      	ldr	r0, [pc, #160]	; (800949c <_printf_i+0x248>)
 80093fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093fe:	e7e3      	b.n	80093c8 <_printf_i+0x174>
 8009400:	0659      	lsls	r1, r3, #25
 8009402:	bf48      	it	mi
 8009404:	b2b6      	uxthmi	r6, r6
 8009406:	e7e6      	b.n	80093d6 <_printf_i+0x182>
 8009408:	4615      	mov	r5, r2
 800940a:	e7bb      	b.n	8009384 <_printf_i+0x130>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	6826      	ldr	r6, [r4, #0]
 8009410:	6961      	ldr	r1, [r4, #20]
 8009412:	1d18      	adds	r0, r3, #4
 8009414:	6028      	str	r0, [r5, #0]
 8009416:	0635      	lsls	r5, r6, #24
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	d501      	bpl.n	8009420 <_printf_i+0x1cc>
 800941c:	6019      	str	r1, [r3, #0]
 800941e:	e002      	b.n	8009426 <_printf_i+0x1d2>
 8009420:	0670      	lsls	r0, r6, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0x1c8>
 8009424:	8019      	strh	r1, [r3, #0]
 8009426:	2300      	movs	r3, #0
 8009428:	6123      	str	r3, [r4, #16]
 800942a:	4615      	mov	r5, r2
 800942c:	e7ba      	b.n	80093a4 <_printf_i+0x150>
 800942e:	682b      	ldr	r3, [r5, #0]
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	681d      	ldr	r5, [r3, #0]
 8009436:	6862      	ldr	r2, [r4, #4]
 8009438:	2100      	movs	r1, #0
 800943a:	4628      	mov	r0, r5
 800943c:	f7f6 fed8 	bl	80001f0 <memchr>
 8009440:	b108      	cbz	r0, 8009446 <_printf_i+0x1f2>
 8009442:	1b40      	subs	r0, r0, r5
 8009444:	6060      	str	r0, [r4, #4]
 8009446:	6863      	ldr	r3, [r4, #4]
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	2300      	movs	r3, #0
 800944c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009450:	e7a8      	b.n	80093a4 <_printf_i+0x150>
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	462a      	mov	r2, r5
 8009456:	4649      	mov	r1, r9
 8009458:	4640      	mov	r0, r8
 800945a:	47d0      	blx	sl
 800945c:	3001      	adds	r0, #1
 800945e:	d0ab      	beq.n	80093b8 <_printf_i+0x164>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	d413      	bmi.n	800948e <_printf_i+0x23a>
 8009466:	68e0      	ldr	r0, [r4, #12]
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	4298      	cmp	r0, r3
 800946c:	bfb8      	it	lt
 800946e:	4618      	movlt	r0, r3
 8009470:	e7a4      	b.n	80093bc <_printf_i+0x168>
 8009472:	2301      	movs	r3, #1
 8009474:	4632      	mov	r2, r6
 8009476:	4649      	mov	r1, r9
 8009478:	4640      	mov	r0, r8
 800947a:	47d0      	blx	sl
 800947c:	3001      	adds	r0, #1
 800947e:	d09b      	beq.n	80093b8 <_printf_i+0x164>
 8009480:	3501      	adds	r5, #1
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	9903      	ldr	r1, [sp, #12]
 8009486:	1a5b      	subs	r3, r3, r1
 8009488:	42ab      	cmp	r3, r5
 800948a:	dcf2      	bgt.n	8009472 <_printf_i+0x21e>
 800948c:	e7eb      	b.n	8009466 <_printf_i+0x212>
 800948e:	2500      	movs	r5, #0
 8009490:	f104 0619 	add.w	r6, r4, #25
 8009494:	e7f5      	b.n	8009482 <_printf_i+0x22e>
 8009496:	bf00      	nop
 8009498:	08009cf5 	.word	0x08009cf5
 800949c:	08009d06 	.word	0x08009d06

080094a0 <_sbrk_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d06      	ldr	r5, [pc, #24]	; (80094bc <_sbrk_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7fa f8ca 	bl	8003644 <_sbrk>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_sbrk_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_sbrk_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20003494 	.word	0x20003494

080094c0 <__sread>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	f000 f960 	bl	800978c <_read_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	bfab      	itete	ge
 80094d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094d2:	89a3      	ldrhlt	r3, [r4, #12]
 80094d4:	181b      	addge	r3, r3, r0
 80094d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094da:	bfac      	ite	ge
 80094dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80094de:	81a3      	strhlt	r3, [r4, #12]
 80094e0:	bd10      	pop	{r4, pc}

080094e2 <__swrite>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	05db      	lsls	r3, r3, #23
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d505      	bpl.n	8009500 <__swrite+0x1e>
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	2302      	movs	r3, #2
 80094fa:	2200      	movs	r2, #0
 80094fc:	f000 f928 	bl	8009750 <_lseek_r>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b869 	b.w	80095ec <_write_r>

0800951a <__sseek>:
 800951a:	b510      	push	{r4, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 f915 	bl	8009750 <_lseek_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	bf15      	itete	ne
 800952c:	6560      	strne	r0, [r4, #84]	; 0x54
 800952e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strheq	r3, [r4, #12]
 8009538:	bf18      	it	ne
 800953a:	81a3      	strhne	r3, [r4, #12]
 800953c:	bd10      	pop	{r4, pc}

0800953e <__sclose>:
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 b8d3 	b.w	80096ec <_close_r>
	...

08009548 <__swbuf_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	460e      	mov	r6, r1
 800954c:	4614      	mov	r4, r2
 800954e:	4605      	mov	r5, r0
 8009550:	b118      	cbz	r0, 800955a <__swbuf_r+0x12>
 8009552:	6983      	ldr	r3, [r0, #24]
 8009554:	b90b      	cbnz	r3, 800955a <__swbuf_r+0x12>
 8009556:	f7ff fac7 	bl	8008ae8 <__sinit>
 800955a:	4b21      	ldr	r3, [pc, #132]	; (80095e0 <__swbuf_r+0x98>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d12b      	bne.n	80095b8 <__swbuf_r+0x70>
 8009560:	686c      	ldr	r4, [r5, #4]
 8009562:	69a3      	ldr	r3, [r4, #24]
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	071a      	lsls	r2, r3, #28
 800956a:	d52f      	bpl.n	80095cc <__swbuf_r+0x84>
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	b36b      	cbz	r3, 80095cc <__swbuf_r+0x84>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	1ac0      	subs	r0, r0, r3
 8009576:	6963      	ldr	r3, [r4, #20]
 8009578:	b2f6      	uxtb	r6, r6
 800957a:	4283      	cmp	r3, r0
 800957c:	4637      	mov	r7, r6
 800957e:	dc04      	bgt.n	800958a <__swbuf_r+0x42>
 8009580:	4621      	mov	r1, r4
 8009582:	4628      	mov	r0, r5
 8009584:	f7ff fa1c 	bl	80089c0 <_fflush_r>
 8009588:	bb30      	cbnz	r0, 80095d8 <__swbuf_r+0x90>
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	3b01      	subs	r3, #1
 800958e:	60a3      	str	r3, [r4, #8]
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	6022      	str	r2, [r4, #0]
 8009596:	701e      	strb	r6, [r3, #0]
 8009598:	6963      	ldr	r3, [r4, #20]
 800959a:	3001      	adds	r0, #1
 800959c:	4283      	cmp	r3, r0
 800959e:	d004      	beq.n	80095aa <__swbuf_r+0x62>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	07db      	lsls	r3, r3, #31
 80095a4:	d506      	bpl.n	80095b4 <__swbuf_r+0x6c>
 80095a6:	2e0a      	cmp	r6, #10
 80095a8:	d104      	bne.n	80095b4 <__swbuf_r+0x6c>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7ff fa07 	bl	80089c0 <_fflush_r>
 80095b2:	b988      	cbnz	r0, 80095d8 <__swbuf_r+0x90>
 80095b4:	4638      	mov	r0, r7
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <__swbuf_r+0x9c>)
 80095ba:	429c      	cmp	r4, r3
 80095bc:	d101      	bne.n	80095c2 <__swbuf_r+0x7a>
 80095be:	68ac      	ldr	r4, [r5, #8]
 80095c0:	e7cf      	b.n	8009562 <__swbuf_r+0x1a>
 80095c2:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <__swbuf_r+0xa0>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	bf08      	it	eq
 80095c8:	68ec      	ldreq	r4, [r5, #12]
 80095ca:	e7ca      	b.n	8009562 <__swbuf_r+0x1a>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 f81e 	bl	8009610 <__swsetup_r>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d0cb      	beq.n	8009570 <__swbuf_r+0x28>
 80095d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095dc:	e7ea      	b.n	80095b4 <__swbuf_r+0x6c>
 80095de:	bf00      	nop
 80095e0:	08009ca4 	.word	0x08009ca4
 80095e4:	08009cc4 	.word	0x08009cc4
 80095e8:	08009c84 	.word	0x08009c84

080095ec <_write_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d07      	ldr	r5, [pc, #28]	; (800960c <_write_r+0x20>)
 80095f0:	4604      	mov	r4, r0
 80095f2:	4608      	mov	r0, r1
 80095f4:	4611      	mov	r1, r2
 80095f6:	2200      	movs	r2, #0
 80095f8:	602a      	str	r2, [r5, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f7f9 fd06 	bl	800300c <_write>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_write_r+0x1e>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_write_r+0x1e>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	20003494 	.word	0x20003494

08009610 <__swsetup_r>:
 8009610:	4b32      	ldr	r3, [pc, #200]	; (80096dc <__swsetup_r+0xcc>)
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	681d      	ldr	r5, [r3, #0]
 8009616:	4606      	mov	r6, r0
 8009618:	460c      	mov	r4, r1
 800961a:	b125      	cbz	r5, 8009626 <__swsetup_r+0x16>
 800961c:	69ab      	ldr	r3, [r5, #24]
 800961e:	b913      	cbnz	r3, 8009626 <__swsetup_r+0x16>
 8009620:	4628      	mov	r0, r5
 8009622:	f7ff fa61 	bl	8008ae8 <__sinit>
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <__swsetup_r+0xd0>)
 8009628:	429c      	cmp	r4, r3
 800962a:	d10f      	bne.n	800964c <__swsetup_r+0x3c>
 800962c:	686c      	ldr	r4, [r5, #4]
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009634:	0719      	lsls	r1, r3, #28
 8009636:	d42c      	bmi.n	8009692 <__swsetup_r+0x82>
 8009638:	06dd      	lsls	r5, r3, #27
 800963a:	d411      	bmi.n	8009660 <__swsetup_r+0x50>
 800963c:	2309      	movs	r3, #9
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800964a:	e03e      	b.n	80096ca <__swsetup_r+0xba>
 800964c:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <__swsetup_r+0xd4>)
 800964e:	429c      	cmp	r4, r3
 8009650:	d101      	bne.n	8009656 <__swsetup_r+0x46>
 8009652:	68ac      	ldr	r4, [r5, #8]
 8009654:	e7eb      	b.n	800962e <__swsetup_r+0x1e>
 8009656:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <__swsetup_r+0xd8>)
 8009658:	429c      	cmp	r4, r3
 800965a:	bf08      	it	eq
 800965c:	68ec      	ldreq	r4, [r5, #12]
 800965e:	e7e6      	b.n	800962e <__swsetup_r+0x1e>
 8009660:	0758      	lsls	r0, r3, #29
 8009662:	d512      	bpl.n	800968a <__swsetup_r+0x7a>
 8009664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009666:	b141      	cbz	r1, 800967a <__swsetup_r+0x6a>
 8009668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800966c:	4299      	cmp	r1, r3
 800966e:	d002      	beq.n	8009676 <__swsetup_r+0x66>
 8009670:	4630      	mov	r0, r6
 8009672:	f7ff fb47 	bl	8008d04 <_free_r>
 8009676:	2300      	movs	r3, #0
 8009678:	6363      	str	r3, [r4, #52]	; 0x34
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	2300      	movs	r3, #0
 8009684:	6063      	str	r3, [r4, #4]
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f043 0308 	orr.w	r3, r3, #8
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	b94b      	cbnz	r3, 80096aa <__swsetup_r+0x9a>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800969c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096a0:	d003      	beq.n	80096aa <__swsetup_r+0x9a>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff fae5 	bl	8008c74 <__smakebuf_r>
 80096aa:	89a0      	ldrh	r0, [r4, #12]
 80096ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b0:	f010 0301 	ands.w	r3, r0, #1
 80096b4:	d00a      	beq.n	80096cc <__swsetup_r+0xbc>
 80096b6:	2300      	movs	r3, #0
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	6963      	ldr	r3, [r4, #20]
 80096bc:	425b      	negs	r3, r3
 80096be:	61a3      	str	r3, [r4, #24]
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	b943      	cbnz	r3, 80096d6 <__swsetup_r+0xc6>
 80096c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096c8:	d1ba      	bne.n	8009640 <__swsetup_r+0x30>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	0781      	lsls	r1, r0, #30
 80096ce:	bf58      	it	pl
 80096d0:	6963      	ldrpl	r3, [r4, #20]
 80096d2:	60a3      	str	r3, [r4, #8]
 80096d4:	e7f4      	b.n	80096c0 <__swsetup_r+0xb0>
 80096d6:	2000      	movs	r0, #0
 80096d8:	e7f7      	b.n	80096ca <__swsetup_r+0xba>
 80096da:	bf00      	nop
 80096dc:	20000010 	.word	0x20000010
 80096e0:	08009ca4 	.word	0x08009ca4
 80096e4:	08009cc4 	.word	0x08009cc4
 80096e8:	08009c84 	.word	0x08009c84

080096ec <_close_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	; (8009708 <_close_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f9 fcb4 	bl	8003064 <_close>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_close_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_close_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	20003494 	.word	0x20003494

0800970c <_fstat_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d07      	ldr	r5, [pc, #28]	; (800972c <_fstat_r+0x20>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f7f9 fcf3 	bl	8003104 <_fstat>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d102      	bne.n	8009728 <_fstat_r+0x1c>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	b103      	cbz	r3, 8009728 <_fstat_r+0x1c>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	bf00      	nop
 800972c:	20003494 	.word	0x20003494

08009730 <_isatty_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	; (800974c <_isatty_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f9 fc50 	bl	8002fe0 <_isatty>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_isatty_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_isatty_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	20003494 	.word	0x20003494

08009750 <_lseek_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_lseek_r+0x20>)
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7f9 fc97 	bl	8003092 <_lseek>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_lseek_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_lseek_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20003494 	.word	0x20003494

08009774 <__malloc_lock>:
 8009774:	4801      	ldr	r0, [pc, #4]	; (800977c <__malloc_lock+0x8>)
 8009776:	f7ff ba55 	b.w	8008c24 <__retarget_lock_acquire_recursive>
 800977a:	bf00      	nop
 800977c:	20003488 	.word	0x20003488

08009780 <__malloc_unlock>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__malloc_unlock+0x8>)
 8009782:	f7ff ba50 	b.w	8008c26 <__retarget_lock_release_recursive>
 8009786:	bf00      	nop
 8009788:	20003488 	.word	0x20003488

0800978c <_read_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d07      	ldr	r5, [pc, #28]	; (80097ac <_read_r+0x20>)
 8009790:	4604      	mov	r4, r0
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	2200      	movs	r2, #0
 8009798:	602a      	str	r2, [r5, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f7f9 fc8a 	bl	80030b4 <_read>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_read_r+0x1e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_read_r+0x1e>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20003494 	.word	0x20003494

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
